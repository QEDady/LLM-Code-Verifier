# -*- coding: utf-8 -*-
"""ChatGPT API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iqdPX2wnsbAfBCHeoS-_5SuFMUQV9cjv
"""

#!pip install --upgrade openai

import requests
import json
import ast
import pprint

RETRIALS = 5
URL = "https://api.openai.com/v1/chat/completions"
APIKEY = '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'

def parse_response(choice):
    code = choice['message']['content'].replace('`', "")
    if code[:6] == "python":
      code = code.replace("python", "", 1)
    elif code[:6] == "Python":
      code = code.replace("Python", "", 1)
    code = code.replace("markdown", "")
    return code

def remove_code_comments(code):
    class CommentRemover(ast.NodeTransformer):
        def visit(self, node):
            if isinstance(node, ast.FunctionDef):
                # Remove comments within function definitions
                node.body = [self.visit(stmt) for stmt in node.body if not self.is_comment(stmt)]
            elif isinstance(node, ast.ClassDef):
                # Remove comments within class definitions
                node.body = [self.visit(stmt) for stmt in node.body if not self.is_comment(stmt)]
            elif self.is_comment(node):
                # Remove comments in expressions
                return None
            return ast.NodeTransformer.generic_visit(self, node)

        def is_comment(self, node):
            if isinstance(node, ast.Expr) and isinstance(node.value, ast.Constant) and isinstance(node.value.value, str):
                return True
            return False

    try:
        tree = ast.parse(code)
        remover = CommentRemover()
        cleaned_tree = remover.visit(tree)
        return ast.unparse(cleaned_tree)
    except SyntaxError:
        # If there's a syntax error in the code, just return it as is
        return code


# n: number of samples to generate other than the refrence response
# The function returns an array of n+1 codes where the first the refrence code and the others are the candidates.
def generate_codes(model="gpt-4-turbo-preview", n=5, t_refrence=0, t_samples=1, prompt=None):
    if prompt is None:
        raise ValueError("prompt is not specified")
    else:
        prompt = "Write a Python function in markdown that does the following:\n" + prompt + \
            ". \nReturn the code of the function only without any other text." + \
            "\nAlso, include all the needed imports."

    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {APIKEY}"
    }

    # refrence request
    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": "You are a programming assistant, skilled in writing complex programming concepts with creative syntax."},
            {"role": "user", "content": prompt}],
        "temperature": t_refrence,
        "top_p": 1.0,
        "n": 1,
        "stream": False,
        "presence_penalty": 0,
        "frequency_penalty": 0,
    }

    generated_codes = []
    for trial in range(RETRIALS):
        refrence_response = requests.post(
            URL, headers=headers, json=payload, stream=False, timeout=50).content.strip().decode("utf-8")
        response_dict = json.loads(refrence_response)
        if 'choices' in response_dict:
            break

    for choice in response_dict['choices']:
        generated_codes.append(parse_response(choice))

    # sampled responses
    payload["temperature"] = t_samples
    payload["n"] = n
    for trial in range(RETRIALS):
        samples_response = requests.post(
            URL, headers=headers, json=payload, stream=False, timeout=50).content.strip().decode("utf-8")
        response_dict = json.loads(samples_response)
        if 'choices' in response_dict:
            break
        
    # print(response_dict)
    for choice in response_dict['choices']:
        generated_codes.append(parse_response(choice))

    return generated_codes


# generate a comment that states the functionality of the given code
def generate_comment(model="gpt-4-turbo-preview", code=None):
    #TODO(amer): remove any comments from code
    prompt = ""
    if code is None:
        raise ValueError("code is not specified")
    else:
        code = remove_code_comments(code)
        prompt = "State the functionality of the following python code without going into implementation details:\n```\n" + code + "```"
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {APIKEY}"
    }

       # refrence request
    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": "You are a programming assistant, skilled in explaining the code functionality."},
            {"role": "user", "content": prompt}],
        "stream": False,
        "presence_penalty": 0,
        "frequency_penalty": 0,
    }

    for trial in range(RETRIALS):
        response = requests.post(
            URL, headers=headers, json=payload, stream=False, timeout=50).content.strip().decode("utf-8")
        response_dict = json.loads(response)
        if 'choices' in response_dict:
            break
    response = "None"
    for choice in response_dict['choices']:
        response = choice['message']['content']
        break

    return response

# if __name__=="__main__":
#     code = '''
# import math

# def rounded_avg(n, m):
#     """You are given two positive integers n and m, and your task is to compute the
#     average of the integers from n through m (including n and m).
#     Round the answer to the nearest integer and convert that to binary.
#     If n is greater than m, return -1.
#     Example:
#     rounded_avg(1, 5) => "0b11"
#     rounded_avg(7, 5) => -1
#     rounded_avg(10, 20) => "0b1111"
#     rounded_avg(20, 33) => "0b11010"
#     """
#     if n > m:
#         return -1
#     avg = math.ceil((n + m) / 2)
#     return bin(avg)

# '''
# print(remove_code_comments(code))
# print("\n\n")
# print(generate_comment(model='gpt-3.5-turbo', code = code))
#   prompt = " Write a Python function in markdown that takes a sequence of numbers and determines whether all the numbers are different from each other. Return the code of the function only without any other text."
#   print(generate_codes(prompt=prompt))

# if __name__=="__main__":
#     code = '''
# import re

# def solve(txt):
#     return bool(re.search(r'\b[a-zA-Z]$', txt))
# '''
#     print(generate_comment(model="gpt-4-turbo-preview", code=code))
