# -*- coding: utf-8 -*-
"""ChatGPT API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iqdPX2wnsbAfBCHeoS-_5SuFMUQV9cjv
"""

#!pip install --upgrade openai

import time
import requests
import json
import ast
import pprint
from openai import AzureOpenAI


RETRIALS = 20
# URL = "https://api.openai.com/v1/chat/completions"
# APIKEY = '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'

def parse_response(choice):
    code = choice['message']['content'].replace('`', "").strip()
    code = code.replace("markdown\n", "")
    if code.startswith("python\n"):
      code = code.replace("python\n", "", 1)
    elif code.startswith("Python\n"):
      code = code.replace("Python\n", "", 1)

    return code

def remove_code_comments(code):
    class CommentRemover(ast.NodeTransformer):
        def visit(self, node):
            if isinstance(node, ast.FunctionDef):
                # Remove comments within function definitions
                node.body = [self.visit(stmt) for stmt in node.body if not self.is_comment(stmt)]
            elif isinstance(node, ast.ClassDef):
                # Remove comments within class definitions
                node.body = [self.visit(stmt) for stmt in node.body if not self.is_comment(stmt)]
            elif self.is_comment(node):
                # Remove comments in expressions
                return None
            return ast.NodeTransformer.generic_visit(self, node)

        def is_comment(self, node):
            if isinstance(node, ast.Expr) and isinstance(node.value, ast.Constant) and isinstance(node.value.value, str):
                return True
            return False

    try:
        tree = ast.parse(code)
        remover = CommentRemover()
        cleaned_tree = remover.visit(tree)
        return ast.unparse(cleaned_tree)
    except SyntaxError:
        # If there's a syntax error in the code, just return it as is
        return code

# Renmae all the Function inside a piece of code to 
# func, func1, func2, func3, etc.
def rename_code_functions(code):
    class FunctionsRenamer(ast.NodeTransformer):
        def visit(self, node):
            if isinstance(node, ast.FunctionDef):
                # Rename
                new_identieier = 'func'
                if self.function_id != 0:
                    new_identieier = new_identieier + str(self.function_id)
                node.name = new_identieier
                self.function_id = self.function_id + 1
            return ast.NodeTransformer.generic_visit(self, node)
        
        def __init__(self) -> None:
            super().__init__()
            self.function_id = 0
        

    try:
        tree = ast.parse(code)
        reanmer = FunctionsRenamer()
        renamed_tree = reanmer.visit(tree)
        return ast.unparse(renamed_tree)
    except SyntaxError:
        return code
# n: number of samples to generate other than the refrence response
# The function returns an array of n+1 codes where the first the refrence code and the others are the candidates.
def generate_codes(model="gpt-4-turbo-preview", n=5, t_refrence=0, t_samples=1, prompt=None):

    client = AzureOpenAI(
        azure_endpoint="https://team5-chatgpt-4-api.openai.azure.com/",
        api_version = "2023-05-15",  # Use the latest available version
        api_key = "9423fcf02a494b5cbe440c6971903ba7",
    )
    
    if prompt is None:
        raise ValueError("prompt is not specified")
    else:
        prompt = "Write a Python function in markdown that does the following:\n" + prompt + \
            ". \nReturn the code of the function only without any other text." + \
            "\nAlso, include all the needed imports."

    generated_codes = []
    for trial in range(RETRIALS):
        reference_response = client.chat.completions.create(
            model="gpt4-api",  # The name you used when deploying the model
            n=1,
            messages=[
                {"role": "system", "content": "You are a programming assistant, skilled in writing complex programming concepts with creative syntax."},
                {"role": "user", "content": prompt},
                ])
        response_dict = json.loads(reference_response.to_json())
        if response_dict:
            break

    for choice in response_dict['choices']:
        generated_codes.append(parse_response(choice))

    for trial in range(RETRIALS):
        samples_response = client.chat.completions.create(
            model="gpt4-api",  # The name you used when deploying the model
            n=5,
            messages=[
                {"role": "system", "content": "You are a programming assistant, skilled in writing complex programming concepts with creative syntax."},
                {"role": "user", "content": prompt}])
        response_dict = json.loads(samples_response.to_json())
        if response_dict:
            break
        
    for choice in response_dict['choices']:
        generated_codes.append(parse_response(choice))

    return generated_codes

# generate a comment that states the functionality of the given code
# The comments inside the given code are always removed in order not to bias gpt answer.
#
# if renmae_functions is set, the name of the functions get changed as well to func, func1, func2, etc.
# as sometimes the name of the functions give wrong hints to gpt.
# def generate_comment(model="gpt-4-turbo-preview", code=None, rename_functions = False, use_detailed_prompt = False):
#     if use_detailed_prompt and model != "gpt-4-turbo-preview":
#         raise ValueError("detailed prompt only works well with gpt-4-turbo-preview model")
#     prompt = ""

#     if code is None:
#         raise ValueError("code is not specified")
#     elif not use_detailed_prompt:
#         code = remove_code_comments(code)
#     if rename_functions and not use_detailed_prompt:
#         code = rename_code_functions(code)

#     prompt = "State the functionality of the following python code in no more than 3 sentences without going into implementation details:\n```\n" + code + "```"

#     detailed_prompt = \
#     "[System]: 1. You are a programming assistant, skilled in explaining python code functionality.\n" + \
#     "2. You are to write a SHORT description of the functionality of the given code.\n" + \
#     "3. The code may contain some semantic cues like the function name and code comments describing the intended functionality but these semantic cues do NOT necissirily represent the actual functionality of the code. So, deemphasize these comments and semantic cues while generating the descripion.\n" + \
#     "4. The description should be concise and to the point and consists of at most 3 sentences.\n" + \
#     "5. Do NOT include any code implementation details in the description. Instead, focus on the descriping the implemented function.\n" + \
#     "[USER]: The code is \n```\n" + code + "```\n [END OF PROMPT]"
#     headers = {
#         "Content-Type": "application/json",
#         "Authorization": f"Bearer {APIKEY}"
#     }

#     if use_detailed_prompt:
#         prompt = detailed_prompt
#     # refrence request
#     payload = {
#         "model": model,
#         "messages": [
#             {"role": "system", "content": "You are a programming assistant, skilled in explaining the code functionality."},
#             {"role": "user", "content": prompt}],
#         "stream": False,
#         "presence_penalty": 0,
#         "frequency_penalty": 0,
#     }

#     for trial in range(RETRIALS):
#         response = requests.post(
#             URL, headers=headers, json=payload, stream=False, timeout=100).content.strip().decode("utf-8")
#         response_dict = json.loads(response)
#         if 'choices' in response_dict:
#             break
#     response = "None"
#     for choice in response_dict['choices']:
#         response = choice['message']['content']
#         break

#     return response

# if __name__=="__main__":
#     code = '''
# from typing import List, Optional
# def longest(strings: List[str]) -> Optional[str]:
#     """ Out of list of strings, return the longest one. Return the first one in case of multiple
# 	strings of the same length. Return None in case the input list is empty.
# 	>>> longest([])

# 	>>> longest(['a', 'b', 'c'])
# 	'a'
# 	>>> longest(['a', 'bb', 'ccc'])
# 	'ccc'
# 	"""
#     if not strings:
#         return None
#     longest_str = max(strings, key=len)
#     return min(filter(lambda x: len(x) == len(longest_str), strings))

# '''
#     print(generate_comment(model="gpt-4-turbo-preview", code=code, rename_functions = True))
    #print(generate_comment(model="gpt-4-turbo-preview", code=code, use_detailed_prompt = True))
#     print("\n\n")
#     print(generate_comment(model='gpt-3.5-turbo', code = code))
#     prompt = " Write a Python function in markdown that takes a sequence of numbers and determines whether all the numbers are different from each other. Return the code of the function only without any other text."
#     print(generate_codes(prompt=prompt))

# if __name__=="__main__":
#     code = '''
# import re

# def solve(txt):
#     return bool(re.search(r'\b[a-zA-Z]$', txt))
# '''
#     print(generate_comment(model="gpt-4-turbo-preview", code=code))
