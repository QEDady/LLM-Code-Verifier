"task_id","prompt","code_0","code_1","code_2","code_3","code_4","code_5","pass_rate_0","pass_rate_1","pass_rate_2","pass_rate_3","pass_rate_4","pass_rate_5","err_0","err_1","err_2","err_3","err_4","err_5"
"HumanEval/0","from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if abs(numbers[i]-numbers[j]) < threshold:
                return True
    return False
  ","
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
  ","
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
                
    return False
","
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
","
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    
    return False
","
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/1","from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    cur_group = ''
    count = 0
    for char in paren_string:
        if char == '(':
            count += 1
        elif char == ')':
            count -= 1
        cur_group += char
        if count == 0:
            result.append(cur_group.replace(' ', ''))
            cur_group = ''
    return result
","
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    res = []
    current_group = """"
    open_count = 0
    
    for char in paren_string:
        if char == '(':
            open_count += 1
            current_group += char
        elif char == ')':
            open_count -= 1
            current_group += char
            if open_count == 0:
                res.append(current_group)
                current_group = """"
    
    return res
","
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))'
    ['()', '(())', '(()())']
    """"""

    result = []
    temp = ''
    opened = 0

    for char in paren_string:
        if char == '(':
            if opened > 0:
                temp += char
            opened += 1
        elif char == ')':
            opened -= 1
            if opened > 0:
                temp += char
            if opened == 0:
                result.append(temp + ')')
                temp = ''
    return result
","
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    stack = []
    
    for char in paren_string:
        if char == '(':
            if stack:
                result.append(''.join(stack))
                stack = []
        stack.append(char)
        
    if stack:
        result.append(''.join(stack))
    
    return result
","
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    groups = []
    group = """"
    stack = 0
    
    for char in paren_string:
        if char == '(':
            stack += 1
        if stack > 0:
            group += char
        if char == ')':
            stack -= 1
            if stack == 0:
                groups.append(group)
                group = """"
    
    return groups
","
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    groups = []
    temp_group = ''
    open_braces = 0

    for char in paren_string:
        if char == '(':
            open_braces += 1
        elif char == ')':
            open_braces -= 1
        
        temp_group += char
        
        if open_braces == 0:
            groups.append(temp_group.replace(' ', ''))
            temp_group = ''
    
    return groups
","25.0","100.0","0.0","0.0","75.0","25.0","","","","","",""
"HumanEval/2","

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""
","
from math import floor

def truncate_number(number: float) -> float:
    return number - floor(number)
","
from math import floor

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""
    return number - floor(number)
","
from math import floor

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    """"""
    return number - floor(number)
","
from math import trunc

def truncate_number(number: float) -> float:
    return number - trunc(number)

","
from math import floor

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""
    return number - floor(number)
","
from math import floor

def truncate_number(number: float) -> float:
    return number - floor(number)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/3","from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    """"""
    You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account falls below zero and
    at that point, the function should return True. Otherwise, it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    total = 0
    for operation in operations:
        total += operation
        if total < 0:
            return True
    return False
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    """"""
    You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of the account falls below zero, and
    at that point the function should return True. Otherwise, it should return False.
    
    >>> below_zero([1, 2, 3])
    False
    
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account falls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    total_balance = 0
    for op in operations:
        total_balance += op
        if total_balance < 0:
            return True
    return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/4","from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    total_sum = sum(numbers)
    mean = total_sum / len(numbers)

    absolute_deviations = [abs(num - mean) for num in numbers]
    return sum(absolute_deviations) / len(numbers)
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    mad = sum(abs(x - mean) for x in numbers) / len(numbers)
    return mad
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
    mean_value = sum(numbers) / len(numbers)
    abs_diff = sum(abs(x - mean_value) for x in numbers) / len(numbers)
    return abs_diff
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    mad = sum(abs(x - mean) for x in numbers) / len(numbers)
    return mad
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/5","from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    interleaved = [n for sublist in [[num, delimeter] for num in numbers] for n in sublist]
    return interleaved[:-1] if interleaved else []
","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    interspersed_list = []
    for i in range(len(numbers)):
        interspersed_list.append(numbers[i])
        if i < len(numbers) - 1:
            interspersed_list.append(delimeter)
    return interspersed_list

","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    interspersed_list = []
    for num in numbers:
        interspersed_list.append(num)
        interspersed_list.append(delimeter)
    if interspersed_list:
        interspersed_list.pop()
    return interspersed_list
  ","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    result = []
    for i in range(len(numbers)):
        if i != 0:
            result.append(delimeter)
        result.append(numbers[i])
    return result
","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    result = []
    for num in numbers:
        result.extend([num, delimeter])
    if result:
        result.pop()  # remove the last delimeter
    return result
","100.0","100.0","100.0","100.0","0.0","100.0","","","","","",""
"HumanEval/6","from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    def find_deepest_nesting(paren_group: str) -> int:
        max_nesting = 0
        current_nesting = 0
        for char in paren_group:
            if char == '(':
                current_nesting += 1
                max_nesting = max(max_nesting, current_nesting)
            elif char == ')':
                current_nesting -= 1
        return max_nesting

    nested_parens = [find_deepest_nesting(group) for group in paren_string.split()]
    return nested_parens
","
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    stack = []
    max_depth = 0
    current_depth = 0

    for char in paren_string:
        if char == '(':
            current_depth += 1
            max_depth = max(max_depth, current_depth)
        elif char == ')':
            current_depth -= 1
        
        if char == ' ':
            stack.append(max_depth)
            max_depth = 0

    stack.append(max_depth)

    return stack
","
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    depths = []
    max_depth = 0
    current_depth = 0

    for char in paren_string:
        if char == '(':
            current_depth += 1
            max_depth = max(max_depth, current_depth)
        elif char == ')':
            current_depth -= 1

        if char == ' ':
            depths.append(max_depth)
            max_depth = 0
            current_depth = 0

    depths.append(max_depth)  

    return depths
","
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    depths = []
    curr_depth = max_depth = 0

    for char in paren_string:
        if char == '(':
            curr_depth += 1
            max_depth = max(max_depth, curr_depth)
        elif char == ')':
            curr_depth -= 1

    return [max_depth]

parse_nested_parens('(()()) ((())) () ((())()())')
","
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    depths = []
    current_depth = 0
    for char in paren_string:
        if char == '(':
            current_depth += 1
            depths.append(current_depth)
        elif char == ')':
            current_depth -= 1
    return [max(depths) if depths else 0 for depths in paren_string.split()]
","
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    depths = []
    current_depth = 0

    for char in paren_string:
        if char == '(':
            current_depth += 1
            depths.append(current_depth)
        elif char == ')':
            current_depth -= 1
            depths.append(current_depth)

    max_depth = max(depths)
    result = [depth for depth in depths if depth == max_depth]

    return result
","100.0","100.0","100.0","33.33333333333333","0.0","33.33333333333333","","","","","",""
"HumanEval/7","from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
    return [s for s in strings if substring in s]
","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
    return [s for s in strings if substring in s]
","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    filtered_strings = [s for s in strings if substring in s]
    return filtered_strings
","
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]
","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
    return [s for s in strings if substring in s]
","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/8","from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_result = sum(numbers) if numbers else 0
    product_result = 1
    for num in numbers:
        product_result *= num
    return sum_result, product_result
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_val = sum(numbers) if numbers else 0
    product_val = 1
    for num in numbers:
        product_val *= num
    return sum_val, product_val
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    total_sum = sum(numbers)
    total_product = 1 if not numbers else 1
    for num in numbers:
        total_product *= num
    return total_sum, total_product
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product 
    of all the integers in a list. Empty sum should be equal to 0 and empty product 
    should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
    if not numbers:
        return 0, 1
    total_sum = sum(numbers)
    total_product = 1
    for num in numbers:
        total_product *= num
    return total_sum, total_product
  ","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    total_sum = sum(numbers) if numbers else 0
    total_product = 1
    for num in numbers:
        total_product *= num
    return total_sum, total_product
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_num = sum(numbers) if numbers else 0
    product_num = 1
    for num in numbers:
        product_num *= num
    return sum_num, product_num
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/9","from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","
from typing import List


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    
    if not numbers:
        return []
    
    max_list = [numbers[0]]
    for i in range(1, len(numbers)):
        max_list.append(max(max_list[i - 1], numbers[i]))
    
    return max_list
  ","
from typing import List


def rolling_max(numbers: List[int]) -> List[int]:
    max_numbers = []
    max_num = None
    for num in numbers:
        if max_num is None or num > max_num:
            max_num = num
        max_numbers.append(max_num)
    return max_numbers
","
from typing import List


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    if not numbers:
        return []

    max_num = numbers[0]
    result = [max_num]

    for num in numbers[1:]:
        if num > max_num:
            max_num = num
        result.append(max_num)

    return result
","
from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    """""" Generate a list of rolling maximum element found until a given moment in the sequence. """"""
    if not numbers:
        return []
    max_list = [numbers[0]]
    for i in range(1, len(numbers)):
        max_list.append(max(max_list[-1], numbers[i]))
    return max_list
","
from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    result = []
    maximum = float('-inf')
    for num in numbers:
        maximum = max(maximum, num)
        result.append(maximum)
    return result
","
from typing import List, Tuple

def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    if not numbers:
        return []
    max_numbers = [numbers[0]]
    for i in range(1, len(numbers)):
        max_numbers.append(max(numbers[:i+1]))
    return max_numbers
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/10","

def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","
def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","
def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    size = len(string)
    if size <= 1 or is_palindrome(string):
        return string

    for i in range(size - 1, 0, -1):
        if is_palindrome(string[i:]):
            return string + string[:i][::-1]

    return string + string[:-1][::-1]
","
def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","
def is_palindrome(string: str) -> bool:
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    for i in range(len(string)):
        if string[i:] == string[i:][::-1]:
            return string + string[:i][::-1]
    return string
","
def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","
from typing import List

def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
    def longest_palindrome_suffix(s: str) -> str:
        for i in range(len(s), 0, -1):
            if is_palindrome(s[:i]):
                return s[i:]

    suffix = longest_palindrome_suffix(string)
    return string + string[:len(string) - len(suffix)][::-1]
  ","0.0","100.0","0.0","100.0","0.0","0.0","","","","","",""
"HumanEval/11","from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
","
from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
  ","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return ''.join(['1' if bit1 != bit2 else '0' for bit1, bit2 in zip(a, b)])
","
from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return ''.join('1' if x != y else '0' for x, y in zip(a, b))
","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])
  ","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    
    result = """"
    for char_a, char_b in zip(a, b):
        result += str(int(char_a) ^ int(char_b))
    
    return result
","
from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return ''.join('1' if x != y else '0' for x, y in zip(a, b))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/12","from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])
    
    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""

    if not strings:
        return None

    max_length = max(len(s) for s in strings)
    longest_strings = [s for s in strings if len(s) == max_length]

    return longest_strings[0]
","
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    max_length = max(len(s) for s in strings)
    return next(s for s in strings if len(s) == max_length)

","
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    longest_str = strings[0]
    for s in strings[1:]:
        if len(s) > len(longest_str):
            longest_str = s
    return longest_str
","
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
    if not strings:
        return None
    max_length = max(len(s) for s in strings)
    longest_string = next(s for s in strings if len(s) == max_length)
    return longest_string
","
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""

    if not strings:
        return None
    max_length = max(len(s) for s in strings)
    longest_str = next(s for s in strings if len(s) == max_length)
    return longest_str
","100.0","33.33333333333333","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/13","

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","
from math import gcd

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return gcd(a, b)
","
from math import gcd

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return gcd(a, b)
","
import math

def greatest_common_divisor(a: int, b: int) -> int:
    return math.gcd(a, b)
","
import math

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return math.gcd(a, b)
","
from math import gcd

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    
    return gcd(a, b)
","
from math import gcd

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return gcd(a, b)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/14","from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i] for i in range(1, len(string) + 1)]
  ","
from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i] for i in range(1, len(string) + 1)]
","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i] for i in range(1, len(string)+1)]
","
from typing import List


def all_prefixes(string: str) -> List[str]:
    return [string[:i+1] for i in range(len(string))]
","
from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i] for i in range(1, len(string) + 1)]
","0.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/15","

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","
from typing import List

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n+1)))
","
from typing import List

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n+1)))
  ","
from typing import List

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n+1)))
","
from typing import List, Union

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n+1)))
  ","
def string_sequence(n: int) -> str:
    return ' '.join(map(str, range(n+1)))
","
def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 up to n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n + 1)))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/16","

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
    return len(Counter(string.lower()))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    return len(Counter(string.lower()))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    return len(Counter(string.lower()))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
    return len(Counter(string.lower()))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
    return len(Counter(string.lower()))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    return len(Counter(string.lower()))
  ","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/17","from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","
from typing import List

def parse_music(music_string: str) -> List[int]:
    durations = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }
    
    notes = music_string.split()
    return [durations[note] for note in notes]

# Example usage
print(parse_music('o o| .| o| o| .| .| .| .| o o'))
","
from typing import List


def parse_music(music_string: str) -> List[int]:
    durations = {'o': 4, 'o|': 2, '.|': 1}
    
    elements = music_string.split()
    return [durations.get(element, 0) for element in elements]
","
from typing import List


def parse_music(music_string: str) -> List[int]:
    durations = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.split()
    return [durations[note] for note in notes]

","
from typing import List


def parse_music(music_string: str) -> List[int]:
    notes = {'o': 4, 'o|': 2, '.|': 1}
    music_list = music_string.split()
    
    return [notes[note] for note in music_list]
","
from typing import List

def parse_music(music_string: str) -> List[int]:
    durations = {'o': 4, 'o|': 2, '.|': 1}
    return [durations[note] for note in music_string.split()]
","
from typing import List

def parse_music(music_string: str) -> List[int]:
    beats_mapping = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }
    
    notes = music_string.split()
    beats = [beats_mapping[note] for note in notes]
    
    return beats
  ","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/18","

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","
def how_many_times(string: str, substring: str) -> int:
    count = start = 0
    while True:
        start = string.find(substring, start) + 1
        if start > 0:
            count += 1
        else:
            break
    return count
","
def how_many_times(string: str, substring: str) -> int:
    count = 0
    if not string or not substring:
        return 0
    for i in range(len(string)):
        if string[i:i+len(substring)] == substring:
            count += 1
    return count
","
from typing import List

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlapping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
    
    if not string or not substring:
        return 0
    
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i + len(substring)] == substring:
            count += 1
    
    return count
","
def how_many_times(string: str, substring: str) -> int:
    count = 0
    if not string or not substring:
        return count
    for i in range(len(string) - len(substring) + 1):
        if string[i:i + len(substring)] == substring:
            count += 1
    return count
","
from typing import List

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlapping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
    if not string or not substring:
        return 0
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i + len(substring)] == substring:
            count += 1
    return count
","
from typing import List

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlapping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
    if not string or not substring:
        return 0
    
    count = 0
    index = 0
    while index < len(string):
        if string[index:index + len(substring)] == substring:
            count += 1
            index += len(substring) - 1
        index += 1
    return count
","100.0","100.0","100.0","100.0","100.0","75.0","","","","","",""
"HumanEval/19","from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","
from typing import List


def sort_numbers(numbers: str) -> str:
    num_dict = {
        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,
        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9
    }
    
    num_list = numbers.split()
    num_list.sort(key=lambda x: num_dict[x])
    
    return ' '.join(num_list)
  ","
from typing import List


def sort_numbers(numbers: str) -> str:
    number_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']
    number_map = {word: idx for idx, word in enumerate(number_words)}
    
    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])
    return ' '.join(sorted_numbers)
","
from typing import List

def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}
    numbers_list = numbers.split()
    numbers_list.sort(key=lambda x: num_dict[x])
    return ' '.join(numbers_list)
","
from typing import List


def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}
    
    numbers_list = numbers.split()
    sorted_numbers = sorted(numbers_list, key=lambda x: num_dict[x])
    
    return ' '.join(sorted_numbers)
","
from typing import List

def sort_numbers(numbers: str) -> str:
    numeral_dict = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    numbers_list = numbers.split()
    numbers_list.sort(key=lambda x: numeral_dict[x])
    return ' '.join(numbers_list)
","
from typing import List

def sort_numbers(numbers: str) -> str:
    numberals_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}
    numbers_list = numbers.split()
    sorted_numbers = sorted(numbers_list, key=lambda x: numberals_dict[x])
    return ' '.join(sorted_numbers)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/20","from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    pairs = [(numbers[i], numbers[i + 1]) for i in range(len(numbers) - 1)]
    closest_pair = min(pairs, key=lambda pair: abs(pair[0] - pair[1]))
    return tuple(sorted(closest_pair))
","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    pairs = [(numbers[i], numbers[i + 1]) for i in range(len(numbers) - 1)]
    closest_pair = min(pairs, key=lambda pair: abs(pair[1] - pair[0]))
    return tuple(sorted(closest_pair))
","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
    numbers.sort()
    min_diff = float('inf')
    result = None
    for i in range(len(numbers) - 1):
        diff = abs(numbers[i] - numbers[i + 1])
        if diff < min_diff:
            min_diff = diff
            result = (numbers[i], numbers[i + 1])
    return result
  ","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
    sorted_numbers = sorted(numbers)
    min_diff = float('inf')
    result = (0, 0)
    for i in range(1, len(sorted_numbers)):
        diff = sorted_numbers[i] - sorted_numbers[i-1]
        if diff < min_diff:
            min_diff = diff
            result = (sorted_numbers[i-1], sorted_numbers[i])
    return result
  ","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    return min((a, b) for a, b in zip(numbers, numbers[1:]) if a <= b, key=lambda x: abs(x[0] - x[1]))
","
from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
    numbers.sort()
    min_diff = float(""inf"")
    closest_pair = (0.0, 0.0)
    
    for i in range(len(numbers) - 1):
        diff = abs(numbers[i] - numbers[i+1])
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i+1])
    
    return closest_pair
","40.0","40.0","100.0","100.0","0","100.0","","","","","  File ""<string>"", line 6
    return min((a, b) for a, b in zip(numbers, numbers[1:]) if a <= b, key=lambda x: abs(x[0] - x[1]))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: Generator expression must be parenthesized
",""
"HumanEval/21","from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
    min_num = min(numbers)
    max_num = max(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]
","
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    transform_factor = 1 / (max_num - min_num)
    return [(num - min_num) * transform_factor for num in numbers]
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_val = min(numbers)
    max_val = max(numbers)
    return [(num - min_val) / (max_val - min_val) for num in numbers]
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]
","
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""

    min_num = min(numbers)
    max_num = max(numbers)

    if min_num == max_num:
        return [0.5] * len(numbers)
    
    return [(num - min_num) / (max_num - min_num) for num in numbers]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/22","from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
","
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/23","

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","
from typing import List, Dict

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
","
from typing import List

def strlen(string: str) -> int:
    return len(string)
","
def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
","
from typing import List

def strlen(string: str) -> int:
    return len(string)
","
from typing import List

def strlen(string: str) -> int:
    return len(string)
","
from typing import List

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    
    return len(string)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/24","

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
","
from typing import List

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    for i in range(n // 2, 1, -1):
        if n % i == 0:
            return i
    return 1
","
import math

def largest_divisor(n: int) -> int:
    """"""
    For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    for i in range(int(math.sqrt(n)), 1, -1):
        if n % i == 0:
            return i
","
import math

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n """"""
    for i in range(int(math.sqrt(n)), 0, -1):
        if n % i == 0:
            return i
","
import math

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    for i in range(n-1, 1, -1):
        if n % i == 0:
            return i
","
def largest_divisor(n: int) -> int:
    for i in range(n-1, 1, -1):
        if n % i == 0:
            return i
    return 1
","
from typing import List

def largest_divisor(n: int) -> int:
    divisors: List[int] = [i for i in range(1, n) if n % i == 0]
    return max(divisors)

","100.0","20.0","60.0","60.0","100.0","100.0","","","","","",""
"HumanEval/25","from typing import List


def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","
from typing import List


def factorize(n: int) -> List[int]:
    factors = []
    divider = 2
    while divider <= n:
        if n % divider == 0:
            factors.append(divider)
            n //= divider
        else:
            divider += 1
    return factors
","
from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while n > 1:
        while n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        divisor += 1
    return factors
","
from typing import List


def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while n > 1:
        if n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        else:
            divisor += 1
    return factors
","
from typing import List


def factorize(n: int) -> List[int]:
    prime_factors = []
    factor = 2
    while factor * factor <= n:
        if n % factor:
            factor += 1
        else:
            n //= factor
            prime_factors.append(factor)
    if n > 1:
        prime_factors.append(n)

    return prime_factors
","
from typing import List

def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
  ","
from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while divisor <= n:
        if n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        else:
            divisor += 1
    return factors
","100.0","100.0","100.0","100.0","0.0","100.0","","","","","",""
"HumanEval/26","from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    filtered_list = []
    for num in numbers:
        if numbers.count(num) == 1:
            filtered_list.append(num)
    return filtered_list
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    return [x for x in numbers if numbers.count(x) == 1]
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    return [num for num in numbers if numbers.count(num) == 1]
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    seen = set()
    return [num for num in numbers if num not in seen and not seen.add(num)]
","
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""From a list of integers, remove all elements that occur more than once.
    Keep the order of elements the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    unique_numbers = []
    for number in numbers:
        if numbers.count(number) == 1:
            unique_numbers.append(number)
    return unique_numbers
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    unique_numbers = []
    for num in numbers:
        if numbers.count(num) == 1:
            unique_numbers.append(num)
    return unique_numbers
","100.0","100.0","100.0","66.66666666666666","100.0","100.0","","","","","",""
"HumanEval/27","

def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","
def flip_case(string: str) -> str:
    """"""
    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return string.swapcase()
","
def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    flipped_str = ''
    for char in string:
        if char.islower():
            flipped_str += char.upper()
        elif char.isupper():
            flipped_str += char.lower()
        else:
            flipped_str += char
    return flipped_str
","
def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    
    return string.swapcase()
","
from typing import List

def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])
","
def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return string.swapcase()
","
def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return string.swapcase()
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/28","from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","
from typing import List

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)
  ","
from typing import List

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    
    return ''.join(strings)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/29","from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]
  ","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]
  ","
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]
","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]
","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]
  ","
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/30","

def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
from typing import List


def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
    
    return [num for num in l if num > 0]
  ","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/31","

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","
from math import sqrt

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
","
import math

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.""""""
    if n <= 1:
        return False
    if n <= 3:
        return True
    
    if n % 2 == 0 or n % 3 == 0:
        return False
    
    for i in range(5, int(math.sqrt(n)) + 1, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return False
    
    return True
","
import math

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.""""""
    if n <= 1:
        return False
    elif n <= 3:
        return True
    elif n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
","
import math

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.""""""
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
","
import math

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.""""""
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
","
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/32","import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","
import math

def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","
import math

def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    """"""Find zero points of polynomial using coefficients in xs""""""
    if len(xs) % 2 != 0:
        return ""Input list must have an even number of coefficients.""
    max_coeff = max([abs(coeff) for coeff in xs])
    if max_coeff == 0:
        return ""All coefficients are zero.""
    n = len(xs) - 1
    return [round(root, 6) for root in {round(r, 6) for r in [(xs[j] / c)
                                                            for j in range(0, len(xs) - 1, 2)
                                                            for c in (xs[i + 1] for i in range(1, len(xs), 2))
                                                            if c != 0}]]

","
import math


def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    return -xs[1] / (2 * xs[2])
","
import math

def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
  ","
import math


def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    if len(xs) % 2 != 0:
        raise ValueError(""List xs must have an even number of coefficients."")
    n = len(xs)
    i = n - 1
    while xs[i] == 0:  # Find largest non-zero coefficient
        i -= 1
    a = xs[i]
    b = xs[i - 1]
    return -b / a
","
import math


def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    return max([round((-coeff[1] + math.sqrt(coeff[1]**2 - 4*coeff[0]*coeff[2])) / (2*coeff[0]), 2) for coeff in [[xs[i], xs[i+1], xs[i+2]] for i in range(0, len(xs)-2, 2)])
","0.0","0","0.0","0.0","100.0","0","","  File ""<string>"", line 18
    if c != 0}]]
             ^
SyntaxError: closing parenthesis '}' does not match opening parenthesis '[' on line 15
","","","","  File ""<string>"", line 10
    return max([round((-coeff[1] + math.sqrt(coeff[1]**2 - 4*coeff[0]*coeff[2])) / (2*coeff[0]), 2) for coeff in [[xs[i], xs[i+1], xs[i+2]] for i in range(0, len(xs)-2, 2)])
                                                                                                                                                                            ^
SyntaxError: closing parenthesis ')' does not match opening parenthesis '['
"
"HumanEval/33","

def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","
from typing import List

def sort_third(lst: List[int]) -> List[int]:
    """"""This function takes a list lst and returns a list sorted so that elements at indices 
    divisible by 3 are sorted while maintaining the elements at other indices unchanged.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
    return [sorted(lst[i] if i % 3 == 0 else lst[i] for i in range(len(lst)))]
  ","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    res = l.copy()
    divisible_by_three = [idx for idx, val in enumerate(l) if idx % 3 == 0]
    for idx in divisible_by_three:
        res[idx] = sorted(l[idx:idx+3])[idx % 3]
    return res
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    sorted_indices = sorted([i for i in range(len(l)) if i % 3 == 0], key=lambda x: l[x])
    sorted_values = [l[i] for i in sorted_indices]
    
    result = l.copy()
    for i, val in zip(sorted_indices, sorted_values):
        result[i] = val
    
    return result
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(len(l))]

","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    sorted_indices = sorted(i for i in range(len(l)) if i % 3 == 0)
    sorted_values = [l[i] for i in sorted_indices]
    sorted_values.sort()
    
    result = l.copy()
    for i, val in zip(sorted_indices, sorted_values):
        result[i] = val
    
    return result
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    return [v if i % 3 != 0 else sorted(l[i::3])[j//3] for j, v in enumerate(l) for i in range(3)]
","42.857142857142854","42.857142857142854","42.857142857142854","42.857142857142854","100.0","42.857142857142854","","","","","",""
"HumanEval/34","

def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","
from typing import List

def unique(l: List[int]) -> List[int]:
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List[int]) -> List[int]:
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List[int]) -> List[int]:
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List[int]) -> List[int]:
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List[int]):
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List[int]) -> List[int]:
    return sorted(list(set(l)))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/35","

def max_element(l: list):
    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/36","

def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","
from typing import List

def fizz_buzz(n: int) -> int:
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.""""""
    count = 0
    for i in range(n):
        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):
            count += 1
    return count
","
import numpy as np

def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    
    return np.sum([str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0])
  ","
from typing import List

def fizz_buzz(n: int) -> int:
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.""""""
    def has_seven(num: int) -> bool:
        return '7' in str(num)
    
    count = 0
    for i in range(1, n):
        if (i % 11 == 0 or i % 13 == 0) and has_seven(i):
            count += 1
    
    return count

","
def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""

    count = 0
    for i in range(n):
        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):
            count += 1
    return count
","
from typing import List

def fizz_buzz(n: int) -> int:
    return sum(str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0)
","
def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    return sum(1 for i in range(1, n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))
","12.5","100.0","12.5","12.5","100.0","12.5","","","","","",""
"HumanEval/37","

def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    return [l[i] if i % 2 != 0 else sorted(l[::2])[i//2] for i in range(len(l))]
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    return [l[i] if i % 2 != 0 else sorted(l[::2])[i//2] for i in range(len(l))]
","
from typing import List

def sort_even(l: List[int]):
    even_positions = [i for i in range(len(l)) if i % 2 == 0]
    values_at_even_positions = [l[i] for i in even_positions]
    sorted_values_at_even_positions = sorted(values_at_even_positions)
    sorted_l = l.copy()
    for i, val in zip(even_positions, sorted_values_at_even_positions):
        sorted_l[i] = val
    return sorted_l
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    even_indices = [l[i] for i in range(len(l)) if i % 2 == 0]
    sorted_even_indices = sorted(even_indices)
    
    result = l.copy()
    even_index = 0
    for i in range(len(l)):
        if i % 2 == 0:
            result[i] = sorted_even_indices[even_index]
            even_index += 1
    
    return result
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    even_indices = sorted([x for idx, x in enumerate(l) if idx % 2 == 0])
    sorted_list = [even_indices.pop(0) if idx % 2 == 0 else x for idx, x in enumerate(l)]
    return sorted_list
  ","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    even_items = sorted([x for x in l[::2]])
    result = [even_items.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]
    return result

","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/38","

def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","
def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","
def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","
def encode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)
  ","
def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","
def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","
def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","0.0","0.0","100.0","0.0","0.0","0.0","","","","","",""
"HumanEval/39","

def prime_fib(n: int):
    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","
from math import sqrt

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def fibonacci(n):
        a, b = 1, 1
        for _ in range(n - 2):
            a, b = b, a + b
        return b
    
    count = 0
    num = 1
    while count < n:
        num += 1
        if is_prime(num) and num == fibonacci(num):
            count += 1
            
    return num
  ","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def is_fib(num):
        if num == 0:
            return 0
        a, b = 0, 1
        while b < num:
            a, b = b, a + b
        return b == num

    count = 0
    num = 1
    while count < n:
        num += 1
        if is_fib(num) and is_prime(num):
            count += 1

    return num
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def is_fib(num):
        if num == 0:
            return False
        return math.isqrt(5*num*num + 4)**2 == 5*num*num + 4 or math.isqrt(5*num*num - 4)**2 == 5*num*num - 4

    count = 0
    num = 2
    while count < n:
        if is_fib(num) and is_prime(num):
            count += 1
        num += 1
    return num - 1

","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def is_fib(num):
        if num <= 1:
            return num
        a, b = 0, 1
        while b < num:
            a, b = b, a + b
        return b == num

    count = 0
    num = 2
    while count < n:
        if is_fib(num) and is_prime(num):
            count += 1
        num += 1
    return num - 1
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    fib_nums = [0, 1]
    while len(fib_nums) <= n:
        fib_nums.append(fib_nums[-1] + fib_nums[-2])
    
    prime_fib_nums = [num for num in fib_nums if is_prime(num)]
    
    return prime_fib_nums[n - 1] if n > 0 else None
","
from math import sqrt

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def is_fib(num):
        return sqrt(5*num*num + 4) % 1 == 0 or sqrt(5*num*num - 4) % 1 == 0

    count = 0
    i = 2
    while count < n:
        if is_fib(i) and is_prime(i):
            count += 1
        i += 1
    return i-1
","0","0","0","0","0.0","0","Timeout","Timeout","Timeout","Timeout","","Timeout"
"HumanEval/40","

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    for triplet in combinations(l, 3):
        if sum(triplet) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    for triplet in combinations(l, 3):
        if sum(triplet) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    
    for triplet in combinations(l, 3):
        if sum(triplet) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    for triple in combinations(l, 3):
        if sum(triple) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    for combo in combinations(l, 3):
        if sum(combo) == 0:
            return True
    return False

","
from itertools import combinations

def triples_sum_to_zero(l: list):
    for combo in combinations(l, 3):
        if sum(combo) == 0:
            return True
    return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/41","

def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
","
def car_race_collision(n: int):
    return n * n

from typing import List
","
def car_race_collision(n: int):
    collisions = n * (n - 1) // 2
    return collisions
","
def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
","
from typing import List

def car_race_collision(n: int) -> int:
    return n if n > 0 else 0
","
def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
    return n * n
","
from math import comb

def car_race_collision(n: int):
    return comb(n, 2)
","100.0","0.0","0.0","0.0","100.0","0.0","","","","","",""
"HumanEval/42","

def incr_list(l: list):
    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","
def incr_list(l: list):
    return [x + 1 for x in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [x + 1 for x in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [x + 1 for x in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [num + 1 for num in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [num + 1 for num in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [x + 1 for x in l]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/43","

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","
from itertools import combinations

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    for pair in combinations(l, 2):
        if sum(pair) == 0:
            return True
    return False
","
from itertools import combinations

def pairs_sum_to_zero(l):
    for pair in combinations(l, 2):
        if sum(pair) == 0:
            return True
    return False
","
def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False
","
from itertools import combinations

def pairs_sum_to_zero(l):
    for a, b in combinations(l, 2):
        if a + b == 0:
            return True
    return False
","
from itertools import combinations

def pairs_sum_to_zero(l):
    for x, y in combinations(l, 2):
        if x + y == 0:
            return True
    return False
","
from collections import defaultdict

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    seen = defaultdict(int)
    for num in l:
        if -num in seen:
            return True
        seen[num] += 1
    return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/44","

def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    result = ''
    while x > 0:
        remainder = x % base
        result = str(remainder) + result
        x = x // base
    return result
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    Return string representation after the conversion.
    Base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""

    def to_base_n(number, base):
        if number == 0:
            return ''
        else:
            return to_base_n(number // base, base) + str(number % base)

    return to_base_n(x, base)

","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    res = """"
    while x > 0:
        res = str(x % base) + res
        x //= base
    return res
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if x < 0 or base < 2 or base > 10:
        raise ValueError(""Input numbers should be positive and base should be between 2 and 10."")
    
    result = """"
    while x > 0:
        remainder = x % base
        result = str(remainder) + result
        x = x // base
    
    return result
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if x < 0 or base < 2 or base > 9:
        return ""Invalid input""
    
    result = """"
    while x > 0:
        remainder = x % base
        result = str(remainder) + result
        x = x // base
    return result
  ","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if x == 0:
        return '0'
    
    result = """"
    while x:
        result += str(x % base)
        x //= base
    
    return result[::-1]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/45","

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
","
from typing import Union

def triangle_area(a: Union[int, float], h: Union[int, float]) -> float:
    return 0.5 * a * h
","
import math

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
    
    return 0.5 * a * h
","
import math

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
    return 0.5 * a * h
","
def triangle_area(a, h):
    return 0.5 * a * h
","
import math

def triangle_area(a, h):
    """"""Given length of a side and height, return the area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
    return 0.5 * a * h
","
import math

def triangle_area(a, h):
    return 0.5 * a * h
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/46","

def fib4(n: int):
    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","
from typing import List

def fib4(n: int) -> int:
    if n == 0: return 0
    if n == 1: return 0
    if n == 2: return 2
    if n == 3: return 0
    fib_sequence = [0, 0, 2, 0]
    for i in range(4, n + 1):
        next_element = sum(fib_sequence)
        fib_sequence.pop(0)
        fib_sequence.append(next_element)
    return fib_sequence[-1]
","
def fib4(n: int):
    fib_numbers = [0, 0, 2, 0]
    for i in range(4, n+1):
        fib_numbers[i % 4] = fib_numbers[(i-1) % 4] + fib_numbers[(i-2) % 4] + fib_numbers[(i-3) % 4] + fib_numbers[(i-4) % 4]
    return fib_numbers[n % 4]
","
from functools import lru_cache

@lru_cache()
def fib4(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    else:
        a, b, c, d = 0, 0, 0, 2
        for i in range(4, n+1):
            a, b, c, d = b, c, d, a + b + c + d
        return d
","
from collections import deque

def fib4(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0

    queue = deque([0, 0, 2, 0])
    for i in range(4, n+1):
        current_val = sum(queue)
        queue.append(current_val)
        queue.popleft()

    return queue[-1]
","
from typing import List

def fib4(n: int) -> int:
    fib_list = [0, 0, 2, 0]
    if n <= 3:
        return fib_list[n]
    
    for i in range(4, n+1):
        fib_list[i % 4] = fib_list[(i-1) % 4] + fib_list[(i-2) % 4] + fib_list[(i-3) % 4] + fib_list[i % 4]
    
    return fib_list[n % 4]
","
from typing import List

def fib4(n: int) -> int:
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0

    fib_sequence: List[int] = [0, 0, 2, 0]
    for i in range(4, n+1):
        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])

    return fib_sequence[n]
","100.0","100.0","25.0","100.0","100.0","100.0","","","","","",""
"HumanEval/47","

def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","
from statistics import median

def median(l: list):
    return median(l)
","
from statistics import median

def median(l: list):
    return median(l)
","
from statistics import median

def median(l: list):
    return median(l)
","
import statistics

def median(l: list):
    return statistics.median(l)
","
from statistics import median as median

def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
    return median(l)
","
from statistics import median

def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
    return median(l)
","0.0","0.0","0.0","100.0","0.0","0.0","","","","","",""
"HumanEval/48","

def is_palindrome(text: str):
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","
from typing import List

def is_palindrome(text: str) -> bool:
    return text == text[::-1]
","
from typing import Union

def is_palindrome(text: str) -> bool:
    return text == text[::-1]
","
def is_palindrome(text: str) -> bool:
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
    return text == text[::-1]
","
from typing import List, Dict

def is_palindrome(text: str) -> bool:
    return text == text[::-1]
","
from typing import List

def is_palindrome(text: str) -> bool:
    return text == text[::-1]
","
from typing import List

def is_palindrome(text: str) -> bool:
    return text == text[::-1]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/49","

def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","
import sys
from typing import Tuple

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).""""""
    def mod_pow(base: int, exp: int, mod: int) -> int:
        result = 1
        while exp > 0:
            if exp % 2 == 1:
                result = (result * base) % mod
            exp //= 2
            base = (base * base) % mod
        return result
    
    return mod_pow(2, n, p)

","
import math
from typing import Tuple

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).""""""
    if p == 1:
        return 0
    n %= p - 1

    result = 1
    acc = 2
    while n > 0:
        if n & 1:
            result = (result * acc) % p
        n >>= 1
        acc = (acc * acc) % p

    return result
","
from typing import Tuple

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    def calculate_mod(base: int, exponent: int, modulus: int) -> int:
        result = 1
        base = base % modulus
        while exponent > 0:
            if exponent % 2 == 1:
                result = (result * base) % modulus
            exponent = exponent >> 1
            base = (base * base) % modulus
        return result

    return calculate_mod(2, n, p)
","
import math

def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    result = pow(2, n, p)
    return result
","
from __future__ import division
from typing import List

def modp(n: int, p: int) -> int:
    """"""
    Return 2^n modulo p (be aware of numerics).
    
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    
    result = 1
    base = 2 % p
    
    n_bin = bin(n)[2:]
    n_bin = n_bin[::-1]
    
    for bit in n_bin:
        if bit == '1':
            result = (result * base) % p
        base = (base * base) % p
    
    return result
","
from typing import Tuple

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).""""""
    return pow(2, n, p)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/50","

def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","
def encode_shift(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])

def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","
import string

def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) if ch.isalpha() else ch for ch in s.lower()])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) if ch.isalpha() else ch for ch in s.lower()])
","
def encode_shift(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"") if ch.isalpha() else ch for ch in s])

def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"") if ch.isalpha() else ch for ch in s])
","
def encode_shift(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","
def encode_shift(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])

def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","
def encode_shift(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"") if ch.isalpha() else ch for ch in s])

def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"") if ch.isalpha() else ch for ch in s])
","100.0","100.0","0","100.0","100.0","0","","","  File ""<string>"", line 3
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"") if ch.isalpha() else ch for ch in s])
                                                                                                      ^
SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
","","","  File ""<string>"", line 3
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"") if ch.isalpha() else ch for ch in s])
                                                                                                      ^
SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
"
"HumanEval/51","

def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","
def remove_vowels(text):
    return ''.join(char for char in text if char.lower() not in 'aeiou')

","
import re

def remove_vowels(text):
    return re.sub(r'[aeiouAEIOU]', '', text)
","
import re

def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
    
    return re.sub(r'[aeiouAEIOU]', '', text)
","
import re


def remove_vowels(text):
    return re.sub(r'[aeiouAEIOU]', '', text)
","
def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return ''.join([char for char in text if char not in vowels])
","
def remove_vowels(text):
    return ''.join([char for char in text if char.lower() not in {'a', 'e', 'i', 'o', 'u'}])
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/52","

def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","
def below_threshold(l: list, t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.""""""
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.""""""
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.""""""
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    return all(num < t for num in l)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/53","

def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","
from typing import Tuple

def add(x: int, y: int) -> int:
    """"""
    Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
from typing import List

def add(x: int, y: int) -> int:
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
from typing import List

def add(x: int, y: int) -> int:
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
from typing import Tuple

def add(x: int, y: int) -> int:
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/54","

def same_chars(s0: str, s1: str):
    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","
from collections import Counter

def same_chars(s0: str, s1: str) -> bool:
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)
","
def same_chars(s0: str, s1: str):
    from collections import Counter
    
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)
","57.14285714285714","57.14285714285714","57.14285714285714","57.14285714285714","57.14285714285714","57.14285714285714","","","","","",""
"HumanEval/55","

def fib(n: int):
    """"""Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","
from functools import lru_cache

@lru_cache()
def fib(n: int):
    if n in (0, 1):
        return n
    return fib(n - 1) + fib(n - 2)
","
from functools import lru_cache

@lru_cache
def fib(n: int):
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache()
def fib(n: int):
    return n if n <= 1 else fib(n-1) + fib(n-2)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/56","

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","
def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
    
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"" and stack:
            stack.pop()
        else:
            return False
    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    return brackets.count('<') == brackets.count('>')

import doctest
doctest.testmod()
","
def correct_bracketing(brackets: str):
    stack = []
    
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    
    return not stack
","
def correct_bracketing(brackets: str):
    from collections import deque
    
    stack = deque()
    
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"" and stack:
            stack.pop()
        else:
            return False
    
    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    opening_brackets = 0
    
    for bracket in brackets:
        if bracket == ""<"":
            opening_brackets += 1
        elif bracket == "">"":
            if opening_brackets == 0:
                return False
            opening_brackets -= 1
    
    return opening_brackets == 0
","
def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"" and stack:
            stack.pop()
        else:
            return False
    return not stack
","100.0","83.33333333333334","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/57","

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","
from typing import List

def monotonic(l: List[int]) -> bool:
    """"""Return True is list elements are monotonically increasing or decreasing.""""""
    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))
","
from typing import List

def monotonic(l: List[int]) -> bool:
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
","
from typing import List

def monotonic(l: List[int]) -> bool:
    """"""Return True is list elements are monotonically increasing or decreasing.""""""
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
 ","
from typing import List

def monotonic(l: List[int]) -> bool:
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
","
from typing import List

def monotonic(l: List[int]) -> bool:
    """"""Return True is list elements are monotonically increasing or decreasing.""""""

    is_increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))
    is_decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))

    return is_increasing or is_decreasing
","
from typing import List

def monotonic(l: List[int]) -> bool:
    """"""Return True is list elements are monotonically increasing or decreasing.""""""
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/58","

def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","
from typing import List

def common(l1: List, l2: List) -> List:
    return sorted(list(set(l1).intersection(l2)))
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    return sorted(list(set(l1).intersection(l2)))
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    """"""Return sorted unique common elements for two lists.""""""
    return sorted(list(set(l1) & set(l2)))
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    return sorted(list(set(l1) & set(l2)))
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    return sorted(list(set(l1) & set(l2)))
","
def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/59","

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    for i in range(int(math.sqrt(n)), 1, -1):
        if n % i == 0 and is_prime(i):
            return i

# Test cases
print(largest_prime_factor(13195))  # 29
print(largest_prime_factor(2048))   # 2
","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    i = 2
    while i <= n / i:
        if n % i == 0:
            n //= i
        else:
            i += 1
    return n
","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True
    
    for i in range(int(math.sqrt(n)), 1, -1):
        if n % i == 0 and is_prime(i):
            return i
","
import math

def largest_prime_factor(n: int):
    while n % 2 == 0:
        n //= 2
    factor = 3
    max_factor = math.isqrt(n)
    while factor <= max_factor:
        if n % factor == 0:
            n //= factor
            max_factor = math.isqrt(n)
        else:
            factor += 2
    return n
","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""

    def is_prime(num):
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    for i in range(int(math.sqrt(n)), 2, -1):
        if n % i == 0 and is_prime(i):
            return i
","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""

    def is_prime(num):
        if num == 2:
            return True
        if num < 2 or num % 2 == 0:
            return False
        for i in range(3, int(math.sqrt(num)) + 1, 2):
            if num % i == 0:
                return False
        return True

    factor = 2
    while factor <= n:
        if n % factor == 0 and is_prime(n // factor):
            return n // factor
        factor += 1
","80.0","100.0","80.0","100.0","80.0","100.0","","","","","",""
"HumanEval/60","

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","
def sum_to_n(n: int):
    return n * (n + 1) // 2
","
def sum_to_n(n: int):
    return n * (n + 1) // 2
  ","
def sum_to_n(n: int):
    return sum(range(1, n+1))
","
def sum_to_n(n: int):
    return n*(n+1)//2
","
def sum_to_n(n: int):
    return n * (n + 1) // 2
","
from typing import List

def sum_to_n(n: int) -> int:
    return sum(range(1, n+1))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/61","

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","
def correct_bracketing(brackets: str):
    from collections import deque

    stack = deque()
    for bracket in brackets:
        if bracket == ""("":
            stack.append(""("")
        elif bracket == "")"" and stack:
            stack.pop()
        else:
            return False

    return not stack
","
def correct_bracketing(brackets: str):
    stack = []
    opening_brackets = set('({[')
    closing_brackets = set(')}]')
    bracket_pairs = {')': '(', '}': '{', ']': '['}
    
    for bracket in brackets:
        if bracket in opening_brackets:
            stack.append(bracket)
        elif bracket in closing_brackets:
            if not stack or bracket_pairs[bracket] != stack.pop():
                return False
    
    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""("":
            stack.append(""("")
        elif bracket == "")"":
            if not stack:
                return False
            stack.pop()
    
    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    from collections import deque
    
    stack = deque()
    
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if not stack:
                return False
            stack.pop()
    
    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    from collections import deque

    stack = deque()
    
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')' and stack:
            stack.pop()
        else:
            return False
            
    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    open_brackets = 0
    for bracket in brackets:
        if bracket == '(':
            open_brackets += 1
        elif bracket == ')':
            if open_brackets == 0:
                return False
            open_brackets -= 1
    return open_brackets == 0
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/62","

def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    return [coef * i for i, coef in enumerate(xs)][1:]
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    return [xs[i] * i for i in range(1, len(xs))]
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    
    return [i * xs[i] for i in range(1, len(xs))]

  ","
from typing import List


def derivative(xs: List[int]) -> List[int]:
    """"""
    xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
    Return derivative of this polynomial in the same form.
    """"""
    return [i * coeff for i, coeff in enumerate(xs)][1:]
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    return [xs[i] * i for i in range(1, len(xs))]
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    return [xs[i] * i for i in range(1, len(xs))]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/63","

def fibfib(n: int):
    """"""The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","
def fibfib(n: int):
    if n == 0 or n == 1:
        return 0
    if n == 2:
        return 1
    a, b, c = 0, 0, 1
    for i in range(3, n+1):
        a, b, c = b, c, a + b + c
    return c
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int) -> int:
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
  ","
def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b, c = 0, 0, 1
        for _ in range(3, n+1):
            a, b, c = b, c, a + b + c
        return c
","
def fibfib(n: int):
    fib = [0, 0, 1]
    for i in range(3, n + 1):
        fib.append(fib[i-1] + fib[i-2] + fib[i-3])
    return fib[n]

import doctest
doctest.testmod()
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int) -> int:
    if n <= 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int) -> int:
    if n == 0 or n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/64","
FIX = """"""
Add more test cases.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","
def vowels_count(s):
    vowels = 'aeiou'
    if s[-1].lower() == 'y':
        vowels += 'y'
    return sum(1 for char in s if char.lower() in vowels)
","
def vowels_count(s):
    vowels = 'aeiou'
    count = 0
    for i in range(len(s)):
        if s[i].lower() in vowels:
            if i == len(s) - 1 and s[i].lower() == 'y':
                count += 1
            elif s[i].lower() != 'y':
                count += 1
    return count
","
def vowels_count(s):
    vowels = {'a', 'e', 'i', 'o', 'u'}
    if s[-1].lower() == 'y':
        vowels.add('y')
    
    return sum(1 for char in s if char.lower() in vowels)
","
def vowels_count(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    if s[-1].lower() == 'y':
        vowels.append('y')
    return sum(1 for char in s if char.lower() in vowels)
","
def vowels_count(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    if s[-1].lower() == 'y':
        vowels.append('y')
    return sum(1 for char in s.lower() if char in vowels)
","
def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.
    
    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
    
    count = 0
    vowels = set(['a', 'e', 'i', 'o', 'u'])
    
    for i in range(len(s)):
        if s[i].lower() in vowels:
            count += 1
        elif i == len(s)-1 and s[i].lower() == 'y':
            count += 1
    
    return count
","100.0","57.14285714285714","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/65","
def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","
from collections import deque

def circular_shift(x, shift):
    x_str = str(x)
    num_digits = len(x_str)
    shift = shift % num_digits
    if shift == 0:
        return x_str
    else:
        digits = deque(x_str)
        digits.rotate(shift)
        return ''.join(digits)
","
from collections import deque

def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
    x_str = str(x)
    num_digits = len(x_str)
    shift %= num_digits
    if shift == 0:
        return x_str
    if shift > num_digits // 2:
        return x_str[::-1]
    dq = deque(x_str)
    dq.rotate(shift)
    return ''.join(dq)
  ","
from collections import deque

def circular_shift(x, shift):
    x_str = str(x)
    if shift >= len(x_str):
        shifted_str = x_str[::-1]
    else:
        x_deque = deque(x_str)
        x_deque.rotate(shift)
        shifted_str = """".join(x_deque)
    
    return shifted_str
","
from collections import deque

def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    """"""
    x_str = str(x)
    num_digits = len(x_str)
    
    if shift > num_digits:
        return x_str[::-1]
    
    shift = shift % num_digits
    digits_deque = deque(x_str)
    digits_deque.rotate(shift)
    
    return """".join(digits_deque)
","
from collections import deque

def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
    x_str = str(x)
    length = len(x_str)
    shift = shift % length
    if shift == 0:
        return x_str
    else:
        rotated = deque(x_str)
        rotated.rotate(shift)
        return ''.join(rotated)
  ","
from collections import deque

def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""

    digits = deque(str(x))
    if shift > len(digits):
        digits.reverse()
    else:
        digits.rotate(shift)
    
    return ''.join(digits)
","80.0","80.0","80.0","100.0","80.0","100.0","","","","","",""
"HumanEval/66","
def digitSum(s):
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""
","
def digitSum(s):
    return sum(ord(ch) for ch in s if ch.isupper())
","
def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())
","
def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())
","
def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())
","
def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())
","
def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/67","
def fruit_distribution(s,n):
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
    """"""
","
def fruit_distribution(s, n):
    apples = int(s.split(' ')[0])
    oranges = int(s.split(' ')[3])
    mangoes = n - apples - oranges
    return mangoes
","
def fruit_distribution(s, n):
    pieces = [int(x) for x in s.split() if x.isdigit()]
    mango_count = n - sum(pieces)
    return mango_count
","
def fruit_distribution(s, n):
    total_fruits = n
    apples, oranges = map(int, [x.split()[0] for x in s.split(""and"")])
    mangoes = total_fruits - apples - oranges
    return mangoes
","
def fruit_distribution(s, n):
    num_apples = int(s.split(' ')[0])
    num_oranges = int(s.split(' ')[-2])
    num_mango = n - num_apples - num_oranges
    return num_mango
","
def fruit_distribution(s,n):
    total_fruits = n
    fruits = s.split()
    apples = int(fruits[0])
    oranges = int(fruits[3])
    mango = total_fruits - apples - oranges
    return mango
","
def fruit_distribution(s, n):
    total_fruits = n
    for fruit in s.split():
        if fruit.isdigit():
            total_fruits -= int(fruit)
    return total_fruits
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/68","
def pluck(arr):
    """"""
    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""
","
def pluck(arr):
    even_nodes = [(node, idx) for idx, node in enumerate(arr) if node % 2 == 0]
    if not even_nodes:
        return []

    smallest_value = min(even_nodes)[0]
    smallest_index = min(even_nodes, key=lambda x: (x[0], x[1]))[1]
    return [smallest_value, smallest_index]
","
def pluck(arr):
    even_values = [(index, value) for index, value in enumerate(arr) if value % 2 == 0]
    if not even_values:
        return []
    smallest_even_value = min(even_values, key=lambda x: (x[1], x[0]))
    return [smallest_even_value[1], smallest_even_value[0]]
","
from typing import List

def pluck(arr: List[int]) -> List[int]:
    evens = [(num, index) for index, num in enumerate(arr) if num % 2 == 0]
    if not evens:
        return []
    min_even = min(evens)
    return [min_even[0], min_even[1]]
","
def pluck(arr):
    evens = [(index, value) for index, value in enumerate(arr) if value % 2 == 0]
    if not evens:
        return []
    min_even = min(evens, key=lambda x: (x[1], x[0]))
    return [min_even[1], min_even[0]]
","
from typing import List

def pluck(arr: List[int]) -> List[int]:
    evens = [num for num in arr if num % 2 == 0]
    if not evens:
        return []
    smallest_even = min(evens)
    smallest_index = arr.index(smallest_even)
    return [smallest_even, smallest_index]
","
def pluck(arr):
    evens = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]
    if not evens:
        return []
    min_even = min(evens)
    return [min_even[0], min_even[1]]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/69","
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","
from collections import Counter

def search(lst):
    counts = Counter(lst)
    max_val = -1
    for key, val in counts.items():
        if key > 0 and val >= key:
            max_val = max(max_val, key)
    return max_val
","
from collections import Counter

def search(lst):
    counts = Counter(lst)
    result = -1

    for num, freq in counts.items():
        if num > 0 and freq >= num:
            result = max(result, num)

    return result
","
from collections import Counter

def search(lst):
    counts = Counter(lst)
    max_val = 0
    
    for key, val in counts.items():
        if key > val and val >= max_val:
            max_val = key
    
    return max_val if max_val != 0 else -1
","
from collections import Counter

def search(lst):
    counter = Counter(lst)
    result = -1
    for num in counter:
        if num > 0 and counter[num] >= num:
            result = max(result, num)
    return result
","
from collections import Counter

def search(lst):
    count = Counter(lst)
    max_val = -1
    for num, freq in count.items():
        if num > 0 and freq >= num:
            max_val = max(max_val, num)
    return max_val
","
from collections import Counter

def search(lst):
    count = Counter(lst)
    for num, freq in count.items():
        if num > 0 and freq >= num:
            return num
    return -1
","100.0","100.0","0.0","100.0","100.0","92.0","","","","","",""
"HumanEval/70","
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","
from collections import deque

def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    
    lst.sort()
    result = deque()
    while lst:
        result.append(lst.pop(0))
        if lst:
            result.append(lst.pop())
    
    return list(result)
","
import functools

def strange_sort_list(lst):
    sorted_lst = sorted(lst)
    result = []

    while sorted_lst:
        result.append(sorted_lst.pop(0))
        if sorted_lst:
            result.append(sorted_lst.pop())

    return result
","
from typing import List

def strange_sort_list(lst: List[int]) -> List[int]:
    sorted_lst = sorted(lst)
    result = []
    while sorted_lst:
        result.append(sorted_lst.pop(0))
        if sorted_lst:
            result.append(sorted_lst.pop())
    return result
","
from heapq import nlargest, nsmallest

def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    sorted_list = []
    while lst:
        sorted_list.append(nsmallest(1, lst)[0])
        lst.remove(nsmallest(1, lst)[0])
        if lst:
            sorted_list.append(nlargest(1, lst)[0])
            lst.remove(nlargest(1, lst)[0])
    return sorted_list
  ","
from typing import List

def strange_sort_list(lst: List[int]) -> List[int]:
    lst.sort()
    result = []
    while lst:
        result.append(lst.pop(0))
        if lst:
            result.append(lst.pop())
    return result
","
import heapq

def strange_sort_list(lst):
    min_heap = []
    max_heap = []
    result = []

    for num in lst:
        heapq.heappush(min_heap, num)

    while min_heap:
        result.append(heapq.heappop(min_heap))
        if min_heap:
            heapq.heappush(max_heap, heapq.heappop(min_heap))

    while max_heap:
        result.append(heapq.heappop(max_heap))

    return result
","100.0","100.0","100.0","100.0","100.0","33.33333333333333","","","","","",""
"HumanEval/71","
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","
from math import sqrt

def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''

    s = (a + b + c) / 2
    area = sqrt(s * (s - a) * (s - b) * (s - c)) if a + b > c and a + c > b and b + c > a else -1
    return round(area, 2) if area != -1 else -1
","
import math

def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    if a + b > c and b + c > a and a + c > b:
        s = (a + b + c) / 2
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
from math import sqrt

def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
from math import sqrt

def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
from math import sqrt

def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
import math

def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area,2)
    else:
        return -1
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/72","
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    return sum(q) <= w and q == q[::-1]
","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    return q == q[::-1] and sum(q) <= w
","
def will_it_fly(q, w):
    if q == q[::-1] and sum(q) <= w:
        return True
    return False
  ","
def will_it_fly(q,w):
    if q != q[::-1]:
        return False
    return sum(q) <= w
","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    return q == q[::-1] and sum(q) <= w
","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    return q == q[::-1] and sum(q) <= w
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/73","
def smallest_change(arr):
    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """"""
","
from collections import Counter

def smallest_change(arr):
    def is_palindrome(arr):
        return arr == arr[::-1]

    counter = Counter(arr)
    odd_counts = sum(1 for count in counter.values() if count % 2 != 0)

    return max(0, odd_counts - 1)
","
from collections import Counter

def smallest_change(arr):
    counter = Counter(arr)
    odd_count = sum(val % 2 for val in counter.values())
    return max(0, odd_count - 1)
","
from typing import List

def smallest_change(arr: List[int]) -> int:
    n = len(arr)
    dp = [[0] * n for _ in range(n)]
    
    for l in range(2, n + 1):
        for i in range(n - l + 1):
            j = i + l - 1
            if arr[i] == arr[j]:
                dp[i][j] = dp[i + 1][j - 1]
            else:
                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1
    
    return dp[0][n - 1]
  ","
from collections import Counter

def smallest_change(arr):
    freq = Counter(arr)
    odd_count = sum(val % 2 for val in freq.values())
    return max(0, odd_count - 1)
","
from collections import Counter

def smallest_change(arr):
    def min_changes_to_palindrome(lst):
        def is_palindrome(beg, end):
            while beg < end:
                if lst[beg] != lst[end]:
                    return False
                beg += 1
                end -= 1
            return True

        min_changes = 0
        left, right = 0, len(lst) - 1

        while left < right:
            if lst[left] != lst[right]:
                if lst[left] < lst[right]:
                    lst[left] = lst[right]
                else:
                    lst[right] = lst[left]
                min_changes += 1
            left += 1
            right -= 1

        return min_changes

    return min_changes_to_palindrome(arr)

# Tests
assert smallest_change([1,2,3,5,4,7,9,6]) == 4
assert smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
assert smallest_change([1, 2, 3, 2, 1]) == 0
","
from collections import Counter

def smallest_change(arr):
    counter = Counter(arr)
    odd_count = sum(1 for count in counter.values() if count % 2 != 0)
    return max(0, odd_count - 1)
","62.5","62.5","50.0","62.5","100.0","62.5","","","","","",""
"HumanEval/74","
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    total_chars_lst1 = sum(len(word) for word in lst1)
    total_chars_lst2 = sum(len(word) for word in lst2)

    if total_chars_lst1 < total_chars_lst2:
        return lst1
    else:
        return lst2
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    count_lst1 = sum(len(s) for s in lst1)
    count_lst2 = sum(len(s) for s in lst2)
    
    return lst1 if count_lst1 <= count_lst2 else lst2
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    return lst1 if sum(len(s) for s in lst1) < sum(len(s) for s in lst2) else lst2
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    total_chars_lst1 = sum(len(string) for string in lst1)
    total_chars_lst2 = sum(len(string) for string in lst2)
    
    if total_chars_lst1 < total_chars_lst2:
        return lst1
    elif total_chars_lst2 < total_chars_lst1:
        return lst2
    else:
        return lst1
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    total_chars_lst1 = sum(len(word) for word in lst1)
    total_chars_lst2 = sum(len(word) for word in lst2)

    if total_chars_lst1 < total_chars_lst2:
        return lst1
    else:
        return lst2
","
def total_match(lst1, lst2):
    if sum(len(s) for s in lst1) < sum(len(s) for s in lst2):
        return lst1
    else:
        return lst2

# Examples
print(total_match([], []))  # ➞ []
print(total_match(['hi', 'admin'], ['hI', 'Hi']))  # ➞ ['hI', 'Hi']
print(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # ➞ ['hi', 'admin']
print(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # ➞ ['hI', 'hi', 'hi']
print(total_match(['4'], ['1', '2', '3', '4', '5']))  # ➞ ['4']
","88.88888888888889","100.0","88.88888888888889","100.0","88.88888888888889","88.88888888888889","","","","","",""
"HumanEval/75","
def is_multiply_prime(a):
    """"""Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """"""
","
from itertools import combinations
from sympy import isprime

def is_multiply_prime(a):
    primes = [x for x in range(2, 100) if isprime(x)]
    for combo in combinations(primes, 3):
        if combo[0] * combo[1] * combo[2] == a:
            return True
    return False
","
from sympy import primerange
from itertools import combinations

def is_multiply_prime(a):
    primes = list(primerange(2, 100))
    for combo in combinations(primes, 3):
        if a == combo[0] * combo[1] * combo[2]:
            return True
    return False
","
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def is_multiply_prime(a):
    primes = [x for x in range(2, 100) if is_prime(x)]
    for i in primes:
        for j in primes:
            for k in primes:
                if i * j * k == a:
                    return True
    return False
","
from sympy import isprime

def is_multiply_prime(a):
    for i in range(2, a):
        if a % i == 0 and isprime(i):
            for j in range(i + 1, a):
                if (a // i) % j == 0 and isprime(j):
                    k = (a // i) // j
                    if isprime(k):
                        return True
    return False
","
import sympy

def is_multiply_prime(a):
    primes = list(sympy.primerange(2, 100))
    for i in primes:
        if a % i == 0:
            for j in primes:
                if (a / i) % j == 0 and sympy.isprime(a / i / j):
                    return True
    return False
","
from itertools import combinations
from sympy import isprime

def is_multiply_prime(a):
    prime_numbers = [i for i in range(2, 100) if isprime(i)]
    for combo in combinations(prime_numbers, 3):
        if a == combo[0] * combo[1] * combo[2]:
            return True
    return False
","80.0","80.0","100.0","80.0","50.0","80.0","","","","","",""
"HumanEval/76","
def is_simple_power(x, n):
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""
","
import math

def is_simple_power(x, n):
    return math.log(x, n).is_integer()
","
import math

def is_simple_power(x, n):
    root = math.pow(x,1/n)
    return root.is_integer() and n**int(root) == x
","
import math

def is_simple_power(x, n):
    return x > 0 and math.isclose(math.log(x) / math.log(n), round(math.log(x) / math.log(n)))
","
import math

def is_simple_power(x, n):
    return math.log(x, n).is_integer()
","
import math

def is_simple_power(x, n):
    return n ** int(math.log(x, n)) == x
","
import math

def is_simple_power(x, n):
    return x > 0 and math.log(x, n).is_integer()
","90.0","80.0","90.0","90.0","90.0","90.0","","","","","",""
"HumanEval/77","
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","
import math

def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this integer is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    return (math.isqrt(abs(a))**3 == abs(a))
","
import math

def iscube(a):
    return (math.floor(a**(1/3)) ** 3) == a
  ","
import math

def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this integer is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    if a == 0:
        return True

    cube_root = round(a ** (1/3))
    return cube_root ** 3 == a
  ","
import math

def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    root = round(a**(1/3))
    return a == root**3
","
import math

def iscube(a):
    return a != 1 and math.isclose(a**(1/3), round(a**(1/3)))

","
from math import isqrt

def iscube(a):
    return (isqrt(abs(a))**3) == abs(a)
","75.0","62.5","87.5","87.5","75.0","75.0","","","","","",""
"HumanEval/78","
def hex_key(num):
    """"""You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""
","
from sympy import isprime

def hex_key(num):
    count = 0
    for digit in num:
        if digit.isdigit():
            decimal = int(digit)
        else:
            decimal = ord(digit) - 55  # Convert hexadecimal to decimal
        
        if isprime(decimal):
            count += 1
    
    return count
","
from sympy import isprime

def hex_key(num):
    primes = ['2', '3', '5', '7', 'B', 'D']  # Hexadecimal digits that are primes
    count = 0
    
    for digit in num:
        if digit.upper() in primes and isprime(int(digit, base=16)):
            count += 1
    
    return count
","
def hex_key(num):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    primes = {'2', '3', '5', '7', 'B', 'D'}
    return sum(1 for digit in num if digit.upper() in primes and is_prime(int(digit, 16)))
","
from sympy import isprime

def hex_key(num):
    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}
    count = sum(1 for digit in num if digit.upper() in prime_hex_digits and isprime(int(digit, 16)))
    return count
","
def hex_key(num):
    def is_prime(n):
        if n <= 1:
            return False
        elif n <= 3:
            return True
        elif n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    primes_count = 0
    for char in num:
        if char in '2357BD':
            hex_digit = int(char, 16)
            if is_prime(hex_digit):
                primes_count += 1

    return primes_count
","
def hex_key(num):
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0:
            return False
        for i in range(3, int(n ** 0.5) + 1, 2):
            if n % i == 0:
                return False
        return True

    prime_hex = {'2', '3', '5', '7', 'B', 'D'}
    count = sum(1 for digit in num if digit.upper() in prime_hex and is_prime(int(digit, 16)))
    return count
  ","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/79","
def decimal_to_binary(decimal):
    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns ""db1111db""
    decimal_to_binary(32)   # returns ""db100000db""
    """"""
","
def decimal_to_binary(decimal):
    binary_str = bin(decimal)[2:]
    return f""db{binary_str}db""
","
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return 'db' + binary + 'db'
","
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return f""db{binary}db""
","
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return f""db{binary}db""
","
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return 'db' + binary + 'db'
","
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return 'db' + binary + 'db'
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/80","
def is_happy(s):
    """"""You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """"""
","
def is_happy(s):
    from itertools import islice
    return len(s) >= 3 and all(a != b and b != c and a != c for a, b, c in islice(zip(s, s[1:], s[2:]), 0, None))
","
from collections import Counter

def is_happy(s):
    return len(s) >= 3 and all(Counter(s[i:i+3]).most_common()[0][1] == 1 for i in range(len(s) - 2))
","
def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:
            return False
    return True
","
from typing import List

def is_happy(s: str) -> bool:
    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s) - 2))
","
def is_happy(s):
    return len(s) >= 3 and all(s[i] != s[i + 1] != s[i + 2] for i in range(len(s) - 2)
","
def is_happy(s):
    from itertools import groupby
    if len(s) < 3:
        return False
    return all(len(list(g)) == 1 for _, g in groupby(s, key=lambda x: x))
  ","100.0","100.0","100.0","87.5","0","87.5","","","","","  File ""<string>"", line 3
    return len(s) >= 3 and all(s[i] != s[i + 1] != s[i + 2] for i in range(len(s) - 2)
                              ^
SyntaxError: '(' was never closed
",""
"HumanEval/81","
def numerical_letter_grade(grades):
    """"""It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
def numerical_letter_grade(grades):
    def determine_letter_grade(gpa):
        if gpa == 4.0:
            return 'A+'
        elif gpa > 3.7:
            return 'A'
        elif gpa > 3.3:
            return 'A-'
        elif gpa > 3.0:
            return 'B+'
        elif gpa > 2.7:
            return 'B'
        elif gpa > 2.3:
            return 'B-'
        elif gpa > 2.0:
            return 'C+'
        elif gpa > 1.7:
            return 'C'
        elif gpa > 1.3:
            return 'C-'
        elif gpa > 1.0:
            return 'D+'
        elif gpa > 0.7:
            return 'D'
        elif gpa >= 0.0:
            return 'D-'
        else:
            return 'E'

    return [determine_letter_grade(gpa) for gpa in grades]

# Example usage
print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))
","
def numerical_letter_grade(grades):
    letter_grades = []
    for g in grades:
        if g == 4.0:
            letter_grades.append('A+')
        elif g > 3.7:
            letter_grades.append('A')
        elif g > 3.3:
            letter_grades.append('A-')
        elif g > 3.0:
            letter_grades.append('B+')
        elif g > 2.7:
            letter_grades.append('B')
        elif g > 2.3:
            letter_grades.append('B-')
        elif g > 2.0:
            letter_grades.append('C+')
        elif g > 1.7:
            letter_grades.append('C')
        elif g > 1.3:
            letter_grades.append('C-')
        elif g > 1.0:
            letter_grades.append('D+')
        elif g > 0.7:
            letter_grades.append('D')
        elif g > 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades
","
def numerical_letter_grade(grades):
    def to_letter(grade):
        if grade == 4.0:
            return 'A+'
        elif grade > 3.7:
            return 'A'
        elif grade > 3.3:
            return 'A-'
        elif grade > 3.0:
            return 'B+'
        elif grade > 2.7:
            return 'B'
        elif grade > 2.3:
            return 'B-'
        elif grade > 2.0:
            return 'C+'
        elif grade > 1.7:
            return 'C'
        elif grade > 1.3:
            return 'C-'
        elif grade > 1.0:
            return 'D+'
        elif grade > 0.7:
            return 'D'
        elif grade >= 0.0:
            return 'D-'
        else:
            return 'E'
    
    return [to_letter(grade) for grade in grades]
","
def numerical_letter_grade(grades):
    letter_grades = []
    for grade in grades:
        if grade == 4.0:
            letter_grades.append('A+')
        elif grade > 3.7:
            letter_grades.append('A')
        elif grade > 3.3:
            letter_grades.append('A-')
        elif grade > 3.0:
            letter_grades.append('B+')
        elif grade > 2.7:
            letter_grades.append('B')
        elif grade > 2.3:
            letter_grades.append('B-')
        elif grade > 2.0:
            letter_grades.append('C+')
        elif grade > 1.7:
            letter_grades.append('C')
        elif grade > 1.3:
            letter_grades.append('C-')
        elif grade > 1.0:
            letter_grades.append('D+')
        elif grade > 0.7:
            letter_grades.append('D')
        elif grade >= 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades
","
def numerical_letter_grade(grades):
    letter_grades = []
    for g in grades:
        if g == 4.0:
            letter_grades.append('A+')
        elif g > 3.7:
            letter_grades.append('A')
        elif g > 3.3:
            letter_grades.append('A-')
        elif g > 3.0:
            letter_grades.append('B+')
        elif g > 2.7:
            letter_grades.append('B')
        elif g > 2.3:
            letter_grades.append('B-')
        elif g > 2.0:
            letter_grades.append('C+')
        elif g > 1.7:
            letter_grades.append('C')
        elif g > 1.3:
            letter_grades.append('C-')
        elif g > 1.0:
            letter_grades.append('D+')
        elif g > 0.7:
            letter_grades.append('D')
        elif g > 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades

# Example usage:
print(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))
  ","
from typing import List

def numerical_letter_grade(grades: List[float]) -> List[str]:
    def get_letter_grade(gpa: float) -> str:
        if gpa == 4.0:
            return 'A+'
        elif gpa > 3.7:
            return 'A'
        elif gpa > 3.3:
            return 'A-'
        elif gpa > 3.0:
            return 'B+'
        elif gpa > 2.7:
            return 'B'
        elif gpa > 2.3:
            return 'B-'
        elif gpa > 2.0:
            return 'C+'
        elif gpa > 1.7:
            return 'C'
        elif gpa > 1.3:
            return 'C-'
        elif gpa > 1.0:
            return 'D+'
        elif gpa > 0.7:
            return 'D'
        elif gpa >= 0.0:
            return 'D-'
        else:
            return 'E'

    return [get_letter_grade(gpa) for gpa in grades]
  ","66.66666666666666","100.0","66.66666666666666","66.66666666666666","100.0","66.66666666666666","","","","","",""
"HumanEval/82","
def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""
","
import math

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(number):
    if number < 2:
        return False
    for i in range(2, int(math.sqrt(number)) + 1):
        if number % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
 ","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/83","
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
","
def starts_one_ends(n):
    count = 0
    if n == 1:
        count = 1
    else:
        count = 2 * 9 * 10 ** (n-2)
    return count
","
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
    if n == 1:
        return 1
    return 2 * 9 * 10**(n-2) + 10**(n-1) - 10**(n-2)
","
def starts_one_ends(n):
    count = 0
    if n == 1:
        return 1
    count += 2 * (9 * 10**(n-2))
    count += 9 * 10**(n-2)
    return count
","
def starts_one_ends(n):
    count = 0
    count += 9 * 10 ** (n - 2)
    count += 10 ** (n - 1)
    return count
","
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
    count = 0
    if n == 1:
        return 1
    else:
        count += 9  # for numbers starting with 1
        count += 9 * (10 ** (n - 2))  # for numbers ending with 1
    return count
","
from math import pow

def starts_one_ends(n):
    return 2 * pow(9, n-1)
","100.0","20.0","20.0","0.0","40.0","20.0","","","","","",""
"HumanEval/84","
def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""
","
def solve(N):
    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]
","
def solve(N):
    return bin(sum(map(int, str(N))))[2:]
","
def solve(N):
    return bin(sum(int(digit) for digit in str(N)))[2:]
","
def solve(N):
    return bin(sum(int(digit) for digit in str(N)))[2:]
","
def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""
    return bin(sum(int(x) for x in str(N)))[2:]
","
def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.""""""
    
    binary_sum = sum([int(x) for x in bin(N)[2:]])
    return bin(binary_sum)[2:]
","0.0","100.0","100.0","100.0","100.0","0.0","","","","","",""
"HumanEval/85","
def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""
","
def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
from typing import List

def add(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
def add(lst):
    total = 0
    for i in range(1, len(lst), 2):
        if lst[i] % 2 == 0:
            total += lst[i]
    return total
","
def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/86","
def anti_shuffle(s):
    """"""
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """"""
","
from collections import defaultdict

def anti_shuffle(s):
    return ' '.join(''.join(sorted(word, key=lambda x: ord(x))) for word in s.split())
","
import re

def anti_shuffle(s):
    def sorted_chars(word):
        return ''.join(sorted(word))

    words = re.split(r'(\s+)', s)
    ordered_sentence = ''
    for word in words:
        ordered_sentence += sorted_chars(word) if word.isalpha() else word
    return ordered_sentence
","
from collections import defaultdict

def anti_shuffle(s):
    def order_word(word):
        return ''.join(sorted(word))

    def reverse_indices(indices):
        reverse = defaultdict(list)
        for key, idx in indices.items():
            reverse[idx].append(key)
        return reverse

    ordered_sentence = ''
    chars = []
    word_indices = {}
    for idx, char in enumerate(s):
        if char.isalnum():
            chars.append(char)
        elif chars:
            word = order_word(''.join(chars))
            ordered_sentence += word
            word_indices[word] = idx
            chars = []
            ordered_sentence += char
        else:
            ordered_sentence += char
    
    if chars:
        ordered_sentence += order_word(''.join(chars))

    reverse_word_indices = reverse_indices(word_indices)
    final_sentence = ''
    for word_idx in sorted(reverse_word_indices.keys()):
        words = reverse_word_indices[word_idx]
        final_sentence += ' '.join(words)

    return final_sentence
  ","
from collections import defaultdict

def anti_shuffle(s):
    result = []
    words = s.split()
    word_indices = defaultdict(list)
    
    for i, word in enumerate(words):
        sorted_word = ''.join(sorted(word))
        word_indices[sorted_word].append(i)
    
    for sorted_word, indices in sorted(word_indices.items(), key=lambda x: min(x[1])):
        for index in indices:
            result.insert(index, sorted_word)
    
    return ' '.join(result)
","
from collections import defaultdict

def anti_shuffle(s):
    def ordered_word(word):
        return ''.join(sorted(word))

    words = s.split()
    ord_words = [ordered_word(word) for word in words]

    idx = 0
    result = ''
    for char in s:
        if char.isalpha():
            result += ord_words[idx]
            idx += 1
        else:
            result += char

    return result
","
from collections import defaultdict

def anti_shuffle(s):
    words = s.split()
    sorted_words = []
    
    for word in words:
        sorted_word = ''.join(sorted(word, key=lambda x: ord(x)))
        sorted_words.append(sorted_word)
    
    result = ''
    idx = 0
    for char in s:
        if char.isalpha():
            result += sorted_words[idx]
            idx += 1
        else:
            result += char
    
    return result
","100.0","71.42857142857143","14.285714285714285","100.0","14.285714285714285","14.285714285714285","","","","","",""
"HumanEval/87","
def get_row(lst, x):
    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    result = []
    for i, row in enumerate(lst):
        for j, col_value in sorted(enumerate(row), key=lambda c: c[1], reverse=True):
            if col_value == x:
                result.append((i, j))
    
    return sorted(result)
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    rows = []
    for i, row in enumerate(lst):
        if x in row:
            for j, elem in enumerate(row):
                if elem == x:
                    rows.append((i, j))
    return sorted(rows, key=lambda tup: (tup[0], -tup[1]))
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    return sorted((i, j) for i, row in enumerate(lst) for j, val in sorted(enumerate(row), key=lambda x: x[1], reverse=True) if val == x)
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    coordinates = []
    for i, row in enumerate(lst):
        for j, val in enumerate(row):
            if val == x:
                coordinates.append((i, j))
    
    coordinates.sort()
    sorted_coordinates = sorted(coordinates, key=lambda coord: (-coord[1], coord[0]))
    
    return sorted_coordinates
  ","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    result = []
    for i, row in enumerate(lst):
        for j, elem in enumerate(row):
            if elem == x:
                result.append((i, j))
    
    result.sort(key=lambda x: (x[0], -x[1]))
    
    return result
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    coordinates = []
    for row_idx, row in enumerate(lst):
        for col_idx, val in enumerate(row):
            if val == x:
                coordinates.append((row_idx, col_idx))
    
    coordinates.sort(key=lambda x: (x[0], -x[1]))
    
    return coordinates
","66.66666666666666","100.0","66.66666666666666","66.66666666666666","100.0","100.0","","","","","",""
"HumanEval/88","
def sort_array(array):
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    sorted_array = sorted(array)
    if (array[0] + array[-1]) % 2 == 0:  # sum is even
        return sorted_array[::-1]  # descending order
    else:
        return sorted_array  # ascending order
","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    sorted_array = array.copy()
    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:
        sorted_array.sort(reverse=True)
    else:
        sorted_array.sort()
    return sorted_array
  ","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum(first index value, last index value) is odd,
    or sort it in descending order if the sum(first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
    sorted_array = sorted(array)
    if (array[0] + array[-1]) % 2 == 0:
        return sorted_array[::-1]
    else:
        return sorted_array
  ","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
    sorted_array = array.copy()
    sum_first_last = array[0] + array[-1]
    if sum_first_last % 2 == 0:
        return sorted(sorted_array, reverse=True)
    else:
        return sorted(sorted_array)
","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    sorted_array = array.copy()
    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:
        return sorted_array[::-1]
    else:
        return sorted(sorted_array)
","
import copy

def sort_array(array):
    array_copy = copy.deepcopy(array)
    if (array_copy[0] + array_copy[-1]) % 2 == 0:
        return sorted(array_copy, reverse=True)
    else:
        return sorted(array_copy)
  ","85.71428571428571","85.71428571428571","85.71428571428571","85.71428571428571","57.14285714285714","85.71428571428571","","","","","",""
"HumanEval/89","
def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
","
import string

def encrypt(s):
    shifted_alphabet = string.ascii_lowercase[2:] + string.ascii_lowercase[:2]
    return ''.join(shifted_alphabet[ord(char) - ord('a')] if char.isalpha() else char for char in s)
","
from itertools import cycle

def encrypt(s):
    ALPHABET = 'abcdefghijklmnopqrstuvwxyz'
    shifted_alphabet = ''.join(next(cycle(ALPHABET), None)
                              for _ in range(len(ALPHABET) * 2))
    return ''.join(shifted_alphabet[(shifted_alphabet.index(c) + 2) % 26]
                   if c in ALPHABET else c for c in s)
","
import string

def encrypt(s):
    rot = 2 * 2
    alphabet = string.ascii_lowercase
    encrypted = ''
    for char in s:
        if char.isalpha():
            idx = (alphabet.index(char) + rot) % 26
            encrypted += alphabet[idx]
        else:
            encrypted += char
    return encrypted
","
import string

def encrypt(s):
    rot = 2
    encrypted = ''
    for char in s:
        if char.isalpha():
            shifted_index = (string.ascii_lowercase.index(char.lower()) + rot * 2) % 26
            shifted_char = string.ascii_lowercase[shifted_index]
            encrypted += shifted_char if char.islower() else shifted_char.upper()
        else:
            encrypted += char
    return encrypted
","
import string

def encrypt(s):
    shifted_alphabet = string.ascii_lowercase[2:] + string.ascii_lowercase[:2]
    mapping = str.maketrans(string.ascii_lowercase, shifted_alphabet)
    return s.translate(mapping)
","
import string

def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
    result = []
    for char in s:
        if char.isalpha():
            alpha = 'abcdefghijklmnopqrstuvwxyz'
            shifted = alpha[(alpha.index(char.lower()) + 2 * 2) % 26]
            result.append(shifted if char.islower() else shifted.upper())
        else:
            result.append(char)
    return ''.join(result)
","0.0","0.0","100.0","100.0","0.0","100.0","","","","","",""
"HumanEval/90","
def next_smallest(lst):
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
","
from typing import List

def next_smallest(lst: List[int]) -> int:
    unique_sorted = sorted(set(lst))
    return unique_sorted[1] if len(unique_sorted) > 1 else None
","
from typing import List, Optional

def next_smallest(lst: List[int]) -> Optional[int]:
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
    unique_sorted = sorted(set(lst))
    return unique_sorted[1] if len(unique_sorted) > 1 else None
","
from typing import List

def next_smallest(lst: List[int]) -> int:
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""

    unique_elements = list(set(lst))
    if len(unique_elements) < 2:
        return None
    else:
        return sorted(unique_elements)[1]
","
from typing import List, Union

def next_smallest(lst: List[int]) -> Union[int, None]:
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
    unique_elements = list(set(lst))
    if len(unique_elements) < 2:
        return None
    else:
        unique_elements.sort()
        return unique_elements[1]
","
def next_smallest(lst):
    if len(set(lst)) < 2:
        return None
    return sorted(set(lst))[1]
","
def next_smallest(lst):
    if len(lst) < 2:
        return None
    sorted_unique = sorted(set(lst))
    if len(sorted_unique) < 2:
        return None
    return sorted_unique[1]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/91","
def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","
import re

def is_bored(S):
    return len(re.findall(r'\bI\b', re.sub(r'[.!?]', ' ', S))
","
import re

def is_bored(S):
    return len(re.findall(r'\bI\b[^\.\?!]*[\.!?]', S))
","
import re

def is_bored(S):
    boredom_count = 0
    sentences = re.split('[.?!]', S)
    for sentence in sentences:
        words = sentence.split()
        if len(words) > 0 and words[0] == 'I':
            boredom_count += 1
    return boredom_count
","
import re

def is_bored(S):
    return len(re.findall(r'\bI\b[^.?!]*[.?!]', S))
","
import re

def is_bored(S):
    return len(re.findall(r'\bI\b[^.!?]*[.!?]', S))
","
import re

def is_bored(S):
    return len(re.findall(r'\bI\b[^\.\?!]*[\.\?!]', S))
","0","100.0","100.0","100.0","100.0","100.0","  File ""<string>"", line 5
    return len(re.findall(r'\bI\b', re.sub(r'[.!?]', ' ', S))
              ^
SyntaxError: '(' was never closed
","","","","",""
"HumanEval/92","
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
","
from typing import Union

def any_int(x: Union[int, float], y: Union[int, float], z: Union[int, float]) -> bool:
    if all(isinstance(i, int) for i in [x, y, z]):
        return any(i == j + k or j == i + k or k == i + j for i, j, k in [(x, y, z), (y, x, z), (z, x, y)])
    return False
","
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
    '''
    if all(isinstance(num, int) for num in [x, y, z]):
        if x == y + z or y == x + z or z == x + y:
            return True
    return False
","
def any_int(x, y, z):
    if all(isinstance(num, int) for num in [x, y, z]):
        return x == y + z or y == x + z or z == x + y
    return False
","
from typing import Union

def any_int(x: Union[int, float], y: Union[int, float], z: Union[int, float]) -> bool:
    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and any([
        x == y + z,
        y == x + z,
        z == x + y
    ])
","
from typing import Any

def any_int(x: int, y: int, z: int) -> bool:
    if all(isinstance(num, int) for num in (x, y, z)):
        return any(num == x + y + z for num in (x, y, z))
    else:
        return False
","
def any_int(x, y, z):
    if all(isinstance(n, int) for n in (x, y, z)):
        return x == y + z or y == x + z or z == x + y
    return False
","100.0","100.0","100.0","100.0","50.0","100.0","","","","","",""
"HumanEval/93","
def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","
from string import ascii_lowercase

def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
    vowels = 'aeiouAEIOU'
    encoded_message = """"
    
    for char in message:
        if char.isalpha():
            if char.lower() in vowels:
                idx = (ascii_lowercase.index(char.lower()) + 2) % 26
                encoded_message += ascii_lowercase[idx].swapcase()
            else:
                encoded_message += char.swapcase()
        else:
            encoded_message += char
    
    return encoded_message
","
import string

def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
    vowels = ""AEIOUaeiou""
    encoded_message = ''
    
    for char in message:
        if char.isalpha():
            if char in vowels:
                char = chr((ord(char) + 2 - ord('A') + 26) % 26 + ord('A'))
            else:
                char = char.swapcase()
        encoded_message += char
        
    return encoded_message
","
def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
    import string
    vowels = 'AEIOUaeiou'
    new_message = ''
    for char in message:
        if char.isalpha():
            if char.upper() in vowels:
                new_char = chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))
            else:
                new_char = char.swapcase()
            new_message += new_char
        else:
            new_message += char
    return new_message
","
def encode(message):
    import string

    vowels = ""AEIOUaeiou""
    encoded_message = """"

    for char in message:
        if char.isalpha():
            if char in vowels:
                char_index = string.ascii_uppercase.index(char.upper())
                encoded_char = string.ascii_uppercase[(char_index + 2) % 26]
            else:
                encoded_char = char.swapcase()
        else:
            encoded_char = char
        
        encoded_message += encoded_char

    return encoded_message
","
import string

def encode(message):
    vowels = 'AEIOUaeiou'
    encoded_message = ''
    
    for char in message:
        if char.isalpha():
            if char in vowels:
                encoded_char = chr((ord(char) + 2 - 65) % 26 + 65) if char.isupper() else chr((ord(char) + 2 - 97) % 26 + 97)
            else:
                encoded_char = char.swapcase()
            encoded_message += encoded_char
        else:
            encoded_message += char
    
    return encoded_message
","
def encode(message):
    import string
    
    vowels = 'AEIOUaeiou'
    encoded_message = ''
    
    for char in message:
        if char.isalpha():
            if char.upper() in vowels:
                encoded_char = chr((ord(char) + 2 - 65) % 26 + 65)
            else:
                encoded_char = char
            
            if char.islower():
                encoded_char = encoded_char.lower()
            
            encoded_message += encoded_char
        else:
            encoded_message += char
    
    return encoded_message
","40.0","0.0","0.0","40.0","0.0","0.0","","","","","",""
"HumanEval/94","

def skjkasdkd(lst):
    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """"""
","
import sympy

def skjkasdkd(lst):
    def is_prime(num):
        return sympy.isprime(num)

    def sum_of_digits(num):
        return sum(int(digit) for digit in str(num))

    primes = [num for num in lst if is_prime(num)]
    largest_prime = max(primes)
    return sum_of_digits(largest_prime)
","
import sympy

def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    def sum_digits(num):
        return sum([int(digit) for digit in str(num)])

    primes = [num for num in lst if is_prime(num)]
    if not primes:
        return 0
    largest_prime = max(primes)

    return sum_digits(largest_prime)
","
import math

def skjkasdkd(lst):
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    def sum_digits(n):
        return sum(int(d) for d in str(n))

    prime_values = [num for num in lst if is_prime(num)]
    largest_prime = max(prime_values)
    
    return sum_digits(largest_prime)
","
import math

def skjkasdkd(lst):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    def sum_digits(num):
        return sum(int(digit) for digit in str(num))

    prime_numbers = [num for num in lst if is_prime(num)]
    if not prime_numbers:
        return 0

    max_prime = max(prime_numbers)
    return sum_digits(max_prime)
","
import math

def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    def sum_of_digits(num):
        return sum(int(digit) for digit in str(num))

    largest_prime = None
    for num in lst:
        if is_prime(num):
            if largest_prime is None or num > largest_prime:
                largest_prime = num

    if largest_prime is not None:
        return sum_of_digits(largest_prime)
    else:
        return 0
","
import math

def skjkasdkd(lst):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    def sum_digits(num):
        return sum(int(digit) for digit in str(num))

    primes = [num for num in lst if is_prime(num)]
    if not primes:
        return 0

    max_prime = max(primes)
    return sum_digits(max_prime)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/95","
def check_dict_case(dict):
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""
","
def check_dict_case(dict):
    if len(dict) == 0:
        return False
    keys = list(dict.keys())
    if all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys):
        return True
    return False
","
from typing import Any, Dict

def check_dict_case(dict: Dict[str, Any]) -> bool:
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""
    if not dict:
        return False
    
    all_lower_case = all(k.islower() for k in dict.keys() if isinstance(k, str))
    all_upper_case = all(k.isupper() for k in dict.keys() if isinstance(k, str))

    return all_lower_case or all_upper_case
","
def check_dict_case(dict):
    if not dict:
        return False
    
    lowercase_keys = all(key.islower() for key in dict.keys())
    uppercase_keys = all(key.isupper() for key in dict.keys())
    
    return lowercase_keys or uppercase_keys
","
from typing import Dict

def check_dict_case(input_dict: Dict[str, str]) -> bool:
    if not input_dict:
        return False
    
    lowercase_keys = all(key.islower() for key in input_dict.keys())
    uppercase_keys = all(key.isupper() for key in input_dict.keys())
    
    return lowercase_keys or uppercase_keys
","
from typing import Dict

def check_dict_case(dict: Dict[str, str]) -> bool:
    if not dict:
        return False

    keys = list(dict.keys())
    first_key_case = keys[0].islower()
    for key in keys[1:]:
        if key.islower() != first_key_case:
            return False
    
    return True
  ","
def check_dict_case(dict):
    keys = dict.keys()
    
    if not keys:
        return False
    
    lower_case = all(key.islower() for key in keys if isinstance(key, str))
    upper_case = all(key.isupper() for key in keys if isinstance(key, str))
    
    return lower_case or upper_case
","100.0","85.71428571428571","85.71428571428571","85.71428571428571","71.42857142857143","85.71428571428571","","","","","",""
"HumanEval/96","
def count_up_to(n):
    """"""Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """"""
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    return [num for num in range(2, n) if is_prime(num)]

","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    return [x for x in range(2, n) if is_prime(x)]
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = [num for num in range(2, n) if is_prime(num)]
    return primes
","
import math

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    return [num for num in range(2, n) if is_prime(num)]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/97","
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
","
def multiply(a, b):
    return abs(a % 10 * b % 10)
","
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
    return abs(a % 10) * abs(b % 10)
","
def multiply(a, b):
    return abs(a % 10 * b % 10)
","
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
    return abs(a % 10) * abs(b % 10)
","
from typing import Tuple

def multiply(a: int, b: int) -> int:
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14, -15) should return 20.
    """"""
    return abs(a % 10) * abs(b % 10)
","
def multiply(a, b):
    return abs((a % 10) * (b % 10))
","37.5","100.0","37.5","100.0","100.0","100.0","","","","","",""
"HumanEval/98","
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
","
import re

def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    vowels = set('AEIOU')
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c in vowels)
","
def count_upper(s):
    vowels = ""AEIOU""
    count = 0
    for i in range(len(s)):
        if i % 2 == 0 and s[i] in vowels:
            count += 1
    return count
","
import re

def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    count = 0
    vowels = 'AEIOU'
    for i in range(0, len(s), 2):
        if s[i] in vowels and s[i].isupper():
            count += 1
    return count
","
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    count = 0
    vowels = set('AEIOU')
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count
  ","
import re

def count_upper(s):
    vowels = ['A', 'E', 'I', 'O', 'U']
    chars = [c for i, c in enumerate(s) if i % 2 == 0]
    uppercase_vowels = [c for c in chars if c.upper() in vowels]
    return len(uppercase_vowels)
","
def count_upper(s):
    vowels = 'AEIOU'
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count
","100.0","100.0","100.0","100.0","71.42857142857143","100.0","","","","","",""
"HumanEval/99","
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","
import math

def closest_integer(value):
    num = float(value)
    ceil = math.ceil(num)
    floor = math.floor(num)
    
    if num - floor < ceil - num:
        return floor
    elif ceil - num < num - floor:
        return ceil
    else:
        return ceil if num > 0 else floor
","
import math

def closest_integer(value):
    value = float(value)
    rounded_value = math.floor(value) if value % 1 < 0.5 else math.ceil(value)
    return int(rounded_value)
","
from math import floor, ceil

def closest_integer(value):
    value = float(value)
    upper = ceil(value)
    lower = floor(value)
    
    if abs(value - upper) < abs(value - lower):
        return int(upper)
    else:
        return int(lower)
","
import math

def closest_integer(value):
    value = float(value)
    if value >= 0:
        return math.floor(value + 0.5)
    else:
        return math.ceil(value - 0.5)
","
import math

def closest_integer(value):
    number = float(value)
    int_value = int(number)
    if number - int_value >= 0.5:
        return math.ceil(number)
    elif number - int_value < -0.5:
        return math.floor(number)
    else:
        return int(number)
","
import math

def closest_integer(value):
    value = float(value)
    if value >= 0:
        return math.floor(value + 0.5)
    else:
        return math.ceil(value - 0.5)
","100.0","80.0","80.0","100.0","80.0","100.0","","","","","",""
"HumanEval/100","
def make_a_pile(n):
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","
def make_a_pile(n):
    stones = [n]
    for i in range(n-1):
        if n % 2 == 0:
            n += 2
        else:
            n += 1
        stones.append(n)
    return stones
","
def make_a_pile(n):
    stones = [n]
    for i in range(n - 1):
        if n % 2 == 0:
            n += 2
        else:
            n += 1
        stones.append(n)
    return stones
","
def make_a_pile(n):
    stones = n
    pile = [stones]

    for i in range(n - 1):
        if stones % 2 == 0:
            stones += 1
        else:
            stones += 2
        pile.append(stones)

    return pile
","
def make_a_pile(n):
    stones = [n]
    for i in range(n - 1):
        if n % 2 == 0:
            n += 2
        else:
            n += 1
        stones.append(n)
    return stones
","
def make_a_pile(n):
    pile = [n]
    for i in range(1, n):
        if n % 2 == 0:
            pile.append(n + 2*i)
        else:
            pile.append(n + 2*i + 1)
    return pile
","
from typing import List

def make_a_pile(n: int) -> List[int]:
    pile = [n]
    for i in range(n - 1):
        if n % 2 == 0:
            n += 1
        else:
            n += 2
        pile.append(n)
    return pile
","60.0","60.0","40.0","60.0","60.0","40.0","","","","","",""
"HumanEval/101","
def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
    
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)

","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/102","
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
","
def choose_num(x, y):
    return max([num for num in range(x, y+1) if num % 2 == 0], default=-1)
","
def choose_num(x, y):
    even_nums = [num for num in range(x, y+1) if num % 2 == 0]
    return max(even_nums) if even_nums else -1
","
def choose_num(x, y):
    return max([i for i in range(x, y + 1) if i % 2 == 0] or [-1])
","
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
    largest_even = -1
    for i in range(y, x-1, -1):
        if i % 2 == 0:
            largest_even = i
            break
    return largest_even
","
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
    
    for i in range(y, x - 1, -1):
        if i % 2 == 0:
            return i
    return -1
","
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
    for i in range(y, x - 1, -1):
        if i % 2 == 0:
            return i
    return -1
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/103","
def rounded_avg(n, m):
    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => ""0b11""
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => ""0b1111""
    rounded_avg(20, 33) => ""0b11010""
    """"""
","
from typing import Union

def rounded_avg(n: int, m: int) -> Union[int, str]:
    if n > m:
        return -1
    average = sum(range(n, m+1)) / (m - n + 1)
    rounded_avg = round(average)
    return bin(rounded_avg)
","
def rounded_avg(n, m):
    if n > m:
        return -1
    avg = (n + m) // 2
    return bin(round(avg))

","
from statistics import mean

def rounded_avg(n, m):
    if n > m:
        return -1
    average = round(mean(range(n, m+1)))
    return bin(average)
","
from typing import Union
import math

def rounded_avg(n: int, m: int) -> Union[int, str]:
    return format(round(sum(range(n, m+1))/((m-n)+1), 0), '0b') if n <= m else -1
","
from math import floor

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = (n + m) / 2
    rounded_avg = round(avg)
    return bin(rounded_avg)
","
from typing import Tuple

def rounded_avg(n: int, m: int) -> str:
    if n > m:
        return ""-1""
    
    avg = sum(range(n, m+1)) // (m - n + 1)
    rounded_avg = round(avg)
    
    return bin(rounded_avg)
","100.0","83.33333333333334","100.0","16.666666666666664","100.0","66.66666666666666","","","","","",""
"HumanEval/104","
def unique_digits(x):
    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    def has_even_digit(n: int) -> bool:
        return any(int(digit) % 2 == 0 for digit in str(n))

    return sorted([num for num in x if not has_even_digit(num)])
","
def unique_digits(x):
    def has_even_digit(num):
        return any(int(digit) % 2 == 0 for digit in str(num))
    
    def is_unique(num):
        return not has_even_digit(num)
    
    return sorted(num for num in x if is_unique(num))
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    return sorted(num for num in x if all(int(digit) % 2 != 0 for digit in str(num)))
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])
","
from typing import List

def has_even_digit(num: int) -> bool:
    return any(int(digit) % 2 == 0 for digit in str(num))

def unique_digits(x: List[int]) -> List[int]:
    return sorted([num for num in x if not has_even_digit(num)])
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/105","
def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""
","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    valid_digits = {1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""}

    # Filter out strange numbers and sort the valid digits between 1 and 9
    filtered_digits = sorted(filter(lambda x: 1 <= x <= 9, arr))

    # Replace digits with corresponding names, reverse the list, and return result
    return [valid_digits[digit] for digit in filtered_digits][::-1]
","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    filtered_arr = [num for num in arr if 1 <= num <= 9]
    sorted_arr = sorted(filtered_arr)
    reversed_arr = sorted_arr[::-1]
    num_to_word = {1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""}
    result = [num_to_word[num] for num in reversed_arr]
    return result
","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    digit_name_map = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine""
    }
    
    sorted_digits = sorted(filter(lambda x: 1 <= x <= 9, arr))
    reversed_sorted_digits = sorted_digits[::-1]
    
    return [digit_name_map[d] for d in reversed_sorted_digits]
  ","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    valid_digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]
    filtered_arr = [str(num) for num in arr if num in valid_digits]
    sorted_arr = sorted(filtered_arr)
    reversed_arr = sorted_arr[::-1]
    
    digit_names = [""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine""]
    result = [digit_names[int(num)-1] for num in reversed_arr]
    
    return result
","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    def get_name(digit:int) -> str:
        return {
            1: ""One"",
            2: ""Two"",
            3: ""Three"",
            4: ""Four"",
            5: ""Five"",
            6: ""Six"",
            7: ""Seven"",
            8: ""Eight"",
            9: ""Nine""
        }[digit]
    
    valid_nums = [x for x in arr if 1 <= x <= 9]
    sorted_nums = sorted(valid_nums)
    reversed_nums = sorted_nums[::-1]
    
    return [get_name(num) for num in reversed_nums]
","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    relevant_digits = [str(digit) for digit in sorted(set(filter(lambda x: 1 <= x <= 9, arr)), reverse=True)]
    digit_names = {
        '1': 'One',
        '2': 'Two',
        '3': 'Three',
        '4': 'Four',
        '5': 'Five',
        '6': 'Six',
        '7': 'Seven',
        '8': 'Eight',
        '9': 'Nine'
    }
    return [digit_names[digit] for digit in relevant_digits] if relevant_digits else []
","100.0","100.0","100.0","100.0","100.0","80.0","","","","","",""
"HumanEval/106","
def f(n):
    """""" Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """"""
","
from math import factorial

def f(n):
    return [factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","
from math import factorial

def f(n):
    return [factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","
import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]
","
from math import factorial

def f(n):
    return [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]
","
from math import factorial

def f(n):
    return [factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
  ","
from math import factorial

def f(n):
    return [factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/107","
def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """"""
","
def even_odd_palindrome(n):
    from math import ceil

    even_count = 0
    odd_count = 0

    for i in range(1, n+1):
        num_str = str(i)
        if num_str == num_str[::-1]:
            if int(num_str) % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

    return (even_count, odd_count)
","
from math import isqrt

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0

    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    
    return (even_count, odd_count)
","
from math import isqrt

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    for i in range(1, n + 1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)
","
from typing import Tuple

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    def is_palindrome(num: int) -> bool:
        return str(num) == str(num)[::-1]
    
    even_count = 0
    odd_count = 0
    
    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    
    return even_count, odd_count
","
from math import sqrt

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def is_even(num):
    return num % 2 == 0

def even_odd_palindrome(n):
    count_even = 0
    count_odd = 0
    
    for i in range(1, n+1):
        if is_palindrome(i):
            if is_even(i):
                count_even += 1
            else:
                count_odd += 1
    
    return (count_even, count_odd)
","
def even_odd_palindrome(n):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]
    
    even_count = 0
    odd_count = 0
    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    
    return (even_count, odd_count)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/108","
def count_nums(arr):
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","
from typing import List

def count_nums(arr: List[int]) -> int:
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
    def sum_of_digits(n: int) -> int:
        return sum(int(d) for d in str(abs(n)))
    
    count = 0
    for num in arr:
        if sum_of_digits(num) > 0:
            count += 1
    return count
","
from functools import reduce

def count_nums(arr):
    def sum_digits(num):
        num_str = str(num)
        if num_str[0] == '-':
            return -1 * sum(int(digit) for digit in num_str[1:])
        return sum(int(digit) for digit in num_str)

    return len([num for num in arr if sum_digits(num) > 0])
","
from typing import List

def count_nums(arr: List[int]) -> int:
    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)
","
from typing import List

def count_nums(arr: List[int]) -> int:
    return sum(sum(int(digit) for digit in str(abs(num))) > 0 for num in arr)
","
from typing import List

def count_nums(arr: List[int]) -> int:
    return sum(sum(map(int, str(abs(num)))) > 0 for num in arr)
","
from typing import List

def count_nums(arr: List[int]) -> int:
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
    return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)
","50.0","87.5","50.0","50.0","50.0","50.0","","","","","",""
"HumanEval/109","
def move_one_ball(arr):
    """"""We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """"""
","
def move_one_ball(arr):
    if not arr:
        return True
    
    n = len(arr)
    sorted_arr = sorted(arr)
    
    for i in range(n):
        if arr == sorted_arr:
            return True
        arr.insert(0, arr.pop())
    
    return False
","
from typing import List

def move_one_ball(arr: List[int]) -> bool:
    if not arr:
        return True
    
    n = len(arr)
    sorted_arr = sorted(arr)
    
    for i in range(n):
        if arr == sorted_arr:
            return True
        arr = [arr[-1]] + arr[:-1]
    
    return False
","
from typing import List

def move_one_ball(arr: List[int]) -> bool:
    if not arr:
        return True
    
    sorted_arr = sorted(arr)
    n = len(arr)
    
    for i in range(n):
        if arr == sorted_arr:
            return True
        arr.insert(0, arr.pop())
        
    return False
","
from typing import List

def move_one_ball(arr: List[int]) -> bool:
    if not arr:
        return True

    sorted_arr = sorted(arr)
    n = len(arr)

    for i in range(n):
        if sorted_arr == arr:
            return True
        arr = [arr[-1]] + arr[:-1]

    return False
","
from typing import List

def move_one_ball(arr: List[int]) -> bool:
    if not arr:
        return True
    
    n = len(arr)
    sorted_arr = sorted(arr)
    
    for i in range(n):
        if arr == sorted_arr:
            return True
        arr.insert(0, arr.pop())
    
    return False
","
from typing import List

def move_one_ball(arr: List[int]) -> bool:
    if not arr:
        return True

    sorted_arr = sorted(arr)
    n = len(arr)
    for i in range(n):
        if arr == sorted_arr:
            return True
        arr = [arr[-1]] + arr[:n-1]
        
    return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/110","
def exchange(lst1, lst2):
    """"""In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return ""YES"".
    Otherwise, return ""NO"".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
    It is assumed that the input lists will be non-empty.
    """"""
","
from collections import Counter

def exchange(lst1, lst2):
    lst1_even_count = sum(num % 2 == 0 for num in lst1)
    lst2_even_count = sum(num % 2 == 0 for num in lst2)
    
    return ""YES"" if lst1_even_count >= len(lst1) or lst1_even_count + lst2_even_count >= len(lst1) else ""NO""
","
def exchange(lst1, lst2):
    return ""YES"" if sum(x % 2 for x in lst1) <= sum(x % 2 for x in lst2) else ""NO""
","
from typing import List

def exchange(lst1: List[int], lst2: List[int]) -> str:
    if sum(x % 2 for x in lst1) == 0:
        return ""YES""
    return ""NO""
","
from typing import List

def exchange(lst1: List[int], lst2: List[int]) -> str:
    if sum(x % 2 == 1 for x in lst1) > sum(y % 2 == 1 for y in lst2):
        return ""NO""
    return ""YES""
","
from typing import List

def exchange(lst1: List[int], lst2: List[int]) -> str:
    if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 1 for x in lst2):
        return ""YES""
    return ""NO""
  ","
def exchange(lst1, lst2):
    odds_count = sum(1 for num in lst1 if num % 2 != 0)
    return ""YES"" if odds_count <= len(lst2) else ""NO""
","100.0","57.14285714285714","57.14285714285714","57.14285714285714","57.14285714285714","57.14285714285714","","","","","",""
"HumanEval/111","
def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""
","
def histogram(test):
    from collections import Counter
    
    letters = test.split()
    letter_counts = Counter(letters)
    
    max_count = max(letter_counts.values())
    result = {letter: count for letter, count in letter_counts.items() if count == max_count}
    
    return result
","
from collections import Counter

def histogram(test):
    return dict(Counter(test.split()))
","
from collections import Counter

def histogram(test):
    return dict(Counter(test.split()))
","
from collections import Counter

def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}
    
    """"""
    letters = test.split()
    counts = Counter(letters)
    max_count = max(counts.values()) if counts else 0
    return {letter: count for letter, count in counts.items() if count == max_count}
","
from collections import Counter

def histogram(test):
    return dict(Counter(test.split()))
","
from collections import Counter

def histogram(test):
    return {key: value for key, value in Counter(test.split()).items() if value == max(Counter(test.split()).values())}
  ","87.5","75.0","75.0","100.0","75.0","100.0","","","","","",""
"HumanEval/112","
def reverse_delete(s,c):
    """"""Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = ""abcde"", c = ""ae"", the result should be ('bcd',False)
    For s = ""abcdef"", c = ""b""  the result should be ('acdef',False)
    For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',True)
    """"""
","
from typing import Tuple

def reverse_delete(s: str, c: str) -> Tuple[str, bool]:
    filtered = ''.join(char for char in s if char not in c)
    return (filtered, filtered == filtered[::-1])
","
from typing import Tuple

def reverse_delete(s: str, c: str) -> Tuple[str, bool]:
    s_filtered = ''.join(char for char in s if char not in c)
    return s_filtered, s_filtered == s_filtered[::-1]
","
def reverse_delete(s, c):
    from collections import deque

    filtered_chars = [char for char in s if char not in c]
    result_str = ''.join(filtered_chars)
    is_palindrome = result_str == result_str[::-1]

    return result_str, is_palindrome
","
def reverse_delete(s, c):
    import re
    
    result = ''.join([char for char in s if char not in c])
    is_palindrome = result == result[::-1]
    
    return result, is_palindrome
","
from typing import Tuple

def reverse_delete(s: str, c: str) -> Tuple[str, bool]:
    filtered_str = ''.join(char for char in s if char not in c)
    is_palindrome = filtered_str == filtered_str[::-1]
    return filtered_str, is_palindrome
","
import string

def reverse_delete(s, c):
    def is_palindrome(s):
        return s == s[::-1]
    
    s = ''.join([char for char in s if char not in c])
    return s, is_palindrome(s)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/113","
def odd_count(lst):
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","
def odd_count(lst):
    from collections import Counter

    def count_odd_digits(s):
        return len([c for c in s if int(c) % 2 != 0])

    return [""the number of odd elements {}n the str{}ng {} of the {}nput."".format(count_odd_digits(s), i + 1, i + 1, i + 1) for i, s in enumerate(lst)]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [f""the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}n the str{s.index(s)}ng {s} of the {s.index(s)}nput."" for s in lst]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [f""the number of odd elements {len([c for c in s if int(c)%2!=0])}n the str{s.index(s)+1}ng {s.index(s) + 1} of the {s.index(s)+1}nput."" for s in lst]
","
def odd_count(lst):
    return [""the number of odd elements {}n the str{}ng {} of the {}nput."".format(
        len([digit for digit in s if int(digit) % 2 != 0]),
        len([digit for digit in s if int(digit) % 2 != 0]),
        s,
        s
    ) for s in lst]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [""the number of odd elements "" + str(sum(int(digit) % 2 != 0 for digit in s)) +
            ""n the str"" + str(i) + ""ng "" + str(i) + "" of the "" + str(i) + ""nput."" for i, s in enumerate(lst)]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [f""the number of odd elements {sum(int(digit) % 2 != 0 for digit in s)}{'n' if sum(int(digit) % 2 != 0 for digit in s) == 1 else 'n'} the str{s}ng {s} of the {s}nput."" for s in lst]
","0.0","0.0","0.0","0.0","0.0","0.0","","","","","",""
"HumanEval/114","
def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
","
import sys

def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""

    if not nums:
        return 0

    min_sum = sys.maxsize
    current_sum = 0

    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)

    return min_sum
","
import sys

def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
    min_sum = sys.maxsize
    current_sum = 0

    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)

    return min_sum
  ","
from typing import List

def minSubArraySum(nums: List[int]) -> int:
    minimum_sum = float('inf')
    current_sum = 0

    for num in nums:
        current_sum = min(num, current_sum + num)
        minimum_sum = min(minimum_sum, current_sum)

    return minimum_sum
","
from typing import List

def minSubArraySum(nums: List[int]) -> int:
    min_sum = float('inf')
    current_sum = 0
    
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    
    return min_sum
    ","
from math import inf

def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
    
    ans = inf
    curr_sum = 0
    
    for num in nums:
        curr_sum = min(num, curr_sum + num)
        ans = min(ans, curr_sum)
        
    return ans
","
from sys import maxsize

def minSubArraySum(nums):
    min_sum = maxsize
    current_sum = 0
    
    for i in range(len(nums)):
        current_sum += nums[i]
        min_sum = min(min_sum, current_sum)
        
        if current_sum > 0:
            current_sum = 0
            
    return min_sum
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/115","
def max_fill(grid, capacity):
    import math
    """"""
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""
","
def max_fill(grid, capacity):
    import math
    
    if not grid or not grid[0]:
        return 0
    
    total_fills = 0
    wells = len(grid)
    bucket_fills = [0] * wells
    loop = True

    while loop:
        loop = False
        for i in range(wells):
            for j in range(len(grid[i])):
                if grid[i][j] == 1 and bucket_fills[i] < capacity:
                    loop = True
                    bucket_fills[i] += 1
                    total_fills += 1

    return total_fills
","
import math

def max_fill(grid, capacity):
    total_water = 0
    for row in grid:
        total_water += sum(row)

    return math.ceil(total_water / capacity)
","
import math

def max_fill(grid, capacity):
    total_water = 0
    for row in grid:
        for well in row:
            total_water += well

    buckets_needed = math.ceil(total_water / capacity)
    return buckets_needed
","
import math

def max_fill(grid, capacity):
    total_water = sum(row.count(1) for row in grid)
    return math.ceil(total_water / capacity)
","
import math

def max_fill(grid, capacity):
    total_water = 0
    for row in grid:
        total_water += sum(row)

    buckets_needed = total_water // capacity
    if total_water % capacity != 0:
        buckets_needed += 1

    return buckets_needed
","
import math

def max_fill(grid, capacity):
    total_water = 0
    for row in grid:
        total_water += sum(row)
    
    return math.ceil(total_water / capacity)
","40.0","80.0","80.0","80.0","80.0","80.0","","","","","",""
"HumanEval/116","
def sort_array(arr):
    """"""
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","
from functools import cmp_to_key

def sort_array(arr):
    def compare_bits(x, y):
        bits_x = bin(x).count('1')
        bits_y = bin(y).count('1')
        if bits_x == bits_y:
            return x - y
        return bits_x - bits_y

    return sorted(arr, key=cmp_to_key(compare_bits))
","
from functools import cmp_to_key

def sort_array(arr):
    def count_ones(num):
        return bin(num).count('1')
    
    def custom_sort(a, b):
        count_a = count_ones(a)
        count_b = count_ones(b)
        if count_a == count_b:
            return a - b
        return count_a - count_b
    
    return sorted(arr, key=cmp_to_key(custom_sort))
","
from itertools import chain

def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))
","
import functools

def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))
","
from functools import cmp_to_key

def sort_array(arr):
    def compare(a, b):
        ones_a = bin(a).count('1')
        ones_b = bin(b).count('1')
        if ones_a == ones_b:
            return a - b
        return ones_a - ones_b
    
    return sorted(arr, key=cmp_to_key(compare))
","
from functools import cmp_to_key

def sort_array(arr):
    def count_ones(n):
        return bin(n).count('1')

    def custom_sort(x, y):
        num_ones_x = count_ones(x)
        num_ones_y = count_ones(y)
        if num_ones_x == num_ones_y:
            return x - y
        return num_ones_x - num_ones_y

    return sorted(arr, key=cmp_to_key(custom_sort))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/117","
def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""
","
import re

def select_words(s, n):
    vowels = set(""aeiouAEIOU"")
    
    def count_consonants(word):
        return sum(1 for letter in word if letter not in vowels)
    
    words = re.findall(r'\b\w+\b', s)
    result = [word for word in words if count_consonants(word) == n]
    
    return result
","
from string import ascii_lowercase

def select_words(s, n):
    def count_consonants(word):
        return sum(1 for letter in word.lower() if letter in ascii_lowercase and letter not in 'aeiou')

    words = s.split()
    return [word for word in words if count_consonants(word) == n]
","
import re

def select_words(s, n):
    def count_consonants(word):
        return sum(1 for letter in word if letter.lower() not in 'aeiou')

    words = s.split()
    result = [word for word in words if count_consonants(word) == n]
    return result
","
import re

def select_words(s, n):
    vowels = ""aeiouAEIOU""
    words = s.split()
    result = []
    for word in words:
        consonant_count = len([char for char in word if char.isalpha() and char not in vowels])
        if consonant_count == n:
            result.append(word)
    return result
","
import re

def select_words(s, n):
    def count_consonants(word):
        vowels = ""AEIOUaeiou""
        return sum(1 for letter in word if letter.isalpha() and letter not in vowels)

    words = s.split()
    result = [word for word in words if count_consonants(word) == n]

    return result
","
import string

def select_words(s, n):
    def count_consonants(word):
        return sum(1 for char in word if char.lower() in string.ascii_lowercase and char.lower() not in 'aeiou')

    words = s.split()
    return [word for word in words if count_consonants(word) == n]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/118","
def get_closest_vowel(word):
    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel(""yogurt"") ==> ""u""
    get_closest_vowel(""FULL"") ==> ""U""
    get_closest_vowel(""quick"") ==> """"
    get_closest_vowel(""ab"") ==> """"
    """"""
","
def get_closest_vowel(word):
    vowels = set('aeiouAEIOU')
    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')
    
    for i in range(len(word) - 2, 0, -1):
        if word[i] in vowels and word[i - 1] in consonants and word[i + 1] in consonants:
            return word[i]
    
    return """"
","
def get_closest_vowel(word):
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
    
    for i in range(len(word)-1, 1, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i-2] not in vowels:
            return word[i]
    
    return """"
","
def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    consonants = ""bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ""
    
    word = word.strip(consonants)
    if len(word) <= 2:
        return """"
    
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            return word[i]
    
    return """"
","
def get_closest_vowel(word):
    vowels = set('AEIOUaeiou')
    consonants = set('BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz')
    
    word = word[1:-1]
    closest_vowel = ''
    
    for i in range(len(word) - 1, 0, -1):
        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:
            closest_vowel = word[i]
            break
    
    return closest_vowel
","
from string import ascii_lowercase

def get_closest_vowel(word):
    vowels = set('aeiouAEIOU')
    word = word.strip(ascii_lowercase)
    
    for i in range(len(word) - 1, 0, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i-1].isalpha() and word[i+1].isalpha() and word[i+1] not in vowels:
            return word[i]
    
    return """"
","
def get_closest_vowel(word):
    vowels = 'AEIOUaeiou'
    consonants = 'BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'
    
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:
            return word[i]
    
    return ''
","100.0","53.84615384615385","61.53846153846154","69.23076923076923","53.84615384615385","100.0","","","","","",""
"HumanEval/119","
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","
def match_parens(lst):
    from collections import deque
    
    stack = deque()
    for string in lst:
        for char in string:
            if char == '(':
                stack.append(char)
            else:
                if len(stack) > 0 and stack[-1] == '(':
                    stack.pop()
                else:
                    return 'No'
    
    return 'Yes' if len(stack) == 0 else 'No'
","
def match_parens(lst):
    from collections import deque
    
    stack = deque()
    
    for s in lst:
        for char in s:
            if char == '(':
                stack.append(char)
            else:
                if stack and stack[-1] == '(':
                    stack.pop()
                else:
                    return 'No'
    
    return 'Yes'
","
from collections import deque

def match_parens(lst):
    stack = deque()
    
    for string in lst:
        for char in string:
            if char == '(':
                stack.append(char)
            else:
                if stack and stack[-1] == '(':
                    stack.pop()
                else:
                    stack.append(char)
    
    return 'Yes' if len(stack) == 0 else 'No'
","
from collections import deque

def match_parens(lst):
    def is_good_string(s):
        stack = deque()
        
        for char in s:
            if char == '(':
                stack.append('(')
            elif stack and stack[-1] == '(':
                stack.pop()
            else:
                return False
        
        return len(stack) == 0
    
    str1, str2 = lst
    num_open_parens = str1.count('(') + str2.count('(')
    num_close_parens = str1.count(')') + str2.count(')')
    if num_open_parens == num_close_parens:
        return 'Yes'
    else:
        return 'No'
","
def match_parens(lst):
    from collections import deque
    
    stack = deque()
    
    for paren in lst[0] + lst[1]:
        if paren == '(':
            stack.append(paren)
        elif paren == ')':
            if stack and stack[-1] == '(':
                stack.pop()
            else:
                stack.append(paren)
    
    return 'Yes' if not stack else 'No'
","
from collections import deque

def match_parens(lst):
    stack = deque()
    
    for s in lst:
        for c in s:
            if c == '(':
                stack.append(c)
            else:
                if not stack or stack[-1] != '(':
                    return 'No'
                stack.pop()
    
    return 'Yes' if not stack else 'No'
","75.0","66.66666666666666","75.0","91.66666666666666","75.0","75.0","","","","","",""
"HumanEval/120","
def maximum(arr, k):
    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """"""
","
from typing import List

def maximum(arr: List[int], k: int) -> List[int]:
    return sorted(arr)[-k:]
","
from typing import List

def maximum(arr: List[int], k: int) -> List[int]:
    return sorted(arr)[-k:]
  ","
from typing import List

def maximum(arr: List[int], k: int) -> List[int]:
    return sorted(arr)[:k]
","
from typing import List

def maximum(arr: List[int], k: int) -> List[int]:
    return sorted(arr)[-k:]
","
from typing import List

def maximum(arr: List[int], k: int) -> List[int]:
    return sorted(arr)[-k:]
","
from heapq import heappush, heappop

def maximum(arr, k):
    return sorted(heapq.nlargest(k, arr))
","90.9090909090909","90.9090909090909","45.45454545454545","90.9090909090909","90.9090909090909","0.0","","","","","",""
"HumanEval/121","
def solution(lst):
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """"""
","
from typing import List

def solution(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
","
from typing import List

def solution(lst: List[int]) -> int:
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.""""""
    
    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)
","
from typing import List

def solution(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
","
def solution(lst):
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)
","
from typing import List

def solution(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
","
from typing import List

def solution(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
","14.285714285714285","100.0","14.285714285714285","100.0","14.285714285714285","14.285714285714285","","","","","",""
"HumanEval/122","
def add_elements(arr, k):
    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(x for x in arr[:k] if 10 <= x < 100)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""
    return sum(x for x in arr[:k] if 10 <= x <= 99)
  ","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(x for x in arr[:k] if 10 <= x <= 99)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= num <= 99)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= abs(num) < 100)
","20.0","20.0","20.0","20.0","20.0","20.0","","","","","",""
"HumanEval/123","
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
","
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
    collatz_seq = [n]
    while n != 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        collatz_seq.append(n)

    return sorted([num for num in collatz_seq if num % 2 != 0])
","
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
    
    def collatz_sequence(num):
        values = [num]
        while num > 1:
            if num % 2 == 0:
                num //= 2
            else:
                num = 3 * num + 1
            values.append(num)
        return values
    
    odd_numbers = set()
    for i in range(1, n+1):
        collatz_nums = collatz_sequence(i)
        odd_numbers.update(filter(lambda x: x % 2 == 1, collatz_nums))
    
    return sorted(list(odd_numbers))
","
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
    def collatz_sequence(num):
        seq = [num]
        while num != 1:
            if num % 2 == 0:
                num = num // 2
            else:
                num = 3 * num + 1
            seq.append(num)
        return seq

    collatz = collatz_sequence(n)
    odd_numbers = [num for num in collatz if num % 2 != 0]
    return sorted(odd_numbers)
","
from typing import List

def get_odd_collatz(n: int) -> List[int]:
    def collatz_sequence(num):
        seq = [num]
        while num > 1:
            if num % 2 == 0:
                num = num // 2
            else:
                num = 3 * num + 1
            seq.append(num)
        return seq
    
    collatz_numbers = collatz_sequence(n)
    odd_numbers = sorted(list(set([num for num in collatz_numbers if num % 2 != 0])))
    return odd_numbers
","
def get_odd_collatz(n):
    collatz_seq = [n]
    while n!=1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3*n + 1
        collatz_seq.append(n)
    return sorted(set(filter(lambda x: x % 2 != 0, collatz_seq)))

","
def get_odd_collatz(n):
    odd_numbers = set()
    def collatz(num):
        while num != 1:
            if num % 2 == 0:
                num = num // 2
            else:
                odd_numbers.add(num)
                num = num * 3 + 1
        odd_numbers.add(1)
    
    collatz(n)
    return sorted(list(odd_numbers))
","100.0","25.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/124","
def valid_date(date):
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""
","
from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False
","
import re

def valid_date(date):
    if not isinstance(date, str):
        return False

    format_regex = r'^((0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\d{4})$'
    if not re.match(format_regex, date):
        return False

    month, day, year = map(int, date.split('-'))
    if (month in [1, 3, 5, 7, 8, 10, 12] and (day < 1 or day > 31)) or \
       (month in [4, 6, 9, 11] and (day < 1 or day > 30)) or \
       (month == 2 and (day < 1 or day > 29)) or \
       (month < 1 or month > 12):
        return False

    return True
  ","
import re

def valid_date(date):
    if not re.match(r'^(0[1-9]|1[0-2])-(0[1-9]|1\d|2\d|3[01])-\d{4}$', date):
        return False

    month, day, year = map(int, date.split('-'))

    if month in [1, 3, 5, 7, 8, 10, 12]:
        if day < 1 or day > 31:
            return False
    elif month in [4, 6, 9, 11]:
        if day < 1 or day > 30:
            return False
    elif month == 2:
        if day < 1 or day > 29:
            return False
    else:
        return False

    return True
","
import re

def valid_date(date):
    if not re.match(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\d{4})$', date):
        return False

    month, day, year = map(int, date.split('-'))

    if month == 2:
        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
            if day < 1 or day > 29:
                return False
        else:
            if day < 1 or day > 28:
                return False
    elif month in [4, 6, 9, 11]:
        if day < 1 or day > 30:
            return False
    else:
        if day < 1 or day > 31:
            return False

    return True
","
import re

def valid_date(date):
    m = re.match(r'^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-\d{4}$', date)
    if not m:
        return False
    
    month, day, year = map(int, date.split('-'))
    
    if month in [4, 6, 9, 11]:
        if day > 30:
            return False
    elif month == 2:
        if day > 29 or (day == 29 and (year % 4 != 0 or (year % 100 == 0 and year % 400 != 0))):
            return False
    else:
        if day > 31:
            return False
        
    return True
","
def valid_date(date):
    import re
    pattern = r""^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\d{4}$""
    if re.match(pattern, date):
        month, day, year = map(int, date.split('-'))
        if month in [1, 3, 5, 7, 8, 10, 12]:
            return 1 <= day <= 31
        elif month in [4, 6, 9, 11]:
            return 1 <= day <= 30
        elif month == 2:
            if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
                return 1 <= day <= 29
            else:
                return 1 <= day <= 28
    return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/125","
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","
def split_words(txt):
    from string import ascii_lowercase
    words = txt.split()
    
    if len(words) > 1:
        return words
    elif "","" in txt:
        return txt.split("","")
    else:
        return sum(1 for letter in txt if letter.islower() and ascii_lowercase.index(letter) % 2 != 0)
","
import string

def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
    words = txt.split()
    if len(words) > 1:
        return words
    elif ',' in txt:
        return txt.split(',')
    else:
        alphabet = string.ascii_lowercase
        count = 0
        for char in txt:
            if char.islower() and alphabet.index(char) % 2 != 0:
                count += 1
        return count
  ","
import string

def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
    words = txt.split()
    if len(words) == 1:
        if ',' in txt:
            words = txt.split(',')
        else:
            count = sum(1 for letter in txt if letter.islower() and ord(letter) % 2 != 0)
            return count
    return words
","
import re

def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''

    words = re.split('[\s,]', txt)
    
    if len(words) == 1 and words[0] == txt:
        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)
    
    return words
","
import string

def split_words(txt):
    if ' ' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.split(',')
    else:
        count = 0
        for char in txt:
            if char.islower() and ord(char) % 2 == 1:
                count += 1
        return count
","
import string

def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
    
    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.split("","")
    else:
        return sum(1 for char in txt if char.islower() and ord('a') % 2 == 1)
","100.0","100.0","62.5","50.0","75.0","62.5","","","","","",""
"HumanEval/126","
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
","
from collections import Counter

def is_sorted(lst):
    counts = Counter(lst)
    
    for num in lst:
        if counts[num] > 1 or sorted(lst) != lst:
            return False
    return True
","
from collections import Counter

def is_sorted(lst):
    count = Counter(lst)
    if any(val > 1 for val in count.values()):
        return False
    return lst == sorted(lst)
","
from collections import Counter

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.
    '''
    if not all(isinstance(num, int) for num in lst):
        return False
    
    if any(cnt > 1 for cnt in Counter(lst).values()):
        return False
    
    return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1)
","
from collections import Counter

def is_sorted(lst):
    if any(v > 1 for k, v in Counter(lst).items()):
        return False
    return lst == sorted(set(lst))
  ","
from collections import Counter

def is_sorted(lst):
    count = Counter(lst)
    if any(val > 1 for val in count.values()):
        return False
    return lst == sorted(lst)
","
from collections import Counter

def is_sorted(lst):
    counts = Counter(lst)
    if any(count > 1 for count in counts.values()):
        return False
    return lst == sorted(lst)
","92.3076923076923","92.3076923076923","0","92.3076923076923","92.3076923076923","92.3076923076923","","","  File ""<string>"", line 16
    return all(lst[i] <= lst[i+1] for i in range(len(lst) - 1)
              ^
SyntaxError: '(' was never closed
","","",""
"HumanEval/127","
def intersection(interval1, interval2):
    """"""You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
    """"""
","
from sympy import isprime

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    
    if max(start1, start2) <= min(end1, end2):
        # Calculate the length of the intersection
        intersect_start = max(start1, start2)
        intersect_end = min(end1, end2)
        intersect_length = intersect_end - intersect_start + 1
        
        if intersect_length > 0 and isprime(intersect_length):
            return ""YES""
    
    return ""NO""
","
from sympy import isprime

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    
    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)
    
    if intersection_start > intersection_end:
        return ""NO""
    
    intersection_length = intersection_end - intersection_start + 1
    
    if isprime(intersection_length):
        return ""YES""
    else:
        return ""NO""
","
from math import sqrt

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    
    start_inter = max(start1, start2)
    end_inter = min(end1, end2)
    
    if start_inter > end_inter:
        return ""NO""
    
    if is_prime(end_inter - start_inter + 1):
        return ""YES""
    else:
        return ""NO""

","
from math import sqrt

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2

    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)

    if intersection_start > intersection_end:
        return ""NO""

    intersection_length = intersection_end - intersection_start + 1

    return ""YES"" if is_prime(intersection_length) else ""NO""
","
from math import sqrt

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    
    if start1 > end2 or start2 > end1:
        return ""NO""
    
    intersect_start = max(start1, start2)
    intersect_end = min(end1, end2)
    
    intersect_length = intersect_end - intersect_start + 1
    
    if is_prime(intersect_length):
        return ""YES""
    else:
        return ""NO""
","
from sympy import isprime

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2

    if max(start1, start2) <= min(end1, end2):
        intersection_length = max(0, min(end1, end2) - max(start1, start2) + 1)
        if isprime(intersection_length):
            return ""YES""
    return ""NO""
","75.0","75.0","75.0","75.0","75.0","75.0","","","","","",""
"HumanEval/128","
def prod_signs(arr):
    """"""
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","
def prod_signs(arr):
    if not arr:
        return None
    product_signs = 1
    sum_magnitudes = 0
    for num in arr:
        if num > 0:
            product_signs *= 1
        elif num < 0:
            product_signs *= -1
        else:
            product_signs *= 0
        sum_magnitudes += abs(num)

    return product_signs * sum_magnitudes
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None
    
    prod = 1
    sum_magnitude = 0
    for num in arr:
        prod *= (1 if num > 0 else -1) if num != 0 else 0
        sum_magnitude += abs(num)
    
    return prod * sum_magnitude
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None
    
    sign_product = 1
    magnitude_sum = 0
    
    for num in arr:
        if num > 0:
            sign_product *= 1
            magnitude_sum += num
        elif num < 0:
            sign_product *= -1
            magnitude_sum += abs(num)
    
    return sign_product * magnitude_sum
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None

    product = 1
    total_sum = 0

    for num in arr:
        sign = 0 if num == 0 else 1 if num > 0 else -1
        product *= sign
        total_sum += abs(num)

    return product * total_sum
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None
    product_signs = 1
    sum_magnitudes = 0
    for num in arr:
        if num > 0:
            product_signs *= 1
            sum_magnitudes += num
        elif num < 0:
            product_signs *= -1
            sum_magnitudes += abs(num)
        else:
            product_signs *= 0
    return product_signs * sum_magnitudes
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None
    
    sum_magnitude = sum(map(abs, arr))
    product_signs = 1 if all(n >= 0 for n in arr) else -1
    
    return sum_magnitude * product_signs
","100.0","100.0","75.0","100.0","100.0","50.0","","","","","",""
"HumanEval/129","
def minPath(grid, k):
    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""
","
from heapq import *
def minPath(grid, k):
    heap = [(grid[x][y], x, y, [grid[x][y]]) for x in range(len(grid)) for y in range(len(grid[0]))]
    heapify(heap)
    while k:
        val, x, y, path = heappop(heap)
        k -= 1
        for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)):
            if 0 <= x + dx < len(grid) and 0 <= y + dy < len(grid[0]):
                heappush(heap, (grid[x + dx][y + dy], x + dx, y + dy, path + [grid[x + dx][y + dy]]))
    return path
","
from itertools import product

def minPath(grid, k):
    def dfs(path):
        if len(path) == k:
            return path

        current_value = path[-1]
        next_positions = [(x, y) for x, y in ((-1, 0), (1, 0), (0, -1), (0, 1)) if 0 <= x + path[-1][0] < len(grid) and 0 <= y + path[-1][1] < len(grid[0])]
        
        next_positions.sort(key=lambda pos: grid[pos[0]][pos[1]])

        for pos in next_positions:
            if pos not in path:
                new_path = dfs(path + [pos])
                if new_path:
                    return new_path

    for row_idx, col_idx in product(range(len(grid)), repeat=2):
        path = dfs([(row_idx, col_idx)])
        if path:
            return [grid[pos[0]][pos[1]] for pos in path]
","
import heapq

def minPath(grid, k):
    row, col = len(grid), len(grid[0])
    visited = set()
    min_heap = [(grid[i][j], 0, i, j, [grid[i][j]]) for i in range(row) for j in range(col)]

    while min_heap:
        val, steps, i, j, path = heapq.heappop(min_heap)

        if steps == k:
            return path

        visited.add((i, j))

        for x, y in [(i+1,j), (i-1,j), (i,j+1), (i,j-1)]:
            if 0 <= x < row and 0 <= y < col and (x, y) not in visited:
                heapq.heappush(min_heap, (grid[x][y], steps+1, x, y, path + [grid[x][y]]))
","
from heapq import heappush, heappop

def minPath(grid, k):
    N = len(grid)
    seen = set()
    heap = [(grid[i][j], [grid[i][j]], i, j) for i in range(N) for j in range(N)]
    heapify(heap)
    
    while heap:
        val, path, i, j = heappop(heap)
        if len(path) == k:
            return path
        
        for r, c in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:
            if 0 <= r < N and 0 <= c < N and (r, c) not in seen:
                heappush(heap, (grid[r][c], path + [grid[r][c]], r, c))
                seen.add((r, c))
","
import heapq

def minPath(grid, k):
    pq = [(grid[i][0], i, 0) for i in range(len(grid))]  # Initialize priority queue with first column values
    heapq.heapify(pq)
    seen = set((i, 0) for i in range(len(grid)))  # Track visited cells
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # Define possible directions
    
    while k > 0:
        val, r, c = heapq.heappop(pq)
        k -= 1
        
        if k == 0:
            return [val]
        
        for dr, dc in directions:
            nr, nc = r + dr, c + dc
            if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (nr, nc) not in seen:
                seen.add((nr, nc))
                heapq.heappush(pq, (grid[nr][nc], nr, nc))
  ","
from heapq import heappush, heappop
from collections import deque

def minPath(grid, k):
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    N = len(grid)
    pq = [(grid[i][j], i, j, [(i, j)]) for i in range(N) for j in range(N)]
    visited = [[False] * N for _ in range(N)]

    while pq:
        val, x, y, path = heappop(pq)
        if len(path) == k:
            return [grid[i][j] for i, j in path]
        if visited[x][y]:
            continue

        visited[x][y] = True
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < N and 0 <= ny < N and not visited[nx][ny]:
                new_path = path + [(nx, ny)]
                heappush(pq, (grid[nx][ny], nx, ny, new_path))
","36.36363636363637","0.0","0.0","0.0","0.0","0.0","","","","","",""
"HumanEval/130","
def tri(n):
    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """"""
","
def tri(n):
    if n == 0:
        return [0]
    elif n == 1:
        return [1, 1]
    elif n == 2:
        return [1, 1, 1]
    else:
        tribonacci = [0, 1, 1]
        for i in range(3, n + 1):
            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])
        return tribonacci
","
def tri(n):
    if n == 0:
        return [0]
    elif n == 1:
        return [0, 1]
    elif n == 2:
        return [0, 1, 1]
    else:
        result = [0, 1, 1]
        for i in range(3, n + 1):
            tri_n = result[i - 1] + result[i - 2] + result[i - 3]
            result.append(tri_n)
        return result
","
def tri(n):
    if n == 0:
        return []
    if n == 1:
        return [3]
    
    tribonacci = [1, 1, 1]
    for i in range(3, n+1):
        if i % 2 == 0:
            tribonacci.append(1 + i // 2)
        else:
            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])
    
    return tribonacci
","
def tri(n):
    if n == 0:
        return [0]
    if n == 1:
        return [1, 0]

    res = [0] * (n + 1)
    res[1] = 1
    res[2] = 1

    for i in range(3, n + 1):
        res[i] = res[i - 1] + res[i - 2] + res[i - 3]

    return res
","
def tri(n):
    sequence = [1, 3]
    if n == 0:
        return []
    elif n == 1:
        return [1]
    elif n == 2:
        return sequence
    for i in range(2, n+1):
        if i % 2 == 0:
            sequence.append(1 + i // 2)
        else:
            sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i - 1 // 2])
    return sequence
","
def tri(n):
    res = [1, 3]
    if n == 0:
        return [0]
    elif n == 1:
        return [1]
    elif n == 2:
        return [1, 3]
    
    for i in range(2, n + 1):
        if i % 2 == 0:
            res.append(res[i - 1] + i // 2)
        else:
            res.append(res[i - 1] + res[i - 2] + res[i + 1])
    
    return res

# Example usage:
print(tri(3))  # Output: [1, 3, 2, 8]
","0.0","0.0","0.0","0.0","0.0","0","","","","","","Traceback (most recent call last):
  File ""<string>"", line 20, in <module>
  File ""<string>"", line 15, in tri
IndexError: list index out of range
"
"HumanEval/131","
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
","
def digits(n):
    from math import prod
    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]
    return prod(odd_digits) if odd_digits else 0
","
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    import functools
    return functools.reduce(lambda x, y: x*y, [int(digit) for digit in str(n) if int(digit) % 2 != 0], 1)
","
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    product = 1
    for digit in str(n):
        if int(digit) % 2 != 0:
            product *= int(digit)
    return product
","
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    product = 1
    for digit in str(n):
        digit = int(digit)
        if digit % 2 != 0:
            product *= digit
    return product
","
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    
    from math import prod
    
    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]
    
    if not odd_digits:
        return 0
    
    return prod(odd_digits)
","
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    import math
    result = 1
    for digit in map(int, str(n)):
        if digit % 2 != 0:
            result *= digit
    return result
","100.0","85.71428571428571","85.71428571428571","85.71428571428571","100.0","85.71428571428571","","","","","",""
"HumanEval/132","
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
","
def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack:
            stack.pop()
    return len(stack) != 0

","
def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack:
            stack.pop()
    return len(stack) != 0
","
def is_nested(string):
    open_brackets = 0

    for symbol in string:
        if symbol == '[':
            open_brackets += 1
        elif symbol == ']':
            open_brackets -= 1
        
        if open_brackets < 0:
            return True

    return False
","
def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append('[')
        elif char == ']' and len(stack) > 0:
            stack.pop()
    return len(stack) < len(string) // 2

","
def is_nested(string):
    opening_brackets = []
    nested_found = False
    
    for bracket in string:
        if bracket == '[':
            opening_brackets.append(bracket)
        elif bracket == ']' and len(opening_brackets) > 0:
            opening_brackets.pop()
            if len(opening_brackets) > 0:
                nested_found = True

    return nested_found
","
def is_nested(string):
    open_brackets = []
    for bracket in string:
        if bracket == '[':
            open_brackets.append(bracket)
        elif bracket == ']' and open_brackets:
            open_brackets.pop()
    return len(open_brackets) < len(string)//2 and len(open_brackets) > 0
","50.0","50.0","35.714285714285715","57.14285714285714","85.71428571428571","64.28571428571429","","","","","",""
"HumanEval/133","

def sum_squares(lst):
    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """"""
","
import math

def sum_squares(lst):
    return sum(math.ceil(x)**2 for x in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(num)**2 for num in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(num) ** 2 for num in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(num)**2 for num in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(x) ** 2 for x in lst)
  ","
import math

def sum_squares(lst):
    return sum(math.ceil(num) ** 2 for num in lst)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/134","
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") ➞ False
    check_if_last_char_is_a_letter(""apple pi e"") ➞ True
    check_if_last_char_is_a_letter(""apple pi e "") ➞ False
    check_if_last_char_is_a_letter("""") ➞ False 
    '''
","
import re

def check_if_last_char_is_a_letter(txt):
    return bool(re.match(r'^.*\b.?[a-zA-Z]\b[^\w]*$', txt))
","
import re

def check_if_last_char_is_a_letter(txt):
    if txt:
        last_char = txt[-1]
        if re.match(r""[a-zA-Z]"", last_char) and not re.search(r""\b\w+\b"", txt):
            return True
    return False
","
import re

def check_if_last_char_is_a_letter(txt):
    return bool(re.search(r'\b[a-zA-Z]\b', txt))
","
import string

def check_if_last_char_is_a_letter(txt):
    if txt and txt[-1].isalpha() and txt[-1] not in string.ascii_letters:
        return True
    return False
","
import re

def check_if_last_char_is_a_letter(txt):
    return bool(re.match(r'.*[^a-zA-Z]\s?(\b\w{1}\b)\s*$', txt))
  ","
import string

def check_if_last_char_is_a_letter(txt):
    if not txt:
        return False

    last_char = txt.strip()[-1]
    if last_char.isalpha():
        if len(txt.strip()) == 1:
            return True
        elif txt[-2] == ' ':
            return True
        else:
            return False
    else:
        return False
","80.0","80.0","80.0","80.0","60.0","100.0","","","","","",""
"HumanEval/135","
def can_arrange(arr):
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    max_index = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            max_index = i - 1
    return max_index
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    max_index = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            max_index = i - 1
    return max_index
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    max_index = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            max_index = i-1
    
    return max_index
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.
    
    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""
    largest_index = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            largest_index = i-1
    return largest_index
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    return next((i for i in reversed(range(1, len(arr))) if arr[i] < arr[i-1]), -1)
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    reversed_arr = arr[::-1]
    for i in range(len(reversed_arr) - 1):
        if reversed_arr[i + 1] > reversed_arr[i]:
            return len(arr) - 1 - i
    return -1
","40.0","40.0","40.0","40.0","100.0","100.0","","","","","",""
"HumanEval/136","
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","
from typing import List, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[int, int]:
    negative_integers = [num for num in lst if num < 0]
    positive_integers = [num for num in lst if num > 0]
    
    largest_negative = max(negative_integers) if negative_integers else None
    smallest_positive = min(positive_integers) if positive_integers else None
    
    return (largest_negative, smallest_positive)
","
from typing import List, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[int, int]:
    negatives = [num for num in lst if num < 0]
    positives = [num for num in lst if num > 0]

    largest_negative = max(negatives) if negatives else None
    smallest_positive = min(positives) if positives else None

    return (largest_negative, smallest_positive)
","
from typing import List, Optional

def largest_smallest_integers(lst: List[int]) -> tuple[Optional[int], Optional[int]]:
    negatives = [num for num in lst if num < 0]
    positives = [num for num in lst if num > 0]

    largest_negative = max(negatives) if negatives else None
    smallest_positive = min(positives) if positives else None

    return largest_negative, smallest_positive
","
def largest_smallest_integers(lst):
    negative_integers = [num for num in lst if num < 0]
    positive_integers = [num for num in lst if num > 0]
    
    if not negative_integers:
        largest_negative = None
    else:
        largest_negative = max(negative_integers)
    
    if not positive_integers:
        smallest_positive = None
    else:
        smallest_positive = min(positive_integers)
    
    return (largest_negative, smallest_positive)
","
from typing import List, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[int, int]:
    negatives = [num for num in lst if num < 0]
    positives = [num for num in lst if num > 0]

    largest_negative = max(negatives) if negatives else None
    smallest_positive = min(positives) if positives else None

    return (largest_negative, smallest_positive)
","
def largest_smallest_integers(lst):
    negative_integers = [num for num in lst if num < 0]
    positive_integers = [num for num in lst if num > 0]

    if not negative_integers:
        largest_negative = None
    else:
        largest_negative = max(negative_integers)

    if not positive_integers:
        smallest_positive = None
    else:
        smallest_positive = min(positive_integers)

    return (largest_negative, smallest_positive)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/137","
def compare_one(a, b):
    """"""
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, ""2,3"") ➞ ""2,3""
    compare_one(""5,1"", ""6"") ➞ ""6""
    compare_one(""1"", 1) ➞ None
    """"""
","
def compare_one(a, b):
    def convert_to_float(value):
        if isinstance(value, str):
            value = value.replace("","", ""."")
        return float(value)

    a_float = convert_to_float(a)
    b_float = convert_to_float(b)

    if a_float > b_float:
        return a
    elif b_float > a_float:
        return b
    else:
        return None
","
def compare_one(a, b):
    import math

    def get_real_num(s):
        try:
            return int(s)
        except ValueError:
            try:
                return float(s.replace(',', '.'))
            except ValueError:
                pass
        return s

    a = get_real_num(a)
    b = get_real_num(b)

    if isinstance(a, str) or isinstance(b, str):
        return b if isinstance(b, str) else a
    elif a > b:
        return a
    elif b > a:
        return b
    else:
        return None
","
from typing import Union

def compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:
    if isinstance(a, (int, float)) and isinstance(b, (int, float)):
        if a > b:
            return a
        elif a < b:
            return b
    elif isinstance(a, (str, float)) and isinstance(b, (str, float)):
        a_num = float(a.replace(',', '.')) if isinstance(a, str) else a
        b_num = float(b.replace(',', '.')) if isinstance(b, str) else b
        if a_num > b_num:
            return a
        elif a_num < b_num:
            return b
    return None
","
from typing import Union

def compare_one(a: Union[int, float, str], b: Union[int, float, str]):
    def parse_real_num(num_str: str) -> float:
        num_str = num_str.replace(',', '.')
        try:
            return float(num_str)
        except ValueError:
            return None
    
    if isinstance(a, str):
        a = parse_real_num(a)
    if isinstance(b, str):
        b = parse_real_num(b)
    
    if a is None or b is None:
        return None
    elif a > b:
        return a
    elif b > a:
        return b
    else:
        return None
","
from typing import Union

def compare_one(a: Union[int, float, str], b: Union[int, float, str]):
    def get_number(s: str) -> Union[int, float]:
        if ',' in s:
            return float(s.replace(',', '.'))
        return int(s)
    
    if isinstance(a, int) and isinstance(b, int):
        if a == b:
            return None
        return max(a, b)
    elif isinstance(a, (int, float)) or isinstance(b, (int, float)):
        a_num = get_number(str(a))
        b_num = get_number(str(b))
        if a_num == b_num:
            return None
        return str(max(a_num, b_num))

print(compare_one(1, 2.5))  # ➞ 2.5
print(compare_one(1, ""2,3""))  # ➞ ""2,3""
print(compare_one(""5,1"", ""6""))  # ➞ ""6""
print(compare_one(""1"", 1))  # ➞ None
  ","
def compare_one(a, b):
    def parse_number(x):
        if isinstance(x, int) or isinstance(x, float):
            return x
        elif isinstance(x, str):
            x = x.replace(',', '.')  # Convert comma to dot for parsing floats
            try:
                return float(x)
            except ValueError:
                return x

    a = parse_number(a)
    b = parse_number(b)

    if a is None or b is None:
        return None
    elif a > b:
        return a
    elif b > a:
        return b
    else:
        return None
","100.0","50.0","87.5","62.5","0","62.5","","","","","Traceback (most recent call last):
  File ""<string>"", line 21, in <module>
  File ""<string>"", line 16, in compare_one
  File ""<string>"", line 8, in get_number
ValueError: invalid literal for int() with base 10: '2.5'
",""
"HumanEval/138","
def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""
","
from itertools import combinations_with_replacement

def is_equal_to_sum_even(n):
    return any(sum(combo) == n and all(num % 2 == 0 for num in combo) for combo in combinations_with_replacement(range(2, n, 2), 4)
","
def is_equal_to_sum_even(n):
    return n % 4 == 0 and n > 0

","
from itertools import combinations_with_replacement

def is_equal_to_sum_even(n):
    for combo in combinations_with_replacement(range(2, n//2+1, 2), 4):
        if sum(combo) == n:
            return True
    return False
","
def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""
    
    if n % 2 != 0 or n <= 0:
        return False
    
    for i in range(1, n//2 + 1):
        for j in range(i, n//2 + 1):
            for k in range(j, n//2 + 1):
                for l in range(k, n//2 + 1):
                    if i + j + k + l == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0 and l % 2 == 0:
                        return True
    return False
","
from itertools import combinations_with_replacement

def is_equal_to_sum_even(n):
    for combo in combinations_with_replacement(range(2, n, 2), 4):
        if sum(combo) == n:
            return True
    return False
","
from itertools import combinations_with_replacement

def is_equal_to_sum_even(n):
    even_nums = list(range(2, n+1, 2))
    for comb in combinations_with_replacement(even_nums, 4):
        if sum(comb) == n:
            return True
    return False
","0","75.0","100.0","100.0","100.0","100.0","  File ""<string>"", line 5
    return any(sum(combo) == n and all(num % 2 == 0 for num in combo) for combo in combinations_with_replacement(range(2, n, 2), 4)
              ^
SyntaxError: '(' was never closed
","","","","",""
"HumanEval/139","
def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","
from math import factorial

def special_factorial(n):
    product = 1
    for i in range(1, n+1):
        product *= factorial(i)
    return product
","
from math import factorial

def special_factorial(n):
    product = 1
    for i in range(1, n+1):
        product *= factorial(i)
    return product
","
import math

def special_factorial(n):
    if n <= 0:
        return None
    
    result = 1
    for i in range(1, n+1):
        result *= math.factorial(i)
    
    return result
","
import math

def special_factorial(n):
    if n == 0:
        return 1
    result = 1
    for i in range(1, n+1):
        sub_result = 1
        for j in range(1, i+1):
            sub_result *= math.factorial(j)
        result *= sub_result
    return result
","
import math

def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
    return math.prod(math.factorial(i) for i in range(1, n+1))
","
from math import factorial

def special_factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= factorial(i)
    return result

","100.0","100.0","100.0","25.0","100.0","100.0","","","","","",""
"HumanEval/140","
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
","
def fix_spaces(text):
    import re
    text = re.sub(r'\s{2,}', '-', text)
    text = text.replace(' ', '_')
    return text
","
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 

    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
    import re
    return re.sub(r'\s{3,}', '-', text.replace(' ', '_'))
","
import re

def fix_spaces(text):
    return re.sub(r'\s{3,}', '-', re.sub(r'\s{2}', '_', text.replace(' ', '_'))
","
import re

def fix_spaces(text):
    return re.sub(r'\s{3,}', '-', re.sub(r'\s{2}', '_', text.replace(' ', '_')))
","
import re

def fix_spaces(text):
    pattern = ' {2,}'
    underscored_text = text.replace(' ', '_')
    clean_text = re.sub(pattern, '-', underscored_text)
    return clean_text

","
import re

def fix_spaces(text):
    return re.sub(r'\s{3,}', '-', re.sub(r'\s{2}', '_', text.replace(' ', '_'))

","80.0","60.0","0","60.0","60.0","0","","","  File ""<string>"", line 5
    return re.sub(r'\s{3,}', '-', re.sub(r'\s{2}', '_', text.replace(' ', '_'))
                 ^
SyntaxError: '(' was never closed
","","","  File ""<string>"", line 5
    return re.sub(r'\s{3,}', '-', re.sub(r'\s{2}', '_', text.replace(' ', '_'))
                 ^
SyntaxError: '(' was never closed
"
"HumanEval/141","
def file_name_check(file_name):
    """"""Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
    """"""
","
import re

def file_name_check(file_name):
    if not re.match(r'^[a-zA-Z][a-zA-Z0-9]*\.[txt|exe|dll]$', file_name):
        return 'No'
    num_digits = len([char for char in file_name if char.isdigit()])
    if num_digits > 3:
        return 'No'
    return 'Yes'
","
import re

def file_name_check(file_name):
    if len(re.findall(r'\d', file_name)) > 3:
        return 'No'
    if file_name.count('.') != 1:
        return 'No'
    file_parts = file_name.split('.')
    if not file_parts[0] or not file_parts[0][0].isalpha():
        return 'No'
    valid_extensions = ['txt', 'exe', 'dll']
    if file_parts[1] not in valid_extensions:
        return 'No'
    return 'Yes'
","
import re

def file_name_check(file_name):
    regex = r""^[a-zA-Z][a-zA-Z0-9]*[a-zA-Z]?\.(txt|exe|dll)$""
    
    if re.match(regex, file_name):
        return 'Yes'
    else:
        return 'No'
","
import re

def file_name_check(file_name):
    if not re.match(r'^[a-zA-Z][^0-9]*\.(txt|exe|dll)$', file_name) or file_name.count('.') != 1 or file_name.count(digit) > 3:
        return 'No'
    return 'Yes'
","
import re

def file_name_check(file_name):
    if not re.match(r'^[a-zA-Z][a-zA-Z0-9]*\.(txt|exe|dll)$', file_name):
        return 'No'
    if len(re.findall(r'\d', file_name)) > 3:
        return 'No'
    return 'Yes'
","
import re

def file_name_check(file_name):
    if len(re.findall(r'\d', file_name)) > 3:
        return 'No'
    if file_name.count('.') != 1:
        return 'No'
    name, extension = file_name.split('.')
    if not name or not name[0].isalpha():
        return 'No'
    if extension not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'
","73.07692307692307","100.0","84.61538461538461","73.07692307692307","88.46153846153845","100.0","","","","","",""
"HumanEval/142","


def sum_squares(lst):
    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""
","
from typing import List

def sum_squares(lst: List[int]) -> int:
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))
","
from typing import List

def sum_squares(lst: List[int]) -> int:
    return sum(num**2 if idx % 3 == 0 else num**3 if idx % 4 == 0 else num for idx, num in enumerate(lst))
","
def sum_squares(lst):
    return sum([(num ** 2 if i % 3 == 0 else num ** 3 if i % 4 == 0 and i % 3 != 0 else num) for i, num in enumerate(lst)])
","
from typing import List

def sum_squares(lst: List[int]) -> int:
    return sum(x ** 2 if i % 3 == 0 else x ** 3 if i % 4 == 0 else x for i, x in enumerate(lst))
","
from typing import List

def sum_squares(lst: List[int]) -> int:
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 and i % 3 != 0 else x for i, x in enumerate(lst))
","
def sum_squares(lst):
    return sum([(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x) for i, x in enumerate(lst)])
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/143","
def words_in_sentence(sentence):
    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """"""
","
import math

def words_in_sentence(sentence):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True
    
    def get_word_length(word):
        return len(word)
    
    words = sentence.split()
    prime_words = [word for word in words if is_prime(get_word_length(word))]
    
    return "" "".join(prime_words)
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False

    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6

    return True

def words_in_sentence(sentence):
    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return ' '.join(prime_words)
","
from sympy import isprime

def words_in_sentence(sentence):
    words = sentence.split()
    prime_words = [word for word in words if isprime(len(word))]
    return ' '.join(prime_words)
","
import sympy

def is_prime(n):
    return sympy.isprime(n)

def words_in_sentence(sentence):
    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return "" "".join(prime_words)
","
import math

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def words_in_sentence(sentence):
    def find_primes(words):
        return [word for word in words.split() if is_prime(len(word))]
    
    return ' '.join(find_primes(sentence))
","
import math

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def words_in_sentence(sentence):
    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return ' '.join(prime_words)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/144","
def simplify(x, n):
    """"""Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify(""1/5"", ""5/1"") = True
    simplify(""1/6"", ""2/1"") = False
    simplify(""7/10"", ""10/2"") = False
    """"""
","
from fractions import Fraction

def simplify(x, n):
    x_value = Fraction(x)
    n_value = Fraction(n)
    
    result = x_value * n_value
    
    return result.denominator == 1
","
from fractions import Fraction

def simplify(x, n):
    x_value = Fraction(x)
    n_value = Fraction(n)
    result = x_value * n_value
    if result == int(result):
        return True
    else:
        return False
","
from fractions import Fraction

def simplify(x, n):
    x_value = Fraction(x)
    n_value = Fraction(n)
    result = x_value * n_value
    return result % 1 == 0
","
from fractions import Fraction

def simplify(x, n):
    x_val = Fraction(x)
    n_val = Fraction(n)
    result = x_val * n_val
    
    return result.denominator == 1
","
from fractions import Fraction

def simplify(x, n):
    x_fraction = Fraction(x)
    n_fraction = Fraction(n)
    
    simplified_result = x_fraction * n_fraction
    
    return simplified_result == int(simplified_result)
","
from fractions import Fraction

def simplify(x, n):
    x = Fraction(x)
    n = Fraction(n)
    result = x * n
    return result.denominator == 1
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/145","
def order_by_points(nums):
    """"""
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","
from functools import cmp_to_key

def sum_digits(n):
    return sum(int(digit) for digit in str(abs(n)))

def order_by_points(nums):
    def compare(x, y):
        sum_x = sum_digits(nums[x])
        sum_y = sum_digits(nums[y])

        if sum_x != sum_y:
            return sum_x - sum_y
        else:
            return x - y

    return sorted(range(len(nums)), key=cmp_to_key(compare), reverse=False)
","
from collections import defaultdict

def order_by_points(nums):
    def sum_of_digits(n):
        return sum(int(d) for d in str(abs(n)))

    def sort_criteria(item):
        return (sum_of_digits(item), nums.index(item))

    return sorted(nums, key=sort_criteria)
","
def order_by_points(nums):
    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))
","
from functools import cmp_to_key 

def order_by_points(nums):
    def compare(a, b):
        sum_a = sum(int(d) for d in str(abs(a)))
        sum_b = sum(int(d) for d in str(abs(b)))
        if sum_a != sum_b:
            return sum_a - sum_b
        else:
            return nums.index(a) - nums.index(b)
    
    return sorted(nums, key=cmp_to_key(compare))
","
from functools import cmp_to_key

def order_by_points(nums):
    def sum_digits(num):
        return sum(int(d) for d in str(abs(num)))

    def compare(num1, num2):
        sum1 = sum_digits(num1)
        sum2 = sum_digits(num2)

        if sum1 != sum2:
            return sum1 - sum2
        else:
            return nums.index(num1) - nums.index(num2)

    return sorted(nums, key=cmp_to_key(compare))
","
from functools import cmp_to_key

def sum_of_digits(num):
    return sum(int(digit) for digit in str(num))

def order_by_points(nums):
    def compare(a, b):
        sum_a, sum_b = sum_of_digits(a), sum_of_digits(b)
        if sum_a == sum_b:
            return nums.index(a) - nums.index(b) # order by index
        return sum_a - sum_b

    return sorted(nums, key=cmp_to_key(compare))
","16.666666666666664","50.0","50.0","50.0","50.0","50.0","","","","","",""
"HumanEval/146","
def specialFilter(nums):
    """"""Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    """"""Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""
    def is_odd_digit(num: int) -> bool:
        string_num = str(num)
        return string_num[0] in ('1', '3', '5', '7', '9') and string_num[-1] in ('1', '3', '5', '7', '9')

    count = 0
    for num in nums:
        if num > 10 and is_odd_digit(num):
            count += 1

    return count
 ","
from typing import List

def specialFilter(nums: List[int]) -> int:
    def is_special(num: int) -> bool:
        if num < 10 or num > 99:
            return False
        return int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0

    count = 0
    for num in nums:
        if num > 10 and is_special(abs(num)):
            count += 1

    return count
","
def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:
            count += 1
    return count
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    def is_odd_digit(num: int) -> bool:
        first_digit = int(str(abs(num))[0])
        last_digit = int(str(abs(num))[-1])
        return first_digit % 2 != 0 and last_digit % 2 != 0

    count = 0
    for num in nums:
        if num > 10 and is_odd_digit(num):
            count += 1

    return count
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    """"""Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""
    def has_odd_first_last(num):
        str_num = str(num)
        return int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0
    
    count = 0
    for num in nums:
        if num > 10 and has_odd_first_last(num):
            count += 1
            
    return count
","100.0","71.42857142857143","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/147","
def get_max_triples(n):
    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""
","
from itertools import combinations

def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n+1)]
    count = 0
    for i, j, k in combinations(a, 3):
        if (i + j + k) % 3 == 0:
            count += 1
    return count
","
def get_max_triples(n):
    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count

n = 5
a = [i * i - i + 1 for i in range(1, n+1)]
print(get_max_triples(n))
","
from itertools import combinations

def get_max_triples(n):
    a = [i*i - i + 1 for i in range(1, n+1)]
    triples = 0
    for triple in combinations(a, 3):
        if sum(triple) % 3 == 0:
            triples += 1
    return triples
","
from itertools import combinations

def get_max_triples(n):
    a = [i*i - i + 1 for i in range(1, n+1)]
    triples = sum(1 for i, j, k in combinations(a, 3) if (i+j+k) % 3 == 0)
    return triples
","
from itertools import combinations

def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n+1)]
    count = 0
    for i, j, k in combinations(a, 3):
        if (i + j + k) % 3 == 0:
            count += 1
    return count
","
def get_max_triples(n):
    count = 0
    for i in range(1, n):
        for j in range(i+1, n):
            for k in range(j+1, n):
                if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0:
                    count += 1
    return count
","100.0","25.0","100.0","100.0","100.0","25.0","","","","","",""
"HumanEval/148","
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","
def bf(planet1, planet2):
    planet_order = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    
    if planet1 not in planet_order or planet2 not in planet_order:
        return ()
    
    start = planet_order.index(planet1)
    end = planet_order.index(planet2)
    
    if start < end:
        return tuple(planet_order[start+1:end])
    else:
        return tuple(planet_order[end+1:start][::-1])
","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets:
        return ()
    start = planets.index(planet1)
    end = planets.index(planet2)
    result = planets[min(start, end)+1:max(start, end)]
    if start > end:
        result = result[::-1]
    return tuple(result)
","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets:
        return ()
    
    start_idx = planets.index(planet1)
    end_idx = planets.index(planet2)

    if start_idx < end_idx:
        return tuple(sorted(planets[start_idx+1:end_idx], key=lambda x: planets.index(x)))
    else:
        return tuple(sorted(planets[end_idx+1:start_idx], key=lambda x: planets.index(x)))

bf(""Jupiter"", ""Neptune"")  # ==> (""Saturn"", ""Uranus"")
","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    
    if planet1 not in planets or planet2 not in planets:
        return ()
    
    start_index = planets.index(planet1)
    end_index = planets.index(planet2)
    
    if start_index < end_index:
        return tuple(sorted(planets[start_index+1:end_index], key=lambda x: planets.index(x)))
    else:
        return tuple(sorted(planets[end_index+1:start_index], key=lambda x: planets.index(x)))
","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    planet1_idx = planets.index(planet1) if planet1 in planets else -1
    planet2_idx = planets.index(planet2) if planet2 in planets else -1
    
    if planet1_idx == -1 or planet2_idx == -1 or planet1 == planet2:
        return ()
    
    start_idx = min(planet1_idx, planet2_idx)
    end_idx = max(planet1_idx, planet2_idx)
    
    return tuple([planet for planet in planets[start_idx+1:end_idx] if planet != planet1 and planet != planet2])

","
from collections import OrderedDict

def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    orbit = OrderedDict()
    orbit[""Mercury""] = 1
    orbit[""Venus""] = 2
    orbit[""Earth""] = 3
    orbit[""Mars""] = 4
    orbit[""Jupiter""] = 5
    orbit[""Saturn""] = 6
    orbit[""Uranus""] = 7
    orbit[""Neptune""] = 8

    if planet1 not in planets or planet2 not in planets:
        return ()
    
    start = min(orbit[planet1], orbit[planet2])
    end = max(orbit[planet1], orbit[planet2])

    result = [planet for planet in planets if start < orbit[planet] < end]
    return tuple(result)
","85.71428571428571","85.71428571428571","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/149","
def sorted_list_sum(lst):
    """"""Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
    assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
    """"""
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word)%2 == 0], key=lambda x: (len(x), x))
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0])
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
     ","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
","
from operator import itemgetter

def sorted_list_sum(lst):
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
","100.0","85.71428571428571","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/150","
def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """"""
","
from math import sqrt

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    if is_prime(n):
        return x
    else:
        return y
","
import math

def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """"""
    
    if n < 2:
        return y
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return y
    return x
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    return x if is_prime(n) else y
","
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    return x if is_prime(n) else y
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def x_or_y(n, x, y):
    return x if is_prime(n) else y
","
import math

def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.""""""
    
    def is_prime(num):
        if num <= 1:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    if is_prime(n):
        return x
    else:
        return y
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/151","
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(x ** 2 for x in lst if x % 2 != 0 and x > 0)
  ","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    return sum(x**2 for x in lst if x > 0 and x % 2 == 1)
  ","
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))
","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
    
    If the input list is empty, return 0.
    '''
    return sum(x*x for x in lst if x > 0 and x % 2 == 1)
  ","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)
","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)
","71.42857142857143","100.0","100.0","100.0","71.42857142857143","71.42857142857143","","","","","",""
"HumanEval/152","
def compare(game,guess):
    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(game[i]-guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(g - s) for g, s in zip(guess, game)]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(s - g) for s, g in zip(game, guess)]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [0 if game[i] == guess[i] else abs(guess[i] - game[i]) for i in range(len(game))]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/153","
def Strongest_Extension(class_name, extensions):
    """"""You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given ""Slices"" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """"""
","
from typing import List

def Strongest_Extension(class_name: str, extensions: List[str]) -> str:
    def strength(extension: str) -> int:
        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())
    
    strongest = max(extensions, key=lambda x: strength(x))
    return f""{class_name}.{strongest}""
","
def Strongest_Extension(class_name, extensions):
    def calculate_strength(extension):
        CAP = sum(1 for letter in extension if letter.isupper())
        SM = sum(1 for letter in extension if letter.islower())
        return CAP - SM
    
    strongest_extension = max(extensions, key=calculate_strength)
    
    return f""{class_name}.{strongest_extension}""
","
def Strongest_Extension(class_name, extensions):
    def calc_strength(extension):
        CAP = sum(1 for c in extension if c.isupper())
        SM = sum(1 for c in extension if c.islower())
        return CAP - SM

    strongest_extension = max(extensions, key=calc_strength)
    return f""{class_name}.{strongest_extension}""
","
def Strongest_Extension(class_name, extensions):
    strength_dict = {}
    for ext in extensions:
        CAP = sum(1 for c in ext if c.isupper())
        SM = sum(1 for c in ext if c.islower())
        strength_dict[ext] = CAP - SM

    strongest_ext = max(strength_dict, key=strength_dict.get)
    return f""{class_name}.{strongest_ext}""
","
def Strongest_Extension(class_name, extensions):
    def strength(extension):
        cap_count = sum(1 for char in extension if char.isupper())
        sm_count = sum(1 for char in extension if char.islower())
        return cap_count - sm_count
    
    sorted_extensions = sorted(extensions, key=lambda ext: (strength(ext), extensions.index(ext)))
    strongest_extension = sorted_extensions[0]
    
    return f""{class_name}.{strongest_extension}""
","
from typing import List

def Strongest_Extension(class_name: str, extensions: List[str]) -> str:
    def get_strength(extension: str) -> int:
        CAP = sum(1 for char in extension if char.isupper())
        SM = sum(1 for char in extension if char.islower())
        return CAP - SM

    strongest_extension = max(extensions, key=get_strength)
    return f""{class_name}.{strongest_extension}""
","100.0","100.0","100.0","100.0","22.22222222222222","100.0","","","","","",""
"HumanEval/154","
def cycpattern_check(a , b):
    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check(""abcd"",""abd"") => False
    cycpattern_check(""hello"",""ell"") => True
    cycpattern_check(""whassup"",""psus"") => False
    cycpattern_check(""abab"",""baa"") => True
    cycpattern_check(""efef"",""eeff"") => False
    cycpattern_check(""himenss"",""simen"") => True

    """"""
","
from collections import deque

def cycpattern_check(a, b):
    def is_rotation(str1, str2):
        if len(str1) != len(str2):
            return False
        return str2 in (str1 + str1)

    if b in a:
        return True
    num_rotations = len(b)
    queue = deque(b)
    for _ in range(num_rotations - 1):
        queue.rotate(1)
        rotated_str = ''.join(queue)
        if is_rotation(a, rotated_str):
            return True
    return False
","
from itertools import permutations

def cycpattern_check(a, b):
    return any(b in a for b in set(''.join(p) for p in permutations(b)))
","
from itertools import permutations

def cycpattern_check(a, b):
    for rotation in permutations(b):
        rotated_str = ''.join(rotation)
        if rotated_str in a:
            return True
    return False
","
from collections import deque

def cycpattern_check(a, b):
    def is_rotation(word1, word2):
        if len(word1) != len(word2):
            return False
        double_word1 = word1 + word1
        return word2 in double_word1
    
    if b in a:
        return True
    elif is_rotation(a, b):
        return True
    return False
","
from itertools import permutations

def cycpattern_check(a, b):
    subs = [a[i:] + a[:i] for i in range(len(a))]
    return any(b in s for s in subs)
","
from itertools import permutations

def cycpattern_check(a, b):
    perms = [''.join(p) for p in permutations(b)]
    for perm in perms:
        if perm in a:
            return True
    return False
","66.66666666666666","66.66666666666666","66.66666666666666","66.66666666666666","66.66666666666666","66.66666666666666","","","","","",""
"HumanEval/155","
def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""
","
from typing import Tuple

def even_odd_count(num: int) -> Tuple[int, int]:
    even_count = len([digit for digit in str(abs(num)) if int(digit) % 2 == 0])
    odd_count = len([digit for digit in str(abs(num)) if int(digit) % 2 != 0])
    return even_count, odd_count
","
def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)
","
def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)
","
def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)
","
def even_odd_count(num):
    even_count = 0
    odd_count = 0

    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1

    return (even_count, odd_count)
","
def even_odd_count(num):
    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)
    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)
    return even_count, odd_count
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/156","
def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","
def int_to_mini_roman(number):
    roman_numerals = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',
        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',
        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',
        1000: 'm'
    }

    if number <= 0 or number > 1000:
        raise ValueError('Number out of acceptable range [1, 1000]')

    result = ''
    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):
        while number >= value:
            result += numeral
            number -= value

    return result.lower()
","
def int_to_mini_roman(number):
    roman_nums = {
        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',
        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',
        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'
    }
    result = ''
    for value, roman_digit in roman_nums.items():
        while number >= value:
            result += roman_digit
            number -= value
    return result.lower()
","
def int_to_mini_roman(number):
    roman_numerals = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 
        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'
    }
    result = """"
    for value in sorted(roman_numerals, reverse=True):
        while number >= value:
            result += roman_numerals[value]
            number -= value
    return result.lower()
","
def int_to_mini_roman(number):
    roman_nums = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',
                  50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}

    if number <= 0 or number > 1000:
        raise ValueError(""Number out of range"")

    result = ''
    for value, numeral in sorted(roman_nums.items(), reverse=True):
        while number >= value:
            result += numeral
            number -= value

    return result.lower()
","
def int_to_mini_roman(number):
    roman_numerals = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x',
        40: 'xl', 50: 'l', 90: 'xc', 100: 'c',
        400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'
    }
    result = ''
    for value in sorted(roman_numerals.keys(), reverse=True):
        while number >= value:
            result += roman_numerals[value]
            number -= value
    return result.lower()
","
def int_to_mini_roman(number):
    roman_nums = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',
        50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'
    }
    result = ''
    for value, numeral in sorted(roman_nums.items(), key=lambda x: x[0], reverse=True):
        while number >= value:
            result += numeral
            number -= value
    return result.lower()

# Examples
print(int_to_mini_roman(19))  # Output: 'xix'
print(int_to_mini_roman(152))  # Output: 'clii'
print(int_to_mini_roman(426))  # Output: 'cdxxvi'
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/157","
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    sides = [a, b, c]
    sides.sort()
    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)
","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    sides = sorted([a, b, c])
    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2
  ","
import math

def right_angle_triangle(a, b, c):
    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)
","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if
    the three sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    
    sides = [a, b, c]
    sides.sort()
    
    if sides[0]**2 + sides[1]**2 == sides[2]**2:
        return True
    else:
        return False
","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    sides = [a, b, c]
    sides.sort()
    return math.isclose(sides[0] ** 2 + sides[1] ** 2, sides[2] ** 2)
","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    
    sides = sorted([a, b, c])
    
    if sides[0]**2 + sides[1]**2 == sides[2]**2:
        return True
    else:
        return False
  ","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/158","
def find_max(words):
    """"""Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max([""name"", ""of"", ""string""]) == ""string""
    find_max([""name"", ""enam"", ""game""]) == ""enam""
    find_max([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
    """"""
","
from collections import Counter

def find_max(words):
    def unique_chars(word):
        return len(set(word))
    
    max_word = """"
    max_unique_chars = 0
    
    for word in words:
        unique_chars_count = unique_chars(word)
        if unique_chars_count > max_unique_chars or (unique_chars_count == max_unique_chars and word < max_word):
            max_word = word
            max_unique_chars = unique_chars_count
    
    return max_word
","
from collections import Counter

def find_max(words):
    return max(words, key=lambda x: (-len(set(x)), x))
","
from collections import Counter

def find_max(words):
    def count_unique_chars(word):
        return len(set(word))
    
    max_word = """"
    max_unique_chars = 0
    
    for word in words:
        unique_chars = count_unique_chars(word)
        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):
            max_word = word
            max_unique_chars = unique_chars
    
    return max_word
","
from collections import Counter

def find_max(words):
    def count_unique_chars(word):
        return len(set(word))

    def lexicographical_order(word1, word2):
        return word1 < word2

    max_word = """"
    max_unique_chars = 0

    for word in words:
        unique_chars_count = count_unique_chars(word)
        if unique_chars_count > max_unique_chars or (unique_chars_count == max_unique_chars and lexicographical_order(word, max_word)):
            max_word = word
            max_unique_chars = unique_chars_count

    return max_word
","
from collections import Counter

def find_max(words):
    def get_num_unique_characters(word):
        return len(set(word))

    def get_lexicographical_order(word):
        return word

    max_word = """"
    max_unique_chars = 0

    for word in words:
        unique_chars = get_num_unique_characters(word)
        if unique_chars > max_unique_chars:
            max_word = word
            max_unique_chars = unique_chars
        elif unique_chars == max_unique_chars and get_lexicographical_order(word) < get_lexicographical_order(max_word):
            max_word = word

    return max_word
","
from collections import Counter

def find_max(words):
    def count_unique_chars(word):
        return len(set(word))

    max_unique_chars = 0
    max_word = """"
    
    for word in words:
        unique_chars_count = count_unique_chars(word)
        
        if unique_chars_count > max_unique_chars or (
            unique_chars_count == max_unique_chars and word < max_word
        ):
            max_unique_chars = unique_chars_count
            max_word = word
    
    return max_word
","100.0","20.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/159","
def eat(number, need, remaining):
    """"""
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """"""
","
def eat(number, need, remaining):
    total_carrots = number + need
    if total_carrots <= remaining:
        return [total_carrots, remaining - total_carrots]
    else:
        return [remaining, 0]
","
def eat(number, need, remaining):
    total_eaten_carrots = number + need
    carrots_left = max(0, remaining - need)
    return [total_eaten_carrots, carrots_left]
","
def eat(number, need, remaining):
    total_carrots = number + need
    eaten = min(total_carrots, remaining)
    remaining_carrots = max(0, remaining - total_carrots)
    return [eaten, remaining_carrots]
","
def eat(number, need, remaining):
    total_eaten = number + remaining
    carrots_eaten = min(need, total_eaten)
    carrots_left = max(0, total_eaten - need)
    return [carrots_eaten, carrots_left]
","
def eat(number, need, remaining):
    total_eaten = min(number + need, number + remaining)
    carrots_left = max(remaining - need, 0)
    return [total_eaten, carrots_left]
","
def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]
","0.0","66.66666666666666","0.0","33.33333333333333","100.0","100.0","","","","","",""
"HumanEval/160","
def do_algebra(operator, operand):
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""
","
from operator import add, sub, mul, floordiv, pow

def do_algebra(operator, operand):
    functions = {
        '+': add,
        '-': sub,
        '*': mul,
        '//': floordiv,
        '**': pow
    }
    
    result = operand[0]
    for i in range(len(operator)):
        result = functions[operator[i]](result, operand[i+1])
    
    return result
","
def do_algebra(operators, operands):
    expression = str(operands[0])
    for i in range(len(operators)):
        expression += "" "" + operators[i] + "" "" + str(operands[i+1])
    return eval(expression)
","
from functools import reduce

def do_algebra(operator, operand):
    operations = {
        '+': lambda x, y: x + y,
        '-': lambda x, y: x - y,
        '*': lambda x, y: x * y,
        '//': lambda x, y: x // y,
        '**': lambda x, y: x ** y
    }

    return reduce(lambda x, op_y: operations[op_y[0]](x, op_y[1]), zip(operator, operand[1:]), operand[0])
","
import operator as op

def do_algebra(operators, operands):
    operations = {
        '+': op.add,
        '-': op.sub,
        '*': op.mul,
        '//': op.floordiv,
        '**': op.pow
    }

    result = operands[0]
    for i in range(len(operators)):
        result = operations[operators[i]](result, operands[i + 1])

    return result
","
from operator import add, sub, mul, floordiv, pow

def do_algebra(operators, operands):
    ops = {'+': add, '-': sub, '*': mul, '//': floordiv, '**': pow}
    result = operands[0]
    for i in range(1, len(operands)):
        result = ops[operators[i - 1]](result, operands[i])
    return result
","
from functools import reduce
import operator

def do_algebra(operator, operand):
    operations = {
        '+': operator.add,
        '-': operator.sub,
        '*': operator.mul,
        '//': operator.floordiv,
        '**': operator.pow
    }
    return reduce(lambda x, y: operations[operator[y-1]](x, operand[y]), range(1, len(operand)), operand[0])
","66.66666666666666","100.0","66.66666666666666","66.66666666666666","66.66666666666666","0.0","","","","","",""
"HumanEval/161","
def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""
","
import string

def solve(s):
    return ''.join(c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s)[::-1] if any(char.isalpha() for char in s) else s[::-1]
","
def solve(s):
    import string
    
    if not any(char.isalpha() for char in s):
        return s[::-1]
    
    result = []
    for char in s:
        if char.isalpha():
            if char.islower():
                result.append(char.upper())
            else:
                result.append(char.lower())
        else:
            result.append(char)
    
    return ''.join(result)

","
def solve(s):
    import string
    
    new_s = """"
    
    for char in s:
        if char.isalpha():
            new_s += char.swapcase()
        else:
            new_s += char
    
    if not any(char.isalpha() for char in s):
        new_s = new_s[::-1]
    
    return new_s
","
def solve(s):
    import string
    
    result = """"
    
    for char in s:
        if char.isalpha():
            if char.islower():
                result += char.upper()
            else:
                result += char.lower()
        else:
            result += char
    
    if all(char not in string.ascii_letters for char in s):
        return s[::-1]
    
    return result
","
def solve(s):
    from string import ascii_letters
    return ''.join(c.swapcase() if c in ascii_letters else c for c in s) if any(c.isalpha() for c in s) else s[::-1]
","
def solve(s):
    from string import ascii_letters
    return ''.join(c.upper() if c in ascii_letters else c.lower() if c.isupper() else c.upper() for c in s).swapcase() if any(x.isalpha() for x in s) else s[::-1]
","25.0","100.0","100.0","100.0","100.0","25.0","","","","","",""
"HumanEval/162","
def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","
import hashlib

def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.
    """"""
    if not text:
        return None
    else:
        return hashlib.md5(text.encode()).hexdigest()
  ","
import hashlib

def string_to_md5(text):
    if not text:
        return None
    md5 = hashlib.md5()
    md5.update(text.encode('utf-8'))
    return md5.hexdigest()
","
import hashlib

def string_to_md5(text):
    if not text:
        return None
    else:
        return hashlib.md5(text.encode()).hexdigest()
","
import hashlib

def string_to_md5(text):
    if not text:
        return None

    result = hashlib.md5(text.encode())
    return result.hexdigest()
","
import hashlib

def string_to_md5(text):
    if not text:
        return None
    return hashlib.md5(text.encode()).hexdigest()
","
import hashlib

def string_to_md5(text):
    if text:
        return hashlib.md5(text.encode()).hexdigest()
    return None
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/163","
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
","
def generate_integers(a, b):
    return [i for i in range(a, b+1) if i % 2 == 0 and set(str(i)).issubset({'0', '2', '4', '6', '8'})]
","
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
    return [i for i in range(a, b + 1) if all(int(digit) % 2 == 0 for digit in str(i))]
  ","
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""

    even_numbers = []
    for i in range(a, b+1):
        if i % 2 == 0:
            even_numbers.append(i)
    
    return even_numbers
","
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
    return [i for i in range(a, b+1) if i % 2 == 0]
","
def generate_integers(a, b):
    return [i for i in range(a, b+1) if all(int(digit) % 2 == 0 for digit in str(i))]

# Required import
from typing import List
","
def generate_integers(a, b):
    return [i for i in range(a, b+1) if i % 2 == 0 and any(digit in ['0','2','4','6','8'] for digit in str(i))]
","25.0","25.0","0.0","0.0","25.0","0.0","","","","","",""
