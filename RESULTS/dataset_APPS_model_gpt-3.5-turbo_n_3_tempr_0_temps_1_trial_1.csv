"task_id","prompt","code_0","code_1","code_2","code_3","pass_rate_0","pass_rate_1","pass_rate_2","pass_rate_3","err_0","err_1","err_2","err_3"
"APPS/0","
QUESTION:
An accordion is a string (yes, in the real world accordions are musical instruments, but let's forget about it for a while) which can be represented as a concatenation of: an opening bracket (ASCII code $091$), a colon (ASCII code $058$), some (possibly zero) vertical line characters (ASCII code $124$), another colon, and a closing bracket (ASCII code $093$). The length of the accordion is the number of characters in it.

For example, [::], [:||:] and [:|||:] are accordions having length $4$, $6$ and $7$. (:|:), {:||:}, [:], ]:||:[ are not accordions. 

You are given a string $s$. You want to transform it into an accordion by removing some (possibly zero) characters from it. Note that you may not insert new characters or reorder existing ones. Is it possible to obtain an accordion by removing characters from $s$, and if so, what is the maximum possible length of the result?


-----Input-----

The only line contains one string $s$ ($1 \le |s| \le 500000$). It consists of lowercase Latin letters and characters [, ], : and |.


-----Output-----

If it is not possible to obtain an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.


-----Examples-----
Input
|[a:b:|]

Output
4

Input
|]:[|:]

Output
-1
Use user-input-Based format and function signature solve()","
def solve():
    s = input().strip()
    opening_bracket = s.find('[')
    closing_bracket = s.rfind(']')
    
    if opening_bracket == -1 or closing_bracket == -1 or opening_bracket >= closing_bracket:
        print(-1)
        return
    
    s = s[opening_bracket:closing_bracket+1]
    colon1 = s.find(':')
    colon2 = s.rfind(':')
    
    if colon1 == -1 or colon2 == -1 or colon1 >= colon2:
        print(-1)
        return
    
    vertical_lines = s.count('|', colon1, colon2)
    
    if vertical_lines < 1:
        print(-1)
        return
    
    accordion_length = 4 + vertical_lines
    print(accordion_length)

solve()
","
def solve():
    s = input().strip()
    opening_bracket_pos = s.find('[')
    closing_bracket_pos = s.find(']')
    
    if opening_bracket_pos == -1 or closing_bracket_pos == -1 or opening_bracket_pos >= closing_bracket_pos:
        print(-1)
        return
    
    s = s[opening_bracket_pos:closing_bracket_pos+1]
    colon_pos = s.find(':')
    
    if colon_pos == -1 or s.count(':') < 2:
        print(-1)
        return
    
    max_length = 4
    for char in s[colon_pos+1:closing_bracket_pos]:
        if char != '|':
            break
        max_length += 1
    
    print(max_length)

if __name__ == ""__main__"":
    solve()
  ","
def solve():
    s = input().strip()
    opening_bracket_index = s.find('[')
    closing_bracket_index = s.find(']')
    colon_index = s.find(':')
    
    if opening_bracket_index == -1 or closing_bracket_index == -1 or colon_index == -1:
        print(-1)
        return
    
    s = s[opening_bracket_index:closing_bracket_index+1]
    
    vertical_lines_count = s.count('|')
    if vertical_lines_count < 2:
        print(-1)
        return
    
    total_length = 4 + vertical_lines_count
    
    print(total_length)

solve()","
def solve():
    s = input().strip()
    left_bracket_idx = s.find('[')
    right_bracket_idx = s.rfind(']')
    
    if left_bracket_idx == -1 or right_bracket_idx == -1 or left_bracket_idx >= right_bracket_idx:
        return -1
    
    content = s[left_bracket_idx:right_bracket_idx+1]
    
    if content.count(':') < 2:
        return -1
    
    max_accordion_length = 4
    
    for i in range(left_bracket_idx+1, right_bracket_idx):
        if s[i] == ':':
            max_accordion_length += 1
    
    return max_accordion_length

solve()","80.0","100.0","73.33333333333333","0.0","","","",""
"APPS/1","
QUESTION:
Anton has the integer x. He is interested what positive integer, which doesn't exceed x, has the maximum sum of digits.

Your task is to help Anton and to find the integer that interests him. If there are several such integers, determine the biggest of them. 


-----Input-----

The first line contains the positive integer x (1 ≤ x ≤ 10^18) — the integer which Anton has. 


-----Output-----

Print the positive integer which doesn't exceed x and has the maximum sum of digits. If there are several such integers, print the biggest of them. Printed integer must not contain leading zeros.


-----Examples-----
Input
100

Output
99

Input
48

Output
48

Input
521

Output
499
Use user-input-Based format and function signature solve()","
def solve():
    x = int(input())
    max_sum = 0
    result = 0
    for i in range(1, x+1):
        if sum(map(int, str(i))) >= max_sum:
            max_sum = sum(map(int, str(i)))
            result = i
    print(result)

solve()
","
def solve():
    x = int(input())
    max_sum = 0
    res = 0
    
    for i in range(1, x+1):
        digit_sum = sum(int(d) for d in str(i))
        if digit_sum >= max_sum:
            max_sum = digit_sum
            res = i
        
    print(res)

solve()","
def solve():
    x = int(input())
    max_sum = 0
    result = 0
    for i in range(max(1, x-100), x+1):
        current_sum = sum([int(digit) for digit in str(i)])
        if current_sum >= max_sum:
            max_sum = current_sum
            result = i
    print(result)

solve()
","
def solve():
    x = int(input())

    def sum_of_digits(n):
        return sum(int(digit) for digit in str(n))

    max_sum = sum_of_digits(x)
    max_num = x

    for i in range(1, len(str(x)) + 1):
        num = int(str(x)[:-i] + '9' * (i - 1))
        if num == 0: break
        if sum_of_digits(num) > max_sum:
            max_sum = sum_of_digits(num)
            max_num = num

    print(max_num)

solve()
","100.0","100.0","86.66666666666667","26.666666666666668","","","",""
"APPS/2","
QUESTION:
Apart from having lots of holidays throughout the year, residents of Berland also have whole lucky years. Year is considered lucky if it has no more than 1 non-zero digit in its number. So years 100, 40000, 5 are lucky and 12, 3001 and 12345 are not.

You are given current year in Berland. Your task is to find how long will residents of Berland wait till the next lucky year.


-----Input-----

The first line contains integer number n (1 ≤ n ≤ 10^9) — current year in Berland.


-----Output-----

Output amount of years from the current year to the next lucky one.


-----Examples-----
Input
4

Output
1

Input
201

Output
99

Input
4000

Output
1000



-----Note-----

In the first example next lucky year is 5. In the second one — 300. In the third — 5000.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    while True:
        n += 1
        if str(n).count('0') + str(n).count('1') == len(str(n)):
            print(n - int(input()))
            break

solve()
","
def solve():
    n = int(input())
    while True:
        n += 1
        if str(n).count('0') + str(n).count('1') == len(str(n)):
            print(n - int(input()))
            break

solve()
","
def solve():
    current_year = int(input())
    next_lucky_year = current_year
    while True:
        next_lucky_year += 1
        if str(next_lucky_year).count('0') + str(next_lucky_year).count('0') + str(next_lucky_year).count('2') + str(next_lucky_year).count('3') + str(next_lucky_year).count('4') + str(next_lucky_year).count('5') + str(next_lucky_year).count('6') + str(next_lucky_year).count('7') + str(next_lucky_year).count('8') + str(next_lucky_year).count('9') > 1:
            break
    return next_lucky_year - current_year

solve()
","
def solve():
    n = int(input())
    while True:
        n += 1
        if str(n).count('0') + str(n).count('0') <= 1:
            print(n - int(input()))
            break

if __name__ == ""__main__"":
    solve()
","0.0","0.0","0.0","0.0","","","",""
"APPS/3","
QUESTION:
You have a long fence which consists of $n$ sections. Unfortunately, it is not painted, so you decided to hire $q$ painters to paint it. $i$-th painter will paint all sections $x$ such that $l_i \le x \le r_i$.

Unfortunately, you are on a tight budget, so you may hire only $q - 2$ painters. Obviously, only painters you hire will do their work.

You want to maximize the number of painted sections if you choose $q - 2$ painters optimally. A section is considered painted if at least one painter paints it.


-----Input-----

The first line contains two integers $n$ and $q$ ($3 \le n, q \le 5000$) — the number of sections and the number of painters availible for hire, respectively.

Then $q$ lines follow, each describing one of the painters: $i$-th line contains two integers $l_i$ and $r_i$ ($1 \le l_i \le r_i \le n$).


-----Output-----

Print one integer — maximum number of painted sections if you hire $q - 2$ painters.


-----Examples-----
Input
7 5
1 4
4 5
5 6
6 7
3 5

Output
7

Input
4 3
1 1
2 2
3 4

Output
2

Input
4 4
1 1
2 2
2 3
3 4

Output
3
Use user-input-Based format and function signature solve()","
def solve():
    n, q = map(int, input().split())
    painters = [list(map(int, input().split())) for _ in range(q)]
    painters.sort(key=lambda x: x[0])

    max_painted = 0
    for i in range(q):
        for j in range(i+1, q):
            painted = 0
            for k in range(n):
                for l, r in painters[i:j+1]:
                    if l <= k+1 <= r:
                        painted += 1
                        break
            max_painted = max(max_painted, painted)

    print(max_painted)

import sys
solve()
","
def solve():
    from typing import List

    n, q = map(int, input().split())
    painters = []
    for _ in range(q):
        l, r = map(int, input().split())
        painters.append((l, r))

    max_painted = 0
    for i in range(n):
        for j in range(i + 1, n + 1):
            painted_set = set()
            for k in range(q):
                if painters[k][0] <= i + 1 <= painters[k][1] or painters[k][0] <= j <= painters[k][1]:
                    painted_set.add(k)
            if len(painted_set) >= q - 2:
                max_painted = max(max_painted, j - i)

    print(max_painted)

solve()
","
def solve():
    n, q = map(int, input().split())
    painters = [list(map(int, input().split())) for _ in range(q)]
    painters.sort(key=lambda x: x[0])

    max_painted = 0
    for i in range(q):
        for j in range(i+1, q):
            painted_sections = set()
            for l, r in painters[i:j+1]:
                for x in range(l, r+1):
                    painted_sections.add(x)
            max_painted = max(max_painted, len(painted_sections))

    print(max_painted)

solve()","
from heapq import heappop, heappush

def solve():
    n, q = map(int, input().split())
    painters = [tuple(map(int, input().split())) for _ in range(q)]

    painters.sort()
    
    heap = []
    total_painted = 0
    for i in range(q - 2):
        l, r = painters[i]
        total_painted += r - l + 1
        heappush(heap, (-r, l, r))
    
    max_painted = total_painted
    for i in range(q - 2, q):
        l, r = painters[i]
        total_painted += r - l + 1
        max_painted = max(max_painted, total_painted)
        heappush(heap, (-r, l, r))
    
    intersections = set()
    for _, l, r in heap:
        total_painted -= r - l + 1
        if (l, r) in intersections:
            max_painted = max(max_painted, total_painted)
        else:
            intersections.add((l, r))
    
    print(max_painted)

solve()
","46.666666666666664","42.857142857142854","46.666666666666664","0.0","","","",""
"APPS/4","
QUESTION:
Jamie loves sleeping. One day, he decides that he needs to wake up at exactly hh: mm. However, he hates waking up, so he wants to make waking up less painful by setting the alarm at a lucky time. He will then press the snooze button every x minutes until hh: mm is reached, and only then he will wake up. He wants to know what is the smallest number of times he needs to press the snooze button.

A time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.

Note that it is not necessary that the time set for the alarm and the wake-up time are on the same day. It is guaranteed that there is a lucky time Jamie can set so that he can wake at hh: mm.

Formally, find the smallest possible non-negative integer y such that the time representation of the time x·y minutes before hh: mm contains the digit '7'.

Jamie uses 24-hours clock, so after 23: 59 comes 00: 00.


-----Input-----

The first line contains a single integer x (1 ≤ x ≤ 60).

The second line contains two two-digit integers, hh and mm (00 ≤ hh ≤ 23, 00 ≤ mm ≤ 59).


-----Output-----

Print the minimum number of times he needs to press the button.


-----Examples-----
Input
3
11 23

Output
2

Input
5
01 07

Output
0



-----Note-----

In the first sample, Jamie needs to wake up at 11:23. So, he can set his alarm at 11:17. He would press the snooze button when the alarm rings at 11:17 and at 11:20.

In the second sample, Jamie can set his alarm at exactly at 01:07 which is lucky.
Use user-input-Based format and function signature solve()","
def solve():
    x = int(input())
    hh, mm = map(int, input().split())
    
    y = 0
    while True:
        if '7' in str(hh) or '7' in str(mm):
            break
        y += 1
        mm -= x
        if mm < 0:
            mm += 60
            hh -= 1
            if hh < 0:
                hh = 23
    
    print(y)

solve()
","
from typing import List, Tuple

def solve() -> int:
    x: int = int(input())
    hh, mm = map(int, input().split())
    
    y: int = 0
    alarm_time: str = str(hh).zfill(2) + "":"" + str(mm).zfill(2)
    
    while '7' not in alarm_time:
        y += 1
        mm -= x
        if mm < 0:
            mm += 60
            hh = (hh - 1) % 24
        alarm_time = str(hh).zfill(2) + "":"" + str(mm).zfill(2)
    
    return y


solve()","
def solve():
    x = int(input())
    hh, mm = map(int, input().split())
    times_pressed = 0
    while '7' not in str(hh) and '7' not in str(mm):
        mm -= x
        if mm < 0:
            mm += 60
            hh -= 1
        if hh < 0:
            hh = 23

        times_pressed += 1
    print(times_pressed)

solve()
","
def solve():
    x = int(input())
    hh, mm = map(int, input().split())
  
    time = hh * 60 + mm
    count = 0

    while True:
        if '7' in str(hh) or '7' in str(mm):
            break
        count += 1
        time -= x
        if time < 0:
            time += 24 * 60
        hh = time // 60
        mm = time % 60

    print(count)

solve()
","100.0","0.0","100.0","100.0","","","",""
"APPS/5","
QUESTION:
Luba is surfing the Internet. She currently has n opened tabs in her browser, indexed from 1 to n from left to right. The mouse cursor is currently located at the pos-th tab. Luba needs to use the tabs with indices from l to r (inclusive) for her studies, and she wants to close all the tabs that don't belong to this segment as fast as possible.

Each second Luba can either try moving the cursor to the left or to the right (if the cursor is currently at the tab i, then she can move it to the tab max(i - 1, a) or to the tab min(i + 1, b)) or try closing all the tabs to the left or to the right of the cursor (if the cursor is currently at the tab i, she can close all the tabs with indices from segment [a, i - 1] or from segment [i + 1, b]). In the aforementioned expressions a and b denote the minimum and maximum index of an unclosed tab, respectively. For example, if there were 7 tabs initially and tabs 1, 2 and 7 are closed, then a = 3, b = 6.

What is the minimum number of seconds Luba has to spend in order to leave only the tabs with initial indices from l to r inclusive opened?


-----Input-----

The only line of input contains four integer numbers n, pos, l, r (1 ≤ n ≤ 100, 1 ≤ pos ≤ n, 1 ≤ l ≤ r ≤ n) — the number of the tabs, the cursor position and the segment which Luba needs to leave opened.


-----Output-----

Print one integer equal to the minimum number of seconds required to close all the tabs outside the segment [l, r].


-----Examples-----
Input
6 3 2 4

Output
5

Input
6 3 1 3

Output
1

Input
5 2 1 5

Output
0



-----Note-----

In the first test Luba can do the following operations: shift the mouse cursor to the tab 2, close all the tabs to the left of it, shift the mouse cursor to the tab 3, then to the tab 4, and then close all the tabs to the right of it.

In the second test she only needs to close all the tabs to the right of the current position of the cursor.

In the third test Luba doesn't need to do anything.
Use user-input-Based format and function signature solve()","
def solve():
    n, pos, l, r = map(int, input().split())
    if l == 1 and r == n:
        print(0)
    elif l == 1:
        print(abs(r - pos) + 1)
    elif r == n:
        print(abs(pos - l) + 1)
    else:
        print(min(abs(pos - l), abs(pos - r)) + r - l + 2)

solve()
","
def solve():
    n, pos, l, r = map(int, input().split())
    if l == 1 and r == n:
        print(0)
    elif l == 1:
        print(abs(pos - r) + 1)
    elif r == n:
        print(abs(pos - l) + 1)
    else:
        print(min(abs(pos - l), abs(pos - r)) + 2 + r - l)

solve()","
def solve():
    n, pos, l, r = map(int, input().split())
    if l == 1 and r == n:
        print(0)
    elif l == 1:
        print(abs(pos - r) + 1)
    elif r == n:
        print(abs(pos - l) + 1)
    else:
        print(min(abs(pos - l), abs(pos - r)) + r - l + 2)

solve()
","
def solve():
    n, pos, l, r = map(int, input().split())
    
    if l == 1 and r == n:
        return 0
    elif l == 1:
        return abs(pos - r) + 1 if pos <= r else r - pos + 1
    elif r == n:
        return abs(pos - l) + 1 if pos >= l else l - pos + 1
    else:
        return min(abs(pos - l), abs(pos - r)) + r - l + 2

solve()
","100.0","100.0","100.0","0.0","","","",""
"APPS/6","
QUESTION:
You are fighting with Zmei Gorynich — a ferocious monster from Slavic myths, a huge dragon-like reptile with multiple heads! 

 $m$ 

Initially Zmei Gorynich has $x$ heads. You can deal $n$ types of blows. If you deal a blow of the $i$-th type, you decrease the number of Gorynich's heads by $min(d_i, curX)$, there $curX$ is the current number of heads. But if after this blow Zmei Gorynich has at least one head, he grows $h_i$ new heads. If $curX = 0$ then Gorynich is defeated. 

You can deal each blow any number of times, in any order.

For example, if $curX = 10$, $d = 7$, $h = 10$ then the number of heads changes to $13$ (you cut $7$ heads off, but then Zmei grows $10$ new ones), but if $curX = 10$, $d = 11$, $h = 100$ then number of heads changes to $0$ and Zmei Gorynich is considered defeated.

Calculate the minimum number of blows to defeat Zmei Gorynich!

You have to answer $t$ independent queries.


-----Input-----

The first line contains one integer $t$ ($1 \le t \le 100$) – the number of queries.

The first line of each query contains two integers $n$ and $x$ ($1 \le n \le 100$, $1 \le x \le 10^9$) — the number of possible types of blows and the number of heads Zmei initially has, respectively.

The following $n$ lines of each query contain the descriptions of types of blows you can deal. The $i$-th line contains two integers $d_i$ and $h_i$ ($1 \le d_i, h_i \le 10^9$) — the description of the $i$-th blow.


-----Output-----

For each query print the minimum number of blows you have to deal to defeat Zmei Gorynich. 

If Zmei Gorynuch cannot be defeated print $-1$.


-----Example-----
Input
3
3 10
6 3
8 2
1 4
4 10
4 1
3 2
2 6
1 100
2 15
10 11
14 100

Output
2
3
-1



-----Note-----

In the first query you can deal the first blow (after that the number of heads changes to $10 - 6 + 3 = 7$), and then deal the second blow.

In the second query you just deal the first blow three times, and Zmei is defeated. 

In third query you can not defeat Zmei Gorynich. Maybe it's better to convince it to stop fighting?
Use user-input-Based format and function signature solve()","
def solve():
    t = int(input())
    for _ in range(t):
        n, x = map(int, input().split())
        min_blows = float('inf')
        for _ in range(n):
            d, h = map(int, input().split())
            if d >= x:
                min_blows = min(min_blows, 1)
            elif (x - d) % (d - h) == 0:
                min_blows = min(min_blows, (x - d) // (d - h) + 1)
            else:
                min_blows = min(min_blows, (x - d) // (d - h) + 2)
        if min_blows == float('inf'):
            print(-1)
        else:
            print(min_blows)

solve()
","
def solve():
    t = int(input())
    for _ in range(t):
        n, x = map(int, input().split())
        min_blows = float('inf')
        for _ in range(n):
            d, h = map(int, input().split())
            if d >= x:
                min_blows = min(min_blows, 1)
            elif d - h <= 0:
                continue
            else:
                min_blows = min(min_blows, (x - d + h - 1) // (d - h) + 1)
        if min_blows == float('inf'):
            print(-1)
        else:
            print(min_blows)

solve()","
def solve():
    t = int(input())
    for _ in range(t):
        n, x = map(int, input().split())
        
        min_blows = float('inf')
        for _ in range(n):
            d, h = map(int, input().split())
            if d >= x:
                min_blows = min(min_blows, 1)
            else:
                k = max(0, (x - d) // (d - h))
                rem = x - (d - h) * k
                min_blows = min(min_blows, k+1)
                if rem <= 0:
                    min_blows = min(min_blows, k)
        if min_blows == float('inf'):
            print(-1)
        else:
            print(min_blows)

solve()","
def solve():
    t = int(input())
    for _ in range(t):
        n, x = map(int, input().split())
        
        min_blows = float('inf')
        
        for _ in range(n):
            d, h = map(int, input().split())
            if d >= x:
                min_blows = min(min_blows, 1)
            elif d - h <= 0:
                continue
            else:
                min_blows = min(min_blows, (x - d) // (d - h) + 2 if (x - d) % (d - h) else (x - d) // (d - h) + 1)
        
        if min_blows == float('inf'):
            print(-1)
        else:
            print(min_blows)
  
solve()","73.33333333333333","86.66666666666667","86.66666666666667","93.33333333333333","","","",""
"APPS/7","
QUESTION:
Anton likes to listen to fairy tales, especially when Danik, Anton's best friend, tells them. Right now Danik tells Anton a fairy tale:

""Once upon a time, there lived an emperor. He was very rich and had much grain. One day he ordered to build a huge barn to put there all his grain. Best builders were building that barn for three days and three nights. But they overlooked and there remained a little hole in the barn, from which every day sparrows came through. Here flew a sparrow, took a grain and flew away...""

More formally, the following takes place in the fairy tale. At the beginning of the first day the barn with the capacity of n grains was full. Then, every day (starting with the first day) the following happens:  m grains are brought to the barn. If m grains doesn't fit to the barn, the barn becomes full and the grains that doesn't fit are brought back (in this problem we can assume that the grains that doesn't fit to the barn are not taken into account).  Sparrows come and eat grain. In the i-th day i sparrows come, that is on the first day one sparrow come, on the second day two sparrows come and so on. Every sparrow eats one grain. If the barn is empty, a sparrow eats nothing. 

Anton is tired of listening how Danik describes every sparrow that eats grain from the barn. Anton doesn't know when the fairy tale ends, so he asked you to determine, by the end of which day the barn will become empty for the first time. Help Anton and write a program that will determine the number of that day!


-----Input-----

The only line of the input contains two integers n and m (1 ≤ n, m ≤ 10^18) — the capacity of the barn and the number of grains that are brought every day.


-----Output-----

Output one integer — the number of the day when the barn will become empty for the first time. Days are numbered starting with one.


-----Examples-----
Input
5 2

Output
4

Input
8 1

Output
5



-----Note-----

In the first sample the capacity of the barn is five grains and two grains are brought every day. The following happens:  At the beginning of the first day grain is brought to the barn. It's full, so nothing happens.  At the end of the first day one sparrow comes and eats one grain, so 5 - 1 = 4 grains remain.  At the beginning of the second day two grains are brought. The barn becomes full and one grain doesn't fit to it.  At the end of the second day two sparrows come. 5 - 2 = 3 grains remain.  At the beginning of the third day two grains are brought. The barn becomes full again.  At the end of the third day three sparrows come and eat grain. 5 - 3 = 2 grains remain.  At the beginning of the fourth day grain is brought again. 2 + 2 = 4 grains remain.  At the end of the fourth day four sparrows come and eat grain. 4 - 4 = 0 grains remain. The barn is empty. 

So the answer is 4, because by the end of the fourth day the barn becomes empty.
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    day = 1
    while n > 0:
        n -= day
        if n <= 0:
            break
        n += m
        day += 1
    return day

solve()","
def solve():
    n, m = map(int, input().split())
    
    day = 1
    grains = n
    
    while grains > 0:
        grains -= day
        if grains <= 0:
            break
        grains += m
        day += 1
    
    return day

solve()","
def solve():
    n, m = map(int, input().split())
    total_days = 0
    while n > 0:
        total_days += 1
        n -= total_days
        if n < 0:
            break
        n += m
    return total_days

solve()","
def solve():
    n, m = map(int, input().split())
    
    day = 0
    while n > 0:
        day += 1
        n -= day
        if n < 0:
            break
        n += m

    return day
 
solve()","0.0","0.0","0.0","0.0","","","",""
"APPS/8","
QUESTION:
Tokitsukaze is playing a game derivated from Japanese mahjong. In this game, she has three tiles in her hand. Each tile she owns is a suited tile, which means it has a suit (manzu, pinzu or souzu) and a number (a digit ranged from $1$ to $9$). In this problem, we use one digit and one lowercase letter, which is the first character of the suit, to represent a suited tile. All possible suited tiles are represented as 1m, 2m, $\ldots$, 9m, 1p, 2p, $\ldots$, 9p, 1s, 2s, $\ldots$, 9s.

In order to win the game, she must have at least one mentsu (described below) in her hand, so sometimes she should draw extra suited tiles. After drawing a tile, the number of her tiles increases by one. She can draw any tiles she wants, including those already in her hand.

Do you know the minimum number of extra suited tiles she needs to draw so that she can win?

Here are some useful definitions in this game:  A mentsu, also known as meld, is formed by a koutsu or a shuntsu;  A koutsu, also known as triplet, is made of three identical tiles, such as [1m, 1m, 1m], however, [1m, 1p, 1s] or [1m, 4m, 7m] is NOT a koutsu;  A shuntsu, also known as sequence, is made of three sequential numbered tiles in the same suit, such as [1m, 2m, 3m] and [5s, 7s, 6s], however, [9m, 1m, 2m] or [1m, 2p, 3s] is NOT a shuntsu. 

Some examples:   [2m, 3p, 2s, 4m, 1s, 2s, 4s] — it contains no koutsu or shuntsu, so it includes no mentsu;  [4s, 3m, 3p, 4s, 5p, 4s, 5p] — it contains a koutsu, [4s, 4s, 4s], but no shuntsu, so it includes a mentsu;  [5p, 5s, 9m, 4p, 1s, 7p, 7m, 6p] — it contains no koutsu but a shuntsu, [5p, 4p, 6p] or [5p, 7p, 6p], so it includes a mentsu. 

Note that the order of tiles is unnecessary and you can assume the number of each type of suited tiles she can draw is infinite.


-----Input-----

The only line contains three strings — the tiles in Tokitsukaze's hand. For each string, the first character is a digit ranged from $1$ to $9$ and the second character is m, p or s.


-----Output-----

Print a single integer — the minimum number of extra suited tiles she needs to draw.


-----Examples-----
Input
1s 2s 3s

Output
0

Input
9m 9m 9m

Output
0

Input
3p 9m 2p

Output
1



-----Note-----

In the first example, Tokitsukaze already has a shuntsu.

In the second example, Tokitsukaze already has a koutsu.

In the third example, Tokitsukaze can get a shuntsu by drawing one suited tile — 1p or 4p. The resulting tiles will be [3p, 9m, 2p, 1p] or [3p, 9m, 2p, 4p].
Use user-input-Based format and function signature solve()","
def solve():
    import itertools

    def is_koutsu(tiles):
        return any(tiles.count(tile) >= 3 for tile in set(tiles))

    def is_shuntsu(tiles):
        for tile in set(tiles):
            if all(tile + i in tiles for i in range(3)):
                return True
        return False

    def has_mentsu(tiles):
        return is_koutsu(tiles) or is_shuntsu(tiles)

    hand = input().split()
    tiles = [int(tile[0]) * 10 + ord(tile[1]) - ord('a') for tile in hand]
    min_extra_tiles = 3

    for extra_tiles in itertools.product(range(1, 10), 'mps'):
        new_tiles = tiles + [int(tile[0]) * 10 + ord(tile[1]) - ord('a') for tile in extra_tiles]
        if has_mentsu(new_tiles):
            min_extra_tiles = min(min_extra_tiles, sum(new_tiles.count(tile) < hand.count(tile) for tile in set(new_tiles)))

    print(min_extra_tiles)

solve()
","
def solve():
    tiles = input().split()
    
    suits = {'m': [], 'p': [], 's': []}
    
    for tile in tiles:
        number = int(tile[0])
        s = tile[1]
        suits[s].append(number)
    
    extra_tiles_needed = 2
    
    for suit in suits.values():
        suit.sort()
        suit.append(0)
        suit.append(0)
        suit.append(0)
        
        for i in range(3):
            extra_tiles_needed = min(extra_tiles_needed, 3 - (suit[i+2] - suit[i+1] <= 1) - (suit[i+1] - suit[i] <= 1))
    
    print(extra_tiles_needed)

solve()
","
def solve():
    hand = input().split()
    suits = {'m': [], 'p': [], 's': []}
    
    for tile in hand:
        num, suit = int(tile[0]), tile[1]
        suits[suit].append(num)
    
    extras = 2
    
    for suit in suits:
        suits[suit].sort()
        for i in range(len(suits[suit])-2):
            if suits[suit][i+2] - suits[suit][i] <= 2:
                extras = min(extras, 0)
    
    print(extras)

solve()","
def solve():
    tiles = input().split()
    suits = {'m': [], 'p': [], 's': []}
    
    for tile in tiles:
        number = int(tile[0])
        suit = tile[1]
        
        suits[suit].append(number)

    extra_tiles = 2
    
    for s in suits:
        for i in range(1, 8):
            count = suits[s].count(i)
            if count == 3:
                extra_tiles = min(extra_tiles, 0)
            elif count == 2 or count == 1:
                extra_tiles = min(extra_tiles, 1)
            else:
                extra_tiles = min(extra_tiles, 2)
    
    print(extra_tiles)

solve()","0.0","0.0","66.66666666666666","33.33333333333333","","","",""
"APPS/9","
QUESTION:
Yet another round on DecoForces is coming! Grandpa Maks wanted to participate in it but someone has stolen his precious sofa! And how can one perform well with such a major loss?

Fortunately, the thief had left a note for Grandpa Maks. This note got Maks to the sofa storehouse. Still he had no idea which sofa belongs to him as they all looked the same!

The storehouse is represented as matrix n × m. Every sofa takes two neighbouring by some side cells. No cell is covered by more than one sofa. There can be empty cells.

Sofa A is standing to the left of sofa B if there exist two such cells a and b that x_{a} < x_{b}, a is covered by A and b is covered by B. Sofa A is standing to the top of sofa B if there exist two such cells a and b that y_{a} < y_{b}, a is covered by A and b is covered by B. Right and bottom conditions are declared the same way. 

Note that in all conditions A ≠ B. Also some sofa A can be both to the top of another sofa B and to the bottom of it. The same is for left and right conditions.

The note also stated that there are cnt_{l} sofas to the left of Grandpa Maks's sofa, cnt_{r} — to the right, cnt_{t} — to the top and cnt_{b} — to the bottom.

Grandpa Maks asks you to help him to identify his sofa. It is guaranteed that there is no more than one sofa of given conditions.

Output the number of Grandpa Maks's sofa. If there is no such sofa that all the conditions are met for it then output -1.


-----Input-----

The first line contains one integer number d (1 ≤ d ≤ 10^5) — the number of sofas in the storehouse.

The second line contains two integer numbers n, m (1 ≤ n, m ≤ 10^5) — the size of the storehouse.

Next d lines contains four integer numbers x_1, y_1, x_2, y_2 (1 ≤ x_1, x_2 ≤ n, 1 ≤ y_1, y_2 ≤ m) — coordinates of the i-th sofa. It is guaranteed that cells (x_1, y_1) and (x_2, y_2) have common side, (x_1, y_1)  ≠  (x_2, y_2) and no cell is covered by more than one sofa.

The last line contains four integer numbers cnt_{l}, cnt_{r}, cnt_{t}, cnt_{b} (0 ≤ cnt_{l}, cnt_{r}, cnt_{t}, cnt_{b} ≤ d - 1).


-----Output-----

Print the number of the sofa for which all the conditions are met. Sofas are numbered 1 through d as given in input. If there is no such sofa then print -1.


-----Examples-----
Input
2
3 2
3 1 3 2
1 2 2 2
1 0 0 1

Output
1

Input
3
10 10
1 2 1 1
5 5 6 5
6 4 5 4
2 1 2 0

Output
2

Input
2
2 2
2 1 1 1
1 2 2 2
1 0 0 0

Output
-1



-----Note-----

Let's consider the second example.   The first sofa has 0 to its left, 2 sofas to its right ((1, 1) is to the left of both (5, 5) and (5, 4)), 0 to its top and 2 to its bottom (both 2nd and 3rd sofas are below).  The second sofa has cnt_{l} = 2, cnt_{r} = 1, cnt_{t} = 2 and cnt_{b} = 0.  The third sofa has cnt_{l} = 2, cnt_{r} = 1, cnt_{t} = 1 and cnt_{b} = 1. 

So the second one corresponds to the given conditions.

In the third example   The first sofa has cnt_{l} = 1, cnt_{r} = 1, cnt_{t} = 0 and cnt_{b} = 1.  The second sofa has cnt_{l} = 1, cnt_{r} = 1, cnt_{t} = 1 and cnt_{b} = 0. 

And there is no sofa with the set (1, 0, 0, 0) so the answer is -1.
Use user-input-Based format and function signature solve()","
def solve():
    d = int(input())
    n, m = map(int, input().split())
    sofas = []
    for _ in range(d):
        x1, y1, x2, y2 = map(int, input().split())
        sofas.append((x1, y1, x2, y2))
    
    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())
    
    for i, sofa in enumerate(sofas, 1):
        left_sofas = right_sofas = top_sofas = bottom_sofas = 0
        for other_sofa in sofas:
            if other_sofa[0] < sofa[0] and other_sofa[2] < sofa[0]:
                left_sofas += 1
            if other_sofa[0] > sofa[2] and other_sofa[2] > sofa[2]:
                right_sofas += 1
            if other_sofa[1] < sofa[1] and other_sofa[3] < sofa[1]:
                top_sofas += 1
            if other_sofa[1] > sofa[3] and other_sofa[3] > sofa[3]:
                bottom_sofas += 1
        
        if left_sofas == cnt_l and right_sofas == cnt_r and top_sofas == cnt_t and bottom_sofas == cnt_b:
            return i
    
    return -1

solve()","
def solve():
    import sys

    d = int(input())
    n, m = map(int, input().split())
    sofas = [list(map(int, input().split())) for _ in range(d)]
    cnt_l, cnt_r, cnt_t, cnt_b = map(int, sys.stdin.readline().split())

    for i, sofa in enumerate(sofas, 1):
        x1, y1, x2, y2 = sofa
        left_sofas = sum(1 for s in sofas if s[2] < x1 and y1 <= s[1] <= y2)
        right_sofas = sum(1 for s in sofas if s[0] > x2 and y1 <= s[1] <= y2)
        top_sofas = sum(1 for s in sofas if s[3] < y1 and x1 <= s[0] <= x2)
        bottom_sofas = sum(1 for s in sofas if s[1] > y2 and x1 <= s[0] <= x2)

        if left_sofas == cnt_l and right_sofas == cnt_r and top_sofas == cnt_t and bottom_sofas == cnt_b:
            return i

    return -1
  
solve()","
def solve():
    d = int(input())
    n, m = map(int, input().split())
    sofas = [list(map(int, input().split())) for _ in range(d)]
    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())

    valid_sofa = -1
    for i, sofa in enumerate(sofas, 1):
        x1, y1, x2, y2 = sofa
        left_sofas = right_sofas = top_sofas = bottom_sofas = 0

        for other_sofa in sofas:
            ox1, oy1, ox2, oy2 = other_sofa
            if oy1 < y1 < oy2 or oy1 < y2 < oy2 or oy1 == y1 == oy2:
                if ox1 < x1:
                    left_sofas += 1
                elif ox2 > x2:
                    right_sofas += 1

            if ox1 < x1 < ox2 or ox1 < x2 < ox2 or ox1 == x1 == ox2:
                if oy1 < y1:
                    top_sofas += 1
                elif oy2 > y2:
                    bottom_sofas += 1

        if left_sofas == cnt_l and right_sofas == cnt_r and top_sofas == cnt_t and bottom_sofas == cnt_b:
            valid_sofa = i
            break

    print(valid_sofa)

solve()
","
def solve():
    d = int(input())
    n, m = map(int, input().split())
    sofas = []
    for _ in range(d):
        x1, y1, x2, y2 = map(int, input().split())
        sofas.append((x1, y1, x2, y2))
    cnt_l, cnt_r, cnt_t, cnt_b = map(int, input().split())
    
    for i, sofa in enumerate(sofas, 1):
        x1, y1, x2, y2 = sofa
        left = right = top = bottom = 0
        for other_sofa in sofas:
            if sofa != other_sofa:
                if x1 < other_sofa[0] and x1 < other_sofa[2]:
                    right += 1
                if x2 > other_sofa[0] and x2 > other_sofa[2]:
                    left += 1
                if y1 < other_sofa[1] and y1 < other_sofa[3]:
                    bottom += 1
                if y2 > other_sofa[1] and y2 > other_sofa[3]:
                    top += 1
        if left == cnt_l and right == cnt_r and top == cnt_t and bottom == cnt_b:
            return i
    return -1

solve()","0.0","0.0","60.0","0.0","","","",""
"APPS/10","
QUESTION:
On the planet Mars a year lasts exactly n days (there are no leap years on Mars). But Martians have the same weeks as earthlings — 5 work days and then 2 days off. Your task is to determine the minimum possible and the maximum possible number of days off per year on Mars.


-----Input-----

The first line of the input contains a positive integer n (1 ≤ n ≤ 1 000 000) — the number of days in a year on Mars.


-----Output-----

Print two integers — the minimum possible and the maximum possible number of days off per year on Mars.


-----Examples-----
Input
14

Output
4 4

Input
2

Output
0 2



-----Note-----

In the first sample there are 14 days in a year on Mars, and therefore independently of the day a year starts with there will be exactly 4 days off .

In the second sample there are only 2 days in a year on Mars, and they can both be either work days or days off.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    min_days_off = (n // 7) * 2 + max(0, n % 7 - 5)
    max_days_off = min(n // 7 * 2 + min(n % 7, 2), n)
    print(min_days_off, max_days_off)

solve()
","
def solve():
    n = int(input())
    
    # Maximum possible days off will be when all 7 days are days off
    max_days_off = n // 7 * 2 + min(n % 7, 2)
    
    # Minimum possible days off will be when all 7 days are work days
    min_days_off = n // 7 * 2 + max(0, n % 7 - 5)
    
    print(min_days_off, max_days_off)

solve()
","
def solve():
    n = int(input())
    min_days_off = (n // 7) * 2 + max(n % 7 - 5, 0)
    max_days_off = min(n // 7 * 2 + min(n % 7, 2), n)

    print(min_days_off, max_days_off)

solve()","
def solve():
    n = int(input())
    min_days_off = (n // 7) * 2 + max(0, n % 7 - 5)
    max_days_off = min(2, n)
    print(min_days_off, max_days_off)

solve()","100.0","100.0","100.0","46.666666666666664","","","",""
"APPS/11","
QUESTION:
Little Joty has got a task to do. She has a line of n tiles indexed from 1 to n. She has to paint them in a strange pattern.

An unpainted tile should be painted Red if it's index is divisible by a and an unpainted tile should be painted Blue if it's index is divisible by b. So the tile with the number divisible by a and b can be either painted Red or Blue.

After her painting is done, she will get p chocolates for each tile that is painted Red and q chocolates for each tile that is painted Blue.

Note that she can paint tiles in any order she wants.

Given the required information, find the maximum number of chocolates Joty can get.


-----Input-----

The only line contains five integers n, a, b, p and q (1 ≤ n, a, b, p, q ≤ 10^9).


-----Output-----

Print the only integer s — the maximum number of chocolates Joty can get.

Note that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.


-----Examples-----
Input
5 2 3 12 15

Output
39

Input
20 2 3 3 5

Output
51
Use user-input-Based format and function signature solve()","
def solve():
    n, a, b, p, q = map(int, input().split())
    lcm = (a * b) // math.gcd(a, b)
    red_tiles = n // a - n // lcm
    blue_tiles = n // b - n // lcm
    max_chocolates = red_tiles * p + blue_tiles * q + min(p, q) * (n // lcm)
    print(max_chocolates)

import math

solve()
","
def solve():
    n, a, b, p, q = map(int, input().split())
    lcm = (a * b) // math.gcd(a, b)
    red_tiles = n // a
    blue_tiles = n // b
    common_tiles = n // lcm
    chocolates = (red_tiles - common_tiles) * p + common_tiles * max(p, q) + (blue_tiles - common_tiles) * q
    print(chocolates)

import math

solve()
","
def solve():
    n, a, b, p, q = map(int, input().split())
    lcm = a*b // math.gcd(a, b)
    red_tiles = n//a - n//lcm
    blue_tiles = n//b - n//lcm
    total_chocolates = red_tiles*p + blue_tiles*q + n//lcm*max(p, q)
    print(total_chocolates)

solve()","
def solve():
    n, a, b, p, q = map(int, input().split())
    gcd_ab = a * b // math.gcd(a, b)
    red_tiles = n // a - n // gcd_ab
    blue_tiles = n // b - n // gcd_ab
    s = red_tiles * p + blue_tiles * q + n // gcd_ab * max(p, q)
    print(s)

import math
solve()
","93.33333333333333","100.0","0.0","100.0","","","",""
"APPS/12","
QUESTION:
Vova has won $n$ trophies in different competitions. Each trophy is either golden or silver. The trophies are arranged in a row.

The beauty of the arrangement is the length of the longest subsegment consisting of golden trophies. Vova wants to swap two trophies (not necessarily adjacent ones) to make the arrangement as beautiful as possible — that means, to maximize the length of the longest such subsegment.

Help Vova! Tell him the maximum possible beauty of the arrangement if he is allowed to do at most one swap.


-----Input-----

The first line contains one integer $n$ ($2 \le n \le 10^5$) — the number of trophies.

The second line contains $n$ characters, each of them is either G or S. If the $i$-th character is G, then the $i$-th trophy is a golden one, otherwise it's a silver trophy. 


-----Output-----

Print the maximum possible length of a subsegment of golden trophies, if Vova is allowed to do at most one swap.


-----Examples-----
Input
10
GGGSGGGSGG

Output
7

Input
4
GGGG

Output
4

Input
3
SSS

Output
0



-----Note-----

In the first example Vova has to swap trophies with indices $4$ and $10$. Thus he will obtain the sequence ""GGGGGGGSGS"", the length of the longest subsegment of golden trophies is $7$. 

In the second example Vova can make no swaps at all. The length of the longest subsegment of golden trophies in the sequence is $4$. 

In the third example Vova cannot do anything to make the length of the longest subsegment of golden trophies in the sequence greater than $0$.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    trophies = input().strip()
    
    g_count = trophies.count('G')
    
    max_beauty = 0
    for i in range(n):
        for j in range(i, n):
            if trophies[i] == 'S' and trophies[j] == 'S':
                max_beauty = max(max_beauty, g_count + 1)
            elif trophies[i] == 'S' or trophies[j] == 'S':
                max_beauty = max(max_beauty, g_count)
            else:
                max_beauty = max(max_beauty, g_count - (j - i + 1))
    
    print(max_beauty)

solve()
","
def solve():
    n = int(input())
    trophies = input().strip()

    max_beauty = 0
    curr_beauty = 0
    golden_count = trophies.count('G')

    for i in range(n):
        if trophies[i] == 'G':
            curr_beauty += 1
        else:
            curr_beauty = 0

        max_beauty = max(max_beauty, curr_beauty)

    if golden_count < n:
        max_beauty = min(max_beauty + 1, golden_count)

    print(max_beauty)

solve()
","
def solve():
    n = int(input())
    trophies = input()
    
    g_count = trophies.count('G')
    
    max_beauty = 0
    current_beauty = 0
    for trophy in trophies:
        if trophy == 'G':
            current_beauty += 1
        else:
            max_beauty = max(max_beauty, current_beauty)
            current_beauty = 0
            
    max_beauty = max(max_beauty, current_beauty)
    
    if g_count == n or g_count == 0:
        return max_beauty
    
    if max_beauty == g_count:
        return max_beauty + 1
    
    return min(max_beauty + 1, g_count)
  
solve()","
def solve():
    n = int(input())
    trophies = input()

    num_gs = trophies.count('G')
    max_beauty = trophies.count('G')

    for i in range(n):
        count = 0
        if trophies[i] == 'S':
            swapped = trophies[:i] + 'G' + trophies[i+1:]
            for j in range(len(swapped)):
                if swapped[j] == 'G':
                    count += 1
                    max_beauty = max(max_beauty, count)
                else:
                    count = 0

    return max_beauty

solve()","0.0","80.0","0.0","0.0","","","",""
"APPS/13","
QUESTION:
Now you can take online courses in the Berland State University! Polycarp needs to pass k main online courses of his specialty to get a diploma. In total n courses are availiable for the passage.

The situation is complicated by the dependence of online courses, for each course there is a list of those that must be passed before starting this online course (the list can be empty, it means that there is no limitation).

Help Polycarp to pass the least number of courses in total to get the specialty (it means to pass all main and necessary courses). Write a program which prints the order of courses. 

Polycarp passes courses consistently, he starts the next course when he finishes the previous one. Each course can't be passed more than once. 


-----Input-----

The first line contains n and k (1 ≤ k ≤ n ≤ 10^5) — the number of online-courses and the number of main courses of Polycarp's specialty. 

The second line contains k distinct integers from 1 to n — numbers of main online-courses of Polycarp's specialty. 

Then n lines follow, each of them describes the next course: the i-th of them corresponds to the course i. Each line starts from the integer t_{i} (0 ≤ t_{i} ≤ n - 1) — the number of courses on which the i-th depends. Then there follows the sequence of t_{i} distinct integers from 1 to n — numbers of courses in random order, on which the i-th depends. It is guaranteed that no course can depend on itself. 

It is guaranteed that the sum of all values t_{i} doesn't exceed 10^5. 


-----Output-----

Print -1, if there is no the way to get a specialty. 

Otherwise, in the first line print the integer m — the minimum number of online-courses which it is necessary to pass to get a specialty. In the second line print m distinct integers — numbers of courses which it is necessary to pass in the chronological order of their passage. If there are several answers it is allowed to print any of them.


-----Examples-----
Input
6 2
5 3
0
0
0
2 2 1
1 4
1 5

Output
5
1 2 3 4 5 

Input
9 3
3 9 5
0
0
3 9 4 5
0
0
1 8
1 6
1 2
2 1 2

Output
6
1 2 9 4 5 3 

Input
3 3
1 2 3
1 2
1 3
1 1

Output
-1



-----Note-----

In the first test firstly you can take courses number 1 and 2, after that you can take the course number 4, then you can take the course number 5, which is the main. After that you have to take only the course number 3, which is the last not passed main course.
Use user-input-Based format and function signature solve()","
from collections import deque

def solve():
    n, k = map(int, input().split())
    main_courses = set(map(int, input().split()))
    dependencies = {}
    for i in range(1, n+1):
        dependencies[i] = set(map(int, input().split()[1:]))
    
    in_degree = [0] * (n+1)
    for i in range(1, n+1):
        for dep in dependencies[i]:
            in_degree[i] += 1
    
    queue = deque()
    for course in main_courses:
        if in_degree[course] == 0:
            queue.append(course)
    
    order = []
    while queue:
        course = queue.popleft()
        order.append(course)
        for i in range(1, n+1):
            if course in dependencies[i]:
                in_degree[i] -= 1
                if in_degree[i] == 0:
                    queue.append(i)
    
    if len(order) < k:
        print(-1)
    else:
        print(len(order))
        print("" "".join(map(str, order)))

solve()
","
python
from collections import defaultdict

def solve():
    n, k = map(int, input().split())
    main_courses = set(map(int, input().split()))

    prerequisites = defaultdict(list)

    for i in range(1, n+1):
        input_data = list(map(int, input().split()))
        prerequisites[i] = input_data[1:]

    visited = [False] * (n+1)
    passed_courses = []

    def dfs(course):
        if visited[course]:
            return
        for pre in prerequisites[course]:
            dfs(pre)
        visited[course] = True
        passed_courses.append(course)

    for main_course in main_courses:
        dfs(main_course)

    if all(visited[course] for course in main_courses):
        print(len(passed_courses))
        print(' '.join(map(str, passed_courses)))
    else:
        print(-1)

solve()
","
def solve():
    n, k = map(int, input().split())
    main_courses = list(map(int, input().split()))
    
    courses = {}
    for i in range(1, n+1):
        courses[i] = list(map(int, input().split()))[1:]
    
    passed = set(main_courses)
    order = []
    while len(order) < k:
        next_course = -1
        for course in courses:
            if course not in passed and all(dep in passed for dep in courses[course]):
                next_course = course
                break
        if next_course == -1:
            print(-1)
            return
        order.append(next_course)
        passed.add(next_course)
    
    print(len(order))
    print(' '.join(map(str, order)))

solve()","
from collections import deque

def solve():
    n, k = map(int, input().split())
    main_courses = set(map(int, input().split()))
    prerequisites = [[] for _ in range(n)]
    
    for i in range(n):
        prereq = list(map(int, input().split()))[1:]
        prerequisites[i] = prereq
    
    indegree = [0] * n
    for prereqs in prerequisites:
        for p in prereqs:
            indegree[p-1] += 1
    
    order = []
    queue = deque([course+1 for course in range(n) if indegree[course] == 0])
    
    while queue:
        course = queue.popleft()
        order.append(course)
        
        for nxt in prerequisites[course-1]:
            indegree[nxt-1] -= 1
            if indegree[nxt-1] == 0:
                queue.append(nxt)
    
    if len(order) < n:
        print(-1)
    else:
        print(len(order))
        print(' '.join(map(str, order)))

# Example usage
solve()
","53.333333333333336","0.0","20.0","33.33333333333333","","","",""
"APPS/14","
QUESTION:
Let's suppose you have an array a, a stack s (initially empty) and an array b (also initially empty).

You may perform the following operations until both a and s are empty:

  Take the first element of a, push it into s and remove it from a (if a is not empty);  Take the top element from s, append it to the end of array b and remove it from s (if s is not empty). 

You can perform these operations in arbitrary order.

If there exists a way to perform the operations such that array b is sorted in non-descending order in the end, then array a is called stack-sortable.

For example, [3, 1, 2] is stack-sortable, because b will be sorted if we perform the following operations:

  Remove 3 from a and push it into s;  Remove 1 from a and push it into s;  Remove 1 from s and append it to the end of b;  Remove 2 from a and push it into s;  Remove 2 from s and append it to the end of b;  Remove 3 from s and append it to the end of b. 

After all these operations b = [1, 2, 3], so [3, 1, 2] is stack-sortable. [2, 3, 1] is not stack-sortable.

You are given k first elements of some permutation p of size n (recall that a permutation of size n is an array of size n where each integer from 1 to n occurs exactly once). You have to restore the remaining n - k elements of this permutation so it is stack-sortable. If there are multiple answers, choose the answer such that p is lexicographically maximal (an array q is lexicographically greater than an array p iff there exists some integer k such that for every i < k q_{i} = p_{i}, and q_{k} > p_{k}). You may not swap or change any of first k elements of the permutation.

Print the lexicographically maximal permutation p you can obtain.

If there exists no answer then output -1.


-----Input-----

The first line contains two integers n and k (2 ≤ n ≤ 200000, 1 ≤ k < n) — the size of a desired permutation, and the number of elements you are given, respectively.

The second line contains k integers p_1, p_2, ..., p_{k} (1 ≤ p_{i} ≤ n) — the first k elements of p. These integers are pairwise distinct.


-----Output-----

If it is possible to restore a stack-sortable permutation p of size n such that the first k elements of p are equal to elements given in the input, print lexicographically maximal such permutation.

Otherwise print -1.


-----Examples-----
Input
5 3
3 2 1

Output
3 2 1 5 4 
Input
5 3
2 3 1

Output
-1

Input
5 1
3

Output
3 2 1 5 4 
Input
5 2
3 4

Output
-1
Use user-input-Based format and function signature solve()","
def solve():
    import sys
    input = sys.stdin.readline

    n, k = map(int, input().split())
    p = list(map(int, input().split()))

    s = []
    b = []
    used = [False] * (n + 1)

    for i in p:
        used[i] = True

    cur = k + 1
    for i in range(1, k + 1):
        while cur <= n and used[cur]:
            cur += 1
        if cur > n:
            print(-1)
            return
        b.append(cur)
        cur += 1

    for i in range(k - 1, -1, -1):
        s.append(p[i])
        while s and s[-1] == cur:
            b.append(s.pop())
            cur += 1

    if len(b) == n:
        print(' '.join(map(str, b)))
    else:
        print(-1)

solve()
","
def solve():
    from heapq import heappop, heappush
    n, k = map(int, input().split())
    p = list(map(int, input().split()))

    s = []
    b = []
    push_num = n

    for i in range(1, k+1):
        x = p[i-1]
        b.append(x)
        if x == push_num:
            while s and s[-1] == push_num:
                b.append(heappop(s))
                push_num -= 1
        else:
            while push_num > x:
                heappush(s, push_num)
                push_num -= 1

    while push_num > 0:
        heappush(s, push_num)
        push_num -= 1

    for i in range(len(s), 0, -1):
        b.append(heappop(s))

    if len(b) < n:
        print(-1)
    else:
        print(' '.join(map(str, b)))

solve()
","
def solve():
    n, k = map(int, input().split())
    p = list(map(int, input().split()))

    arr = [i for i in range(1, n + 1) if i not in p]

    res = []
    stack = []

    for x in p:
        while stack and stack[-1] < x:
            res.append(stack.pop())
        stack.append(x)

    for x in reversed(arr):
        while stack and stack[-1] < x:
            res.append(stack.pop())
        stack.append(x)

    if len(res) < n - k:
        print(-1)
    else:
        print(' '.join(map(str, res)))

solve()
","
from collections import deque

def solve():
    n, k = map(int, input().split())
    p = list(map(int, input().split()))

    to_restore = deque()
    current = n

    for i in reversed(range(1, k+1)):
        if p[i-1] == current:
            to_restore.appendleft(current)
            current -= 1
        else:
            break

    if not to_restore:
        print(-1)
        return

    to_fill = deque(range(1, current+1))

    while to_restore:
        if to_fill and to_fill[0] > to_restore[0]:
            print(-1)
            return
        if to_fill and to_fill[0] == to_restore[0]:
            to_restore.popleft()
            to_fill.popleft()
        else:
            to_fill.appendleft(to_restore.popleft())

    result = list(to_fill) + list(to_restore)
    print(*result)


solve()","80.0","0.0","46.666666666666664","73.33333333333333","","","",""
"APPS/15","
QUESTION:
Vasya likes everything infinite. Now he is studying the properties of a sequence s, such that its first element is equal to a (s_1 = a), and the difference between any two neighbouring elements is equal to c (s_{i} - s_{i} - 1 = c). In particular, Vasya wonders if his favourite integer b appears in this sequence, that is, there exists a positive integer i, such that s_{i} = b. Of course, you are the person he asks for a help.


-----Input-----

The first line of the input contain three integers a, b and c ( - 10^9 ≤ a, b, c ≤ 10^9) — the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.


-----Output-----

If b appears in the sequence s print ""YES"" (without quotes), otherwise print ""NO"" (without quotes).


-----Examples-----
Input
1 7 3

Output
YES

Input
10 10 0

Output
YES

Input
1 -4 5

Output
NO

Input
0 60 50

Output
NO



-----Note-----

In the first sample, the sequence starts from integers 1, 4, 7, so 7 is its element.

In the second sample, the favorite integer of Vasya is equal to the first element of the sequence.

In the third sample all elements of the sequence are greater than Vasya's favorite integer.

In the fourth sample, the sequence starts from 0, 50, 100, and all the following elements are greater than Vasya's favorite integer.
Use user-input-Based format and function signature solve()","
def solve():
    a, b, c = map(int, input().split())
    if c == 0:
        if a == b:
            print(""YES"")
        else:
            print(""NO"")
    else:
        if (b - a) % c == 0 and (b - a) // c >= 0:
            print(""YES"")
        else:
            print(""NO"")

solve()
","
def solve():
    a, b, c = map(int, input().split())
    
    if c == 0:
        if a == b:
            print(""YES"")
        else:
            print(""NO"")
    elif (b - a) % c == 0 and ((b - a) // c) >= 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    a, b, c = map(int, input().split())
    if c == 0:
        if a == b:
            print(""YES"")
        else:
            print(""NO"")
    else:
        if (b - a) % c == 0 and (b - a) // c >= 0:
            print(""YES"")
        else:
            print(""NO"")

solve()","
def solve():
    a, b, c = map(int, input().split())
    if c == 0:
        if a == b:
            print(""YES"")
        else:
            print(""NO"")
    else:
        if (b - a) % c == 0 and (b - a) // c >= 0:
            print(""YES"")
        else:
            print(""NO"")

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/16","
QUESTION:
A string is called bracket sequence if it does not contain any characters other than ""("" and "")"". A bracket sequence is called regular if it it is possible to obtain correct arithmetic expression by inserting characters ""+"" and ""1"" into this sequence. For example, """", ""(())"" and ""()()"" are regular bracket sequences; ""))"" and "")(("" are bracket sequences (but not regular ones), and ""(a)"" and ""(1)+(1)"" are not bracket sequences at all.

You have a number of strings; each string is a bracket sequence of length $2$. So, overall you have $cnt_1$ strings ""(("", $cnt_2$ strings ""()"", $cnt_3$ strings "")("" and $cnt_4$ strings ""))"". You want to write all these strings in some order, one after another; after that, you will get a long bracket sequence of length $2(cnt_1 + cnt_2 + cnt_3 + cnt_4)$. You wonder: is it possible to choose some order of the strings you have such that you will get a regular bracket sequence? Note that you may not remove any characters or strings, and you may not add anything either.


-----Input-----

The input consists of four lines, $i$-th of them contains one integer $cnt_i$ ($0 \le cnt_i \le 10^9$).


-----Output-----

Print one integer: $1$ if it is possible to form a regular bracket sequence by choosing the correct order of the given strings, $0$ otherwise.


-----Examples-----
Input
3
1
4
3

Output
1

Input
0
0
0
0

Output
1

Input
1
2
3
4

Output
0



-----Note-----

In the first example it is possible to construct a string ""(())()(()((()()()())))"", which is a regular bracket sequence.

In the second example it is possible to construct a string """", which is a regular bracket sequence.
Use user-input-Based format and function signature solve()","
def solve():
    cnt_1 = int(input())
    cnt_2 = int(input())
    cnt_3 = int(input())
    cnt_4 = int(input())
    
    if cnt_1 == cnt_4 and cnt_1 > 0:
        print(0)
    elif cnt_3 > 0 and cnt_1 == 0:
        print(0)
    else:
        print(1)

solve()
","
def solve():
    cnt_values = [int(input()) for _ in range(4)]
    
    if cnt_values[1] > 0 and cnt_values[2] == 0 and cnt_values[3] == 0:
        print(1)
    elif cnt_values[1] == cnt_values[3]:
        print(1)
    elif cnt_values[1] > cnt_values[3]:
        if cnt_values[0] % 2 == 0:
            print(1)
        elif cnt_values[0] > 0:
            print(1)
        elif cnt_values[1] - cnt_values[3] > 1:
            print(1)
        else:
            print(0)
    else:
        print(0)

solve()","
def solve():
    cnt1 = int(input())
    cnt2 = int(input())
    cnt3 = int(input())
    cnt4 = int(input())
    
    if cnt1 > 0 and cnt4 > 0:
        print(0)
    elif cnt3 % 2 == 1:
        print(0)
    elif cnt1 == cnt4:
        print(1)
    else:
        print(0)


solve()
","
def solve():
    cnt_1 = int(input())
    cnt_2 = int(input())
    cnt_3 = int(input())
    cnt_4 = int(input())

    if cnt_1 == cnt_4 == 0 and cnt_2 == cnt_3:
        print(1)
    else:
        print(0)

solve()
","26.666666666666668","40.0","60.0","60.0","","","",""
"APPS/17","
QUESTION:
Arpa is researching the Mexican wave.

There are n spectators in the stadium, labeled from 1 to n. They start the Mexican wave at time 0. 

  At time 1, the first spectator stands.  At time 2, the second spectator stands.  ...  At time k, the k-th spectator stands.  At time k + 1, the (k + 1)-th spectator stands and the first spectator sits.  At time k + 2, the (k + 2)-th spectator stands and the second spectator sits.  ...  At time n, the n-th spectator stands and the (n - k)-th spectator sits.  At time n + 1, the (n + 1 - k)-th spectator sits.  ...  At time n + k, the n-th spectator sits. 

Arpa wants to know how many spectators are standing at time t.


-----Input-----

The first line contains three integers n, k, t (1 ≤ n ≤ 10^9, 1 ≤ k ≤ n, 1 ≤ t < n + k).


-----Output-----

Print single integer: how many spectators are standing at time t.


-----Examples-----
Input
10 5 3

Output
3

Input
10 5 7

Output
5

Input
10 5 12

Output
3



-----Note-----

In the following a sitting spectator is represented as -, a standing spectator is represented as ^.

  At t = 0  ---------- $\Rightarrow$ number of standing spectators = 0.  At t = 1  ^--------- $\Rightarrow$ number of standing spectators = 1.  At t = 2  ^^-------- $\Rightarrow$ number of standing spectators = 2.  At t = 3  ^^^------- $\Rightarrow$ number of standing spectators = 3.  At t = 4  ^^^^------ $\Rightarrow$ number of standing spectators = 4.  At t = 5  ^^^^^----- $\Rightarrow$ number of standing spectators = 5.  At t = 6  -^^^^^---- $\Rightarrow$ number of standing spectators = 5.  At t = 7  --^^^^^--- $\Rightarrow$ number of standing spectators = 5.  At t = 8  ---^^^^^-- $\Rightarrow$ number of standing spectators = 5.  At t = 9  ----^^^^^- $\Rightarrow$ number of standing spectators = 5.  At t = 10 -----^^^^^ $\Rightarrow$ number of standing spectators = 5.  At t = 11 ------^^^^ $\Rightarrow$ number of standing spectators = 4.  At t = 12 -------^^^ $\Rightarrow$ number of standing spectators = 3.  At t = 13 --------^^ $\Rightarrow$ number of standing spectators = 2.  At t = 14 ---------^ $\Rightarrow$ number of standing spectators = 1.  At t = 15 ---------- $\Rightarrow$ number of standing spectators = 0.
Use user-input-Based format and function signature solve()","
def solve():
    n, k, t = map(int, input().split())
    if t <= k:
        print(t)
    elif t <= n:
        print(k)
    else:
        print(n + k - t)

solve()
","
def solve():
    n, k, t = map(int, input().split())
    if t <= k:
        print(t)
    elif t <= n:
        print(k)
    else:
        print(n + k - t)

solve()
","
def solve():
    n, k, t = map(int, input().split())
    if t <= k:
        print(t)
    elif t <= n:
        print(k)
    else:
        print(k - (t - n))

solve()
","
def solve():
    n, k, t = map(int, input().split())
    if t <= k:
        print(t)
    elif t <= n:
        print(k)
    else:
        print(max(0, k - (t - n)))

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/18","
QUESTION:
Petya recieved a gift of a string s with length up to 10^5 characters for his birthday. He took two more empty strings t and u and decided to play a game. This game has two possible moves:  Extract the first character of s and append t with this character.  Extract the last character of t and append u with this character. 

Petya wants to get strings s and t empty and string u lexicographically minimal.

You should write a program that will help Petya win the game.


-----Input-----

First line contains non-empty string s (1 ≤ |s| ≤ 10^5), consisting of lowercase English letters.


-----Output-----

Print resulting string u.


-----Examples-----
Input
cab

Output
abc

Input
acdb

Output
abdc
Use user-input-Based format and function signature solve()","
def solve():
    import sys
    input_string = sys.stdin.readline().strip()
    
    t = """"
    u = """"
    
    for char in input_string:
        if not t or char < t[0]:
            t = char + t
        else:
            t = t + char
    u = t[::-1]
    
    return u

solve()","
def solve():
    from collections import deque
    
    s = input()
    t = deque()
    u = []
    
    for char in s:
        if not t or t[0] <= char:
            t.appendleft(char)
        else:
            t.append(char)
    
    while t:
        u.append(t.popleft())
    
    print(''.join(u))

solve()
","
def solve():
    import sys
    s = sys.stdin.readline().strip()

    t = []
    u = []

    start = 0
    end = len(s) - 1
    s_list = list(s)

    while start <= end:
        if not t or s_list[start] <= t[-1]:
            t.append(s_list[start])
            start += 1
        else:
            u.append(t.pop())

    print("""".join(u))

solve()
","
def solve():
    import sys
    s = sys.stdin.readline().strip()
    n = len(s)
    
    t = []
    u = []
    
    i, j = 0, n-1
    while i <= j:
        if s[i] < s[j]:
            u.append(s[i])
            i += 1
        else:
            u.append(s[j])
            j -= 1
    
    print(''.join(u))

solve()
","0.0","20.0","0.0","33.33333333333333","","","",""
"APPS/19","
QUESTION:
Polycarp has recently created a new level in this cool new game Berlio Maker 85 and uploaded it online. Now players from all over the world can try his level.

All levels in this game have two stats to them: the number of plays and the number of clears. So when a player attempts the level, the number of plays increases by $1$. If he manages to finish the level successfully then the number of clears increases by $1$ as well. Note that both of the statistics update at the same time (so if the player finishes the level successfully then the number of plays will increase at the same time as the number of clears).

Polycarp is very excited about his level, so he keeps peeking at the stats to know how hard his level turns out to be.

So he peeked at the stats $n$ times and wrote down $n$ pairs of integers — $(p_1, c_1), (p_2, c_2), \dots, (p_n, c_n)$, where $p_i$ is the number of plays at the $i$-th moment of time and $c_i$ is the number of clears at the same moment of time. The stats are given in chronological order (i.e. the order of given pairs is exactly the same as Polycarp has written down).

Between two consecutive moments of time Polycarp peeked at the stats many players (but possibly zero) could attempt the level.

Finally, Polycarp wonders if he hasn't messed up any records and all the pairs are correct. If there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then he considers his records correct.

Help him to check the correctness of his records.

For your convenience you have to answer multiple independent test cases.


-----Input-----

The first line contains a single integer $T$ $(1 \le T \le 500)$ — the number of test cases.

The first line of each test case contains a single integer $n$ ($1 \le n \le 100$) — the number of moments of time Polycarp peeked at the stats.

Each of the next $n$ lines contains two integers $p_i$ and $c_i$ ($0 \le p_i, c_i \le 1000$) — the number of plays and the number of clears of the level at the $i$-th moment of time.

Note that the stats are given in chronological order.


-----Output-----

For each test case print a single line.

If there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then print ""YES"".

Otherwise, print ""NO"".

You can print each letter in any case (upper or lower).


-----Example-----
Input
6
3
0 0
1 1
1 2
2
1 0
1000 3
4
10 1
15 2
10 2
15 2
1
765 432
2
4 4
4 3
5
0 0
1 0
1 0
1 0
1 0

Output
NO
YES
NO
YES
NO
YES



-----Note-----

In the first test case at the third moment of time the number of clears increased but the number of plays did not, that couldn't have happened.

The second test case is a nice example of a Super Expert level.

In the third test case the number of plays decreased, which is impossible.

The fourth test case is probably an auto level with a single jump over the spike.

In the fifth test case the number of clears decreased, which is also impossible.

Nobody wanted to play the sixth test case; Polycarp's mom attempted it to make him feel better, however, she couldn't clear it.
Use user-input-Based format and function signature solve()","
def solve():
    T = int(input())
    for _ in range(T):
        n = int(input())
        valid = True
        prev_plays, prev_clears = 0, 0
        for _ in range(n):
            p, c = map(int, input().split())
            if p < prev_plays or c < prev_clears or p - prev_plays < c - prev_clears:
                valid = False
            prev_plays, prev_clears = p, c
        if valid:
            print(""YES"")
        else:
            print(""NO"")

solve()
","
def solve():
    T = int(input())
    
    for _ in range(T):
        n = int(input())
        stats = []
        for _ in range(n):
            p, c = map(int, input().split())
            stats.append((p, c))
        
        possible = True
        prev_plays = 0
        prev_clears = 0
        for plays, clears in stats:
            if plays < prev_plays or clears < prev_clears or clears > plays:
                possible = False
                break
            diff_plays = plays - prev_plays
            diff_clears = clears - prev_clears
            if diff_clears > diff_plays:
                possible = False
                break
            prev_plays = plays
            prev_clears = clears
        
        if possible:
            print(""YES"")
        else:
            print(""NO"")

solve()
  ","
def solve():
    T = int(input())
    for _ in range(T):
        n = int(input())
        stats = []
        for _ in range(n):
            p, c = map(int, input().split())
            stats.append((p, c))
        
        valid = True
        for i in range(1, n):
            if stats[i][0] < stats[i-1][0] or stats[i][1] < stats[i-1][1] or stats[i][0] - stats[i-1][0] < stats[i][1] - stats[i-1][1]:
                valid = False
                break
        
        if valid:
            print(""YES"")
        else:
            print(""NO"")

solve()
","
def solve():
    T = int(input())
    for _ in range(T):
        n = int(input())
        correct_records = True
        prev_plays = 0
        prev_clears = 0
        for _ in range(n):
            p, c = map(int, input().split())
            if p < prev_plays or c < prev_clears or c > p:
                correct_records = False
            diff_plays = p - prev_plays
            diff_clears = c - prev_clears
            if diff_clears > diff_plays:
                correct_records = False
            prev_plays = p
            prev_clears = c
        if correct_records:
            print(""YES"")
        else:
            print(""NO"")

solve()
  ","100.0","100.0","100.0","100.0","","","",""
"APPS/20","
QUESTION:
Karen is getting ready for a new school day!

 [Image] 

It is currently hh:mm, given in a 24-hour format. As you know, Karen loves palindromes, and she believes that it is good luck to wake up when the time is a palindrome.

What is the minimum number of minutes she should sleep, such that, when she wakes up, the time is a palindrome?

Remember that a palindrome is a string that reads the same forwards and backwards. For instance, 05:39 is not a palindrome, because 05:39 backwards is 93:50. On the other hand, 05:50 is a palindrome, because 05:50 backwards is 05:50.


-----Input-----

The first and only line of input contains a single string in the format hh:mm (00 ≤  hh  ≤ 23, 00 ≤  mm  ≤ 59).


-----Output-----

Output a single integer on a line by itself, the minimum number of minutes she should sleep, such that, when she wakes up, the time is a palindrome.


-----Examples-----
Input
05:39

Output
11

Input
13:31

Output
0

Input
23:59

Output
1



-----Note-----

In the first test case, the minimum number of minutes Karen should sleep for is 11. She can wake up at 05:50, when the time is a palindrome.

In the second test case, Karen can wake up immediately, as the current time, 13:31, is already a palindrome.

In the third test case, the minimum number of minutes Karen should sleep for is 1 minute. She can wake up at 00:00, when the time is a palindrome.
Use user-input-Based format and function signature solve()","
def solve():
    from datetime import datetime, timedelta

    current_time = input().strip()
    current_time_obj = datetime.strptime(current_time, '%H:%M')

    while True:
        current_time_obj += timedelta(minutes=1)
        current_time_str = current_time_obj.strftime('%H:%M')
        if current_time_str == current_time_str[::-1]:
            break

    minutes_to_sleep = (current_time_obj - datetime.strptime(current_time, '%H:%M')).seconds // 60
    print(minutes_to_sleep)

solve()
","
def solve():
    time = input().strip()
    hh, mm = map(int, time.split(':'))
    
    def is_palindrome(hh, mm):
        return str(hh).zfill(2) == str(mm).zfill(2)[::-1]

    minutes_to_sleep = 0
    while not is_palindrome(hh, mm):
        mm += 1
        if mm == 60:
            mm = 0
            hh = (hh + 1) % 24
        minutes_to_sleep += 1

    print(minutes_to_sleep)

solve()
","
def solve():
    import math
    
    def is_palindrome(hour, minute):
        return str(hour).zfill(2) + str(minute).zfill(2) == str(minute).zfill(2)[::-1] + str(hour).zfill(2)
    
    def count_minutes_until_palindrome(current_hour, current_minute):
        total_minutes = current_hour * 60 + current_minute
        
        while True:
            total_minutes = (total_minutes + 1) % (24 * 60)
            hour = total_minutes // 60
            minute = total_minutes % 60
            if is_palindrome(hour, minute):
                return (hour - current_hour) * 60 + (minute - current_minute) % 60
    
    current_time = input().strip().split(':')
    current_hour = int(current_time[0])
    current_minute = int(current_time[1])
    
    result = count_minutes_until_palindrome(current_hour, current_minute)
    print(result)

solve()
  ","
def solve():
    from datetime import datetime, timedelta
    
    time_str = input().strip()
    current_time = datetime.strptime(time_str, '%H:%M')
    
    while True:
        current_time += timedelta(minutes=1)
        if current_time.strftime('%H:%M') == current_time.strftime('%H:%M')[::-1]:
            break
    
    minutes_to_sleep = (current_time - datetime.strptime(time_str, '%H:%M')).total_seconds() / 60
    print(int(minutes_to_sleep))

solve()
","60.0","100.0","0.0","60.0","","","",""
"APPS/21","
QUESTION:
Nicholas has an array a that contains n distinct integers from 1 to n. In other words, Nicholas has a permutation of size n.

Nicholas want the minimum element (integer 1) and the maximum element (integer n) to be as far as possible from each other. He wants to perform exactly one swap in order to maximize the distance between the minimum and the maximum elements. The distance between two elements is considered to be equal to the absolute difference between their positions.


-----Input-----

The first line of the input contains a single integer n (2 ≤ n ≤ 100) — the size of the permutation.

The second line of the input contains n distinct integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ n), where a_{i} is equal to the element at the i-th position.


-----Output-----

Print a single integer — the maximum possible distance between the minimum and the maximum elements Nicholas can achieve by performing exactly one swap.


-----Examples-----
Input
5
4 5 1 3 2

Output
3

Input
7
1 6 5 3 4 7 2

Output
6

Input
6
6 5 4 3 2 1

Output
5



-----Note-----

In the first sample, one may obtain the optimal answer by swapping elements 1 and 2.

In the second sample, the minimum and the maximum elements will be located in the opposite ends of the array if we swap 7 and 2.

In the third sample, the distance between the minimum and the maximum elements is already maximum possible, so we just perform some unnecessary swap, for example, one can swap 5 and 2.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    min_idx = a.index(1)
    max_idx = a.index(n)
    
    max_distance = max(max_idx, min_idx, n-1-min_idx, n-1-max_idx)
    
    if min_idx > max_idx:
        min_idx, max_idx = max_idx, min_idx
    
    for i in range(n):
        if a[i] != 1 and a[i] != n and i != min_idx and i != max_idx:
            max_distance = max(max_distance, max(abs(i - min_idx), abs(i - max_idx)))
    
    print(max_distance)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    min_val = min(a)
    max_val = max(a)
    min_idx = a.index(min_val)
    max_idx = a.index(max_val)

    max_distance = max(max_idx, min_idx, n-1 - min_idx, n-1 - max_idx)
    if min_idx > max_idx:
        max_distance = max(max_distance, min_idx - max_idx + 1)
    elif max_idx > min_idx:
        max_distance = max(max_distance, max_idx - min_idx + 1)

    print(max_distance)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    min_index = a.index(1)
    max_index = a.index(n)

    if min_index > max_index:
        min_index, max_index = max_index, min_index

    max_distance = max(max_index, n - min_index - 1)

    if min_index == 0 and max_index == n - 1:
        print(max_distance)
    else:
        print(max(max_distance, n - min_index - 1, max_index))
  
solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    min_pos = a.index(1)
    max_pos = a.index(n)

    distances = [
        abs(min_pos - 0),
        abs(min_pos - (n-1)),
        abs(max_pos - 0),
        abs(max_pos - (n-1))
    ]
    max_distance = max(distances)

    if min_pos == 0:
        max_distance = max(max_distance, max_pos)
    if min_pos == n-1:
        max_distance = max(max_distance, n-1-max_pos)
    if max_pos == 0:
        max_distance = max(max_distance, min_pos)
    if max_pos == n-1:
        max_distance = max(max_distance, n-1-min_pos)

    print(max_distance)

solve()
","100.0","73.33333333333333","100.0","100.0","","","",""
"APPS/22","
QUESTION:
Let's call a string ""s-palindrome"" if it is symmetric about the middle of the string. For example, the string ""oHo"" is ""s-palindrome"", but the string ""aa"" is not. The string ""aa"" is not ""s-palindrome"", because the second half of it is not a mirror reflection of the first half.

 [Image] English alphabet 

You are given a string s. Check if the string is ""s-palindrome"".


-----Input-----

The only line contains the string s (1 ≤ |s| ≤ 1000) which consists of only English letters.


-----Output-----

Print ""TAK"" if the string s is ""s-palindrome"" and ""NIE"" otherwise.


-----Examples-----
Input
oXoxoXo

Output
TAK

Input
bod

Output
TAK

Input
ER

Output
NIE
Use user-input-Based format and function signature solve()","
def solve():
    s = input().strip()
    alphabet = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    mirror = ""AHIMOTUVWXY""
    
    n = len(s)
    if n % 2 == 0:
        return ""NIE""
    
    for i in range(n // 2):
        if s[i] != s[n - i - 1] or s[i] not in mirror or s[n - i - 1] != alphabet[mirror.index(s[i])]:
            return ""NIE""
    
    return ""TAK""

solve()","
def solve():
    s = input()

    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    mirror_dict = dict(zip(alphabet, alphabet[::-1]))

    n = len(s)
    is_palindrome = True

    for i in range(n // 2):
        if s[i] != mirror_dict.get(s[n - i - 1]):
            is_palindrome = False
            break

    if is_palindrome:
        print(""TAK"")
    else:
        print(""NIE"")

solve()
","
def solve():
    s = input()
    alphabet = ""ABCDEFGHIJKLMNOPQRSTUVWXYZ""
    
    n = len(s)
    is_palindrome = True
    
    for i in range(n//2):
        if (s[i] != s[n-1-i]) and (alphabet.find(s[i]) != alphabet.find(s[n-1-i])):
            is_palindrome = False
            break
    
    if is_palindrome:
        print(""TAK"")
    else:
        print(""NIE"")


solve()","
def solve():
    # Input
    s = input()

    # Check if s is symmetric about the middle
    mid = len(s) // 2
    if len(s) % 2 == 0:
        first_half = s[:mid]
        second_half = s[mid:]
    else:
        first_half = s[:mid]
        second_half = s[mid+1:]

    if first_half == second_half[::-1]:
        print(""TAK"")
    else:
        print(""NIE"")

# Run the function
solve()
","0.0","60.0","73.33333333333333","53.333333333333336","","","",""
"APPS/23","
QUESTION:
You are given two positive integer numbers a and b. Permute (change order) of the digits of a to construct maximal number not exceeding b. No number in input and/or output can start with the digit 0.

It is allowed to leave a as it is.


-----Input-----

The first line contains integer a (1 ≤ a ≤ 10^18). The second line contains integer b (1 ≤ b ≤ 10^18). Numbers don't have leading zeroes. It is guaranteed that answer exists.


-----Output-----

Print the maximum possible number that is a permutation of digits of a and is not greater than b. The answer can't have any leading zeroes. It is guaranteed that the answer exists.

The number in the output should have exactly the same length as number a. It should be a permutation of digits of a.


-----Examples-----
Input
123
222

Output
213

Input
3921
10000

Output
9321

Input
4940
5000

Output
4940
Use user-input-Based format and function signature solve()","
def solve():
    from itertools import permutations
    
    a = input().strip()
    b = int(input().strip())
    
    max_num = -1
    for perm in permutations(a):
        num = int(''.join(perm))
        if num <= b:
            max_num = max(max_num, num)
    
    print(max_num)

solve()
","
from itertools import permutations

def solve():
    a = input().strip()
    b = input().strip()
    
    a_permutations = sorted(set(permutations(a, len(a))))
    
    max_num = int(b)
    result = a
    for perm in a_permutations:
        num = int("""".join(perm))
        if num <= max_num and num > int(result):
            result = """".join(perm)
    
    print(result)


solve()","
from itertools import permutations

def solve():
    a = input().strip()
    b = input().strip()
    
    sorted_a = ''.join(sorted(a, reverse=True))
    
    for perm in permutations(sorted_a):
        num = int(''.join(perm))
        if num <= int(b):
            print(num)
            break

solve()
","
from itertools import permutations

def solve():
    a = input()
    b = input()

    perms = [''.join(p) for p in permutations(sorted(a), len(a))]

    max_perm = ''
    for perm in perms:
        if perm <= b and perm > max_perm:
            max_perm = perm

    print(max_perm)

solve()
","100.0","90.0","100.0","90.0","","","",""
"APPS/24","
QUESTION:
Alice and Bob play 5-in-a-row game. They have a playing field of size 10 × 10. In turns they put either crosses or noughts, one at a time. Alice puts crosses and Bob puts noughts.

In current match they have made some turns and now it's Alice's turn. She wonders if she can put cross in such empty cell that she wins immediately.

Alice wins if some crosses in the field form line of length not smaller than 5. This line can be horizontal, vertical and diagonal.


-----Input-----

You are given matrix 10 × 10 (10 lines of 10 characters each) with capital Latin letters 'X' being a cross, letters 'O' being a nought and '.' being an empty cell. The number of 'X' cells is equal to the number of 'O' cells and there is at least one of each type. There is at least one empty cell.

It is guaranteed that in the current arrangement nobody has still won.


-----Output-----

Print 'YES' if it's possible for Alice to win in one turn by putting cross in some empty cell. Otherwise print 'NO'.


-----Examples-----
Input
XX.XX.....
.....OOOO.
..........
..........
..........
..........
..........
..........
..........
..........

Output
YES

Input
XXOXX.....
OO.O......
..........
..........
..........
..........
..........
..........
..........
..........

Output
NO
Use user-input-Based format and function signature solve()","
def solve():
    field = [input() for _ in range(10)]

    def check_win():
        for i in range(10):
            for j in range(10):
                if field[i][j] == '.':
                    field[i] = field[i][:j] + 'X' + field[i][j+1:]
                    if any(all(field[i][k] == 'X' for k in range(j, j+5)) for i in range(10)):
                        return True
                    if any(all(field[k][j] == 'X' for k in range(i, i+5)) for j in range(10)):
                        return True
                    if i <= 5 and j <= 5:
                        if all(field[i+k][j+k] == 'X' for k in range(5)):
                            return True
                    if i <= 5 and j >= 4:
                        if all(field[i+k][j-k] == 'X' for k in range(5)):
                            return True
                    field[i] = field[i][:j] + '.' + field[i][j+1:]
        return False

    if check_win():
        print('YES')
    else:
        print('NO')

solve()
","
def solve():
    import numpy as np
    
    def check_line(line):
        for i in range(len(line) - 4):
            if line[i:i+5] == 'XXXX.' or line[i:i+5] == '.XXXX' or line[i:i+5] == 'X.XXX' or line[i:i+5] == 'XX.XX' or line[i:i+5] == 'XXX.X':
                return True
        return False
    
    field = []
    for _ in range(10):
        row = input().strip()
        field.append(row)
    
    field_array = np.array([list(row) for row in field])
    
    for i in range(10):
        if check_line(field[i]):
            return 'YES'
    
    for j in range(10):
        if check_line(field_array[:, j]):
            return 'YES'
    
    for k in range(-9, 10):
        if check_line(np.diag(field_array, k).copy().astype(str)):
            return 'YES'
    
    for l in range(1, 20):
        if check_line(np.diag(field_array, l).copy().astype(str)):
            return 'YES'
    
    return 'NO'

solve()","
def solve():
    import numpy as np

    def check_line(line, player):
        count = 0
        for cell in line:
            if cell == player:
                count += 1
                if count >= 5:
                    return True
            else:
                count = 0
        return False

    field = []
    for _ in range(10):
        row = input()
        field.append([c for c in row])

    field_array = np.array(field)

    for i in range(10):
        if check_line(field_array[i], 'X'):
            return 'YES'

    for j in range(10):
        if check_line(field_array[:, j], 'X'):
            return 'YES'

    diagonals = [field_array.diagonal(i) for i in range(-9, 10)]
    for diagonal in diagonals:
        if len(diagonal) >= 5 and check_line(diagonal, 'X'):
            return 'YES'

    anti_diagonals = [np.fliplr(field_array).diagonal(i) for i in range(-9, 10)]
    for anti_diagonal in anti_diagonals:
        if len(anti_diagonal) >= 5 and check_line(anti_diagonal, 'X'):
            return 'YES'

    return 'NO'

solve()","
def solve():
    matrix = [input() for _ in range(10)]
    
    def check_win(player):
        for i in range(10):
            for j in range(10):
                if matrix[i][j] == '.':
                    matrix[i] = matrix[i][:j] + player + matrix[i][j+1:]
                    for dx, dy in [(1, 0), (0, 1), (1, 1), (1, -1)]:
                        cnt = 0
                        for k in range(-5, 6):
                            ni, nj = i + k * dy, j + k * dx
                            if 0 <= ni < 10 and 0 <= nj < 10 and matrix[ni][nj] == player:
                                cnt += 1
                                if cnt >= 5:
                                    return True
                            else:
                                cnt = 0
                    matrix[i] = matrix[i][:j] + '.' + matrix[i][j+1:]
        return False

    if check_win('X'):
        print('YES')
    else:
        print('NO')

solve()
","0.0","0.0","0.0","100.0","","","",""
"APPS/25","
QUESTION:
You are given matrix with n rows and n columns filled with zeroes. You should put k ones in it in such a way that the resulting matrix is symmetrical with respect to the main diagonal (the diagonal that goes from the top left to the bottom right corner) and is lexicographically maximal.

One matrix is lexicographically greater than the other if the first different number in the first different row from the top in the first matrix is greater than the corresponding number in the second one.

If there exists no such matrix then output -1.


-----Input-----

The first line consists of two numbers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 10^6).


-----Output-----

If the answer exists then output resulting matrix. Otherwise output -1.


-----Examples-----
Input
2 1

Output
1 0 
0 0 

Input
3 2

Output
1 0 0 
0 1 0 
0 0 0 

Input
2 5

Output
-1
Use user-input-Based format and function signature solve()","
def solve():
    import numpy as np

    n, k = map(int, input().split())
    if k > n*n:
        print(-1)
        return

    matrix = np.zeros((n, n), dtype=int)
    for i in range(n):
        if k == 0:
            break
        matrix[i][i] = 1
        k -= 1

    for i in range(n):
        for j in range(i+1, n):
            if k >= 2:
                matrix[i][j] = 1
                matrix[j][i] = 1
                k -= 2

    if k > 0:
        print(-1)
    else:
        for row in matrix:
            print(' '.join(map(str, row)))

solve()
","
from typing import List

def solve(n: int, k: int) -> List[List[int]]:
    if k > n**2:
        return [[-1]]

    matrix = [[0] * n for _ in range(n)]
    for i in range(n):
        if k == 0:
            break
        matrix[i][i] = 1
        k -= 1
        if i != n-1 and k >= 2:
            matrix[i+1][i+1] = 1
            k -= 1

    return matrix

solve()","
def solve():
    import numpy as np
    n, k = map(int, input().split())
    
    if k > n*n:
        print(-1)
        return
    
    res = np.zeros((n, n))
    
    for i in range(n):
        if k == 0:
            break
        
        res[i, i] = 1
        k -= 1
        
    if k != 0:
        print(-1)
    else:
        for i in range(n-1, -1, -1):
            for j in range(i-1, -1, -1):
                if res[i, j] == 0:
                    if k >= 2:
                        res[i, j] = 1
                        res[j, i] = 1
                        k -= 2
                    else:
                        break
        
        for row in res:
            print(' '.join(map(str, row)))

solve()
  ","
from typing import List

def solve(n: int, k: int) -> List[List[int]]:
    matrix = [[0] * n for _ in range(n)]
    if k > n*n:
        return [[-1]]
    
    for i in range(n):
        for j in range(n):
            if k == 0:
                return matrix
            if i == j:
                matrix[i][j] = 1
                k -= 1
    
    return [[-1]]

solve()","33.33333333333333","0.0","20.0","0.0","","","",""
"APPS/26","
QUESTION:
Wet Shark asked Rat Kwesh to generate three positive real numbers x, y and z, from 0.1 to 200.0, inclusive. Wet Krash wants to impress Wet Shark, so all generated numbers will have exactly one digit after the decimal point.

Wet Shark knows Rat Kwesh will want a lot of cheese. So he will give the Rat an opportunity to earn a lot of cheese. He will hand the three numbers x, y and z to Rat Kwesh, and Rat Kwesh will pick one of the these twelve options:  a_1 = x^{y}^{z};  a_2 = x^{z}^{y};  a_3 = (x^{y})^{z};  a_4 = (x^{z})^{y};  a_5 = y^{x}^{z};  a_6 = y^{z}^{x};  a_7 = (y^{x})^{z};  a_8 = (y^{z})^{x};  a_9 = z^{x}^{y};  a_10 = z^{y}^{x};  a_11 = (z^{x})^{y};  a_12 = (z^{y})^{x}. 

Let m be the maximum of all the a_{i}, and c be the smallest index (from 1 to 12) such that a_{c} = m. Rat's goal is to find that c, and he asks you to help him. Rat Kwesh wants to see how much cheese he gets, so he you will have to print the expression corresponding to that a_{c}.

 


-----Input-----

The only line of the input contains three space-separated real numbers x, y and z (0.1 ≤ x, y, z ≤ 200.0). Each of x, y and z is given with exactly one digit after the decimal point.


-----Output-----

Find the maximum value of expression among x^{y}^{z}, x^{z}^{y}, (x^{y})^{z}, (x^{z})^{y}, y^{x}^{z}, y^{z}^{x}, (y^{x})^{z}, (y^{z})^{x}, z^{x}^{y}, z^{y}^{x}, (z^{x})^{y}, (z^{y})^{x} and print the corresponding expression. If there are many maximums, print the one that comes first in the list. 

x^{y}^{z} should be outputted as x^y^z (without brackets), and (x^{y})^{z} should be outputted as (x^y)^z (quotes for clarity). 


-----Examples-----
Input
1.1 3.4 2.5

Output
z^y^x

Input
2.0 2.0 2.0

Output
x^y^z

Input
1.9 1.8 1.7

Output
(x^y)^z
Use user-input-Based format and function signature solve()","
def solve():
    x, y, z = map(float, input().split())
    expressions = [
        x**y**z, x**z**y, (x**y)**z, (x**z)**y,
        y**x**z, y**z**x, (y**x)**z, (y**z)**x,
        z**x**y, z**y**x, (z**x)**y, (z**y)**x
    ]
    max_val = max(expressions)
    max_index = expressions.index(max_val)
    
    if max_index < 4:
        print(""x^y^z"")
    elif max_index < 8:
        print(""(x^y)^z"")
    else:
        print(""z^y^x"")

solve()","
def solve():
    x, y, z = map(float, input().split())
    expr = [
        (x ** y) ** z, (x ** z) ** y, x ** (y ** z), x ** (z ** y),
        (y ** x) ** z, (y ** z) ** x, y ** (x ** z), y ** (z ** x),
        (z ** x) ** y, (z ** y) ** x, z ** (x ** y), z ** (y ** x)
    ]
    max_val = max(expr)
    max_expr = [(i + 1, e) for i, e in enumerate(expr) if e == max_val][0]
    
    if max_expr[0] in [1, 5, 9]:
        print('x^y^z')
    elif max_expr[0] in [2, 6, 10]:
        print('x^z^y')
    elif max_expr[0] in [3, 11]:
        print('(x^y)^z')
    else:
        print('(x^z)^y')

solve()","
def solve():
    x, y, z = map(float, input().split())

    expressions = [('x^y^z', x ** (y ** z)),
                   ('x^z^y', x ** (z ** y)),
                   ('(x^y)^z', (x ** y) ** z),
                   ('(x^z)^y', (x ** z) ** y),
                   ('y^x^z', y ** (x ** z)),
                   ('y^z^x', y ** (z ** x)),
                   ('(y^x)^z', (y ** x) ** z),
                   ('(y^z)^x', (y ** z) ** x),
                   ('z^x^y', z ** (x ** y)),
                   ('z^y^x', z ** (y ** x)),
                   ('(z^x)^y', (z ** x) ** y),
                   ('(z^y)^x', (z ** y) ** x)]

    max_val = max([val for _, val in expressions])
    max_idx = [i for i, (_, val) in enumerate(expressions) if val == max_val][0]

    print(expressions[max_idx][0])

solve()
","
def solve():
    x, y, z = map(float, input().split())
    
    options = ['x^y^z', 'x^z^y', '(x^y)^z', '(x^z)^y', 'y^x^z', 'y^z^x', '(y^x)^z', '(y^z)^x', 'z^x^y', 'z^y^x', '(z^x)^y', '(z^y)^x']
    
    max_val = float('-inf')
    max_idx = 0
    
    for i in range(12):
        expr = eval(options[i].replace('x', str(x)).replace('y', str(y)).replace('z', str(z)))
        if expr > max_val:
            max_val = expr
            max_idx = i
    
    print(options[max_idx])

solve()","13.333333333333334","6.666666666666667","40.0","0.0","","","",""
"APPS/27","
QUESTION:
You are given a string s consisting of n lowercase Latin letters. You have to type this string using your keyboard.

Initially, you have an empty string. Until you type the whole string, you may perform the following operation:  add a character to the end of the string. 

Besides, at most once you may perform one additional operation: copy the string and append it to itself.

For example, if you have to type string abcabca, you can type it in 7 operations if you type all the characters one by one. However, you can type it in 5 operations if you type the string abc first and then copy it and type the last character.

If you have to type string aaaaaaaaa, the best option is to type 4 characters one by one, then copy the string, and then type the remaining character.

Print the minimum number of operations you need to type the given string.


-----Input-----

The first line of the input containing only one integer number n (1 ≤ n ≤ 100) — the length of the string you have to type. The second line containing the string s consisting of n lowercase Latin letters.


-----Output-----

Print one integer number — the minimum number of operations you need to type the given string.


-----Examples-----
Input
7
abcabca

Output
5

Input
8
abcdefgh

Output
8



-----Note-----

The first test described in the problem statement.

In the second test you can only type all the characters one by one.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    s = input()
    
    dp = [float('inf')] * (n + 1)
    dp[0] = 0
    
    for i in range(1, n + 1):
        dp[i] = min(dp[i], dp[i - 1] + 1)
        for j in range(i):
            if s[j:i] in s[:i]:
                dp[i] = min(dp[i], dp[j] + 1)
    
    print(dp[n])

solve()
","
def solve():
    n = int(input())
    s = input()
    
    cnt = n
    for i in range(1, n):
        if s[:i] == s[i:]:
            cnt = min(cnt, i + 1 + (n - i) // i)
    
    print(cnt)

solve()
","
def solve():
    n = int(input())
    s = input()

    if s == s[0] * n:
        print(2 + n // 2)
    else:
        print(n)
  
solve()","
def solve():
    n = int(input())
    s = input()
    
    count = 1
    for i in range(1, n//2 + 1):
        if s[:i] == s[i:2*i]:
            count = i
            break
    
    result = min(n, count + 1)
    print(result)

solve()
  ","0.0","46.666666666666664","53.333333333333336","13.333333333333334","","","",""
"APPS/28","
QUESTION:
The All-Berland National Olympiad in Informatics has just ended! Now Vladimir wants to upload the contest from the Olympiad as a gym to a popular Codehorses website.

Unfortunately, the archive with Olympiad's data is a mess. For example, the files with tests are named arbitrary without any logic.

Vladimir wants to rename the files with tests so that their names are distinct integers starting from 1 without any gaps, namely, ""1"", ""2"", ..., ""n', where n is the total number of tests.

Some of the files contain tests from statements (examples), while others contain regular tests. It is possible that there are no examples, and it is possible that all tests are examples. Vladimir wants to rename the files so that the examples are the first several tests, all all the next files contain regular tests only.

The only operation Vladimir can perform is the ""move"" command. Vladimir wants to write a script file, each of the lines in which is ""move file_1 file_2"", that means that the file ""file_1"" is to be renamed to ""file_2"". If there is a file ""file_2"" at the moment of this line being run, then this file is to be rewritten. After the line ""move file_1 file_2"" the file ""file_1"" doesn't exist, but there is a file ""file_2"" with content equal to the content of ""file_1"" before the ""move"" command.

Help Vladimir to write the script file with the minimum possible number of lines so that after this script is run:  all examples are the first several tests having filenames ""1"", ""2"", ..., ""e"", where e is the total number of examples;  all other files contain regular tests with filenames ""e + 1"", ""e + 2"", ..., ""n"", where n is the total number of all tests. 


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 10^5) — the number of files with tests.

n lines follow, each describing a file with test. Each line has a form of ""name_i type_i"", where ""name_i"" is the filename, and ""type_i"" equals ""1"", if the i-th file contains an example test, and ""0"" if it contains a regular test. Filenames of each file are strings of digits and small English letters with length from 1 to 6 characters. The filenames are guaranteed to be distinct.


-----Output-----

In the first line print the minimum number of lines in Vladimir's script file.

After that print the script file, each line should be ""move file_1 file_2"", where ""file_1"" is an existing at the moment of this line being run filename, and ""file_2"" — is a string of digits and small English letters with length from 1 to 6.


-----Examples-----
Input
5
01 0
2 1
2extra 0
3 1
99 0

Output
4
move 3 1
move 01 5
move 2extra 4
move 99 3

Input
2
1 0
2 1

Output
3
move 1 3
move 2 1
move 3 2
Input
5
1 0
11 1
111 0
1111 1
11111 0

Output
5
move 1 5
move 11 1
move 1111 2
move 111 4
move 11111 3
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    files = [input().split() for _ in range(n)]
    
    examples = [file[0] for file in files if file[1] == '1']
    regular_tests = [file[0] for file in files if file[1] == '0']
    
    script = []
    for i, example in enumerate(examples):
        script.append(f""move {example} {i+1}"")
    
    for i, regular_test in enumerate(regular_tests):
        script.append(f""move {regular_test} {len(examples)+i+1}"")
    
    print(len(script))
    for line in script:
        print(line)

solve()","
def solve():
    n = int(input())
    files = [input().split() for _ in range(n)]
    
    examples = [file[0] for file in files if file[1] == '1']
    regular_tests = [file[0] for file in files if file[1] == '0']
    
    script = []
    count = 1
    
    for example in examples:
        script.append(f""move {example} {count}"")
        count += 1
        
    for regular_test in regular_tests:
        script.append(f""move {regular_test} {count}"")
        count += 1
    
    print(len(script))
    for step in script:
        print(step)


solve()","
def solve():
    n = int(input())
    files = [input().split() for _ in range(n)]
    
    examples = [file[0] for file in files if file[1] == '1']
    regular_tests = [file[0] for file in files if file[1] == '0']
    
    script = []
    script_count = 0
    
    for i, example in enumerate(examples, 1):
        if example != str(i):
            script.append(f""move {example} {i}"")
            script_count += 1
            
    for j, regular_test in enumerate(regular_tests, len(examples) + 1):
        if regular_test != str(j):
            script.append(f""move {regular_test} {j}"")
            script_count += 1
            
    print(script_count)
    for line in script:
        print(line)

solve()
","
import sys

def solve():
    n = int(input())
    files = []
    for _ in range(n):
        file_name, file_type = input().split()
        files.append((file_name, int(file_type)))

    examples = [file[0] for file in files if file[1] == 1]
    regular_tests = [file[0] for file in files if file[1] == 0]

    script_lines = []
    for i, example in enumerate(examples):
        script_lines.append(f""move {example} {i + 1}"")

    for i, regular_test in enumerate(regular_tests):
        script_lines.append(f""move {regular_test} {i + len(examples) + 1}"")

    print(len(script_lines))
    for line in script_lines:
        print(line)

solve()
","13.333333333333334","13.333333333333334","13.333333333333334","13.333333333333334","","","",""
"APPS/29","
QUESTION:
Luba has a ticket consisting of 6 digits. In one move she can choose digit in any position and replace it with arbitrary digit. She wants to know the minimum number of digits she needs to replace in order to make the ticket lucky.

The ticket is considered lucky if the sum of first three digits equals to the sum of last three digits.


-----Input-----

You are given a string consisting of 6 characters (all characters are digits from 0 to 9) — this string denotes Luba's ticket. The ticket can start with the digit 0.


-----Output-----

Print one number — the minimum possible number of digits Luba needs to replace to make the ticket lucky.


-----Examples-----
Input
000000

Output
0

Input
123456

Output
2

Input
111000

Output
1



-----Note-----

In the first example the ticket is already lucky, so the answer is 0.

In the second example Luba can replace 4 and 5 with zeroes, and the ticket will become lucky. It's easy to see that at least two replacements are required.

In the third example Luba can replace any zero with 3. It's easy to see that at least one replacement is required.
Use user-input-Based format and function signature solve()","
def solve():
    ticket = input()
    first_half = sum(map(int, ticket[:3]))
    second_half = sum(map(int, ticket[3:]))
    replacements = abs(first_half - second_half) // 2
    print(replacements)

solve()
","
def solve():
    ticket = input()

    first_half_sum = sum(map(int, ticket[:3]))
    second_half_sum = sum(map(int, ticket[3:]))

    diff = abs(first_half_sum - second_half_sum)

    return diff // 3 + diff % 3

solve()
","
def solve():
    ticket = input()
    first_half = list(map(int, ticket[:3]))
    second_half = list(map(int, ticket[3:]))
    diff = abs(sum(first_half) - sum(second_half))
    return diff // 3 + diff % 3

solve()","
def solve():
    ticket = input()
    count_zeros = ticket.count('0')
    count_ones = ticket.count('1')
    count_twos = ticket.count('2')
    count_threes = ticket.count('3')
    count_fours = ticket.count('4')
    count_fives = ticket.count('5')
    count_sixes = ticket.count('6')
    count_sevens = ticket.count('7')
    count_eights = ticket.count('8')
    count_nines = ticket.count('9')
    
    total_zeros = count_zeros + count_ones + count_twos + count_threes + count_fours + count_fives
    total_nines = count_sevens + count_eights + count_nines
    
    if total_zeros >= total_nines:
        return total_nines
    else:
        return total_zeros if total_zeros % 2 == 0 else total_zeros - 1

solve()","40.0","0.0","0.0","0.0","","","",""
"APPS/30","
QUESTION:
The campus has $m$ rooms numbered from $0$ to $m - 1$. Also the $x$-mouse lives in the campus. The $x$-mouse is not just a mouse: each second $x$-mouse moves from room $i$ to the room $i \cdot x \mod{m}$ (in fact, it teleports from one room to another since it doesn't visit any intermediate room). Starting position of the $x$-mouse is unknown.

You are responsible to catch the $x$-mouse in the campus, so you are guessing about minimum possible number of traps (one trap in one room) you need to place. You are sure that if the $x$-mouse enters a trapped room, it immediately gets caught.

And the only observation you made is $\text{GCD} (x, m) = 1$.


-----Input-----

The only line contains two integers $m$ and $x$ ($2 \le m \le 10^{14}$, $1 \le x < m$, $\text{GCD} (x, m) = 1$) — the number of rooms and the parameter of $x$-mouse. 


-----Output-----

Print the only integer — minimum number of traps you need to install to catch the $x$-mouse.


-----Examples-----
Input
4 3

Output
3

Input
5 2

Output
2



-----Note-----

In the first example you can, for example, put traps in rooms $0$, $2$, $3$. If the $x$-mouse starts in one of this rooms it will be caught immediately. If $x$-mouse starts in the $1$-st rooms then it will move to the room $3$, where it will be caught.

In the second example you can put one trap in room $0$ and one trap in any other room since $x$-mouse will visit all rooms $1..m-1$ if it will start in any of these rooms.
Use user-input-Based format and function signature solve()","
import math

def solve():
    m, x = map(int, input().split())
    traps = 1
    room = x
    while room != 0:
        room = (room * x) % m
        traps += 1
    print(traps)

solve()
","
from math import gcd

def solve():
    m, x = map(int, input().split())
    traps = 1
    current_room = x
    while current_room != 0:
        current_room = (current_room * x) % m
        traps += 1
    print(traps)

solve()
","
def solve():
    import math
    m, x = map(int, input().split())
    traps = m - 1
    for i in range(1, m):
        if pow(x, i, m) == 1:
            traps = i
            break
    print(traps)

solve()
","
import math

def solve():
    m, x = map(int, input().split())
    
    traps = 1
    current_room = x
    while current_room != 0:
        current_room = (current_room * x) % m
        traps += 1

    print(traps)

solve()
","0","0","6.666666666666667","0","","","",""
"APPS/31","
QUESTION:
ZS the Coder has recently found an interesting concept called the Birthday Paradox. It states that given a random set of 23 people, there is around 50% chance that some two of them share the same birthday. ZS the Coder finds this very interesting, and decides to test this with the inhabitants of Udayland.

In Udayland, there are 2^{n} days in a year. ZS the Coder wants to interview k people from Udayland, each of them has birthday in one of 2^{n} days (each day with equal probability). He is interested in the probability of at least two of them have the birthday at the same day. 

ZS the Coder knows that the answer can be written as an irreducible fraction $\frac{A}{B}$. He wants to find the values of A and B (he does not like to deal with floating point numbers). Can you help him?


-----Input-----

The first and only line of the input contains two integers n and k (1 ≤ n ≤ 10^18, 2 ≤ k ≤ 10^18), meaning that there are 2^{n} days in a year and that ZS the Coder wants to interview exactly k people.


-----Output-----

If the probability of at least two k people having the same birthday in 2^{n} days long year equals $\frac{A}{B}$ (A ≥ 0, B ≥ 1, $\operatorname{gcd}(A, B) = 1$), print the A and B in a single line.

Since these numbers may be too large, print them modulo 10^6 + 3. Note that A and B must be coprime before their remainders modulo 10^6 + 3 are taken.


-----Examples-----
Input
3 2

Output
1 8
Input
1 3

Output
1 1
Input
4 3

Output
23 128


-----Note-----

In the first sample case, there are 2^3 = 8 days in Udayland. The probability that 2 people have the same birthday among 2 people is clearly $\frac{1}{8}$, so A = 1, B = 8.

In the second sample case, there are only 2^1 = 2 days in Udayland, but there are 3 people, so it is guaranteed that two of them have the same birthday. Thus, the probability is 1 and A = B = 1.
Use user-input-Based format and function signature solve()","
from math import gcd

def solve():
    n, k = map(int, input().split())
    
    if k > 2**n:
        print(1, 1)
    else:
        A = 0
        B = 1
        for i in range(k):
            A = (A + pow(2, n-i, 10**6 + 3) * pow(B, 10**6 + 3 - 2, 10**6 + 3)) % (10**6 + 3)
            B = (B * (i+1)) % (10**6 + 3)
        
        g = gcd(A, B)
        print(A // g, B // g)

solve()
","
from math import gcd

def solve():
    n, k = map(int, input().split())
    
    if k > 2 ** n:
        print(1, 1)
    else:
        A = 0
        B = pow(2**n, k, 10**6 + 3)
        
        for i in range(1, k + 1):
            A += pow(-1, i - 1) * (pow(k - i, 2**n, 10**6 + 3) * pow(gcd(i, k), 2**n - 2, 10**6 + 3)) % (10**6 + 3)
        
        A = (A % (10**6 + 3) + 10**6 + 3) % (10**6 + 3)
        
        print(A, B)

solve()
  ","
from math import gcd

def solve():
    n, k = map(int, input().split())

    if k > 2**n:
        print(1, 1)
        return

    mod = 10**6 + 3

    fact = [1]*(k + 1)
    for i in range(2, k + 1):
        fact[i] = (i * fact[i - 1]) % mod

    inv_fact = [1]*(k + 1)
    inv_fact[k] = pow(fact[k], mod - 2, mod)
    for i in range(k - 1, 0, -1):
        inv_fact[i] = (inv_fact[i + 1] * (i + 1)) % mod

    def nCr(n, r):
        return (fact[n] * inv_fact[n-r] * inv_fact[r]) % mod

    A = 0
    for i in range(k):
        sign = (-1)**i
        A = (A + sign * nCr(k, i) * pow(k - i, n, mod)) % mod

    B = pow(2, n*k, mod)

    gcd_ab = gcd(A, B)
    print(A // gcd_ab, B // gcd_ab)

solve()
","
from math import gcd

def solve():
    n, k = map(int, input().split())

    # Calculate the numerator and denominator of the probability
    A = 2**n
    B = A - 1

    if k > 1:
        A = A * (pow(B, k-1, 10**6 + 3) - B + 10**6 + 3) % (10**6 + 3)

    # Find the greatest common divisor of A and B
    g = gcd(A, B)

    # Reduce A and B by dividing by their greatest common divisor
    A //= g
    B //= g

    print(A, B)

solve()
","28.57142857142857","28.57142857142857","25.0","0.0","","","",""
"APPS/32","
QUESTION:
In this problem we assume the Earth to be a completely round ball and its surface a perfect sphere. The length of the equator and any meridian is considered to be exactly 40 000 kilometers. Thus, travelling from North Pole to South Pole or vice versa takes exactly 20 000 kilometers.

Limak, a polar bear, lives on the North Pole. Close to the New Year, he helps somebody with delivering packages all around the world. Instead of coordinates of places to visit, Limak got a description how he should move, assuming that he starts from the North Pole. The description consists of n parts. In the i-th part of his journey, Limak should move t_{i} kilometers in the direction represented by a string dir_{i} that is one of: ""North"", ""South"", ""West"", ""East"".

Limak isn’t sure whether the description is valid. You must help him to check the following conditions:  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the North Pole, he can move only to the South.  If at any moment of time (before any of the instructions or while performing one of them) Limak is on the South Pole, he can move only to the North.  The journey must end on the North Pole. 

Check if the above conditions are satisfied and print ""YES"" or ""NO"" on a single line.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 50).

The i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 ≤ t_{i} ≤ 10^6, $\operatorname{dir}_{i} \in \{\text{North, South, West, East} \}$) — the length and the direction of the i-th part of the journey, according to the description Limak got.


-----Output-----

Print ""YES"" if the description satisfies the three conditions, otherwise print ""NO"", both without the quotes.


-----Examples-----
Input
5
7500 South
10000 East
3500 North
4444 West
4000 North

Output
YES

Input
2
15000 South
4000 East

Output
NO

Input
5
20000 South
1000 North
1000000 West
9000 North
10000 North

Output
YES

Input
3
20000 South
10 East
20000 North

Output
NO

Input
2
1000 North
1000 South

Output
NO

Input
4
50 South
50 North
15000 South
15000 North

Output
YES



-----Note-----

Drawings below show how Limak's journey would look like in first two samples. In the second sample the answer is ""NO"" because he doesn't end on the North Pole. [Image]
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    position = 0
    for _ in range(n):
        t, direction = input().split()
        t = int(t)
        if (position == 0 and direction != ""South"") or (position == 20000 and direction != ""North""):
            print(""NO"")
            return
        if direction == ""North"":
            position -= t
        elif direction == ""South"":
            position += t
        if position < 0 or position > 20000:
            print(""NO"")
            return
    if position == 0:
        print(""YES"")
    else:
        print(""NO"")

solve()","
def solve():
    n = int(input())
    current_position = 'North'
    
    for _ in range(n):
        t, direction = input().split()
        t = int(t)
        
        if current_position == 'North':
            if direction == 'North':
                current_position = 'South'
        elif current_position == 'South':
            if direction == 'South':
                current_position = 'North'
        else:
            return 'NO'
    
    if current_position == 'North':
        return 'YES'
    else:
        return 'NO'

solve()","
def solve():
    n = int(input())
    pos = 0  # 0 represents North pole
    for _ in range(n):
        t, direction = input().split()
        t = int(t)
        if pos == 0 and direction != ""South"":
            print(""NO"")
            return
        elif pos == 20000 and direction != ""North"":
            print(""NO"")
            return
        elif direction == ""North"":
            pos += t
            if pos > 20000:
                print(""NO"")
                return
        elif direction == ""South"":
            pos -= t
            if pos < 0:
                print(""NO"")
                return
    if pos == 0:
        print(""YES"")
    else:
        print(""NO"")

import sys
solve()
  ","
def solve():
    n = int(input())
    current_position = 0
    for _ in range(n):
        t, direction = input().split()
        t = int(t)
        if (current_position == 0 and direction != ""South"") or (current_position > 0 and direction == ""South""):
            print(""NO"")
            return
        if direction == ""South"":
            current_position += t
        else:
            current_position -= t
                
    if current_position == 20000:
        print(""YES"")
    else:
        print(""NO"")

solve()","100.0","0.0","80.0","80.0","","","",""
"APPS/33","
QUESTION:
You are given two arithmetic progressions: a_1k + b_1 and a_2l + b_2. Find the number of integers x such that L ≤ x ≤ R and x = a_1k' + b_1 = a_2l' + b_2, for some integers k', l' ≥ 0.


-----Input-----

The only line contains six integers a_1, b_1, a_2, b_2, L, R (0 < a_1, a_2 ≤ 2·10^9,  - 2·10^9 ≤ b_1, b_2, L, R ≤ 2·10^9, L ≤ R).


-----Output-----

Print the desired number of integers x.


-----Examples-----
Input
2 0 3 3 5 21

Output
3

Input
2 4 3 0 6 17

Output
2
Use user-input-Based format and function signature solve()","
def solve():
    a1, b1, a2, b2, L, R = map(int, input().split())
    
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a
    
    def extended_gcd(a, b):
        if b == 0:
            return (1, 0)
        x, y = extended_gcd(b, a % b)
        return (y, x - (a // b) * y)
    
    g = gcd(a1, a2)
    if (b2 - b1) % g != 0:
        return 0
    
    x0, y0 = extended_gcd(a1, a2)
    x0 *= (b2 - b1) // g
    y0 *= (b2 - b1) // g
    
    t1 = (L - b1) // a1
    t2 = (L - b2) // a2
    t = max(t1, t2)
    
    while b1 + a1 * t < L:
        t += 1
    
    count = 0
    while b1 + a1 * t <= R:
        if (b2 + a2 * y0 + a2 * g * t) >= L:
            count += 1
        t += 1
    
    return count

solve()
","
def solve():
    a1, b1, a2, b2, L, R = map(int, input().split())
    
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a

    if (b2 - b1) % gcd(a1, a2) != 0:
        print(0)
        return

    lcm = a1 * a2 // gcd(a1, a2)
    L = max(L, max(b1, b2))
    R = min(R, min(a1 + b1, a2 + b2))
    
    if L > R:
        print(0)
        return

    ans = (R - L) // lcm + 1
    print(ans)

solve()
","
def solve():
    a1, b1, a2, b2, L, R = map(int, input().split())
    if b1 < b2:
        b1, b2 = b2, b1
        a1, a2 = a2, a1
    if a1 == a2:
        if b1 == b2:
            if L <= b1 <= R:
                return R - L + 1
            else:
                return 0
        else:
            return 0
    diff = b1 - b2
    if diff % (a1 - a2) != 0:
        return 0
    ans = (R - L + diff) // (a1 - a2)
    if ans < 0:
        return 0
    x = (L - b1) % a1
    if (L - b1) % a1 != 0:
        x += a1
    if x + (a1 - a2) * ans > R - L:
        return 0
    return ans + 1

solve()
","
def solve():
    a1, b1, a2, b2, L, R = map(int, input().split())
    if a1 == a2:
        print(0 if (b1 != b2) or (b1 < L and b2 < L) or (b1 > R and b2 > R) else 1)
    else:
        d = b1 - b2
        g = abs(a1 - a2)
        if d % g != 0:
            print(0)
        else:
            lower_bound = max((L - b1 + a1) // a1, (L - b2 + a2) // a2)
            upper_bound = min((R - b1 + a1) // a1, (R - b2 + a2) // a2)
            print(max(0, upper_bound - lower_bound + 1))

solve()
","0.0","13.333333333333334","0.0","13.333333333333334","","","",""
"APPS/34","
QUESTION:
It's New Year's Eve soon, so Ivan decided it's high time he started setting the table. Ivan has bought two cakes and cut them into pieces: the first cake has been cut into a pieces, and the second one — into b pieces.

Ivan knows that there will be n people at the celebration (including himself), so Ivan has set n plates for the cakes. Now he is thinking about how to distribute the cakes between the plates. Ivan wants to do it in such a way that all following conditions are met:  Each piece of each cake is put on some plate;  Each plate contains at least one piece of cake;  No plate contains pieces of both cakes. 

To make his guests happy, Ivan wants to distribute the cakes in such a way that the minimum number of pieces on the plate is maximized. Formally, Ivan wants to know the maximum possible number x such that he can distribute the cakes according to the aforementioned conditions, and each plate will contain at least x pieces of cake.

Help Ivan to calculate this number x!


-----Input-----

The first line contains three integers n, a and b (1 ≤ a, b ≤ 100, 2 ≤ n ≤ a + b) — the number of plates, the number of pieces of the first cake, and the number of pieces of the second cake, respectively.


-----Output-----

Print the maximum possible number x such that Ivan can distribute the cake in such a way that each plate will contain at least x pieces of cake.


-----Examples-----
Input
5 2 3

Output
1

Input
4 7 10

Output
3



-----Note-----

In the first example there is only one way to distribute cakes to plates, all of them will have 1 cake on it.

In the second example you can have two plates with 3 and 4 pieces of the first cake and two plates both with 5 pieces of the second cake. Minimal number of pieces is 3.
Use user-input-Based format and function signature solve()","
def solve():
    n, a, b = map(int, input().split())
    x = min(a // n, b // (n - 1))
    print(x)

solve()
","
from math import ceil

def solve():
    n, a, b = map(int, input().split())
    x = min(a // n, b // (n - 1))
    print(x)

solve()
","
def solve():
    n, a, b = map(int, input().split())
    x = min(a // (n - 1), b // (n - 1), (a + b) // n)
    print(x)

solve()
","
def solve():
    n, a, b = map(int, input().split())
    min_pieces = max(a//n, b//n)
    print(min_pieces)

solve()
","0.0","0.0","20.0","6.666666666666667","","","",""
"APPS/35","
QUESTION:
The flag of Berland is such rectangular field n × m that satisfies following conditions:

  Flag consists of three colors which correspond to letters 'R', 'G' and 'B'.  Flag consists of three equal in width and height stripes, parralel to each other and to sides of the flag. Each stripe has exactly one color.  Each color should be used in exactly one stripe. 

You are given a field n × m, consisting of characters 'R', 'G' and 'B'. Output ""YES"" (without quotes) if this field corresponds to correct flag of Berland. Otherwise, print ""NO"" (without quotes).


-----Input-----

The first line contains two integer numbers n and m (1 ≤ n, m ≤ 100) — the sizes of the field.

Each of the following n lines consisting of m characters 'R', 'G' and 'B' — the description of the field.


-----Output-----

Print ""YES"" (without quotes) if the given field corresponds to correct flag of Berland . Otherwise, print ""NO"" (without quotes).


-----Examples-----
Input
6 5
RRRRR
RRRRR
BBBBB
BBBBB
GGGGG
GGGGG

Output
YES

Input
4 3
BRG
BRG
BRG
BRG

Output
YES

Input
6 7
RRRGGGG
RRRGGGG
RRRGGGG
RRRBBBB
RRRBBBB
RRRBBBB

Output
NO

Input
4 4
RRRR
RRRR
BBBB
GGGG

Output
NO



-----Note-----

The field in the third example doesn't have three parralel stripes.

Rows of the field in the fourth example are parralel to each other and to borders. But they have different heights — 2, 1 and 1.
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    field = [input() for _ in range(n)]
    
    colors = set()
    for i in range(n):
        for j in range(m):
            colors.add(field[i][j])
    
    if len(colors) != 3:
        print(""NO"")
        return
    
    stripe_height = n // 3
    stripe_width = m
    
    stripe1 = field[:stripe_height]
    stripe2 = field[stripe_height:2*stripe_height]
    stripe3 = field[2*stripe_height:]
    
    if len(set(map(tuple, stripe1))) == 1 and len(set(map(tuple, stripe2))) == 1 and len(set(map(tuple, stripe3))) == 1:
        if stripe1[0][0] != stripe2[0][0] and stripe1[0][0] != stripe3[0][0] and stripe2[0][0] != stripe3[0][0]:
            print(""YES"")
        else:
            print(""NO"")
    else:
        print(""NO"")

solve()
","
def solve():
    n, m = map(int, input().split())
    field = [input() for _ in range(n)]
    
    flag_colors = set([field[0][0], field[n//3][0], field[2*n//3][0]])
    flag_stripes = set([field[i][0] for i in range(n)])
    
    if len(flag_colors) == 3 and len(flag_stripes) == 3 and flag_colors == flag_stripes and n % 3 == 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n, m = map(int, input().split())
    field = [input() for _ in range(n)]

    row1 = field[0]
    row2 = field[n//3]
    row3 = field[2*n//3]

    check1 = row1 == row2 and row2 == row3
    check2 = len(set(field)) == 3
    check3 = all(len(set([row[i] for row in field])) == 1 for i in range(m))

    if check1 and check2 and check3:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n, m = map(int, input().split())
    field = [input() for _ in range(n)]
    
    colors = set()
    
    for row in field:
        for color in row:
            colors.add(color)
            if len(colors) > 3:
                print(""NO"")
                return
    
    if len(colors) != 3:
        print(""NO"")
        return
    
    stripe_height = n // 3
    stripe_width = m
    
    stripes = [field[i*stripe_height:(i+1)*stripe_height] for i in range(3)]
    
    for stripe in stripes:
        stripe_colors = set()
        for row in stripe:
            for color in row:
                stripe_colors.add(color)
                if len(stripe_colors) > 1:
                    print(""NO"")
                    return
    
    if len(set(map(len, stripes))) > 1:
        print(""NO"")
        return
    
    print(""YES"")

solve()","80.0","80.0","73.33333333333333","86.66666666666667","","","",""
"APPS/36","
QUESTION:
Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: 

[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.


-----Input-----

The only line of the input contains integer n (0 ≤ n ≤ 10^18) — the number of Ayrat's moves.


-----Output-----

Print two integers x and y — current coordinates of Ayrat coordinates.


-----Examples-----
Input
3

Output
-2 0

Input
7

Output
3 2
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    x, y = 0, 0
    k = 1
    while k * k < n:
        k += 2
    k -= 2
    n -= k * k
    if n <= k:
        x -= n
    elif n <= 2 * k:
        x -= k
        y += n - k
    elif n <= 3 * k:
        x -= k - (n - 2 * k)
        y += k
    elif n <= 4 * k:
        y += k
    elif n <= 5 * k:
        x += n - 4 * k
        y += k - (n - 4 * k)
    else:
        x += k
        y -= n - 5 * k
    print(x, y)

solve()
","
def solve():
    n = int(input())
    x, y = 0, 0
    k = 1
    while 3*k*(k+1) <= n:
        k += 1
    p = n - 3*(k-1)*k
    half_k = k // 2
    if p <= k:
        x = half_k - k
        y = -p + half_k
    elif p <= 2*k:
        x = -p + 3*half_k
        y = -k + half_k
    else:
        x = k + half_k
        y = p - 5*half_k
    print(x, y)

solve()
","
import math

def solve():
    def get_spiral_coords(n):
        k = math.ceil((math.sqrt(1 + 4 * n) - 1) / 2)
        d = n - 3 * k * k + 3 * k
        if d <= k:
            x = k
            y = -d
        elif d <= 2 * k:
            x = 2 * k - d
            y = -k
        elif d <= 3 * k:
            x = -k
            y = -k + d - 2 * k
        elif d <= 4 * k:
            x = -k + d - 3 * k
            y = k
        elif d <= 5 * k:
            x = d - 5 * k
            y = k
        else:
            x = k
            y = 3 * k - d
        return x, y

    n = int(input())
    x, y = get_spiral_coords(n)
    print(x, y)

solve()
","
from math import sqrt, sin, cos, pi

def solve():
    def get_coordinates(n):
        k = int(sqrt(n))
        k += 1 - k % 2
        x = k // 2
        y = -x

        r = (k * k - n) // (k - 1)

        if r == 0:
            y += n - (k - 1) * (k - 1)
        elif r == 1:
            y += k - 1
            x -= n - (k - 1) * (k - 1)
        elif r == 2:
            x -= k - 1
            y += k - 1
            x -= k - 1
            y -= n - (k - 1) * (k - 1)
        elif r == 3:
            y -= k - 1
            x += n - (k - 1) * (k - 1)
        
        return x, y

    n = int(input())
    x, y = get_coordinates(n)
    print(x, y)

solve()
","0.0","0.0","0.0","0.0","","","",""
"APPS/37","
QUESTION:
Dante is engaged in a fight with ""The Savior"". Before he can fight it with his sword, he needs to break its shields. He has two guns, Ebony and Ivory, each of them is able to perform any non-negative number of shots.

For every bullet that hits the shield, Ebony deals a units of damage while Ivory deals b units of damage. In order to break the shield Dante has to deal exactly c units of damage. Find out if this is possible.


-----Input-----

The first line of the input contains three integers a, b, c (1 ≤ a, b ≤ 100, 1 ≤ c ≤ 10 000) — the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.


-----Output-----

Print ""Yes"" (without quotes) if Dante can deal exactly c damage to the shield and ""No"" (without quotes) otherwise.


-----Examples-----
Input
4 6 15

Output
No

Input
3 2 7

Output
Yes

Input
6 11 6

Output
Yes



-----Note-----

In the second sample, Dante can fire 1 bullet from Ebony and 2 from Ivory to deal exactly 1·3 + 2·2 = 7 damage. In the third sample, Dante can fire 1 bullet from ebony and no bullets from ivory to do 1·6 + 0·11 = 6 damage.
Use user-input-Based format and function signature solve()","
def solve():
    a, b, c = map(int, input().split())
    for i in range(c // a + 1):
        if (c - i * a) % b == 0:
            print(""Yes"")
            return
    print(""No"")

solve()
","
def solve():
    a, b, c = map(int, input().split())
    
    for i in range((c // min(a, b)) + 1):
        if (c - i * min(a, b)) % max(a, b) == 0:
            print(""Yes"")
            return
    
    print(""No"")

solve()
","
def solve():
    a, b, c = map(int, input().split())
    for i in range(c // a + 1):
        if (c - i * a) % b == 0:
            print(""Yes"")
            return
    print(""No"")

solve()
","
def solve():
    a, b, c = map(int, input().split())
    
    for i in range(a + 1):
        for j in range(b + 1):
            if i*a + j*b == c:
                print(""Yes"")
                return
    print(""No"")

solve()","100.0","100.0","100.0","73.33333333333333","","","",""
"APPS/38","
QUESTION:
Running with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:

The track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. 

Her friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. 

There are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. 

Write the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction — counterclockwise, if you look on a track from above. 


-----Input-----

The first line contains two integers n and L (1 ≤ n ≤ 50, n ≤ L ≤ 100) — the number of barriers on a track and its length. 

The second line contains n distinct integers in the ascending order — the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.

The second line contains n distinct integers in the ascending order — the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.


-----Output-----

Print ""YES"" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print ""NO"" (without quotes).


-----Examples-----
Input
3 8
2 4 6
1 5 7

Output
YES

Input
4 9
2 3 5 8
0 1 3 6

Output
YES

Input
2 4
1 3
1 2

Output
NO



-----Note-----

The first test is analyzed in the statement.
Use user-input-Based format and function signature solve()","
def solve():
    n, L = map(int, input().split())
    kefa = list(map(int, input().split()))
    sasha = list(map(int, input().split()))

    for i in range(n):
        if all((kefa[j] == sasha[(j + i) % n] for j in range(n))):
            print(""YES"")
            return

    print(""NO"")

solve()
","
def solve():
    n, L = map(int, input().split())
    kefa = list(map(int, input().split()))
    sasha = list(map(int, input().split()))
    
    def check_track_equality(start1, start2, distances):
        normalized1 = [(d - start1) % L for d in distances]
        normalized2 = [(d - start2) % L for d in distances]
        return sorted(normalized1) == sorted(normalized2)
    
    for i in range(L):
        if check_track_equality(kefa[0], sasha[0], kefa):
            print(""YES"")
            return
        kefa = kefa[1:] + [kefa[0]]
    
    print(""NO"")

solve()
","
def solve():
    n, L = map(int, input().split())
    kefa_distances = list(map(int, input().split()))
    sasha_distances = list(map(int, input().split()))
    
    kefa_diffs = [kefa_distances[(i+1)%n] - kefa_distances[i] for i in range(n)]
    sasha_diffs = [sasha_distances[(i+1)%n] - sasha_distances[i] for i in range(n)]
    
    for i in range(n):
        if kefa_diffs == sasha_diffs:
            print(""YES"")
            return
        kefa_diffs = kefa_diffs[-1:] + kefa_diffs[:-1]
    
    print(""NO"")

solve()
","
def solve():
    n, L = map(int, input().split())
    kefa = list(map(int, input().split()))
    sasha = list(map(int, input().split()))

    for i in range(n):
        if kefa == sasha:
            print(""YES"")
            return
        sasha = sasha[1:] + [sasha[0]]

    print(""NO"")

solve()
","40.0","46.666666666666664","73.33333333333333","40.0","","","",""
"APPS/39","
QUESTION:
A string is a palindrome if it reads the same from the left to the right and from the right to the left. For example, the strings ""kek"", ""abacaba"", ""r"" and ""papicipap"" are palindromes, while the strings ""abb"" and ""iq"" are not.

A substring $s[l \ldots r]$ ($1 \leq l \leq r \leq |s|$) of a string $s = s_{1}s_{2} \ldots s_{|s|}$ is the string $s_{l}s_{l + 1} \ldots s_{r}$.

Anna does not like palindromes, so she makes her friends call her Ann. She also changes all the words she reads in a similar way. Namely, each word $s$ is changed into its longest substring that is not a palindrome. If all the substrings of $s$ are palindromes, she skips the word at all.

Some time ago Ann read the word $s$. What is the word she changed it into?


-----Input-----

The first line contains a non-empty string $s$ with length at most $50$ characters, containing lowercase English letters only.


-----Output-----

If there is such a substring in $s$ that is not a palindrome, print the maximum length of such a substring. Otherwise print $0$.

Note that there can be multiple longest substrings that are not palindromes, but their length is unique.


-----Examples-----
Input
mew

Output
3

Input
wuffuw

Output
5

Input
qqqqqqqq

Output
0



-----Note-----

""mew"" is not a palindrome, so the longest substring of it that is not a palindrome, is the string ""mew"" itself. Thus, the answer for the first example is $3$.

The string ""uffuw"" is one of the longest non-palindrome substrings (of length $5$) of the string ""wuffuw"", so the answer for the second example is $5$.

All substrings of the string ""qqqqqqqq"" consist of equal characters so they are palindromes. This way, there are no non-palindrome substrings. Thus, the answer for the third example is $0$.
Use user-input-Based format and function signature solve()","
def solve():
    s = input().strip()
    n = len(s)
    
    def is_palindrome(sub):
        return sub == sub[::-1]
    
    max_length = 0
    for i in range(n):
        for j in range(i+1, n+1):
            if not is_palindrome(s[i:j]):
                max_length = max(max_length, j-i)
    
    print(max_length)

solve()
","
def solve():
    s = input()
    n = len(s)
    
    def is_palindrome(sub):
        return sub == sub[::-1]
    
    answer = 0
    for i in range(n):
        for j in range(i+1, n+1):
            if not is_palindrome(s[i:j]):
                answer = max(answer, j-i)
    
    print(answer)

solve()
","
def solve():
    s = input().strip()
    n = len(s)
    
    def is_palindrome(sub):
        return sub == sub[::-1]
    
    def find_non_palindrome_length(s):
        max_length = 0
        for i in range(n):
            for j in range(i + 1, n + 1):
                if not is_palindrome(s[i:j]):
                    max_length = max(max_length, j - i)
        return max_length
    
    result = find_non_palindrome_length(s)
    print(result)

solve()
","
def solve():
    s = input()
    def is_palindrome(sub):
        return sub == sub[::-1]
    
    max_len = 0
    for i in range(len(s)):
        for j in range(i+1, len(s) + 1):
            if not is_palindrome(s[i:j]) and len(s[i:j]) > max_len:
                max_len = len(s[i:j])
    
    print(max_len)

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/40","
QUESTION:
Is it rated?

Here it is. The Ultimate Question of Competitive Programming, Codeforces, and Everything. And you are here to answer it.

Another Codeforces round has been conducted. No two participants have the same number of points. For each participant, from the top to the bottom of the standings, their rating before and after the round is known.

It's known that if at least one participant's rating has changed, then the round was rated for sure.

It's also known that if the round was rated and a participant with lower rating took a better place in the standings than a participant with higher rating, then at least one round participant's rating has changed.

In this problem, you should not make any other assumptions about the rating system.

Determine if the current round is rated, unrated, or it's impossible to determine whether it is rated of not.


-----Input-----

The first line contains a single integer n (2 ≤ n ≤ 1000) — the number of round participants.

Each of the next n lines contains two integers a_{i} and b_{i} (1 ≤ a_{i}, b_{i} ≤ 4126) — the rating of the i-th participant before and after the round, respectively. The participants are listed in order from the top to the bottom of the standings.


-----Output-----

If the round is rated for sure, print ""rated"". If the round is unrated for sure, print ""unrated"". If it's impossible to determine whether the round is rated or not, print ""maybe"".


-----Examples-----
Input
6
3060 3060
2194 2194
2876 2903
2624 2624
3007 2991
2884 2884

Output
rated

Input
4
1500 1500
1300 1300
1200 1200
1400 1400

Output
unrated

Input
5
3123 3123
2777 2777
2246 2246
2246 2246
1699 1699

Output
maybe



-----Note-----

In the first example, the ratings of the participants in the third and fifth places have changed, therefore, the round was rated.

In the second example, no one's rating has changed, but the participant in the second place has lower rating than the participant in the fourth place. Therefore, if the round was rated, someone's rating would've changed for sure.

In the third example, no one's rating has changed, and the participants took places in non-increasing order of their rating. Therefore, it's impossible to determine whether the round is rated or not.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    ratings = []
    for _ in range(n):
        a, b = map(int, input().split())
        ratings.append((a, b))

    rated = False
    for i in range(n):
        if ratings[i][0] != ratings[i][1]:
            rated = True
            break

    if rated:
        for i in range(1, n):
            if ratings[i][0] > ratings[i-1][0]:
                print(""rated"")
                return

        print(""unrated"")
    else:
        print(""maybe"")

solve()","
def solve():
    n = int(input())
    participants = []
    rated = False
    for _ in range(n):
        a, b = map(int, input().split())
        if a != b:
            rated = True
        participants.append((a, b))
    
    if rated:
        for i in range(1, n):
            if participants[i][0] > participants[i-1][0]:
                print(""rated"")
                return
        print(""unrated"")
    else:
        print(""maybe"")

solve()
","
def solve():
    n = int(input())
    ratings = []
    for _ in range(n):
        a, b = map(int, input().split())
        if a != b:
            print(""rated"")
            return
        ratings.append(a)
    
    for i in range(1, n):
        if ratings[i] > ratings[i-1]:
            print(""unrated"")
            return
    
    print(""maybe"")
    
solve()
","
def solve():
    n = int(input())
    participants = [list(map(int, input().split())) for _ in range(n)]
    
    change = False
    unrated_possible = False
    for i in range(1, n):
        if participants[i-1][0] < participants[i][0]:
            change = True
        if participants[i-1][0] > participants[i][0]:
            unrated_possible = True
    
    if change:
        print(""rated"")
    elif unrated_possible:
        print(""maybe"")
    else:
        print(""unrated"")

solve()","60.0","60.0","100.0","46.666666666666664","","","",""
"APPS/41","
QUESTION:
You are given the array of integer numbers a_0, a_1, ..., a_{n} - 1. For each element find the distance to the nearest zero (to the element which equals to zero). There is at least one zero element in the given array.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 2·10^5) — length of the array a. The second line contains integer elements of the array separated by single spaces ( - 10^9 ≤ a_{i} ≤ 10^9).


-----Output-----

Print the sequence d_0, d_1, ..., d_{n} - 1, where d_{i} is the difference of indices between i and nearest j such that a_{j} = 0. It is possible that i = j.


-----Examples-----
Input
9
2 1 0 3 0 0 3 2 4

Output
2 1 0 1 0 0 1 2 3 
Input
5
0 1 2 3 4

Output
0 1 2 3 4 
Input
7
5 6 0 1 -2 3 4

Output
2 1 0 1 2 3 4
Use user-input-Based format and function signature solve()","
from typing import List

def solve() -> None:
    n = int(input())
    a = list(map(int, input().split()))
    
    left_zero = [float('inf')] * n
    right_zero = [float('inf')] * n
    
    zero_index = -1
    for i in range(n):
        if a[i] == 0:
            zero_index = i
        if zero_index != -1:
            left_zero[i] = i - zero_index
    
    zero_index = -1
    for i in range(n-1, -1, -1):
        if a[i] == 0:
            zero_index = i
        if zero_index != -1:
            right_zero[i] = zero_index - i
    
    result = [min(left_zero[i], right_zero[i]) for i in range(n)]
    print(*result)


solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    left_zeros = [float('-inf')]*n
    right_zeros = [float('inf')]*n
    ans = [0]*n
    
    last_zero = float('-inf')
    for i in range(n):
        if a[i] == 0:
            last_zero = i
        left_zeros[i] = i - last_zero
    
    last_zero = float('inf')
    for i in range(n-1, -1, -1):
        if a[i] == 0:
            last_zero = i
        right_zeros[i] = last_zero - i
        
    for i in range(n):
        ans[i] = min(left_zeros[i], right_zeros[i])
    
    print(*ans)

import sys
if __name__ == '__main__':
    sys.setrecursionlimit(10**6)
    solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    zeroes = []
    for i in range(n):
        if a[i] == 0:
            zeroes.append(i)

    result = []
    for i in range(n):
        if a[i] == 0:
            result.append(0)
        else:
            result.append(min([abs(i - zero) for zero in zeroes]))

    print(' '.join(map(str, result)))

solve()","
def solve():
    n = int(input())
    arr = list(map(int, input().split()))
    zeros = [i for i in range(n) if arr[i] == 0]
    res = []
    for i in range(n):
        if arr[i] == 0:
            res.append(0)
        else:
            res.append(min([abs(i-zero) for zero in zeros]))
    print(*res)

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/42","
QUESTION:
You are given a binary string $s$.

Find the number of distinct cyclical binary strings of length $n$ which contain $s$ as a substring.

The cyclical string $t$ contains $s$ as a substring if there is some cyclical shift of string $t$, such that $s$ is a substring of this cyclical shift of $t$.

For example, the cyclical string ""000111"" contains substrings ""001"", ""01110"" and ""10"", but doesn't contain ""0110"" and ""10110"".

Two cyclical strings are called different if they differ from each other as strings. For example, two different strings, which differ from each other by a cyclical shift, are still considered different cyclical strings.


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 40$) — the length of the target string $t$.

The next line contains the string $s$ ($1 \le |s| \le n$) — the string which must be a substring of cyclical string $t$. String $s$ contains only characters '0' and '1'.


-----Output-----

Print the only integer — the number of distinct cyclical binary strings $t$, which contain $s$ as a substring.


-----Examples-----
Input
2
0

Output
3
Input
4
1010

Output
2
Input
20
10101010101010

Output
962


-----Note-----

In the first example, there are three cyclical strings, which contain ""0"" — ""00"", ""01"" and ""10"".

In the second example, there are only two such strings — ""1010"", ""0101"".
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    s = input().strip()
    
    m = len(s)
    s += s
    z = [0] * (2 * m)
    l, r = 0, 0
    for i in range(1, 2 * m):
        if i <= r:
            z[i] = min(r - i + 1, z[i - l])
        while i + z[i] < 2 * m and s[z[i]] == s[i + z[i]]:
            z[i] += 1
        if i + z[i] - 1 > r:
            l, r = i, i + z[i] - 1
    
    ans = 0
    for i in range(m, 2 * m):
        if z[i] >= m:
            ans += 1
    
    print(ans)

solve()
","
from collections import deque

def solve():
    n = int(input())
    s = input().strip()
    
    s_len = len(s)
    s = s + s
    
    p = [0] * (2 * s_len)
    j = 0
    
    for i in range(1, s_len):
        while j > 0 and s[j] != s[i]:
            j = p[j - 1]
        
        if s[j] == s[i]:
            j += 1
        
        p[i] = j
    
    answer = s_len - p[-1]
    print(answer)

solve()
","
from itertools import product

def solve():
    n = int(input())
    s = input().strip()
    
    count = 0
    for binary_str in product('01', repeat=n):
        if any(s in cycle(binary_str, i) for i in range(len(binary_str))):
            count += 1
    
    print(count)

def cycle(lst, idx):
    return lst[idx:] + lst[:idx]

solve()
","
def solve():
    n = int(input())
    s = input().strip()
    
    m = len(s)
    s += s
    kmp = [0] * (2 * m)
    
    j = 0
    for i in range(1, m):
        while j > 0 and s[i] != s[j]:
            j = kmp[j - 1]
        if s[i] == s[j]:
            j += 1
        kmp[i] = j
    
    ans = 0
    for i in range(n):
        x = i % m
        ans += kmp[x] == m

    print((n // m) - ans)

solve()
","6.666666666666667","26.666666666666668","8.333333333333332","6.666666666666667","","","",""
"APPS/43","
QUESTION:
You are given the set of vectors on the plane, each of them starting at the origin. Your task is to find a pair of vectors with the minimal non-oriented angle between them.

Non-oriented angle is non-negative value, minimal between clockwise and counterclockwise direction angles. Non-oriented angle is always between 0 and π. For example, opposite directions vectors have angle equals to π.


-----Input-----

First line of the input contains a single integer n (2 ≤ n ≤ 100 000) — the number of vectors.

The i-th of the following n lines contains two integers x_{i} and y_{i} (|x|, |y| ≤ 10 000, x^2 + y^2 > 0) — the coordinates of the i-th vector. Vectors are numbered from 1 to n in order of appearing in the input. It is guaranteed that no two vectors in the input share the same direction (but they still can have opposite directions).


-----Output-----

Print two integer numbers a and b (a ≠ b) — a pair of indices of vectors with the minimal non-oriented angle. You can print the numbers in any order. If there are many possible answers, print any.


-----Examples-----
Input
4
-1 0
0 -1
1 0
1 1

Output
3 4

Input
6
-1 0
0 -1
1 0
1 1
-4 -5
-4 -6

Output
6 5
Use user-input-Based format and function signature solve()","
from math import atan2, pi

def solve():
    n = int(input())
    vectors = []
    for i in range(n):
        x, y = map(int, input().split())
        vectors.append((x, y))

    min_angle = pi
    min_indices = (0, 1)

    for i in range(n):
        for j in range(i+1, n):
            angle = abs(atan2(vectors[i][1], vectors[i][0]) - atan2(vectors[j][1], vectors[j][0]))
            angle = min(angle, 2*pi - angle)
            if angle < min_angle:
                min_angle = angle
                min_indices = (i+1, j+1)

    print(min_indices[0], min_indices[1])

solve()
","
from math import atan2

def solve():
    n = int(input())
    vectors = [list(map(int, input().split())) for _ in range(n)]
    
    min_angle = 10**6
    a, b = 0, 0
    
    for i in range(n):
        for j in range(i+1, n):
            angle = abs(atan2(vectors[i][1], vectors[i][0]) - atan2(vectors[j][1], vectors[j][0]))
            angle = min(angle, 2 * 3.14159265359 - angle)
            if angle < min_angle:
                min_angle = angle
                a, b = i+1, j+1
    
    print(a, b)

solve()","
from math import atan2, pi

def solve():
    n = int(input())
    vectors = [list(map(int, input().split())) for _ in range(n)]
    
    min_angle = pi
    min_indices = (0, 0)
    
    for i in range(n):
        for j in range(i+1, n):
            angle = abs(atan2(vectors[i][1], vectors[i][0]) - atan2(vectors[j][1], vectors[j][0]))
            if angle > pi:
                angle = 2*pi - angle
            if angle < min_angle:
                min_angle = angle
                min_indices = (i+1, j+1)
    
    print(min_indices[0], min_indices[1])

  
solve()","
from math import atan2, pi

def solve():
    n = int(input())
    vectors = []
    for i in range(n):
        x, y = map(int, input().split())
        vectors.append((x, y))

    vectors.sort(key=lambda v: atan2(v[1], v[0]))
    
    min_angle = 2 * pi
    a, b = 0, 1
    for i in range(n):
        j = (i + 1) % n
        angle = atan2(vectors[j][1], vectors[j][0]) - atan2(vectors[i][1], vectors[i][0])
        if angle < 0:
            angle += 2 * pi
        if angle < min_angle:
            min_angle = angle
            a, b = i, j
    
    print(a+1, b+1)

solve()
","73.33333333333333","86.66666666666667","73.33333333333333","33.33333333333333","","","",""
"APPS/44","
QUESTION:
Vasiliy has a car and he wants to get from home to the post office. The distance which he needs to pass equals to d kilometers.

Vasiliy's car is not new — it breaks after driven every k kilometers and Vasiliy needs t seconds to repair it. After repairing his car Vasiliy can drive again (but after k kilometers it will break again, and so on). In the beginning of the trip the car is just from repair station.

To drive one kilometer on car Vasiliy spends a seconds, to walk one kilometer on foot he needs b seconds (a < b).

Your task is to find minimal time after which Vasiliy will be able to reach the post office. Consider that in every moment of time Vasiliy can left his car and start to go on foot.


-----Input-----

The first line contains 5 positive integers d, k, a, b, t (1 ≤ d ≤ 10^12; 1 ≤ k, a, b, t ≤ 10^6; a < b), where:  d — the distance from home to the post office;  k — the distance, which car is able to drive before breaking;  a — the time, which Vasiliy spends to drive 1 kilometer on his car;  b — the time, which Vasiliy spends to walk 1 kilometer on foot;  t — the time, which Vasiliy spends to repair his car. 


-----Output-----

Print the minimal time after which Vasiliy will be able to reach the post office.


-----Examples-----
Input
5 2 1 4 10

Output
14

Input
5 2 1 4 5

Output
13



-----Note-----

In the first example Vasiliy needs to drive the first 2 kilometers on the car (in 2 seconds) and then to walk on foot 3 kilometers (in 12 seconds). So the answer equals to 14 seconds.

In the second example Vasiliy needs to drive the first 2 kilometers on the car (in 2 seconds), then repair his car (in 5 seconds) and drive 2 kilometers more on the car (in 2 seconds). After that he needs to walk on foot 1 kilometer (in 4 seconds). So the answer equals to 13 seconds.
Use user-input-Based format and function signature solve()","
def solve():
    d, k, a, b, t = map(int, input().split())
    
    if d <= k:
        print(d * a)
    else:
        full_trips = d // k
        remaining_distance = d % k
        time_to_drive = min(full_trips * k * a + full_trips * t, full_trips * k * a + remaining_distance * a)
        time_to_walk = (d - k) * b
        total_time = time_to_drive + time_to_walk
        print(total_time)

solve()
","
def solve():
    d, k, a, b, t = map(int, input().split())
    if d <= k:
        print(d * a)
    else:
        full_trips = d // k
        remaining_distance = d % k
        repair_time = (full_trips - 1) * t
        drive_time = full_trips * (k * a)
        walk_time = full_trips * (k * b) + remaining_distance * b
        total_time = max(drive_time, drive_time + repair_time, drive_time - a + repair_time + walk_time)
        print(total_time)
  
solve()","
def solve():
    d, k, a, b, t = map(int, input().split())
    
    drive_time = d * a
    full_repair_distances = d // k
    total_time = min(d, full_repair_distances * t + full_repair_distances * k * a)
    
    remaining_distance = d - full_repair_distances * k
    walk_time = remaining_distance * b
    
    minimal_time = total_time + (max(0, walk_time - t))
    
    print(minimal_time)

solve()","
def solve():
    d, k, a, b, t = map(int, input().split())
    
    time = 0
    remaining_distance = d
    while remaining_distance > 0:
        if remaining_distance <= k:
            time += remaining_distance * a
            break
        else:
            if k * a + t <= k * b:
                time += k * a
                remaining_distance -= k
            else:
                time += t + k * b
                remaining_distance -= k
    print(time)

solve()
","6.666666666666667","6.666666666666667","6.666666666666667","6.666666666666667","","","",""
"APPS/45","
QUESTION:
You are given positive integer number n. You should create such strictly increasing sequence of k positive numbers a_1, a_2, ..., a_{k}, that their sum is equal to n and greatest common divisor is maximal.

Greatest common divisor of sequence is maximum of such numbers that every element of sequence is divisible by them.

If there is no possible sequence then output -1.


-----Input-----

The first line consists of two numbers n and k (1 ≤ n, k ≤ 10^10).


-----Output-----

If the answer exists then output k numbers — resulting sequence. Otherwise output -1. If there are multiple answers, print any of them.


-----Examples-----
Input
6 3

Output
1 2 3

Input
8 2

Output
2 6

Input
5 3

Output
-1
Use user-input-Based format and function signature solve()","
import math

def solve():
    n, k = map(int, input().split())
    
    if k > n or k == 1 and n > 1:
        print(-1)
    else:
        rem = n % k
        div = n // k
        res = [div] * k
        
        for i in range(k):
            if rem > 0:
                res[i] += 1
                rem -= 1
        
        print(*res)

solve()
","
from math import gcd

def solve():
    n, k = map(int, input().split())
    
    if k > n:
        print(-1)
        return
    
    if n < k*(k+1)//2:
        print(-1)
        return
    
    start = n // k
    rem = n % k
    
    if start + k-1 - rem > 10**10:
        print(-1)
        return
    
    res = [start + k-1 - rem + i for i in range(1, k+1)]
    
    res.append(rem)
    
    print(*res)


solve()","
from math import gcd

def solve():
    n, k = map(int, input().split())

    if n < k*(k+1)//2:
        print(-1)
    else:
        base = n // ((k*(k+1)) // 2)
        remainder = n % ((k*(k+1)) // 2)
        
        sequence = [i*base for i in range(1, k+1)]
        for i in range(k):
            if i < remainder:
                sequence[i] += i+1
            else:
                sequence[i] += remainder
        
        print(' '.join(map(str, sequence)))

solve()
","
import math

def solve():
    n, k = map(int, input().split())
    
    if k > n or n % k != 0:
        print(-1)
    else:
        d = n // k
        if math.gcd(d, k) == 1:
            print(*[d] * k)
        else:
            a = 1
            for i in range(k-1):
                print(a, end=' ')
                a += d
            print(n - (k-1)*d)

solve()","20.0","20.0","80.0","40.0","","","",""
"APPS/46","
QUESTION:
After finishing eating her bun, Alyona came up with two integers n and m. She decided to write down two columns of integers — the first column containing integers from 1 to n and the second containing integers from 1 to m. Now the girl wants to count how many pairs of integers she can choose, one from the first column and the other from the second column, such that their sum is divisible by 5.

Formally, Alyona wants to count the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and $(x + y) \operatorname{mod} 5$ equals 0.

As usual, Alyona has some troubles and asks you to help.


-----Input-----

The only line of the input contains two integers n and m (1 ≤ n, m ≤ 1 000 000).


-----Output-----

Print the only integer — the number of pairs of integers (x, y) such that 1 ≤ x ≤ n, 1 ≤ y ≤ m and (x + y) is divisible by 5.


-----Examples-----
Input
6 12

Output
14

Input
11 14

Output
31

Input
1 5

Output
1

Input
3 8

Output
5

Input
5 7

Output
7

Input
21 21

Output
88



-----Note-----

Following pairs are suitable in the first sample case:   for x = 1 fits y equal to 4 or 9;  for x = 2 fits y equal to 3 or 8;  for x = 3 fits y equal to 2, 7 or 12;  for x = 4 fits y equal to 1, 6 or 11;  for x = 5 fits y equal to 5 or 10;  for x = 6 fits y equal to 4 or 9. 

Only the pair (1, 4) is suitable in the third sample case.
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    count = 0
    for x in range(1, n+1):
        count += (m // 5) + (m % 5 >= 5 - x % 5)
    print(count)

solve()
","
def solve():
    n, m = map(int, input().split())
    count = 0
    for x in range(1, n + 1):
        for y in range(1, m + 1):
            if (x + y) % 5 == 0:
                count += 1
    print(count)

solve()
","
def solve():
    n, m = map(int, input().split())
    result = 0
    for i in range(1, n + 1):
        result += m // 5
        for j in range(1, (m % 5) + 1):
            if (i + j) % 5 == 0:
                result += 1
    print(result)

solve()
","
import math

def solve():
    n, m = map(int, input().split())
    count = 0
    for x in range(1, n+1):
        count += math.ceil(m/5)
        if (x % 5) + (m % 5) >= 5:
            count -= 1
    print(count)

solve()
","100.0","100.0","100.0","26.666666666666668","","","",""
"APPS/47","
QUESTION:
You are given an array $a$ consisting of $n$ integers. Beauty of array is the maximum sum of some consecutive subarray of this array (this subarray may be empty). For example, the beauty of the array [10, -5, 10, -4, 1] is 15, and the beauty of the array [-3, -5, -1] is 0.

You may choose at most one consecutive subarray of $a$ and multiply all values contained in this subarray by $x$. You want to maximize the beauty of array after applying at most one such operation.


-----Input-----

The first line contains two integers $n$ and $x$ ($1 \le n \le 3 \cdot 10^5, -100 \le x \le 100$) — the length of array $a$ and the integer $x$ respectively.

The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($-10^9 \le a_i \le 10^9$) — the array $a$.


-----Output-----

Print one integer — the maximum possible beauty of array $a$ after multiplying all values belonging to some consecutive subarray $x$.


-----Examples-----
Input
5 -2
-3 8 -2 1 -6

Output
22

Input
12 -3
1 3 3 7 1 3 3 7 1 3 3 7

Output
42

Input
5 10
-1 -2 -3 -4 -5

Output
0



-----Note-----

In the first test case we need to multiply the subarray [-2, 1, -6], and the array becomes [-3, 8, 4, -2, 12] with beauty 22 ([-3, 8, 4, -2, 12]).

In the second test case we don't need to multiply any subarray at all.

In the third test case no matter which subarray we multiply, the beauty of array will be equal to 0.
Use user-input-Based format and function signature solve()","
def solve():
    n, x = map(int, input().split())
    a = list(map(int, input().split()))
    
    def max_beauty(a, x):
        prefix_max = [0] * (n + 1)
        suffix_max = [0] * (n + 1)
        max_sum = 0
        curr_sum = 0
        
        for i in range(n):
            curr_sum = max(a[i], curr_sum + a[i])
            max_sum = max(max_sum, curr_sum)
            prefix_max[i + 1] = max_sum
        
        max_sum = 0
        curr_sum = 0
        
        for i in range(n - 1, -1, -1):
            curr_sum = max(a[i], curr_sum + a[i])
            max_sum = max(max_sum, curr_sum)
            suffix_max[i] = max_sum
        
        beauty = max(max(a[i] * x, a[i]) for i in range(n))
        
        for i in range(n):
            beauty = max(beauty, prefix_max[i] + suffix_max[i + 1])
        
        return beauty
    
    print(max_beauty(a, x))

solve()
","
def solve():
    n, x = map(int, input().split())
    a = list(map(int, input().split()))

    max_sum = current_sum = 0
    prefix_mx = [0]
    suffx_mx = [0]

    for i in range(len(a)):
        current_sum = max(0, current_sum + a[i])
        max_sum = max(max_sum, current_sum)
        prefix_mx.append(max(prefix_mx[-1], current_sum)

    current_sum = 0
    for i in range(len(a) - 1, -1, -1):
        current_sum = max(0, current_sum + a[i])
        max_sum = max(max_sum, current_sum)
        suffx_mx.append(max(suffx_mx[-1], current_sum))

    res = max_sum

    for i in range(1, len(a)):
        res = max(res, prefix_mx[i] + suffx_mx[len(a) - i] + x)

    print(res)

import sys
if __name__ == ""__main__"":
    sys.setrecursionlimit(10**6)
    solve()
","
def solve():
    n, x = map(int, input().split())
    a = list(map(int, input().split()))
    
    max_sum = current_sum = 0
    prefix = [0]
    pref_x = [0]
    
    for num in a:
        current_sum = max(num, current_sum + num)
        max_sum = max(max_sum, current_sum)
        prefix.append(max_sum)
        pref_x.append(max(pref_x[-1], prefix[-2] * x))

    result = 0
    for i in range(1, n + 1):
        result = max(result, max(0, prefix[i] + (prefix[n] - prefix[i]) * x), prefix[i] + (prefix[n] - prefix[i]) * x - pref_x[i])

    print(result)

solve()
","
def solve():
    n, x = map(int, input().split())
    a = list(map(int, input().split()))
    
    max_sum = sum(a)
    prefix = [0] * (n + 1)
    suffix = [0] * (n + 1)
    
    for i in range(1, n + 1):
        prefix[i] = max(prefix[i - 1] + a[i - 1], a[i - 1])
    
    for i in range(n, 0, -1):
        suffix[i] = max(suffix[i + 1] + a[i - 1], a[i - 1])
    
    res = 0
    for i in range(1, n + 1):
        res = max(res, prefix[i])
    
    for i in range(1, n + 1):
        for j in range(i + 1, n + 1):
            res = max(res, prefix[i - 1] + x * sum(a[i - 1:j]) + suffix[j + 1])
    
    print(res)

solve()
","53.333333333333336","0.0","13.333333333333334","0.0","","","",""
"APPS/48","
QUESTION:
Bizon the Champion isn't just charming, he also is very smart.

While some of us were learning the multiplication table, Bizon the Champion had fun in his own manner. Bizon the Champion painted an n × m multiplication table, where the element on the intersection of the i-th row and j-th column equals i·j (the rows and columns of the table are numbered starting from 1). Then he was asked: what number in the table is the k-th largest number? Bizon the Champion always answered correctly and immediately. Can you repeat his success?

Consider the given multiplication table. If you write out all n·m numbers from the table in the non-decreasing order, then the k-th number you write out is called the k-th largest number.


-----Input-----

The single line contains integers n, m and k (1 ≤ n, m ≤ 5·10^5; 1 ≤ k ≤ n·m).


-----Output-----

Print the k-th largest number in a n × m multiplication table.


-----Examples-----
Input
2 2 2

Output
2

Input
2 3 4

Output
3

Input
1 10 5

Output
5



-----Note-----

A 2 × 3 multiplication table looks like this:

1 2 3

2 4 6
Use user-input-Based format and function signature solve()","
def solve():
    n, m, k = map(int, input().split())
    low, high = 1, n*m
    
    while low < high:
        mid = (low + high) // 2
        count = sum(min(mid // i, n) for i in range(1, m+1))
        
        if count < k:
            low = mid + 1
        else:
            high = mid
    
    return low

solve()
","
def solve():
    import heapq

    n, m, k = map(int, input().split())

    def count_less_equal(x, n, m):
        count = 0
        for i in range(1, n+1):
            count += min(x//i, m)
        return count

    l, r = 1, n*m
    while l < r:
        mid = (l+r)//2
        if count_less_equal(mid, n, m) < k:
            l = mid + 1
        else:
            r = mid

    print(l)

solve()
","
def solve():
    import heapq
    
    n, m, k = map(int, input().split())
    
    def count_less_equal(x):
        count = 0
        for i in range(1, n+1):
            count += min(x // i, m)
        return count
    
    left, right = 1, n*m
    while left < right:
        mid = (left + right) // 2
        if count_less_equal(mid) < k:
            left = mid + 1
        else:
            right = mid
    
    return left

solve()
","
def solve():
    import math
    
    n, m, k = map(int, input().split())
    
    l, r = 1, n*m
    
    while l < r:
        mid = (l + r) // 2
        cnt = 0
        
        for i in range(1, n+1):
            cnt += min(mid // i, m)
        
        if cnt < k:
            l = mid + 1
        else:
            r = mid
    
    return l

solve()
","0.0","100.0","0.0","0.0","","","",""
"APPS/49","
QUESTION:
Let's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...

Your task is to print the $k$-th digit of this sequence.


-----Input-----

The first and only line contains integer $k$ ($1 \le k \le 10^{12}$) — the position to process ($1$-based index).


-----Output-----

Print the $k$-th digit of the resulting infinite sequence.


-----Examples-----
Input
7

Output
7

Input
21

Output
5
Use user-input-Based format and function signature solve()","
def solve():
    k = int(input())
    k -= 1
    n = 1
    while k > 9 * n * 10 ** (n - 1):
        k -= 9 * n * 10 ** (n - 1)
        n += 1
    num = 10 ** (n - 1) + k // n
    digit = str(num)[k % n]
    print(digit)

solve()
","
def solve():
    k = int(input())
    current_num = 1
    current_pos = 1
    
    while True:
        num_str = str(current_num)
        for digit in num_str:
            if current_pos == k:
                print(digit)
                return
            current_pos += 1
        
        current_num += 1

if __name__ == ""__main__"":
    solve()
","
def solve():
    k = int(input())
    
    def digit_at_position(n):
        count = 9
        length = 1
        while n > length * count:
            n -= length * count
            length += 1
            count *= 10
        num = 10 ** (length - 1) + (n - 1) // length
        return int(str(num)[(n - 1) % length])
    
    result = digit_at_position(k)
    print(result)

solve()
","
def solve():
    k = int(input())
    
    def find_digit(k):
        i = 1
        while k > 9 * (10 ** (i - 1)) * i:
            k -= 9 * (10 ** (i - 1)) * i
            i += 1
        
        num = 10 ** (i - 1) + (k - 1) // i
        digit_idx = (k - 1) % i
        return int(str(num)[digit_idx])
    
    print(find_digit(k))
    
solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/50","
QUESTION:
Welcome to Codeforces Stock Exchange! We're pretty limited now as we currently allow trading on one stock, Codeforces Ltd. We hope you'll still be able to make profit from the market!

In the morning, there are $n$ opportunities to buy shares. The $i$-th of them allows to buy as many shares as you want, each at the price of $s_i$ bourles.

In the evening, there are $m$ opportunities to sell shares. The $i$-th of them allows to sell as many shares as you want, each at the price of $b_i$ bourles. You can't sell more shares than you have.

It's morning now and you possess $r$ bourles and no shares.

What is the maximum number of bourles you can hold after the evening?


-----Input-----

The first line of the input contains three integers $n, m, r$ ($1 \leq n \leq 30$, $1 \leq m \leq 30$, $1 \leq r \leq 1000$) — the number of ways to buy the shares on the market, the number of ways to sell the shares on the market, and the number of bourles you hold now.

The next line contains $n$ integers $s_1, s_2, \dots, s_n$ ($1 \leq s_i \leq 1000$); $s_i$ indicates the opportunity to buy shares at the price of $s_i$ bourles.

The following line contains $m$ integers $b_1, b_2, \dots, b_m$ ($1 \leq b_i \leq 1000$); $b_i$ indicates the opportunity to sell shares at the price of $b_i$ bourles.


-----Output-----

Output a single integer — the maximum number of bourles you can hold after the evening.


-----Examples-----
Input
3 4 11
4 2 5
4 4 5 4

Output
26

Input
2 2 50
5 7
4 2

Output
50



-----Note-----

In the first example test, you have $11$ bourles in the morning. It's optimal to buy $5$ shares of a stock at the price of $2$ bourles in the morning, and then to sell all of them at the price of $5$ bourles in the evening. It's easy to verify that you'll have $26$ bourles after the evening.

In the second example test, it's optimal not to take any action.
Use user-input-Based format and function signature solve()","
def solve():
    n, m, r = map(int, input().split())
    buy_prices = list(map(int, input().split()))
    sell_prices = list(map(int, input().split()))

    max_bourles = r
    max_buy_price = max(buy_prices)
    min_sell_price = min(sell_prices)

    if max_buy_price >= min_sell_price:
        shares_to_buy = r // max_buy_price
        max_bourles += (r - shares_to_buy * max_buy_price) + shares_to_buy * min_sell_price

    print(max_bourles)

solve()
","
def solve():
    n, m, r = map(int, input().split())
    s = list(map(int, input().split()))
    b = list(map(int, input().split()))
    
    max_s = max(s)
    min_b = min(b)
    
    shares_bought = r // max_s
    remaining_bourles = r - shares_bought * max_s
    bourles_after_selling = shares_bought * min_b + remaining_bourles
    
    if bourles_after_selling < r:
        return r
    else:
        return bourles_after_selling

solve()","
def solve():
    n, m, r = map(int, input().split())
    buying_prices = list(map(int, input().split()))
    selling_prices = list(map(int, input().split()))
    
    max_buying_price = min(buying_prices)
    min_selling_price = max(selling_prices)
    
    max_shares_bought = r // max_buying_price
    remaining_bourles = r % max_buying_price
    
    total_bourles_after_selling = max_shares_bought * min_selling_price + remaining_bourles
    
    if total_bourles_after_selling > r:
        print(total_bourles_after_selling)
    else:
        print(r)

solve()
","
def solve():
    n, m, r = map(int, input().split())
    s = list(map(int, input().split()))
    b = list(map(int, input().split()))

    max_buy = max(s)
    min_sell = min(b)

    shares_bought = r // max_buy
    remaining_bourles = r % max_buy

    if min_sell > max_buy:
        total_bourles = r
    else:
        total_bourles = remaining_bourles + (shares_bought * min_sell)

    print(total_bourles)

solve()
","6.666666666666667","0.0","100.0","20.0","","","",""
"APPS/51","
QUESTION:
В Берляндском государственном университете локальная сеть между серверами не всегда работает без ошибок. При передаче двух одинаковых сообщений подряд возможна ошибка, в результате которой эти два сообщения сливаются в одно. При таком слиянии конец первого сообщения совмещается с началом второго. Конечно, совмещение может происходить только по одинаковым символам. Длина совмещения должна быть положительным числом, меньшим длины текста сообщения. 

Например, при передаче двух сообщений «abrakadabra» подряд возможно, что оно будет передано с ошибкой описанного вида, и тогда будет получено сообщение вида «abrakadabrabrakadabra» или «abrakadabrakadabra» (в первом случае совмещение произошло по одному символу, а во втором — по четырем).

По полученному сообщению t определите, возможно ли, что это результат ошибки описанного вида работы локальной сети, и если возможно, определите возможное значение s. 

Не следует считать ошибкой ситуацию полного наложения друга на друга двух сообщений. К примеру, если получено сообщение «abcd», следует считать, что в нём ошибки нет. Аналогично, простое дописывание одного сообщения вслед за другим не является признаком ошибки. Например, если получено сообщение «abcabc», следует считать, что в нём ошибки нет.


-----Входные данные-----

В единственной строке выходных данных следует непустая строка t, состоящая из строчных букв латинского алфавита. Длина строки t не превосходит 100 символов.


-----Выходные данные-----

Если сообщение t не может содержать ошибки, выведите «NO» (без кавычек) в единственную строку выходных данных.

В противном случае в первой строке выведите «YES» (без кавычек), а в следующей строке выведите строку s — возможное сообщение, которое могло привести к ошибке. Если возможных ответов несколько, разрешается вывести любой из них.


-----Примеры-----
Входные данные
abrakadabrabrakadabra

Выходные данные
YES
abrakadabra

Входные данные
acacacaca

Выходные данные
YES
acaca

Входные данные
abcabc

Выходные данные
NO

Входные данные
abababab

Выходные данные
YES
ababab

Входные данные
tatbt

Выходные данные
NO



-----Примечание-----

Во втором примере подходящим ответом также является строка acacaca.
Use user-input-Based format and function signature solve()","
def solve():
    t = input()
    n = len(t)
    
    for i in range(1, n):
        if t[:i] == t[i:2*i]:
            return ""YES\n"" + t[:i]
    
    return ""NO""

solve()","
def solve():
    t = input().strip()
    
    for i in range(1, len(t)):
        if t[:i] == t[i:2*i]:
            return ""YES\n"" + t[:i]
    
    return ""NO""

solve()
","
def solve():
    t = input()
    n = len(t)
    
    for i in range(1, n):
        if t[:i] == t[i:2*i]:
            print(""YES"")
            print(t[:i])
            return
    
    print(""NO"")

solve()","
def solve():
    t = input()
    
    for i in range(1, len(t)):
        if t[:i] == t[i:i*2]:
            return ""YES\n"" + t[:i]
    
    return ""NO""

solve()","0.0","0.0","20.0","0.0","","","",""
"APPS/52","
QUESTION:
Daniel is organizing a football tournament. He has come up with the following tournament format:   In the first several (possibly zero) stages, while the number of teams is even, they split in pairs and play one game for each pair. At each stage the loser of each pair is eliminated (there are no draws). Such stages are held while the number of teams is even.  Eventually there will be an odd number of teams remaining. If there is one team remaining, it will be declared the winner, and the tournament ends. Otherwise each of the remaining teams will play with each other remaining team once in round robin tournament (if there are x teams, there will be $\frac{x \cdot(x - 1)}{2}$ games), and the tournament ends. 

For example, if there were 20 teams initially, they would begin by playing 10 games. So, 10 teams would be eliminated, and the remaining 10 would play 5 games. Then the remaining 5 teams would play 10 games in a round robin tournament. In total there would be 10+5+10=25 games.

Daniel has already booked the stadium for n games. Help him to determine how many teams he should invite so that the tournament needs exactly n games. You should print all possible numbers of teams that will yield exactly n games in ascending order, or -1 if there are no such numbers.


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 10^18), the number of games that should be played.

Please, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.


-----Output-----

Print all possible numbers of invited teams in ascending order, one per line. If exactly n games cannot be played, output one number: -1.


-----Examples-----
Input
3

Output
3
4

Input
25

Output
20

Input
2

Output
-1
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    teams = []
    
    for i in range(1, int(n**0.5) + 1):
        if n % i == 0:
            teams.append(i - 1)
            if i != n // i:
                teams.append(n // i - 1)
    
    teams.sort()
    
    if not teams:
        print(-1)
    else:
        for team in teams:
            print(team)

solve()
","
def solve():
    n = int(input())
    team_counts = set()
    
    for i in range(1, 10**6):
        games_to_eliminate = i * (i - 1) // 2
        total_games = games_to_eliminate + i
        if total_games == n:
            team_counts.add(i)
    
    if not team_counts:
        print(-1)
    else:
        for count in sorted(list(team_counts)):
            print(count)

solve()","
def solve():
    n = int(input())
    
    team_counts = []
    
    # First calculate the number of teams that can play in elimination rounds
    for teams in range(1, n+1):
        games = 0
        while teams > 1:
            games += teams // 2
            teams = (teams + 1) // 2
        if games == n:
            team_counts.append(teams)
    
    if team_counts:
        for team in sorted(set(team_counts)):
            print(team)
    else:
        print(-1)


if __name__ == ""__main__"":
    solve()
","
def solve():
    n = int(input())
    nums = set()
    for x in range(1, 100005):
        games = (x * (x - 1)) // 2 + (x // 2)
        if games == n:
            nums.add(x)
    if len(nums) == 0:
        print(""-1"")
    else:
        for num in sorted(nums):
            print(num)

solve()
","0.0","46.666666666666664","41.66666666666667","26.666666666666668","","","",""
"APPS/53","
QUESTION:
A string a of length m is called antipalindromic iff m is even, and for each i (1 ≤ i ≤ m) a_{i} ≠ a_{m} - i + 1.

Ivan has a string s consisting of n lowercase Latin letters; n is even. He wants to form some string t that will be an antipalindromic permutation of s. Also Ivan has denoted the beauty of index i as b_{i}, and the beauty of t as the sum of b_{i} among all indices i such that s_{i} = t_{i}.

Help Ivan to determine maximum possible beauty of t he can get.


-----Input-----

The first line contains one integer n (2 ≤ n ≤ 100, n is even) — the number of characters in s.

The second line contains the string s itself. It consists of only lowercase Latin letters, and it is guaranteed that its letters can be reordered to form an antipalindromic string.

The third line contains n integer numbers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 100), where b_{i} is the beauty of index i.


-----Output-----

Print one number — the maximum possible beauty of t.


-----Examples-----
Input
8
abacabac
1 1 1 1 1 1 1 1

Output
8

Input
8
abaccaba
1 2 3 4 5 6 7 8

Output
26

Input
8
abacabca
1 2 3 4 4 3 2 1

Output
17
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    s = input()
    b = list(map(int, input().split()))
    
    s_count = {}
    for char in s:
        if char in s_count:
            s_count[char] += 1
        else:
            s_count[char] = 1
    
    max_beauty = 0
    for char, count in s_count.items():
        max_beauty += min(count, 2) * b.pop(b.index(max(b)))
    
    print(max_beauty)

solve()
","
from itertools import permutations

def solve():
    n = int(input())
    s = input()
    beauty = list(map(int, input().split()))
    
    max_beauty = 0
    for perm in permutations(set(s), n//2):
        t = list(perm) + list(perm[::-1])
        beauty_sum = sum(beauty[i-1] for i, char in enumerate(s, 1) if char == t[i-1])
        max_beauty = max(max_beauty, beauty_sum)
    
    print(max_beauty)

solve()
","
from itertools import permutations

def solve():
    n = int(input())
    s = input()
    b = list(map(int, input().split()))

    max_beauty = 0

    for perm in permutations(sorted(s), n):
        perm = list(perm)
        if all(perm[i] != perm[n - i - 1] for i in range(n // 2)):
            beauty = sum(b[i] for i in range(n) if perm[i] == s[i])
            max_beauty = max(max_beauty, beauty)

    print(max_beauty)

solve()","
def solve():
    from itertools import permutations

    n = int(input())
    s = input()
    beauty = list(map(int, input().split()))

    max_beauty = 0

    for perm in permutations(s, n):
        perm = ''.join(perm)
        if all(perm[i] != perm[n - i - 1] for i in range(n // 2)):
            beauty_sum = sum(beauty[i] for i in range(n) if perm[i] == s[i])
            max_beauty = max(max_beauty, beauty_sum)

    print(max_beauty)

solve()","0.0","0.0","100.0","100.0","","","",""
"APPS/54","
QUESTION:
Vanya has a scales for weighing loads and weights of masses w^0, w^1, w^2, ..., w^100 grams where w is some integer not less than 2 (exactly one weight of each nominal value). Vanya wonders whether he can weight an item with mass m using the given weights, if the weights can be put on both pans of the scales. Formally speaking, your task is to determine whether it is possible to place an item of mass m and some weights on the left pan of the scales, and some weights on the right pan of the scales so that the pans of the scales were in balance.


-----Input-----

The first line contains two integers w, m (2 ≤ w ≤ 10^9, 1 ≤ m ≤ 10^9) — the number defining the masses of the weights and the mass of the item.


-----Output-----

Print word 'YES' if the item can be weighted and 'NO' if it cannot.


-----Examples-----
Input
3 7

Output
YES

Input
100 99

Output
YES

Input
100 50

Output
NO



-----Note-----

Note to the first sample test. One pan can have an item of mass 7 and a weight of mass 3, and the second pan can have two weights of masses 9 and 1, correspondingly. Then 7 + 3 = 9 + 1.

Note to the second sample test. One pan of the scales can have an item of mass 99 and the weight of mass 1, and the second pan can have the weight of mass 100.

Note to the third sample test. It is impossible to measure the weight of the item in the manner described in the input.
Use user-input-Based format and function signature solve()","
def solve():
    w, m = map(int, input().split())
    while m > 0:
        if m % w == 0 or m % w == 1:
            m //= w
        elif (m + 1) % w == 0:
            m = (m + 1) // w
        else:
            print(""NO"")
            return
    print(""YES"")

solve()
","
def solve():
    w, m = map(int, input().split())
    while m > 0:
        digit = m % w
        if digit == 1 and m < w:
            m -= 1
        elif digit == 0:
            m //= w
        else:
            print(""NO"")
            return
    print(""YES"")

solve()
","
def solve():
    w, m = map(int, input().split())
    while m > 0:
        if m % w == 0 or m % w == 1:
            m //= w
        else:
            m = (m - 1) // w
    print(""YES"" if m == 0 else ""NO"")

solve()
","
def solve():
    w, m = map(int, input().split())
    while m > 0:
        if m % w == 0:
            m //= w
        elif (m - 1) % w == 0:
            m = (m - 1) // w
        else:
            print(""NO"")
            return
    print(""YES"")

solve()
","100.0","60.0","46.666666666666664","73.33333333333333","","","",""
"APPS/55","
QUESTION:
Jamie is preparing a Codeforces round. He has got an idea for a problem, but does not know how to solve it. Help him write a solution to the following problem:

Find k integers such that the sum of two to the power of each number equals to the number n and the largest integer in the answer is as small as possible. As there may be multiple answers, you are asked to output the lexicographically largest one. 

To be more clear, consider all integer sequence with length k (a_1, a_2, ..., a_{k}) with $\sum_{i = 1}^{k} 2^{a_{i}} = n$. Give a value $y = \operatorname{max}_{1 \leq i \leq k} a_{i}$ to each sequence. Among all sequence(s) that have the minimum y value, output the one that is the lexicographically largest.

For definitions of powers and lexicographical order see notes.


-----Input-----

The first line consists of two integers n and k (1 ≤ n ≤ 10^18, 1 ≤ k ≤ 10^5) — the required sum and the length of the sequence.


-----Output-----

Output ""No"" (without quotes) in a single line if there does not exist such sequence. Otherwise, output ""Yes"" (without quotes) in the first line, and k numbers separated by space in the second line — the required sequence.

It is guaranteed that the integers in the answer sequence fit the range [ - 10^18, 10^18].


-----Examples-----
Input
23 5

Output
Yes
3 3 2 1 0 

Input
13 2

Output
No

Input
1 2

Output
Yes
-1 -1 



-----Note-----

Sample 1:

2^3 + 2^3 + 2^2 + 2^1 + 2^0 = 8 + 8 + 4 + 2 + 1 = 23

Answers like (3, 3, 2, 0, 1) or (0, 1, 2, 3, 3) are not lexicographically largest.

Answers like (4, 1, 1, 1, 0) do not have the minimum y value.

Sample 2:

It can be shown there does not exist a sequence with length 2.

Sample 3:

$2^{-1} + 2^{-1} = \frac{1}{2} + \frac{1}{2} = 1$

Powers of 2:

If x > 0, then 2^{x} = 2·2·2·...·2 (x times).

If x = 0, then 2^{x} = 1.

If x < 0, then $2^{x} = \frac{1}{2^{-x}}$.

Lexicographical order:

Given two different sequences of the same length, (a_1, a_2, ... , a_{k}) and (b_1, b_2, ... , b_{k}), the first one is smaller than the second one for the lexicographical order, if and only if a_{i} < b_{i}, for the first i where a_{i} and b_{i} differ.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    if n == 1:
        if k == 1:
            print(""Yes"")
            print(0)
        else:
            print(""No"")
    else:
        ans = []
        for i in range(60):
            if n & (1 << i):
                ans.append(i)
        if len(ans) > k:
            print(""No"")
        else:
            while len(ans) < k:
                x = ans.pop()
                ans.extend([x - 1, x - 1])
            print(""Yes"")
            print(*sorted(ans, reverse=True))

solve()","
def solve():
    n, k = map(int, input().split())
    
    if n < 2**k:
        print(""No"")
        return
    
    ans = [0] * k
    
    for i in range(k-1, -1, -1):
        ans[i] = min(n - 2**i, 2**i - 1)
        n -= 2**i
    
    if n > 0:
        print(""No"")
    else:
        print(""Yes"")
        print(*ans)

solve()","
def solve():
    import sys

    n, k = map(int, sys.stdin.readline().split())

    if n % 2 == 1 and k == 1:
        print(""Yes"")
        print(n // 2)
        return

    if k == 1:
        print(""No"")
        return

    ans = [0] * k

    while n > 0:
        cnt = n - (k - 1)
        cnt = min(cnt, n.bit_length() - 1)
        n -= 2 ** cnt
        ans[cnt] += 1

    if n != 0:
        print(""No"")
    else:
        print(""Yes"")
        print(*ans)

solve()","
def solve():
    n, k = map(int, input().split())
    if n % 2 == 0:
        print(""No"")
    else:
        ans = [0] * k
        for i in range(k):
            if n == 1:
                break
            p = 1 << i
            while p * 2 <= n - 1:
                p *= 2
            ans[i] = p
            n -= p
        if n == 1:
            ans[-1] += 1
            print(""Yes"")
            print(*ans)
        else:
            print(""No"")

solve()
","73.33333333333333","26.666666666666668","6.666666666666667","13.333333333333334","","","",""
"APPS/56","
QUESTION:
Mary has just graduated from one well-known University and is now attending celebration party. Students like to dream of a beautiful life, so they used champagne glasses to construct a small pyramid. The height of the pyramid is n. The top level consists of only 1 glass, that stands on 2 glasses on the second level (counting from the top), then 3 glasses on the third level and so on.The bottom level consists of n glasses.

Vlad has seen in the movies many times how the champagne beautifully flows from top levels to bottom ones, filling all the glasses simultaneously. So he took a bottle and started to pour it in the glass located at the top of the pyramid.

Each second, Vlad pours to the top glass the amount of champagne equal to the size of exactly one glass. If the glass is already full, but there is some champagne flowing in it, then it pours over the edge of the glass and is equally distributed over two glasses standing under. If the overflowed glass is at the bottom level, then the champagne pours on the table. For the purpose of this problem we consider that champagne is distributed among pyramid glasses immediately. Vlad is interested in the number of completely full glasses if he stops pouring champagne in t seconds.

Pictures below illustrate the pyramid consisting of three levels. [Image] [Image] 


-----Input-----

The only line of the input contains two integers n and t (1 ≤ n ≤ 10, 0 ≤ t ≤ 10 000) — the height of the pyramid and the number of seconds Vlad will be pouring champagne from the bottle.


-----Output-----

Print the single integer — the number of completely full glasses after t seconds.


-----Examples-----
Input
3 5

Output
4

Input
4 8

Output
6



-----Note-----

In the first sample, the glasses full after 5 seconds are: the top glass, both glasses on the second level and the middle glass at the bottom level. Left and right glasses of the bottom level will be half-empty.
Use user-input-Based format and function signature solve()","
def solve():
    n, t = map(int, input().split())
    glasses = [0] * (n * (n + 1) // 2)
    glasses[0] = t
    full_glasses = 0
    
    for i in range(n):
        for j in range(i + 1):
            overflow = max(0, glasses[i * (i + 1) // 2 + j] - 1)
            overflow /= 2
            glasses[i * (i + 1) // 2 + j] = 1
            glasses[(i + 1) * (i + 2) // 2 + j] += overflow
            glasses[(i + 1) * (i + 2) // 2 + j + 1] += overflow
            if overflow > 0:
                full_glasses += 1
    
    print(full_glasses)

solve()
","
def solve():
    n, t = map(int, input().split())
    
    glasses = [0] * (n * (n + 1) // 2)
    glasses[0] = t
    
    for i in range(n):
        for j in range(i + 1):
            overflow = max(1, glasses[i * (i + 1) // 2 + j] - 1)
            glasses[i * (i + 1) // 2 + j] = max(0, glasses[i * (i + 1) // 2 + j] - 1)
            excess = overflow / 2
            glasses[(i + 1) * (i + 2) // 2 + j] += excess
            glasses[(i + 1) * (i + 2) // 2 + j + 1] += excess
    
    return sum(1 for x in glasses if x >= 1)

solve()","
# Importing math module for mathematical operations

import math

def solve():
    # Reading inputs
    n, t = map(int, input().split())
    
    # Initializing a list to store champagne in glasses
    glasses = [0] * (n * (n + 1) // 2)
    glasses[0] = min(t, 1)
    
    for i in range(t):
        champagne_flow = [0] * len(glasses)
        for j in range(len(glasses)):
            if glasses[j] > 1:
                overflow = glasses[j] - 1
                champagne_flow[j] += overflow
                left_child = j + i
                right_child = j + i + 1
                champagne_flow[left_child] += overflow / 2
                champagne_flow[right_child] += overflow / 2
        glasses = [g + f for g, f in zip(glasses, champagne_flow)]
    
    # Counting full glasses
    full_glasses = sum(1 for glass in glasses if glass >= 1)
    
    # Printing the output
    print(full_glasses)


solve()","
def solve():
    n, t = map(int, input().split())
    glasses = [0] * (n * (n + 1) // 2)
    for _ in range(t):
        champagne = 1
        new_glasses = [0] * len(glasses)
        for i in range(len(glasses)):
            if glasses[i] >= 1:
                overflow = (glasses[i] - 1) / 2
                new_glasses[i] += overflow
                if i + n < len(glasses):
                    new_glasses[i + n] += overflow
                if i + n + 1 < len(glasses):
                    new_glasses[i + n + 1] += overflow
        glasses = [x + y for x, y in zip(glasses, new_glasses)]
    return sum(1 for x in glasses if x >= 1)

solve()
","0.0","0.0","46.666666666666664","0.0","","","",""
"APPS/57","
QUESTION:
After making bad dives into swimming pools, Wilbur wants to build a swimming pool in the shape of a rectangle in his backyard. He has set up coordinate axes, and he wants the sides of the rectangle to be parallel to them. Of course, the area of the rectangle must be positive. Wilbur had all four vertices of the planned pool written on a paper, until his friend came along and erased some of the vertices.

Now Wilbur is wondering, if the remaining n vertices of the initial rectangle give enough information to restore the area of the planned swimming pool.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 4) — the number of vertices that were not erased by Wilbur's friend.

Each of the following n lines contains two integers x_{i} and y_{i} ( - 1000 ≤ x_{i}, y_{i} ≤ 1000) —the coordinates of the i-th vertex that remains. Vertices are given in an arbitrary order.

It's guaranteed that these points are distinct vertices of some rectangle, that has positive area and which sides are parallel to the coordinate axes.


-----Output-----

Print the area of the initial rectangle if it could be uniquely determined by the points remaining. Otherwise, print  - 1. 


-----Examples-----
Input
2
0 0
1 1

Output
1

Input
1
1 1

Output
-1



-----Note-----

In the first sample, two opposite corners of the initial rectangle are given, and that gives enough information to say that the rectangle is actually a unit square.

In the second sample there is only one vertex left and this is definitely not enough to uniquely define the area.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    points = [list(map(int, input().split())) for _ in range(n)]
    
    if n == 1:
        print(-1)
    else:
        x_values = [point[0] for point in points]
        y_values = [point[1] for point in points]
        x_diff = max(x_values) - min(x_values)
        y_diff = max(y_values) - min(y_values)
        
        if x_diff == y_diff:
            print(x_diff * y_diff)
        else:
            print(-1)

solve()","
def solve():
    n = int(input())
    points = [list(map(int, input().split())) for _ in range(n)]

    if n == 1:
        print(-1)
    else:
        xs = set()
        ys = set()
        for x, y in points:
            xs.add(x)
            ys.add(y)

        if len(xs) == 1 or len(ys) == 1:
            print(-1)
        else:
            area = abs(max(xs) - min(xs)) * abs(max(ys) - min(ys))
            print(area)

solve()
","
def solve():
    n = int(input())
    points = [list(map(int, input().split())) for _ in range(n)]
    
    if n == 1:
        print(-1)
    elif n == 2:
        side_1 = abs(points[0][0] - points[1][0])
        side_2 = abs(points[0][1] - points[1][1])
        print(side_1 * side_2)
    else:
        x_values = [point[0] for point in points]
        y_values = [point[1] for point in points]
        side_1 = max(x_values) - min(x_values)
        side_2 = max(y_values) - min(y_values)
        print(side_1 * side_2)

solve()
","
def solve():
    from itertools import permutations
    
    n = int(input())
    points = [list(map(int, input().split())) for _ in range(n)]
    
    possible_areas = set()
    
    for perm in permutations(points):
        x_values = sorted(perm, key=lambda x: x[0])
        y_values = sorted(perm, key=lambda x: x[1])
        
        possible_areas.add(abs(x_values[0][0] - x_values[-1][0]) * abs(y_values[0][1] - y_values[-1][1]))
    
    if len(possible_areas) == 1:
        print(possible_areas.pop())
    else:
        print(-1)

solve()","46.666666666666664","100.0","86.66666666666667","60.0","","","",""
"APPS/58","
QUESTION:
Petya has equal wooden bars of length n. He wants to make a frame for two equal doors. Each frame has two vertical (left and right) sides of length a and one top side of length b. A solid (i.e. continuous without breaks) piece of bar is needed for each side.

Determine a minimal number of wooden bars which are needed to make the frames for two doors. Petya can cut the wooden bars into any parts, but each side of each door should be a solid piece of a wooden bar (or a whole wooden bar).


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 1 000) — the length of each wooden bar.

The second line contains a single integer a (1 ≤ a ≤ n) — the length of the vertical (left and right) sides of a door frame.

The third line contains a single integer b (1 ≤ b ≤ n) — the length of the upper side of a door frame.


-----Output-----

Print the minimal number of wooden bars with length n which are needed to make the frames for two doors.


-----Examples-----
Input
8
1
2

Output
1

Input
5
3
4

Output
6

Input
6
4
2

Output
4

Input
20
5
6

Output
2



-----Note-----

In the first example one wooden bar is enough, since the total length of all six sides of the frames for two doors is 8.

In the second example 6 wooden bars is enough, because for each side of the frames the new wooden bar is needed.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = int(input())
    b = int(input())
    
    total_length = 2 * (a + b)
    result = total_length // n
    if total_length % n != 0:
        result += 1
    
    print(result)

solve()
","
def solve():
    n = int(input())
    a = int(input())
    b = int(input())

    total_length_needed = a * 4 + b * 2
    total_length_possible = n * 2

    if total_length_needed <= total_length_possible:
        print(1)
    else:
        total_length_needed -= total_length_possible
        if total_length_needed % n == 0:
            print(total_length_needed // n)
        else:
            print(total_length_needed // n + 1)

solve()","
def solve():
    n = int(input())
    a = int(input())
    b = int(input())

    needed_a = 2 * (a + b)
    bars_needed = needed_a // n
    if needed_a % n != 0:
        bars_needed += 1

    print(bars_needed)

solve()
","
def solve():
    n = int(input())
    a = int(input())
    b = int(input())

    total_length = 2 * (2 * a + b)
    bars_needed = total_length // n
    if total_length % n != 0:
        bars_needed += 1

    print(bars_needed)

solve()
","33.33333333333333","20.0","33.33333333333333","93.33333333333333","","","",""
"APPS/59","
QUESTION:
You have an array a consisting of n integers. Each integer from 1 to n appears exactly once in this array.

For some indices i (1 ≤ i ≤ n - 1) it is possible to swap i-th element with (i + 1)-th, for other indices it is not possible. You may perform any number of swapping operations any order. There is no limit on the number of times you swap i-th element with (i + 1)-th (if the position is not forbidden).

Can you make this array sorted in ascending order performing some sequence of swapping operations?


-----Input-----

The first line contains one integer n (2 ≤ n ≤ 200000) — the number of elements in the array.

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 200000) — the elements of the array. Each integer from 1 to n appears exactly once.

The third line contains a string of n - 1 characters, each character is either 0 or 1. If i-th character is 1, then you can swap i-th element with (i + 1)-th any number of times, otherwise it is forbidden to swap i-th element with (i + 1)-th.


-----Output-----

If it is possible to sort the array in ascending order using any sequence of swaps you are allowed to make, print YES. Otherwise, print NO.


-----Examples-----
Input
6
1 2 5 3 4 6
01110

Output
YES

Input
6
1 2 5 3 4 6
01010

Output
NO



-----Note-----

In the first example you may swap a_3 and a_4, and then swap a_4 and a_5.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    swaps = input().strip()

    for i in range(n - 1):
        if swaps[i] == '1' and a[i] > a[i + 1]:
            a[i], a[i + 1] = a[i + 1], a[i]

    if a == sorted(a):
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    s = input().strip()
    
    for i in range(n-1):
        if s[i] == '1' and a[i] > a[i+1]:
            a[i], a[i+1] = a[i+1], a[i]
    
    if a == sorted(a):
        print(""YES"")
    else:
        print(""NO"")

solve()
  ","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    s = input().strip()

    for i in range(n-1):
        if s[i] == '1' and a[i] > a[i+1]:
            a[i], a[i+1] = a[i+1], a[i]

    for i in range(n-1):
        if a[i] > a[i+1]:
            print(""NO"")
            return

    print(""YES"")

solve()","
def solve():
    from collections import defaultdict

    n = int(input())
    a = list(map(int, input().split()))
    swaps = input().strip()

    can_swap = defaultdict(bool)
    for i in range(n-1):
        if swaps[i] == '1':
            can_swap[a[i]] = True
            can_swap[a[i+1]] = True

    for i, num in enumerate(sorted(a)):
        if not can_swap[num]:
            print(""NO"")
            return
    print(""YES"")

solve()","100.0","100.0","100.0","73.33333333333333","","","",""
"APPS/60","
QUESTION:
A new airplane SuperPuperJet has an infinite number of rows, numbered with positive integers starting with 1 from cockpit to tail. There are six seats in each row, denoted with letters from 'a' to 'f'. Seats 'a', 'b' and 'c' are located to the left of an aisle (if one looks in the direction of the cockpit), while seats 'd', 'e' and 'f' are located to the right. Seats 'a' and 'f' are located near the windows, while seats 'c' and 'd' are located near the aisle.  [Image] 

 

It's lunch time and two flight attendants have just started to serve food. They move from the first rows to the tail, always maintaining a distance of two rows from each other because of the food trolley. Thus, at the beginning the first attendant serves row 1 while the second attendant serves row 3. When both rows are done they move one row forward: the first attendant serves row 2 while the second attendant serves row 4. Then they move three rows forward and the first attendant serves row 5 while the second attendant serves row 7. Then they move one row forward again and so on.

Flight attendants work with the same speed: it takes exactly 1 second to serve one passenger and 1 second to move one row forward. Each attendant first serves the passengers on the seats to the right of the aisle and then serves passengers on the seats to the left of the aisle (if one looks in the direction of the cockpit). Moreover, they always serve passengers in order from the window to the aisle. Thus, the first passenger to receive food in each row is located in seat 'f', and the last one — in seat 'c'. Assume that all seats are occupied.

Vasya has seat s in row n and wants to know how many seconds will pass before he gets his lunch.


-----Input-----

The only line of input contains a description of Vasya's seat in the format ns, where n (1 ≤ n ≤ 10^18) is the index of the row and s is the seat in this row, denoted as letter from 'a' to 'f'. The index of the row and the seat are not separated by a space.


-----Output-----

Print one integer — the number of seconds Vasya has to wait until he gets his lunch.


-----Examples-----
Input
1f

Output
1

Input
2d

Output
10

Input
4a

Output
11

Input
5e

Output
18



-----Note-----

In the first sample, the first flight attendant serves Vasya first, so Vasya gets his lunch after 1 second.

In the second sample, the flight attendants will spend 6 seconds to serve everyone in the rows 1 and 3, then they will move one row forward in 1 second. As they first serve seats located to the right of the aisle in order from window to aisle, Vasya has to wait 3 more seconds. The total is 6 + 1 + 3 = 10.
Use user-input-Based format and function signature solve()","
def solve():
    seat = input()
    row = int(seat[:-1])
    seat_letter = seat[-1]

    row_time = (row - 1) // 2 * 7
    seat_time = {'a': 4, 'b': 5, 'c': 6, 'd': 3, 'e': 2, 'f': 1}[seat_letter]

    total_time = row_time + seat_time
    print(total_time)

solve()","
def solve():
    seat_desc = input()
    row, seat = int(seat_desc[:-1]), seat_desc[-1]
    
    total_rows = (row - 1) // 2 * 4
    remaining_rows = (row - 1) % 2
    position = {'f': 1, 'e': 2, 'd': 3, 'c': 4, 'b': 5, 'a': 6}[seat]
    
    seconds = total_rows * 6 + remaining_rows + position
    print(seconds)

solve()
","
def solve():
    seat_info = input()
    
    row = int(seat_info[:-1])
    seat = seat_info[-1]
    
    seconds = (row - 1) // 2 * 6  # Time taken to serve rows before Vasya's
    if row % 2 == 0:
        seconds += 3 + 2 * (ord('f') - ord(seat))  # Accounting for seat position
    else:
        seconds += ord(seat) - ord('a')  # Accounting for seat position
    
    print(seconds)

solve()
","
def solve():
    seat_description = input().strip()
    row, seat = int(seat_description[:-1]), seat_description[-1]
    
    rows_to_move = (row - 1) // 2
    seats_to_serve = {'a': 4, 'b': 5, 'c': 6, 'd': 3, 'e': 2, 'f': 1}
    
    total_time = 0
    total_time += 6 * rows_to_move
    total_time += 1 * (row % 2)
    total_time += seats_to_serve[seat]
    
    print(total_time)

solve()
","46.666666666666664","26.666666666666668","6.666666666666667","0.0","","","",""
"APPS/61","
QUESTION:
After seeing the ""ALL YOUR BASE ARE BELONG TO US"" meme for the first time, numbers X and Y realised that they have different bases, which complicated their relations.

You're given a number X represented in base b_{x} and a number Y represented in base b_{y}. Compare those two numbers.


-----Input-----

The first line of the input contains two space-separated integers n and b_{x} (1 ≤ n ≤ 10, 2 ≤ b_{x} ≤ 40), where n is the number of digits in the b_{x}-based representation of X. 

The second line contains n space-separated integers x_1, x_2, ..., x_{n} (0 ≤ x_{i} < b_{x}) — the digits of X. They are given in the order from the most significant digit to the least significant one.

The following two lines describe Y in the same way: the third line contains two space-separated integers m and b_{y} (1 ≤ m ≤ 10, 2 ≤ b_{y} ≤ 40, b_{x} ≠ b_{y}), where m is the number of digits in the b_{y}-based representation of Y, and the fourth line contains m space-separated integers y_1, y_2, ..., y_{m} (0 ≤ y_{i} < b_{y}) — the digits of Y.

There will be no leading zeroes. Both X and Y will be positive. All digits of both numbers are given in the standard decimal numeral system.


-----Output-----

Output a single character (quotes for clarity):   '<' if X < Y  '>' if X > Y  '=' if X = Y 


-----Examples-----
Input
6 2
1 0 1 1 1 1
2 10
4 7

Output
=

Input
3 3
1 0 2
2 5
2 4

Output
<

Input
7 16
15 15 4 0 0 7 10
7 9
4 8 0 3 1 5 0

Output
>



-----Note-----

In the first sample, X = 101111_2 = 47_10 = Y.

In the second sample, X = 102_3 = 21_5 and Y = 24_5 = 112_3, thus X < Y.

In the third sample, $X = FF 4007 A_{16}$ and Y = 4803150_9. We may notice that X starts with much larger digits and b_{x} is much larger than b_{y}, so X is clearly larger than Y.
Use user-input-Based format and function signature solve()","
def solve():
    n, bx = map(int, input().split())
    x = list(map(int, input().split()))
    m, by = map(int, input().split())
    y = list(map(int, input().split()))

    X = sum([x[i] * (bx ** (n - i - 1)) for i in range(n)])
    Y = sum([y[i] * (by ** (m - i - 1)) for i in range(m)])

    if X < Y:
        print('<')
    elif X > Y:
        print('>')
    else:
        print('=')

solve()","
def solve():
    def convert_to_decimal(digits, base):
        decimal_value = 0
        for i in range(len(digits)):
            decimal_value += digits[i] * (base ** (len(digits) - i - 1))
        return decimal_value

    n, bx = map(int, input().split())
    x_digits = list(map(int, input().split()))
    x_decimal = convert_to_decimal(x_digits, bx)

    m, by = map(int, input().split())
    y_digits = list(map(int, input().split()))
    y_decimal = convert_to_decimal(y_digits, by)

    if x_decimal < y_decimal:
        return '<'
    elif x_decimal > y_decimal:
        return '>'
    else:
        return '='

solve()","
def solve():
    import sys
    input = sys.stdin.readline

    n, bx = map(int, input().split())
    X = list(map(int, input().split()))
    m, by = map(int, input().split())
    Y = list(map(int, input().split()))

    num_X = sum([X[i] * (bx ** (n - i - 1)) for i in range(n)])
    num_Y = sum([Y[i] * (by ** (m - i - 1)) for i in range(m)])

    if num_X < num_Y:
        print('<')
    elif num_X > num_Y:
        print('>')
    else:
        print('=')

solve()
","
def solve():
    n, bx = map(int, input().split())
    X = sum(int(x) * (bx ** (n-i-1)) for i, x in enumerate(input().split()))

    m, by = map(int, input().split())
    Y = sum(int(y) * (by ** (m-i-1)) for i, y in enumerate(input().split()))

    if X < Y:
        return '<'
    elif X > Y:
        return '>'
    else:
        return '='

solve()","100.0","0.0","100.0","0.0","","","",""
"APPS/62","
QUESTION:
Since most contestants do not read this part, I have to repeat that Bitlandians are quite weird. They have their own jobs, their own working method, their own lives, their own sausages and their own games!

Since you are so curious about Bitland, I'll give you the chance of peeking at one of these games.

BitLGM and BitAryo are playing yet another of their crazy-looking genius-needed Bitlandish games. They've got a sequence of n non-negative integers a_1, a_2, ..., a_{n}. The players make moves in turns. BitLGM moves first. Each player can and must do one of the two following actions in his turn:

  Take one of the integers (we'll denote it as a_{i}). Choose integer x (1 ≤ x ≤ a_{i}). And then decrease a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x.  Choose integer x $(1 \leq x \leq \operatorname{min}_{i = 1} a_{i})$. And then decrease all a_{i} by x, that is, apply assignment: a_{i} = a_{i} - x, for all i. 

The player who cannot make a move loses.

You're given the initial sequence a_1, a_2, ..., a_{n}. Determine who wins, if both players plays optimally well and if BitLGM and BitAryo start playing the described game in this sequence.


-----Input-----

The first line contains an integer n (1 ≤ n ≤ 3).

The next line contains n integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} < 300).


-----Output-----

Write the name of the winner (provided that both players play optimally well). Either ""BitLGM"" or ""BitAryo"" (without the quotes).


-----Examples-----
Input
2
1 1

Output
BitLGM

Input
2
1 2

Output
BitAryo

Input
3
1 2 1

Output
BitLGM
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    if n == 1:
        if a[0] % 2 == 0:
            print(""BitAryo"")
        else:
            print(""BitLGM"")
    else:
        xor_sum = 0
        for num in a:
            xor_sum ^= num
        
        if xor_sum == 0:
            print(""BitAryo"")
        else:
            print(""BitLGM"")

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    xor_sum = 0
    for num in a:
        xor_sum ^= num
    
    if xor_sum == 0 or n % 2 == 0:
        print(""BitAryo"")
    else:
        print(""BitLGM"")

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    max_xor = 0
    for elem in a:
        max_xor ^= elem
    
    if max_xor == 0 or n % 2 == 0:
        print(""BitAryo"")
    else:
        print(""BitLGM"")

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    total_xor = 0
    for i in a:
        total_xor ^= i

    if sum(a) == n:
        if n % 2 == 0:
            print(""BitAryo"")
        else:
            print(""BitLGM"")
    elif total_xor == 0:
        if n % 2 == 0:
            print(""BitAryo"")
        else:
            print(""BitLGM"")
    else:
        if n % 2 == 0:
            print(""BitLGM"")
        else:
            print(""BitAryo"")

solve()","80.0","46.666666666666664","46.666666666666664","46.666666666666664","","","",""
"APPS/63","
QUESTION:
Vova again tries to play some computer card game.

The rules of deck creation in this game are simple. Vova is given an existing deck of n cards and a magic number k. The order of the cards in the deck is fixed. Each card has a number written on it; number a_{i} is written on the i-th card in the deck.

After receiving the deck and the magic number, Vova removes x (possibly x = 0) cards from the top of the deck, y (possibly y = 0) cards from the bottom of the deck, and the rest of the deck is his new deck (Vova has to leave at least one card in the deck after removing cards). So Vova's new deck actually contains cards x + 1, x + 2, ... n - y - 1, n - y from the original deck.

Vova's new deck is considered valid iff the product of all numbers written on the cards in his new deck is divisible by k. So Vova received a deck (possibly not a valid one) and a number k, and now he wonders, how many ways are there to choose x and y so the deck he will get after removing x cards from the top and y cards from the bottom is valid?


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 100 000, 1 ≤ k ≤ 10^9).

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the numbers written on the cards.


-----Output-----

Print the number of ways to choose x and y so the resulting deck is valid.


-----Examples-----
Input
3 4
6 2 8

Output
4

Input
3 6
9 1 14

Output
1



-----Note-----

In the first example the possible values of x and y are:

  x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    cards = list(map(int, input().split()))
    
    prefix_product = [1] * (n + 1)
    suffix_product = [1] * (n + 1)
    
    for i in range(1, n + 1):
        prefix_product[i] = prefix_product[i - 1] * cards[i - 1]
    
    for i in range(n - 1, -1, -1):
        suffix_product[i] = suffix_product[i + 1] * cards[i]
    
    count = 0
    for x in range(n + 1):
        for y in range(n + 1):
            if x + y <= n:
                if (prefix_product[x] * suffix_product[n - y]) % k == 0:
                    count += 1
    
    print(count)

solve()
","
def solve():
    n, k = map(int, input().split())
    cards = list(map(int, input().split()))
    
    prefix = [1] * (n + 1)
    suffix = [1] * (n + 1)
    
    for i in range(1, n + 1):
        prefix[i] = prefix[i - 1] * cards[i - 1]
        
    for i in range(n - 1, -1, -1):
        suffix[i] = suffix[i + 1] * cards[i]
    
    count = 0
    for x in range(n + 1):
        for y in range(n - x + 1):
            if (prefix[x] * suffix[n - y]) % k == 0:
                count += 1
                
    print(count)

solve()
","
def solve():
    import math

    n, k = map(int, input().split())
    cards = list(map(int, input().split()))

    factors = []
    curr_product = 1

    for i in range(n):
        curr_product *= cards[i]
        factors.append(curr_product)

    count = 0

    for i in range(n-1):
        for j in range(i, n):
            if i == 0:
                if factors[j] % k == 0:
                    count += 1
            else:
                if factors[j] // factors[i-1] % k == 0:
                    count += 1

    return count

solve()
  ","
def solve():
    n, k = map(int, input().split())
    cards = list(map(int, input().split()))
    
    count = 0
    
    product = 1
    r_product = 1
    right = 0
    
    for left in range(n):
        product *= cards[left]
        
        while right < n and r_product * cards[right] % k == 0:
            r_product *= cards[right]
            right += 1
        
        if product % k == 0:
            count += n - right + 1

        if right > left:
            product //= cards[left]

    print(count)

solve()
","13.333333333333334","13.333333333333334","0.0","20.0","","","",""
"APPS/64","
QUESTION:
One day Kefa found n baloons. For convenience, we denote color of i-th baloon as s_{i} — lowercase letter of the Latin alphabet. Also Kefa has k friends. Friend will be upset, If he get two baloons of the same color. Kefa want to give out all baloons to his friends. Help Kefa to find out, can he give out all his baloons, such that no one of his friens will be upset — print «YES», if he can, and «NO», otherwise. Note, that Kefa's friend will not upset, if he doesn't get baloons at all.


-----Input-----

The first line contains two integers n and k (1 ≤ n, k ≤ 100) — the number of baloons and friends.

Next line contains string s — colors of baloons.


-----Output-----

Answer to the task — «YES» or «NO» in a single line.

You can choose the case (lower or upper) for each letter arbitrary.


-----Examples-----
Input
4 2
aabb

Output
YES

Input
6 3
aacaab

Output
NO



-----Note-----

In the first sample Kefa can give 1-st and 3-rd baloon to the first friend, and 2-nd and 4-th to the second.

In the second sample Kefa needs to give to all his friends baloons of color a, but one baloon will stay, thats why answer is «NO».
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    colors = input().strip()
    
    color_count = {}
    for color in colors:
        if color in color_count:
            color_count[color] += 1
        else:
            color_count[color] = 1
    
    for count in color_count.values():
        if count > k:
            print(""NO"")
            return
    
    print(""YES"")

solve()","
def solve():
    n, k = map(int, input().split())
    colors = input()
    
    color_count = {}
    for color in colors:
        if color in color_count:
            color_count[color] += 1
        else:
            color_count[color] = 1
    
    for count in color_count.values():
        if count > k:
            print(""NO"")
            return
    
    print(""YES"")

solve()
","
def solve():
    n, k = map(int, input().split())
    s = input()

    colors = {}
    for color in s:
        if color in colors:
            colors[color] += 1
        else:
            colors[color] = 1

    for color, count in colors.items():
        if count > k:
            print(""NO"")
            return
    
    print(""YES"")

solve()","
def solve():
    n, k = map(int, input().split())
    s = input().strip()
    
    colors = {}
    for color in s:
        if color not in colors:
            colors[color] = 0
        colors[color] += 1
    
    for color in colors:
        if colors[color] > k:
            print(""NO"")
            return
    
    print(""YES"")

solve()","100.0","100.0","100.0","100.0","","","",""
"APPS/65","
QUESTION:
You are given an array of n integer numbers a_0, a_1, ..., a_{n} - 1. Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.


-----Input-----

The first line contains positive integer n (2 ≤ n ≤ 10^5) — size of the given array. The second line contains n integers a_0, a_1, ..., a_{n} - 1 (1 ≤ a_{i} ≤ 10^9) — elements of the array. It is guaranteed that in the array a minimum occurs at least two times.


-----Output-----

Print the only number — distance between two nearest minimums in the array.


-----Examples-----
Input
2
3 3

Output
1

Input
3
5 6 5

Output
2

Input
9
2 1 3 5 4 1 2 3 1

Output
3
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    arr = list(map(int, input().split()))
    
    min_val = min(arr)
    min_indices = [i for i, val in enumerate(arr) if val == min_val]
    
    min_dist = float('inf')
    for i in range(1, len(min_indices)):
        dist = min_indices[i] - min_indices[i-1]
        min_dist = min(min_dist, dist)
    
    return min_dist

solve()","
def solve():
    from collections import defaultdict
    
    n = int(input())
    arr = list(map(int, input().split()))
    
    min_positions = defaultdict(list)
    min_dist = float('inf')
    
    for i in range(n):
        if arr[i] not in min_positions:
            min_positions[arr[i]] = [i]
        else:
            min_positions[arr[i]].append(i)
            min_dist = min(min_dist, min_positions[arr[i]][-1] - min_positions[arr[i]][-2])
    
    return min_dist

solve()
","
def solve():
    n = int(input())
    arr = list(map(int, input().split()))

    min_val = min(arr)
    prev_idx = -float('inf')
    min_distance = float('inf')

    for i in range(n):
        if arr[i] == min_val:
            min_distance = min(min_distance, i - prev_idx)
            prev_idx = i

    print(min_distance)

solve()
","
from collections import defaultdict

def solve():
    n = int(input())
    arr = list(map(int, input().split()))

    min_indices = defaultdict(list)
    min_val = float('inf')
    min_dist = float('inf')

    for i in range(n):
        if arr[i] < min_val:
            min_val = arr[i]
            min_indices[arr[i]].append(i)
        elif arr[i] == min_val:
            min_indices[arr[i]].append(i)
            min_dist = min(min_dist, min_indices[arr[i]][-1] - min_indices[arr[i]][-2])

    return min_dist

  
solve()","0.0","0.0","100.0","0.0","","","",""
"APPS/66","
QUESTION:
Vector Willman and Array Bolt are the two most famous athletes of Byteforces. They are going to compete in a race with a distance of L meters today.

 [Image] 

Willman and Bolt have exactly the same speed, so when they compete the result is always a tie. That is a problem for the organizers because they want a winner. 

While watching previous races the organizers have noticed that Willman can perform only steps of length equal to w meters, and Bolt can perform only steps of length equal to b meters. Organizers decided to slightly change the rules of the race. Now, at the end of the racetrack there will be an abyss, and the winner will be declared the athlete, who manages to run farther from the starting point of the the racetrack (which is not the subject to change by any of the athletes). 

Note that none of the athletes can run infinitely far, as they both will at some moment of time face the point, such that only one step further will cause them to fall in the abyss. In other words, the athlete will not fall into the abyss if the total length of all his steps will be less or equal to the chosen distance L.

Since the organizers are very fair, the are going to set the length of the racetrack as an integer chosen randomly and uniformly in range from 1 to t (both are included). What is the probability that Willman and Bolt tie again today?


-----Input-----

The first line of the input contains three integers t, w and b (1 ≤ t, w, b ≤ 5·10^18) — the maximum possible length of the racetrack, the length of Willman's steps and the length of Bolt's steps respectively.


-----Output-----

Print the answer to the problem as an irreducible fraction [Image]. Follow the format of the samples output.

The fraction [Image] (p and q are integers, and both p ≥ 0 and q > 0 holds) is called irreducible, if there is no such integer d > 1, that both p and q are divisible by d.


-----Examples-----
Input
10 3 2

Output
3/10

Input
7 1 2

Output
3/7



-----Note-----

In the first sample Willman and Bolt will tie in case 1, 6 or 7 are chosen as the length of the racetrack.
Use user-input-Based format and function signature solve()","
from fractions import Fraction

def solve():
    t, w, b = map(int, input().split())
    
    lcm = w * b // math.gcd(w, b)
    total_possible_steps = t // lcm
    total_tie_steps = min(w, b) - 1
    total_tie_steps += total_possible_steps * min(w, b)
    
    gcd = math.gcd(total_tie_steps, t)
    result = Fraction(total_tie_steps // gcd, t // gcd)
    
    print(result)

solve()","
from fractions import Fraction

def solve():
    t, w, b = map(int, input().split())
    gcd_wb = w*b // math.gcd(w, b)
    num_common = t // gcd_wb
    diff_w = min(w, b) - 1
    prob_tie = num_common * min(diff_w, t) + min(num_common, diff_w)  # Calculate probability for ties
    total_possibilities = t
    prob_frac = Fraction(prob_tie, total_possibilities)
    print(f'{prob_frac.numerator}/{prob_frac.denominator}')

solve()
","
def solve():
    t, w, b = map(int, input().split())
    
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a
    
    lcm = w * b // gcd(w, b)
    common_multiple = t // lcm
    common_length = common_multiple * lcm
    tie_count = common_multiple * min(w, b) - max(0, common_length - t - min(w, b) + 1)
    total_possibilities = t
    gcd_val = gcd(tie_count, total_possibilities)
    print(""{}/{}"".format(tie_count // gcd_val, total_possibilities // gcd_val))

solve()
","
from fractions import Fraction

def solve():
    t, w, b = map(int, input().split())
    
    gcd_wb = w // math.gcd(w, b) * b
    lcm_wb = w * b // math.gcd(w, b)
    
    common_steps = t // lcm_wb
    common_distance = common_steps * lcm_wb
    
    remaining_distance = min(common_distance + w - 1, t) - common_distance
    same_steps = remaining_distance // math.gcd(w, b)
    
    total_common_possible = common_steps * min(w, b) + same_steps
    total_possible = t
    probability = Fraction(total_common_possible, total_possible)
    
    print(f""{probability.numerator}/{probability.denominator}"")

solve()","0.0","0.0","20.0","0.0","","","",""
"APPS/67","
QUESTION:
Nauuo is a girl who loves writing comments.

One day, she posted a comment on Codeforces, wondering whether she would get upvotes or downvotes.

It's known that there were $x$ persons who would upvote, $y$ persons who would downvote, and there were also another $z$ persons who would vote, but you don't know whether they would upvote or downvote. Note that each of the $x+y+z$ people would vote exactly one time.

There are three different results: if there are more people upvote than downvote, the result will be ""+""; if there are more people downvote than upvote, the result will be ""-""; otherwise the result will be ""0"".

Because of the $z$ unknown persons, the result may be uncertain (i.e. there are more than one possible results). More formally, the result is uncertain if and only if there exist two different situations of how the $z$ persons vote, that the results are different in the two situations.

Tell Nauuo the result or report that the result is uncertain.


-----Input-----

The only line contains three integers $x$, $y$, $z$ ($0\le x,y,z\le100$), corresponding to the number of persons who would upvote, downvote or unknown.


-----Output-----

If there is only one possible result, print the result : ""+"", ""-"" or ""0"".

Otherwise, print ""?"" to report that the result is uncertain.


-----Examples-----
Input
3 7 0

Output
-
Input
2 0 1

Output
+
Input
1 1 0

Output
0
Input
0 0 1

Output
?


-----Note-----

In the first example, Nauuo would definitely get three upvotes and seven downvotes, so the only possible result is ""-"".

In the second example, no matter the person unknown downvotes or upvotes, Nauuo would get more upvotes than downvotes. So the only possible result is ""+"".

In the third example, Nauuo would definitely get one upvote and one downvote, so the only possible result is ""0"".

In the fourth example, if the only one person upvoted, the result would be ""+"", otherwise, the result would be ""-"". There are two possible results, so the result is uncertain.
Use user-input-Based format and function signature solve()","
def solve():
    x, y, z = map(int, input().split())
    
    if x > y + z:
        print(""+"")
    elif y > x + z:
        print(""-"")
    elif x == y and z == 0:
        print(""0"")
    else:
        print(""?"")

solve()","
def solve():
    x, y, z = map(int, input().split())
    
    if x > y + z:
        print(""+"")
    elif y > x + z:
        print(""-"")
    elif x == y and z == 0:
        print(""0"")
    else:
        print(""?"")
    
solve()
","
def solve():
    x, y, z = map(int, input().split())
    
    if x > y + z:
        print(""+"")
    elif y > x + z:
        print(""-"")
    elif x == y and z == 0:
        print(""0"")
    else:
        print(""?"")
    
solve()
","
def solve():
    x, y, z = map(int, input().split())

    if x > y + z:
        print(""+"")
    elif y > x + z:
        print(""-"")
    elif x == y and z == 0:
        print(""0"")
    else:
        print(""?"")

solve()","100.0","100.0","100.0","100.0","","","",""
"APPS/68","
QUESTION:
Vasya has got a robot which is situated on an infinite Cartesian plane, initially in the cell $(0, 0)$. Robot can perform the following four kinds of operations:   U — move from $(x, y)$ to $(x, y + 1)$;  D — move from $(x, y)$ to $(x, y - 1)$;  L — move from $(x, y)$ to $(x - 1, y)$;  R — move from $(x, y)$ to $(x + 1, y)$. 

Vasya also has got a sequence of $n$ operations. Vasya wants to modify this sequence so after performing it the robot will end up in $(x, y)$.

Vasya wants to change the sequence so the length of changed subsegment is minimum possible. This length can be calculated as follows: $maxID - minID + 1$, where $maxID$ is the maximum index of a changed operation, and $minID$ is the minimum index of a changed operation. For example, if Vasya changes RRRRRRR to RLRRLRL, then the operations with indices $2$, $5$ and $7$ are changed, so the length of changed subsegment is $7 - 2 + 1 = 6$. Another example: if Vasya changes DDDD to DDRD, then the length of changed subsegment is $1$. 

If there are no changes, then the length of changed subsegment is $0$. Changing an operation means replacing it with some operation (possibly the same); Vasya can't insert new operations into the sequence or remove them.

Help Vasya! Tell him the minimum length of subsegment that he needs to change so that the robot will go from $(0, 0)$ to $(x, y)$, or tell him that it's impossible.


-----Input-----

The first line contains one integer number $n~(1 \le n \le 2 \cdot 10^5)$ — the number of operations.

The second line contains the sequence of operations — a string of $n$ characters. Each character is either U, D, L or R.

The third line contains two integers $x, y~(-10^9 \le x, y \le 10^9)$ — the coordinates of the cell where the robot should end its path.


-----Output-----

Print one integer — the minimum possible length of subsegment that can be changed so the resulting sequence of operations moves the robot from $(0, 0)$ to $(x, y)$. If this change is impossible, print $-1$.


-----Examples-----
Input
5
RURUU
-2 3

Output
3

Input
4
RULR
1 1

Output
0

Input
3
UUU
100 100

Output
-1



-----Note-----

In the first example the sequence can be changed to LULUU. So the length of the changed subsegment is $3 - 1 + 1 = 3$.

In the second example the given sequence already leads the robot to $(x, y)$, so the length of the changed subsegment is $0$.

In the third example the robot can't end his path in the cell $(x, y)$.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    operations = input()
    x, y = map(int, input().split())

    dx = dy = 0
    for op in operations:
        if op == 'U':
            dy += 1
        elif op == 'D':
            dy -= 1
        elif op == 'L':
            dx -= 1
        elif op == 'R':
            dx += 1

    if (x, y) == (dx, dy):
        print(0)
    else:
        min_len = abs(x - dx) + abs(y - dy)
        if min_len <= n:
            print(1)
        else:
            print(-1)

solve()
","
def solve():
    n = int(input())
    operations = input()
    x, y = map(int, input().split())

    cur_x, cur_y = 0, 0
    target_x, target_y = abs(x), abs(y)

    if (target_x + target_y) > n or (target_x + target_y) % 2 != n % 2:
        print(-1)
        return

    for i in range(n):
        if operations[i] == 'U':
            cur_y += 1
        elif operations[i] == 'D':
            cur_y -= 1
        elif operations[i] == 'L':
            cur_x -= 1
        else:
            cur_x += 1

        if cur_x == x and cur_y == y:
            print(i + 1)
            return

    print(-1)

solve()
","
def solve():
    n = int(input())
    operations = input().strip()
    x, y = map(int, input().split())

    x_moves = operations.count('R') - operations.count('L')
    y_moves = operations.count('U') - operations.count('D')

    if (abs(x_moves) + abs(y_moves)) > n or (n % 2 != abs(x_moves + y_moves) % 2):
        print(-1)
    else:
        max_len = 0
        min_len = n
        cur_x, cur_y = 0, 0

        for i in range(n):
            if cur_x == x and cur_y == y:
                min_len = 0
                break

            if x_moves < 0 and operations[i] == 'L':
                x_moves += 1
            elif x_moves > 0 and operations[i] == 'R':
                x_moves -= 1
            elif y_moves < 0 and operations[i] == 'D':
                y_moves += 1
            elif y_moves > 0 and operations[i] == 'U':
                y_moves -= 1

            cur_x += 1 if operations[i] == 'R' else -1 if operations[i] == 'L' else 0
            cur_y += 1 if operations[i] == 'U' else -1 if operations[i] == 'D' else 0

            if (abs(x - cur_x) + abs(y - cur_y) <= n - i - 1) and ((n - i) % 2 == abs(x - cur_x + y - cur_y) % 2):
                max_len = max(max_len, i + 1)
                min_len = min(min_len, i + 1)

        print(max_len - min_len + 1 if min_len != 0 else 0)

solve()","
def solve():
    n = int(input())
    operations = input().strip()
    x, y = map(int, input().split())

    initial_dist = abs(x) + abs(y)
    steps = {'U': (0, 1), 'D': (0, -1), 'L': (-1, 0), 'R': (1, 0)}
    
    min_change = -1
    total_R, total_L, total_U, total_D = 0, 0, 0, 0
    for op in operations:
        if op == 'R':
            total_R += 1
        elif op == 'L':
            total_L += 1
        elif op == 'U':
            total_U += 1
        elif op == 'D':
            total_D += 1

    for i in range(n+1):
        dx = x - (total_R - total_L)
        dy = y - (total_U - total_D)
        
        if dx == 0 and dy == 0:
            change_length = i
            if min_change == -1 or change_length < min_change:
                min_change = change_length

        if i < n:
            op = operations[i]
            if op == 'R':
                total_R -= 1
            elif op == 'L':
                total_L -= 1
            elif op == 'U':
                total_U -= 1
            elif op == 'D':
                total_D -= 1

    if min_change == -1:
        print(-1)
    else:
        print(min_change)

solve()
","40.0","46.666666666666664","20.0","53.333333333333336","","","",""
"APPS/69","
QUESTION:
You are given string $s$ of length $n$ consisting of 0-s and 1-s. You build an infinite string $t$ as a concatenation of an infinite number of strings $s$, or $t = ssss \dots$ For example, if $s =$ 10010, then $t =$ 100101001010010...

Calculate the number of prefixes of $t$ with balance equal to $x$. The balance of some string $q$ is equal to $cnt_{0, q} - cnt_{1, q}$, where $cnt_{0, q}$ is the number of occurrences of 0 in $q$, and $cnt_{1, q}$ is the number of occurrences of 1 in $q$. The number of such prefixes can be infinite; if it is so, you must say that.

A prefix is a string consisting of several first letters of a given string, without any reorders. An empty prefix is also a valid prefix. For example, the string ""abcd"" has 5 prefixes: empty string, ""a"", ""ab"", ""abc"" and ""abcd"".


-----Input-----

The first line contains the single integer $T$ ($1 \le T \le 100$) — the number of test cases.

Next $2T$ lines contain descriptions of test cases — two lines per test case. The first line contains two integers $n$ and $x$ ($1 \le n \le 10^5$, $-10^9 \le x \le 10^9$) — the length of string $s$ and the desired balance, respectively.

The second line contains the binary string $s$ ($|s| = n$, $s_i \in \{\text{0}, \text{1}\}$).

It's guaranteed that the total sum of $n$ doesn't exceed $10^5$.


-----Output-----

Print $T$ integers — one per test case. For each test case print the number of prefixes or $-1$ if there is an infinite number of such prefixes.


-----Example-----
Input
4
6 10
010010
5 3
10101
1 0
0
2 0
01

Output
3
0
1
-1



-----Note-----

In the first test case, there are 3 good prefixes of $t$: with length $28$, $30$ and $32$.
Use user-input-Based format and function signature solve()","
def solve():
    T = int(input())
    for _ in range(T):
        n, x = map(int, input().split())
        s = input().strip()
        
        cnt_0 = s.count('0')
        cnt_1 = s.count('1')
        
        balance = 0
        ans = 0
        for i in range(n):
            if balance == x:
                ans = -1
                break
            if balance == x - (cnt_0 - cnt_1) * ((x - balance) // (cnt_0 - cnt_1)):
                ans += 1
            balance += 1 if s[i] == '0' else -1
        
        if balance == 0:
            ans += 1
        
        print(ans)

solve()
","
def solve():
    T = int(input())
    for _ in range(T):
        n, x = map(int, input().split())
        s = input()

        count_0 = s.count('0')
        count_1 = s.count('1')
        balance = 0

        result = 0
        infinite_prefixes = False

        for digit in s:
            balance += 1 if digit == '1' else -1

            if balance == x:
                infinite_prefixes = True
                break

        if x == 0:
            result = 1

        elif balance == 0:
            if x % balance == 0 and x // balance >= 0:
                result += 1

        elif (x - balance) % abs(balance) == 0 and (x - balance) // abs(balance) >= 0:
            result += 1

        if infinite_prefixes:
            print(-1)
        else:
            print(result)

solve()
","
def solve():
    import sys
    
    T = int(input())
    
    for _ in range(T):
        n, x = map(int, input().split())
        s = input().strip()
        
        count_0 = s.count('0')
        count_1 = s.count('1')
        
        current_balance = 0
        prefix_count = 0
        balance_dict = {0: 1}
        
        for i in range(n):
            if s[i] == '0':
                current_balance += 1
            else:
                current_balance -= 1
                
            cur_prefix_balance = x - current_balance
            
            if cur_prefix_balance == 0:
                prefix_count += 1
            
            if cur_prefix_balance in balance_dict:
                prefix_count += balance_dict[cur_prefix_balance]
                
            if current_balance in balance_dict:
                balance_dict[current_balance] += 1
            else:
                balance_dict[current_balance] = 1
                
        if current_balance == 0 and x != 0:
            print(-1)
        elif current_balance == 0 and x == 0:
            print(prefix_count + 1)
        elif x % current_balance == 0 and (x // current_balance) >= 0:
            print(prefix_count + balance_dict[x // current_balance])
        else:
            print(prefix_count)

solve()
","
def solve():
    import sys

    T = int(input())
    for _ in range(T):
        n, x = map(int, input().split())
        s = input().strip()

        balance = s.count('0') - s.count('1')

        if balance == 0:
            if x == 0:
                print(-1)
            else:
                print(0)
        else:
            answer = 0
            prefix_sum = 0
            infinite = False

            for i in range(1, min(n, 100000) + 1):
                prefix_sum += int(s[i - 1])

                if balance == 0:
                    if prefix_sum == x:
                        infinite = True
                        break
                else:
                    if (x - prefix_sum) % balance == 0 and (x - prefix_sum) // balance >= 0:
                        answer += 1

            if infinite:
                print(-1)
            else:
                print(answer)

solve()
","6.666666666666667","13.333333333333334","13.333333333333334","26.666666666666668","","","",""
"APPS/70","
QUESTION:
Polycarp is crazy about round numbers. He especially likes the numbers divisible by 10^{k}.

In the given number of n Polycarp wants to remove the least number of digits to get a number that is divisible by 10^{k}. For example, if k = 3, in the number 30020 it is enough to delete a single digit (2). In this case, the result is 3000 that is divisible by 10^3 = 1000.

Write a program that prints the minimum number of digits to be deleted from the given integer number n, so that the result is divisible by 10^{k}. The result should not start with the unnecessary leading zero (i.e., zero can start only the number 0, which is required to be written as exactly one digit).

It is guaranteed that the answer exists.


-----Input-----

The only line of the input contains two integer numbers n and k (0 ≤ n ≤ 2 000 000 000, 1 ≤ k ≤ 9).

It is guaranteed that the answer exists. All numbers in the input are written in traditional notation of integers, that is, without any extra leading zeros.


-----Output-----

Print w — the required minimal number of digits to erase. After removing the appropriate w digits from the number n, the result should have a value that is divisible by 10^{k}. The result can start with digit 0 in the single case (the result is zero and written by exactly the only digit 0).


-----Examples-----
Input
30020 3

Output
1

Input
100 9

Output
2

Input
10203049 2

Output
3



-----Note-----

In the example 2 you can remove two digits: 1 and any 0. The result is number 0 which is divisible by any number.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    n_str = str(n)
    count = 0
    for i in range(len(n_str) - 1, -1, -1):
        if n_str[i] == '0':
            count += 1
        else:
            break
    if count >= k:
        print(k)
    else:
        print(count)

solve()
","
def solve():
    n, k = map(int, input().split())
    n_str = str(n)
    count = 0

    zero_count = n_str.count('0')
    if zero_count >= k:
        print(k)
    else:
        non_zero_digits = len(n_str) - zero_count
        to_remove = non_zero_digits - 1
        if to_remove >= k - zero_count:
            print(k - zero_count)
        else:
            print(to_remove)

solve()
","
def solve():
    n, k = map(int, input().split())
    n_str = str(n)
    count_zeros = 0
    count_non_zeros = 0
    
    for digit in reversed(n_str):
        if digit == '0':
            count_zeros += 1
        else:
            count_non_zeros += 1

        if count_zeros == k:
            print(count_non_zeros)
            break
        elif count_zeros + count_non_zeros == len(n_str) - 1:
            print(k - 1)
            break

solve()
","
def solve():
    n, k = map(int, input().split())
    n_str = str(n)

    count = 0
    for i in range(len(n_str)-1, -1, -1):
        if n_str[i] == '0':
            count += 1
        else:
            k -= 1
        if k == 0:
            break

    print(count)

solve()
","33.33333333333333","6.666666666666667","80.0","26.666666666666668","","","",""
"APPS/71","
QUESTION:
On the Literature lesson Sergei noticed an awful injustice, it seems that some students are asked more often than others.

Seating in the class looks like a rectangle, where n rows with m pupils in each. 

The teacher asks pupils in the following order: at first, she asks all pupils from the first row in the order of their seating, then she continues to ask pupils from the next row. If the teacher asked the last row, then the direction of the poll changes, it means that she asks the previous row. The order of asking the rows looks as follows: the 1-st row, the 2-nd row, ..., the n - 1-st row, the n-th row, the n - 1-st row, ..., the 2-nd row, the 1-st row, the 2-nd row, ...

The order of asking of pupils on the same row is always the same: the 1-st pupil, the 2-nd pupil, ..., the m-th pupil.

During the lesson the teacher managed to ask exactly k questions from pupils in order described above. Sergei seats on the x-th row, on the y-th place in the row. Sergei decided to prove to the teacher that pupils are asked irregularly, help him count three values:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. 

If there is only one row in the class, then the teacher always asks children from this row.


-----Input-----

The first and the only line contains five integers n, m, k, x and y (1 ≤ n, m ≤ 100, 1 ≤ k ≤ 10^18, 1 ≤ x ≤ n, 1 ≤ y ≤ m).


-----Output-----

Print three integers:  the maximum number of questions a particular pupil is asked,  the minimum number of questions a particular pupil is asked,  how many times the teacher asked Sergei. 


-----Examples-----
Input
1 3 8 1 1

Output
3 2 3
Input
4 2 9 4 2

Output
2 1 1
Input
5 5 25 4 3

Output
1 1 1
Input
100 100 1000000000000000000 100 100

Output
101010101010101 50505050505051 50505050505051


-----Note-----

The order of asking pupils in the first test:   the pupil from the first row who seats at the first table, it means it is Sergei;  the pupil from the first row who seats at the second table;  the pupil from the first row who seats at the third table;  the pupil from the first row who seats at the first table, it means it is Sergei;  the pupil from the first row who seats at the second table;  the pupil from the first row who seats at the third table;  the pupil from the first row who seats at the first table, it means it is Sergei;  the pupil from the first row who seats at the second table; 

The order of asking pupils in the second test:   the pupil from the first row who seats at the first table;  the pupil from the first row who seats at the second table;  the pupil from the second row who seats at the first table;  the pupil from the second row who seats at the second table;  the pupil from the third row who seats at the first table;  the pupil from the third row who seats at the second table;  the pupil from the fourth row who seats at the first table;  the pupil from the fourth row who seats at the second table, it means it is Sergei;  the pupil from the third row who seats at the first table;
Use user-input-Based format and function signature solve()","
def solve():
    n, m, k, x, y = map(int, input().split())
    
    if n == 1:
        total_pupils = m
        total_rounds = k // total_pupils
        remaining_questions = k % total_pupils
        
        max_questions = total_rounds + (remaining_questions > 0)
        min_questions = total_rounds
        serg_questions = min(remaining_questions, 1)
    else:
        total_pupils = 2 * (n - 1) * m + m
        total_rounds = k // total_pupils
        remaining_questions = k % total_pupils
        
        max_questions = total_rounds * 2
        min_questions = total_rounds
        serg_questions = min(remaining_questions // m + (remaining_questions % m >= y), 1)
    
    print(max_questions, min_questions, serg_questions)

solve()
","
def solve():
    n, m, k, x, y = map(int, input().split())
    
    if n == 1:
        total_pupils = m
        total_rounds = k // total_pupils
        remainder = k % total_pupils
        
        if remainder >= y:
            total_questions = total_rounds + 1
            if remainder == y:
                serg_questions = 1
            else:
                serg_questions = 0
        else:
            total_questions = total_rounds
            serg_questions = 0
        
        max_questions = total_questions
        min_questions = total_questions
        
    else:
        total_pupils = 2 * n - 2
        total_rounds = k // total_pupils
        remainder = k % total_pupils
        
        if remainder < m:
            total_questions = total_rounds * 2
            max_questions = total_rounds * 2
            min_questions = total_rounds * 2
        else:
            total_questions = total_rounds * 2 + 1
            max_questions = total_rounds * 2 + 1
            min_questions = total_rounds * 2
        
        serg_questions = 0
        if n % 2 == 0:
            if x % 2 == 0:
                serg_row_count = (x // 2) - 1
            else:
                serg_row_count = x // 2
        else:
            if x % 2 == 0:
                serg_row_count = x // 2
            else:
                serg_row_count = (x // 2) + 1
        
        serg_questions += total_rounds * 2 * serg_row_count
        if x == n:
            serg_questions += (total_rounds + (remainder >= m))  # Increment if Sergei's row is the last row
        elif x != 1:
            serg_questions += total_rounds * 2  # Increment for the full cycles till Sergei's row
            if (x % 2 == 0 and remainder >= m) or (x % 2 != 0 and remainder >= m - 1):
                serg_questions += 1  # Increment if Sergei's row is reached within the remainder
        
    print(max_questions, min_questions, serg_questions)

solve()","
def solve():
    n, m, k, x, y = map(int, input().split())
    
    if n == 1:  
        total_pupils = m
    else:  
        total_pupils = 2 * n * m - 2 * m 
    
    cycle = 2 * n - 2
    num_cycles, remaining_questions = divmod(k, total_pupils)
    
    if remaining_questions == 0:  
        remaining_questions = total_pupils
    
    max_questions = min(num_cycles * m, remaining_questions)
    min_questions = max(0, min((num_cycles - 1) * m, remaining_questions - m))
    
    teacher_asked_sergei = 0
    
    if n == 1:  
        teacher_asked_sergei = min(k, m)
    else:  
        teacher_asked_sergei = min((num_cycles + 1) // 2, 1)
        
    print(max_questions, min_questions, teacher_asked_sergei)

solve()
","
def solve():
    n, m, k, x, y = map(int, input().split())
    
    if n == 1:
        times_asked_sergei = min(k, m) // m
        if min(k, m) % m != 0:
            times_asked_sergei += 1
        max_questions = min(k, m)
        min_questions = (k + m - 1) // m
    else:
        period = 2 * (n-1) * m  # total number of pupils per full cycle
        full_cycles = k // period
        remaining_q = k % period
        
        if remaining_q == 0:
            remaining_q = period
        
        if full_cycles == 0:
            row_offset = (remaining_q - 1) // m
            last_row_offset = (remaining_q - 1) // m + 1
            times_asked_sergei = 1 if row_offset == x-1 and (remaining_q - 1) % m == y-1 else 0
        else:
            x_in_cycle = (full_cycles * 2 + 1)
            x_mod = x_in_cycle % n
            last_row = n // 2 + n % 2
            x_mod = min(x_mod, 2*last_row - x_mod)
            if n % 2 == 0 and x_in_cycle % n == 0:
                x_mod += n // 2
            times_asked_sergei = 1 if x_mod == x and y == 2 else 0
        
        max_questions = full_cycles * 2 * m + min(m, remaining_q)
        min_questions = max(full_cycles * 2 * m // m, (full_cycles * 2 * m + m - 1) // m)
    
    return max_questions, min_questions, times_asked_sergei

solve()","0.0","0.0","0.0","0.0","","","",""
"APPS/72","
QUESTION:
After the big birthday party, Katie still wanted Shiro to have some more fun. Later, she came up with a game called treasure hunt. Of course, she invited her best friends Kuro and Shiro to play with her.

The three friends are very smart so they passed all the challenges very quickly and finally reached the destination. But the treasure can only belong to one cat so they started to think of something which can determine who is worthy of the treasure. Instantly, Kuro came up with some ribbons.

A random colorful ribbon is given to each of the cats. Each color of the ribbon can be represented as an uppercase or lowercase Latin letter. Let's call a consecutive subsequence of colors that appears in the ribbon a subribbon. The beauty of a ribbon is defined as the maximum number of times one of its subribbon appears in the ribbon. The more the subribbon appears, the more beautiful is the ribbon. For example, the ribbon aaaaaaa has the beauty of $7$ because its subribbon a appears $7$ times, and the ribbon abcdabc has the beauty of $2$ because its subribbon abc appears twice.

The rules are simple. The game will have $n$ turns. Every turn, each of the cats must change strictly one color (at one position) in his/her ribbon to an arbitrary color which is different from the unchanged one. For example, a ribbon aaab can be changed into acab in one turn. The one having the most beautiful ribbon after $n$ turns wins the treasure.

Could you find out who is going to be the winner if they all play optimally?


-----Input-----

The first line contains an integer $n$ ($0 \leq n \leq 10^{9}$) — the number of turns.

Next 3 lines contain 3 ribbons of Kuro, Shiro and Katie one per line, respectively. Each ribbon is a string which contains no more than $10^{5}$ uppercase and lowercase Latin letters and is not empty. It is guaranteed that the length of all ribbons are equal for the purpose of fairness. Note that uppercase and lowercase letters are considered different colors.


-----Output-----

Print the name of the winner (""Kuro"", ""Shiro"" or ""Katie""). If there are at least two cats that share the maximum beauty, print ""Draw"".


-----Examples-----
Input
3
Kuroo
Shiro
Katie

Output
Kuro

Input
7
treasurehunt
threefriends
hiCodeforces

Output
Shiro

Input
1
abcabc
cbabac
ababca

Output
Katie

Input
15
foPaErcvJ
mZaxowpbt
mkuOlaHRE

Output
Draw



-----Note-----

In the first example, after $3$ turns, Kuro can change his ribbon into ooooo, which has the beauty of $5$, while reaching such beauty for Shiro and Katie is impossible (both Shiro and Katie can reach the beauty of at most $4$, for example by changing Shiro's ribbon into SSiSS and changing Katie's ribbon into Kaaaa). Therefore, the winner is Kuro.

In the fourth example, since the length of each of the string is $9$ and the number of turn is $15$, everyone can change their ribbons in some way to reach the maximal beauty of $9$ by changing their strings into zzzzzzzzz after 9 turns, and repeatedly change their strings into azzzzzzzz and then into zzzzzzzzz thrice. Therefore, the game ends in a draw.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    ribbons = [input() for _ in range(3)]
    
    max_beauty = max(ribbons.count(max(ribbons, key=ribbons.count)), key=ribbons.count)
    
    if ribbons.count(max_beauty) > 1:
        print(""Draw"")
    else:
        print([""Kuro"", ""Shiro"", ""Katie""][ribbons.index(max_beauty)])

solve()","
def solve():
    n = int(input())
    ribbons = [input() for _ in range(3)]

    max_beauty = max(ribbons.count(ribbon) for ribbon in ribbons)
    winners = [i for i, ribbon in enumerate(ribbons) if ribbons.count(ribbon) == max_beauty]

    if len(winners) == 1:
        print([""Kuro"", ""Shiro"", ""Katie""][winners[0]])
    else:
        print(""Draw"")

solve()","
def solve():
    n = int(input())
    ribbons = [input() for _ in range(3)]

    max_beauty = max(ribbons.count(max(ribbons, key=ribbons.count)), key=ribbons.count)

    if ribbons.count(max_beauty) > 1:
        print(""Draw"")
    else:
        print([""Kuro"", ""Shiro"", ""Katie""][ribbons.index(max_beauty)])

solve()
","
def solve():
    n = int(input())
    ribbons = [input() for _ in range(3)]

    max_beauty = max([ribbon.count(max(set(ribbon), key=ribbon.count)) for ribbon in ribbons])

    if ribbons.count(max(ribbons, key=lambda x: x.count(max(set(x), key=x.count))) > 1) or ribbons.count(max(ribbons, key=lambda x: x.count(max(set(x), key=x.count))) == 3:
        print(""Draw"")
    else:
        print([""Kuro"", ""Shiro"", ""Katie""][ribbons.index(max(ribbons, key=lambda x: x.count(max(set(x), key=x.count)))])

solve()
","0.0","53.333333333333336","0.0","0.0","","","",""
"APPS/73","
QUESTION:
Mister B once received a gift: it was a book about aliens, which he started read immediately. This book had c pages.

At first day Mister B read v_0 pages, but after that he started to speed up. Every day, starting from the second, he read a pages more than on the previous day (at first day he read v_0 pages, at second — v_0 + a pages, at third — v_0 + 2a pages, and so on). But Mister B is just a human, so he physically wasn't able to read more than v_1 pages per day.

Also, to refresh his memory, every day, starting from the second, Mister B had to reread last l pages he read on the previous day. Mister B finished the book when he read the last page for the first time.

Help Mister B to calculate how many days he needed to finish the book.


-----Input-----

First and only line contains five space-separated integers: c, v_0, v_1, a and l (1 ≤ c ≤ 1000, 0 ≤ l < v_0 ≤ v_1 ≤ 1000, 0 ≤ a ≤ 1000) — the length of the book in pages, the initial reading speed, the maximum reading speed, the acceleration in reading speed and the number of pages for rereading.


-----Output-----

Print one integer — the number of days Mister B needed to finish the book.


-----Examples-----
Input
5 5 10 5 4

Output
1

Input
12 4 12 4 1

Output
3

Input
15 1 100 0 0

Output
15



-----Note-----

In the first sample test the book contains 5 pages, so Mister B read it right at the first day.

In the second sample test at first day Mister B read pages number 1 - 4, at second day — 4 - 11, at third day — 11 - 12 and finished the book.

In third sample test every day Mister B read 1 page of the book, so he finished in 15 days.
Use user-input-Based format and function signature solve()","
def solve():
    c, v0, v1, a, l = map(int, input().split())
    days = 1
    pages_read = v0
    while pages_read < c:
        v = min(v0 + a * (days - 1), v1)
        pages_read += v - l
        days += 1
    print(days)

solve()
","
import math

def solve():
    c, v0, v1, a, l = map(int, input().split())
    
    days = 0
    pages_read = 0
    current_speed = v0
    
    while pages_read < c:
        days += 1
        
        if days > 1:
            pages_read -= l
        
        pages_read += current_speed
        
        current_speed = min(v1, current_speed + a)
    
    print(days)

solve()
","
def solve():
    c, v0, v1, a, l = map(int, input().split())
    
    days = 0
    pages_read = 0
    current_speed = v0

    while pages_read < c:
        days += 1
        pages_read += current_speed
        if pages_read >= c:
            break
        current_speed = min(current_speed + a, v1)
        pages_read -= l

    print(days)

solve()
","
def solve():
    c, v0, v1, a, l = map(int, input().split())
    days = 1
    pages_read = v0
    while pages_read < c:
        v_curr = min(v0 + a * (days - 1), v1)
        pages_read += v_curr - l
        days += 1
    print(days)

solve()
","73.33333333333333","100.0","100.0","73.33333333333333","","","",""
"APPS/74","
QUESTION:
Dima loves representing an odd number as the sum of multiple primes, and Lisa loves it when there are at most three primes. Help them to represent the given number as the sum of at most than three primes.

More formally, you are given an odd numer n. Find a set of numbers p_{i} (1 ≤ i ≤ k), such that



 1 ≤ k ≤ 3

 p_{i} is a prime

 $\sum_{i = 1}^{k} p_{i} = n$

The numbers p_{i} do not necessarily have to be distinct. It is guaranteed that at least one possible solution exists.


-----Input-----

The single line contains an odd number n (3 ≤ n < 10^9).


-----Output-----

In the first line print k (1 ≤ k ≤ 3), showing how many numbers are in the representation you found.

In the second line print numbers p_{i} in any order. If there are multiple possible solutions, you can print any of them.


-----Examples-----
Input
27

Output
3
5 11 11



-----Note-----

A prime is an integer strictly larger than one that is divisible only by one and by itself.
Use user-input-Based format and function signature solve()","
from sympy import isprime

def solve():
    n = int(input())
    
    if isprime(n):
        print(1)
        print(n)
    elif isprime(n - 2):
        print(2)
        print(2, n - 2)
    else:
        for i in range(2, n):
            if isprime(i) and isprime(n - i):
                print(2)
                print(i, n - i)
                break

solve()","
from sympy import isprime

def solve():
    n = int(input())
    primes = [2]
    for i in range(3, n, 2):
        if isprime(i):
            primes.append(i)
    
    for i in range(len(primes)):
        for j in range(i, len(primes)):
            for k in range(j, len(primes)):
                if primes[i] + primes[j] + primes[k] == n:
                    print(3)
                    print(primes[i], primes[j], primes[k])
                    return

# Test the function
solve()
","
import math

def solve():
    n = int(input())
    
    if n % 2 == 0:
        return
    
    if n == 3:
        print(1)
        print(3)
    elif n == 5:
        print(1)
        print(5)
    else:
        print(3)
        print(3, n-6, 3)

solve()","
def solve():
    n = int(input())
    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]

    for p1 in primes:
        if p1 > n:
            break
        for p2 in primes:
            if p1 + p2 > n:
                break
            for p3 in primes:
                if p1 + p2 + p3 == n:
                    print(3)
                    print(p1, p2, p3)
                    return
    return

solve()
","0.0","0.0","13.333333333333334","6.666666666666667","","","",""
"APPS/75","
QUESTION:
You are given a description of a depot. It is a rectangular checkered field of n × m size. Each cell in a field can be empty (""."") or it can be occupied by a wall (""*""). 

You have one bomb. If you lay the bomb at the cell (x, y), then after triggering it will wipe out all walls in the row x and all walls in the column y.

You are to determine if it is possible to wipe out all walls in the depot by placing and triggering exactly one bomb. The bomb can be laid both in an empty cell or in a cell occupied by a wall.


-----Input-----

The first line contains two positive integers n and m (1 ≤ n, m ≤ 1000) — the number of rows and columns in the depot field. 

The next n lines contain m symbols ""."" and ""*"" each — the description of the field. j-th symbol in i-th of them stands for cell (i, j). If the symbol is equal to ""."", then the corresponding cell is empty, otherwise it equals ""*"" and the corresponding cell is occupied by a wall.


-----Output-----

If it is impossible to wipe out all walls by placing and triggering exactly one bomb, then print ""NO"" in the first line (without quotes).

Otherwise print ""YES"" (without quotes) in the first line and two integers in the second line — the coordinates of the cell at which the bomb should be laid. If there are multiple answers, print any of them.


-----Examples-----
Input
3 4
.*..
....
.*..

Output
YES
1 2

Input
3 3
..*
.*.
*..

Output
NO

Input
6 5
..*..
..*..
*****
..*..
..*..
..*..

Output
YES
3 3
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    field = [input() for _ in range(n)]
    
    row_sums = [0] * n
    col_sums = [0] * m
    
    for i in range(n):
        for j in range(m):
            if field[i][j] == '*':
                row_sums[i] += 1
                col_sums[j] += 1
    
    for i in range(n):
        for j in range(m):
            if row_sums[i] + col_sums[j] - (field[i][j] == '*') == max(row_sums) + max(col_sums):
                print(""YES"")
                print(i+1, j+1)
                return
    
    print(""NO"")

solve()
","
def solve():
    n, m = map(int, input().split())
    field = [input() for _ in range(n)]

    rows = [0] * n
    cols = [0] * m

    for i in range(n):
        for j in range(m):
            if field[i][j] == ""*"":
                rows[i] += 1
                cols[j] += 1

    for i in range(n):
        for j in range(m):
            if rows[i] + cols[j] - (field[i][j] == ""*"") == n + m:
                print(""YES"")
                print(i + 1, j + 1)
                return

    print(""NO"")

solve()
","
def solve():
    n, m = map(int, input().split())
    field = [input() for _ in range(n)]

    row_wall_count = [0] * n
    col_wall_count = [0] * m

    for i in range(n):
        for j in range(m):
            if field[i][j] == '*':
                row_wall_count[i] += 1
                col_wall_count[j] += 1

    for i in range(n):
        for j in range(m):
            if row_wall_count[i] + col_wall_count[j] - (field[i][j] == '*') == max(row_wall_count) + max(col_wall_count):
                print(""YES"")
                print(f""{i+1} {j+1}"")
                return
    
    print(""NO"")

solve()","
def solve():
    n, m = map(int, input().split())
    field = [list(input()) for _ in range(n)]

    row_walls = [0] * n
    col_walls = [0] * m

    for i in range(n):
        for j in range(m):
            if field[i][j] == '*':
                row_walls[i] += 1
                col_walls[j] += 1

    for i in range(n):
        for j in range(m):
            if row_walls[i] + col_walls[j] - (field[i][j] == '*') == max(row_walls) + max(col_walls):
                print(""YES"")
                print(i+1, j+1)
                return

    print(""NO"")
  
solve()","13.333333333333334","20.0","13.333333333333334","13.333333333333334","","","",""
"APPS/76","
QUESTION:
Berland Football Cup starts really soon! Commentators from all over the world come to the event.

Organizers have already built $n$ commentary boxes. $m$ regional delegations will come to the Cup. Every delegation should get the same number of the commentary boxes. If any box is left unoccupied then the delegations will be upset. So each box should be occupied by exactly one delegation.

If $n$ is not divisible by $m$, it is impossible to distribute the boxes to the delegations at the moment.

Organizers can build a new commentary box paying $a$ burles and demolish a commentary box paying $b$ burles. They can both build and demolish boxes arbitrary number of times (each time paying a corresponding fee). It is allowed to demolish all the existing boxes.

What is the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$)?


-----Input-----

The only line contains four integer numbers $n$, $m$, $a$ and $b$ ($1 \le n, m \le 10^{12}$, $1 \le a, b \le 100$), where $n$ is the initial number of the commentary boxes, $m$ is the number of delegations to come, $a$ is the fee to build a box and $b$ is the fee to demolish a box.


-----Output-----

Output the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$). It is allowed that the final number of the boxes is equal to $0$.


-----Examples-----
Input
9 7 3 8

Output
15

Input
2 7 3 7

Output
14

Input
30 6 17 19

Output
0



-----Note-----

In the first example organizers can build $5$ boxes to make the total of $14$ paying $3$ burles for the each of them.

In the second example organizers can demolish $2$ boxes to make the total of $0$ paying $7$ burles for the each of them.

In the third example organizers are already able to distribute all the boxes equally among the delegations, each one get $5$ boxes.
Use user-input-Based format and function signature solve()","
def solve():
    n, m, a, b = map(int, input().split())
    
    if n % m == 0:
        print(0)
    else:
        min_cost = min((n % m) * a, (m - n % m) * b)
        print(min_cost)

solve()
","
python
def solve():
    n, m, a, b = map(int, input().split())
    
    if n % m == 0:
        return 0
    
    cost = min((n % m) * a, (m - (n % m)) * b)
    
    return cost

solve()
","
def solve():
    n, m, a, b = map(int, input().split())
    
    if n % m == 0:
        print(0)
    else:
        x = (n // m + 1) * m - n
        cost1 = x * a
        cost2 = (n - (n // m) * m) * b
        print(min(cost1, cost2))

solve()
","
def solve():
    n, m, a, b = map(int, input().split())
    
    if n % m == 0:
        return 0

    if n < m:
        return min((m - n) * a, n * b)

    r = n % m
    return min(r * a, (m - r) * b)

solve()
","53.333333333333336","0.0","100.0","0.0","","","",""
"APPS/77","
QUESTION:
You are given sequence a_1, a_2, ..., a_{n} of integer numbers of length n. Your task is to find such subsequence that its sum is odd and maximum among all such subsequences. It's guaranteed that given sequence contains subsequence with odd sum.

Subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.

You should write a program which finds sum of the best subsequence.


-----Input-----

The first line contains integer number n (1 ≤ n ≤ 10^5).

The second line contains n integer numbers a_1, a_2, ..., a_{n} ( - 10^4 ≤ a_{i} ≤ 10^4). The sequence contains at least one subsequence with odd sum.


-----Output-----

Print sum of resulting subseqeuence.


-----Examples-----
Input
4
-2 2 -3 1

Output
3

Input
3
2 -5 -3

Output
-1



-----Note-----

In the first example sum of the second and the fourth elements is 3.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    odd_sum = sum(x for x in a if x % 2 != 0)
    max_odd_sum = max(odd_sum, odd_sum - min(x for x in a if x % 2 != 0 and x < 0))
    
    print(max_odd_sum)

solve()
","
def solve():
    n = int(input())
    sequence = list(map(int, input().split()))
    
    # Find all odd numbers in the sequence
    odds = [num for num in sequence if num % 2 != 0]
    
    # Find the largest odd number
    largest_odd = max(odds)
    
    return largest_odd

solve()
","
def solve():
    n = int(input())
    numbers = list(map(int, input().split()))
    
    max_odd = float('-inf')
    for num in numbers:
        if num % 2 != 0 and num > max_odd:
            max_odd = num
    
    print(max_odd)

solve()
","
def solve():
    n = int(input())
    sequence = list(map(int, input().split()))
    
    odd_sum = sum(num for num in sequence if num % 2 != 0)
    
    print(odd_sum)

solve()
","13.333333333333334","0.0","26.666666666666668","20.0","","","",""
"APPS/78","
QUESTION:
The only difference between easy and hard versions is constraints.

Polycarp loves to listen to music, so he never leaves the player, even on the way home from the university. Polycarp overcomes the distance from the university to the house in exactly $T$ minutes.

In the player, Polycarp stores $n$ songs, each of which is characterized by two parameters: $t_i$ and $g_i$, where $t_i$ is the length of the song in minutes ($1 \le t_i \le 15$), $g_i$ is its genre ($1 \le g_i \le 3$).

Polycarp wants to create such a playlist so that he can listen to music all the time on the way from the university to his home, and at the time of his arrival home, the playlist is over. Polycarp never interrupts songs and always listens to them from beginning to end. Thus, if he started listening to the $i$-th song, he would spend exactly $t_i$ minutes on its listening. Polycarp also does not like when two songs of the same genre play in a row (i.e. successively/adjacently) or when the songs in his playlist are repeated.

Help Polycarpus count the number of different sequences of songs (their order matters), the total duration is exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different.


-----Input-----

The first line of the input contains two integers $n$ and $T$ ($1 \le n \le 15, 1 \le T \le 225$) — the number of songs in the player and the required total duration, respectively.

Next, the $n$ lines contain descriptions of songs: the $i$-th line contains two integers $t_i$ and $g_i$ ($1 \le t_i \le 15, 1 \le g_i \le 3$) — the duration of the $i$-th song and its genre, respectively.


-----Output-----

Output one integer — the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).


-----Examples-----
Input
3 3
1 1
1 2
1 3

Output
6

Input
3 3
1 1
1 1
1 3

Output
2

Input
4 10
5 3
2 1
3 2
5 1

Output
10



-----Note-----

In the first example, Polycarp can make any of the $6$ possible playlist by rearranging the available songs: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$ and $[3, 2, 1]$ (indices of the songs are given).

In the second example, the first and second songs cannot go in succession (since they have the same genre). Thus, Polycarp can create a playlist in one of $2$ possible ways: $[1, 3, 2]$ and $[2, 3, 1]$ (indices of the songs are given).

In the third example, Polycarp can make the following playlists: $[1, 2, 3]$, $[1, 3, 2]$, $[2, 1, 3]$, $[2, 3, 1]$, $[3, 1, 2]$, $[3, 2, 1]$, $[1, 4]$, $[4, 1]$, $[2, 3, 4]$ and $[4, 3, 2]$ (indices of the songs are given).
Use user-input-Based format and function signature solve()","
def solve():
    MOD = 10**9 + 7

    n, T = map(int, input().split())
    songs = [list(map(int, input().split())) for _ in range(n)]

    dp = [[0] * 3 for _ in range(T + 1)]
    dp[0] = [1, 1, 1]

    for i in range(1, T + 1):
        for j in range(n):
            t, g = songs[j]
            for k in range(3):
                if i - t >= 0 and dp[i - t][k] > 0 and k != g - 1:
                    dp[i][g - 1] = (dp[i][g - 1] + dp[i - t][k]) % MOD

    total = sum(dp[T]) % MOD
    print(total)

solve()
","
import itertools

def solve():
    n, T = map(int, input().split())
    songs = [tuple(map(int, input().split())) for _ in range(n)]

    cnt = 0
    for perm in itertools.permutations(songs):
        if sum(song[0] for song in perm) == T and all(perm[i][1] != perm[i+1][1] for i in range(len(perm)-1)):
            cnt += 1

    print(cnt % (10**9 + 7))

solve()
","
def solve():
    import sys
    
    mod = 10 ** 9 + 7
    
    n, T = map(int, sys.stdin.readline().split())
    songs = []
    for _ in range(n):
        t, g = map(int, sys.stdin.readline().split())
        songs.append((t, g))
    
    dp = [[0] * (1 << n) for _ in range(T + 1)]
    dp[0][0] = 1
    
    for t in range(1, T + 1):
        for mask in range(1 << n):
            for i, (ti, gi) in enumerate(songs):
                if t >= ti and not (mask & (1 << i)):
                    new_mask = mask | (1 << i)
                    valid = True
                    for j in range(n):
                        if new_mask & (1 << j):
                            if songs[j][1] == gi:
                                valid = False
                                break
                    if valid:
                        dp[t][new_mask] += dp[t - ti][mask]
                        dp[t][new_mask] %= mod
    
    ans = sum(dp[T]) % mod
    print(ans)

solve()","
def solve():
    n, T = map(int, input().split())
    songs = [list(map(int, input().split())) for _ in range(n)]

    MOD = 10**9 + 7

    dp = [[0] * 4 for _ in range(T + 1)]
    dp[0][0] = 1

    for t, g in songs:
        for time in range(T, -1, -1):
            for prev_genre in range(1, 4):
                for prev_time in range(time - t, -1, -1):
                    if prev_genre != g:
                        dp[time][g] = (dp[time][g] + dp[prev_time][prev_genre]) % MOD

    print(sum(dp[T]) % MOD)

solve()
","33.33333333333333","73.33333333333333","33.33333333333333","33.33333333333333","","","",""
"APPS/79","
QUESTION:
Vivek initially has an empty array $a$ and some integer constant $m$.

He performs the following algorithm:  Select a random integer $x$ uniformly in range from $1$ to $m$ and append it to the end of $a$.  Compute the greatest common divisor of integers in $a$.  In case it equals to $1$, break  Otherwise, return to step $1$. 

Find the expected length of $a$. It can be shown that it can be represented as $\frac{P}{Q}$ where $P$ and $Q$ are coprime integers and $Q\neq 0 \pmod{10^9+7}$. Print the value of $P \cdot Q^{-1} \pmod{10^9+7}$.


-----Input-----

The first and only line contains a single integer $m$ ($1 \leq m \leq 100000$).


-----Output-----

Print a single integer — the expected length of the array $a$ written as $P \cdot Q^{-1} \pmod{10^9+7}$.


-----Examples-----
Input
1

Output
1

Input
2

Output
2

Input
4

Output
333333338



-----Note-----

In the first example, since Vivek can choose only integers from $1$ to $1$, he will have $a=[1]$ after the first append operation, and after that quit the algorithm. Hence the length of $a$ is always $1$, so its expected value is $1$ as well.

In the second example, Vivek each time will append either $1$ or $2$, so after finishing the algorithm he will end up having some number of $2$'s (possibly zero), and a single $1$ in the end. The expected length of the list is $1\cdot \frac{1}{2} + 2\cdot \frac{1}{2^2} + 3\cdot \frac{1}{2^3} + \ldots = 2$.
Use user-input-Based format and function signature solve()","
from math import gcd

def solve(m):
    MOD = 10**9 + 7
    inv_m = pow(m, MOD-2, MOD)
    return (m * inv_m) % MOD

solve()","
from math import gcd
import sys
MOD = 10**9 + 7

def mod_inv(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return (x1 + m0) % m0

def solve():
    m = int(sys.stdin.readline().strip())
    inv = mod_inv(m, MOD)
    result = (m*(m-1) * inv) % MOD
    return result


solve()","
from fractions import Fraction

def solve(m):
    MOD = 10**9 + 7
    inv_m = pow(m, MOD - 2, MOD)
    return int(Fraction(m, m-1) * inv_m % MOD)

solve()","
import math

def solve(m):
    MOD = 10**9 + 7
    ans = 0
    for i in range(1, m + 1):
        ans += m * pow(i, MOD-2, MOD) % MOD
        ans %= MOD
    return ans

# Read input
m = int(input())
print(solve(m))

solve()","0.0","0.0","0.0","0.0","","","",""
"APPS/80","
QUESTION:
Today on Informatics class Nastya learned about GCD and LCM (see links below). Nastya is very intelligent, so she solved all the tasks momentarily and now suggests you to solve one of them as well.

We define a pair of integers (a, b) good, if GCD(a, b) = x and LCM(a, b) = y, where GCD(a, b) denotes the greatest common divisor of a and b, and LCM(a, b) denotes the least common multiple of a and b.

You are given two integers x and y. You are to find the number of good pairs of integers (a, b) such that l ≤ a, b ≤ r. Note that pairs (a, b) and (b, a) are considered different if a ≠ b.


-----Input-----

The only line contains four integers l, r, x, y (1 ≤ l ≤ r ≤ 10^9, 1 ≤ x ≤ y ≤ 10^9).


-----Output-----

In the only line print the only integer — the answer for the problem.


-----Examples-----
Input
1 2 1 2

Output
2

Input
1 12 1 12

Output
4

Input
50 100 3 30

Output
0



-----Note-----

In the first example there are two suitable good pairs of integers (a, b): (1, 2) and (2, 1).

In the second example there are four suitable good pairs of integers (a, b): (1, 12), (12, 1), (3, 4) and (4, 3).

In the third example there are good pairs of integers, for example, (3, 30), but none of them fits the condition l ≤ a, b ≤ r.
Use user-input-Based format and function signature solve()","
from math import gcd

def solve():
    l, r, x, y = map(int, input().split())
    
    count = 0
    for a in range(l, r+1):
        if y % a == 0 and gcd(a, y//a) == x:
            count += 1
    
    print(count)

solve()
","
from math import gcd

def solve():
    l, r, x, y = map(int, input().split())
    
    count = 0
    for a in range(l, r+1):
        if y % a == 0 and gcd(a, y//a) == x:
            count += 1
    
    print(count)

solve()
","
from math import gcd

def solve():
    l, r, x, y = map(int, input().split())
    
    if y % x != 0:
        print(0)
        return
    
    count = 0
    for i in range(1, int(y/x) + 1):
        if y % (i * x) == 0 and gcd(i, y // (i * x)) == x and i * x >= l and i * x <= r:
            count += 1
            
    print(count)


solve()","
def solve():
    import math
    l, r, x, y = map(int, input().split())
    
    def gcd(a, b):
        if b == 0:
            return a
        return gcd(b, a % b)
    
    def lcm(a, b):
        return a * b // math.gcd(a, b)
    
    count = 0
    for a in range(l, r+1):
        if x <= a <= y and y % a == 0 and math.gcd(a, y//a) == x:
            count += 1
    
    print(count)

solve()
","60.0","60.0","44.44444444444444","60.0","","","",""
"APPS/81","
QUESTION:
Neko loves divisors. During the latest number theory lesson, he got an interesting exercise from his math teacher.

Neko has two integers $a$ and $b$. His goal is to find a non-negative integer $k$ such that the least common multiple of $a+k$ and $b+k$ is the smallest possible. If there are multiple optimal integers $k$, he needs to choose the smallest one.

Given his mathematical talent, Neko had no trouble getting Wrong Answer on this problem. Can you help him solve it?


-----Input-----

The only line contains two integers $a$ and $b$ ($1 \le a, b \le 10^9$).


-----Output-----

Print the smallest non-negative integer $k$ ($k \ge 0$) such that the lowest common multiple of $a+k$ and $b+k$ is the smallest possible.

If there are many possible integers $k$ giving the same value of the least common multiple, print the smallest one.


-----Examples-----
Input
6 10

Output
2
Input
21 31

Output
9
Input
5 10

Output
0


-----Note-----

In the first test, one should choose $k = 2$, as the least common multiple of $6 + 2$ and $10 + 2$ is $24$, which is the smallest least common multiple possible.
Use user-input-Based format and function signature solve()","
from math import gcd

def solve():
    a, b = map(int, input().split())
    diff = abs(a - b)
    if diff == 0:
        return 0
    for k in range(diff):
        if (a + k) % diff == 0 and (b + k) % diff == 0:
            return k
    return diff

print(solve())

solve()","
from math import gcd

def find_lcm(a, b):
    return a * b // gcd(a, b)

def solve():
    a, b = map(int, input().split())
    
    if a > b:
        a, b = b, a
    
    diff = b - a
    best_k = 0
    min_lcm = find_lcm(a, b)
    
    for k in range(1, diff+1):
        lcm = find_lcm(a + k, b + k)
        if lcm < min_lcm:
            min_lcm = lcm
            best_k = k
    
    print(best_k)

solve()
","
from math import gcd

def solve():
    a, b = map(int, input().split())
    lcm_ab = (a * b) // gcd(a, b)
    min_lcm_diff = float('inf')
    ans = 0

    for k in range(a + b, a + b + max(a, b)):
        lcm = (a + k) * (b + k) // gcd(a + k, b + k)
        if lcm < lcm_ab:
            lcm_ab = lcm
            min_lcm_diff = abs(a - b)
            ans = k
        elif lcm == lcm_ab:
            if abs(a - b) < min_lcm_diff:
                min_lcm_diff = abs(a - b)
                ans = k
                
    print(ans)

solve()
","
import math

def solve():
    a, b = map(int, input().split())
    diff = b - a
    gcd_value = math.gcd(a, b)
    if diff == 0:
        return 0
    for i in range(1, int(diff ** 0.5) + 1):
        if diff % i == 0:
            if (i + a) % gcd_value == 0:
                return i
            elif (diff // i + a) % gcd_value == 0:
                return diff // i
    return diff

print(solve())

solve()","0.0","100.0","25.0","0.0","","","",""
"APPS/82","
QUESTION:
Noora is a student of one famous high school. It's her final year in school — she is going to study in university next year. However, she has to get an «A» graduation certificate in order to apply to a prestigious one.

In school, where Noora is studying, teachers are putting down marks to the online class register, which are integers from 1 to k. The worst mark is 1, the best is k. Mark that is going to the certificate, is calculated as an average of all the marks, rounded to the closest integer. If several answers are possible, rounding up is produced. For example, 7.3 is rounded to 7, but 7.5 and 7.8784 — to 8. 

For instance, if Noora has marks [8, 9], then the mark to the certificate is 9, because the average is equal to 8.5 and rounded to 9, but if the marks are [8, 8, 9], Noora will have graduation certificate with 8.

To graduate with «A» certificate, Noora has to have mark k.

Noora got n marks in register this year. However, she is afraid that her marks are not enough to get final mark k. Noora decided to ask for help in the internet, where hacker Leha immediately responded to her request. He is ready to hack class register for Noora and to add Noora any number of additional marks from 1 to k. At the same time, Leha want his hack be unseen to everyone, so he decided to add as less as possible additional marks. Please help Leha to calculate the minimal number of marks he has to add, so that final Noora's mark will become equal to k.


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 100, 1 ≤ k ≤ 100) denoting the number of marks, received by Noora and the value of highest possible mark.

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ k) denoting marks received by Noora before Leha's hack.


-----Output-----

Print a single integer — minimal number of additional marks, that Leha has to add in order to change Noora's final mark to k.


-----Examples-----
Input
2 10
8 9

Output
4
Input
3 5
4 4 4

Output
3


-----Note-----

Consider the first example testcase.

Maximal mark is 10, Noora received two marks — 8 and 9, so current final mark is 9. To fix it, Leha can add marks [10, 10, 10, 10] (4 marks in total) to the registry, achieving Noora having average mark equal to $\frac{8 + 9 + 10 + 10 + 10 + 10}{6} = \frac{57}{6} = 9.5$. Consequently, new final mark is 10. Less number of marks won't fix the situation.

In the second example Leha can add [5, 5, 5] to the registry, so that making average mark equal to 4.5, which is enough to have 5 in the certificate.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    marks = list(map(int, input().split()))
    
    current_sum = sum(marks)
    target_sum = k * (n + 1)
    
    additional_marks = max(0, target_sum - current_sum)
    
    print(additional_marks)

solve()
","
from math import ceil

def solve():
    n, k = map(int, input().split())
    marks = list(map(int, input().split()))

    current_sum = sum(marks)
    target_sum = k * (n + 1)
    
    additional_marks = ceil((target_sum - current_sum) / k)
    
    print(additional_marks)

solve()
","
def solve():
    n, k = map(int, input().split())
    marks = list(map(int, input().split()))
    
    current_average = sum(marks) / n
    if current_average >= k:
        print(0)
    else:
        additional_marks_needed = int(((n + 1) * k) - sum(marks))
        print(additional_marks_needed)

solve()
","
def solve():
    n, k = map(int, input().split())
    marks = list(map(int, input().split()))

    current_total = sum(marks)
    target_total = k * (n + 1)
    additional_marks = max(0, target_total - current_total)

    print(additional_marks)

solve()
","0.0","6.666666666666667","0.0","0.0","","","",""
"APPS/83","
QUESTION:
You are given an array of $n$ integers: $a_1, a_2, \ldots, a_n$. Your task is to find some non-zero integer $d$ ($-10^3 \leq d \leq 10^3$) such that, after each number in the array is divided by $d$, the number of positive numbers that are presented in the array is greater than or equal to half of the array size (i.e., at least $\lceil\frac{n}{2}\rceil$). Note that those positive numbers do not need to be an integer (e.g., a $2.5$ counts as a positive number). If there are multiple values of $d$ that satisfy the condition, you may print any of them. In case that there is no such $d$, print a single integer $0$.

Recall that $\lceil x \rceil$ represents the smallest integer that is not less than $x$ and that zero ($0$) is neither positive nor negative.


-----Input-----

The first line contains one integer $n$ ($1 \le n \le 100$) — the number of elements in the array.

The second line contains $n$ space-separated integers $a_1, a_2, \ldots, a_n$ ($-10^3 \le a_i \le 10^3$).


-----Output-----

Print one integer $d$ ($-10^3 \leq d \leq 10^3$ and $d \neq 0$) that satisfies the given condition. If there are multiple values of $d$ that satisfy the condition, you may print any of them. In case that there is no such $d$, print a single integer $0$.


-----Examples-----
Input
5
10 0 -7 2 6
Output
4
Input
7
0 0 1 -1 0 0 2

Output
0


-----Note-----

In the first sample, $n = 5$, so we need at least $\lceil\frac{5}{2}\rceil = 3$ positive numbers after division. If $d = 4$, the array after division is $[2.5, 0, -1.75, 0.5, 1.5]$, in which there are $3$ positive numbers (namely: $2.5$, $0.5$, and $1.5$).

In the second sample, there is no valid $d$, so $0$ should be printed.
Use user-input-Based format and function signature solve()","
def solve():
    import math

    n = int(input())
    arr = list(map(int, input().split()))

    pos_count = sum(1 for num in arr if num > 0)
    neg_count = sum(1 for num in arr if num < 0)

    if pos_count >= math.ceil(n / 2):
        print(1)
    elif neg_count >= math.ceil(n / 2):
        print(-1)
    else:
        print(0)

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    positives = len([num for num in a if num > 0])
    
    if positives >= (n + 1) // 2:
        for d in range(1, 1001):
            if all((num % d == 0 or num == 0) for num in a):
                print(d)
                return
    print(0)

solve()","
def solve():
    import math
    
    n = int(input())
    arr = list(map(int, input().split()))
    
    pos_count = sum(1 for num in arr if num > 0)
    
    if pos_count >= math.ceil(n/2):
        for d in range(-1000, 1001):
            if d != 0:
                new_arr = [num / d for num in arr]
                new_pos_count = sum(1 for num in new_arr if num > 0)
                if new_pos_count >= math.ceil(n/2):
                    print(d)
                    return
    
    print(0)
  
solve()","
def solve():
    n = int(input())
    arr = list(map(int, input().split()))

    pos_count = sum(1 for num in arr if num > 0)
    
    if pos_count >= (n + 1) // 2:
        for d in range(1, 1001):
            valid = all(num % d == 0 or num == 0 for num in arr)
            if valid:
                print(d)
                return

    print(0)

solve()
  ","100.0","66.66666666666666","60.0","66.66666666666666","","","",""
"APPS/84","
QUESTION:
There are n shovels in Polycarp's shop. The i-th shovel costs i burles, that is, the first shovel costs 1 burle, the second shovel costs 2 burles, the third shovel costs 3 burles, and so on. Polycarps wants to sell shovels in pairs.

Visitors are more likely to buy a pair of shovels if their total cost ends with several 9s. Because of this, Polycarp wants to choose a pair of shovels to sell in such a way that the sum of their costs ends with maximum possible number of nines. For example, if he chooses shovels with costs 12345 and 37454, their total cost is 49799, it ends with two nines.

You are to compute the number of pairs of shovels such that their total cost ends with maximum possible number of nines. Two pairs are considered different if there is a shovel presented in one pair, but not in the other.


-----Input-----

The first line contains a single integer n (2 ≤ n ≤ 10^9) — the number of shovels in Polycarp's shop.


-----Output-----

Print the number of pairs of shovels such that their total cost ends with maximum possible number of nines. 

Note that it is possible that the largest number of 9s at the end is 0, then you should count all such ways.

It is guaranteed that for every n ≤ 10^9 the answer doesn't exceed 2·10^9.


-----Examples-----
Input
7

Output
3

Input
14

Output
9

Input
50

Output
1



-----Note-----

In the first example the maximum possible number of nines at the end is one. Polycarp cah choose the following pairs of shovels for that purpose:  2 and 7;  3 and 6;  4 and 5. 

In the second example the maximum number of nines at the end of total cost of two shovels is one. The following pairs of shovels suit Polycarp:  1 and 8;  2 and 7;  3 and 6;  4 and 5;  5 and 14;  6 and 13;  7 and 12;  8 and 11;  9 and 10. 

In the third example it is necessary to choose shovels 49 and 50, because the sum of their cost is 99, that means that the total number of nines is equal to two, which is maximum possible for n = 50.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    if n % 2 == 0:
        print((n - 2) // 2)
    else:
        print((n - 1) // 2)

solve()","
def solve():
    n = int(input())
    nines = 0
    for i in range(1, n):
        if (i + n) % 10 == 9:
            nines += 1
    print(nines)

solve()
","
def solve():
    n = int(input())
    
    max_nines = 0
    pairs_count = 0
    for i in range(1, n//2 + 1):
        cost_sum = i + n - i
        nines_count = len(str(cost_sum)) - len(str(cost_sum).rstrip('9'))
        if nines_count > max_nines:
            max_nines = nines_count
            pairs_count = 1
        elif nines_count == max_nines:
            pairs_count += 1
            
    print(pairs_count)

solve()","
def solve():
    n = int(input())
    count = 0
    for i in range(1, n//2 + 1):
        num_nines = 0
        total_cost = i + (n-i)
        while total_cost % 10 == 9:
            num_nines += 1
            total_cost //= 10
        count = max(count, num_nines)
    if count == 0:
        print(n//2)
    else:
        pairs_count = sum(1 for i in range(1, n//2 + 1) if (i + (n-i)) % 10 == 9 and len(str(i + (n-i))) == count)
        print(pairs_count)

solve()
","26.666666666666668","0.0","28.57142857142857","28.57142857142857","","","",""
"APPS/85","
QUESTION:
Polycarpus likes giving presents to Paraskevi. He has bought two chocolate bars, each of them has the shape of a segmented rectangle. The first bar is a_1 × b_1 segments large and the second one is a_2 × b_2 segments large.

Polycarpus wants to give Paraskevi one of the bars at the lunch break and eat the other one himself. Besides, he wants to show that Polycarpus's mind and Paraskevi's beauty are equally matched, so the two bars must have the same number of squares.

To make the bars have the same number of squares, Polycarpus eats a little piece of chocolate each minute. Each minute he does the following:  he either breaks one bar exactly in half (vertically or horizontally) and eats exactly a half of the bar,  or he chips of exactly one third of a bar (vertically or horizontally) and eats exactly a third of the bar. 

In the first case he is left with a half, of the bar and in the second case he is left with two thirds of the bar.

Both variants aren't always possible, and sometimes Polycarpus cannot chip off a half nor a third. For example, if the bar is 16 × 23, then Polycarpus can chip off a half, but not a third. If the bar is 20 × 18, then Polycarpus can chip off both a half and a third. If the bar is 5 × 7, then Polycarpus cannot chip off a half nor a third.

What is the minimum number of minutes Polycarpus needs to make two bars consist of the same number of squares? Find not only the required minimum number of minutes, but also the possible sizes of the bars after the process.


-----Input-----

The first line of the input contains integers a_1, b_1 (1 ≤ a_1, b_1 ≤ 10^9) — the initial sizes of the first chocolate bar. The second line of the input contains integers a_2, b_2 (1 ≤ a_2, b_2 ≤ 10^9) — the initial sizes of the second bar.

You can use the data of type int64 (in Pascal), long long (in С++), long (in Java) to process large integers (exceeding 2^31 - 1).


-----Output-----

In the first line print m — the sought minimum number of minutes. In the second and third line print the possible sizes of the bars after they are leveled in m minutes. Print the sizes using the format identical to the input format. Print the sizes (the numbers in the printed pairs) in any order. The second line must correspond to the first bar and the third line must correspond to the second bar. If there are multiple solutions, print any of them.

If there is no solution, print a single line with integer -1.


-----Examples-----
Input
2 6
2 3

Output
1
1 6
2 3

Input
36 5
10 16

Output
3
16 5
5 16

Input
3 5
2 1

Output
-1
Use user-input-Based format and function signature solve()","
def solve():
    import math

    a1, b1 = map(int, input().split())
    a2, b2 = map(int, input().split())

    total_squares_1 = a1 * b1
    total_squares_2 = a2 * b2

    if total_squares_1 == total_squares_2:
        print(0)
        print(f""{a1} {b1}"")
        print(f""{a2} {b2}"")
    elif total_squares_1 * 2 == total_squares_2 or total_squares_1 == total_squares_2 * 2:
        print(1)
        if total_squares_1 * 2 == total_squares_2:
            print(f""{a1} {b1}"")
            print(f""{a2} {2*b2}"")
        else:
            print(f""{a1} {2*b1}"")
            print(f""{a2} {b2}"")
    elif total_squares_1 * 3 == total_squares_2 or total_squares_1 == total_squares_2 * 3:
        print(1)
        if total_squares_1 * 3 == total_squares_2:
            print(f""{a1} {b1}"")
            print(f""{a2} {3*b2}"")
        else:
            print(f""{a1} {3*b1}"")
            print(f""{a2} {b2}"")
    elif total_squares_1 % 2 == 0 and total_squares_2 % 2 == 0:
        gcd = math.gcd(total_squares_1, total_squares_2)
        if gcd == total_squares_1 or gcd == total_squares_2:
            print(2)
            print(f""{a1} {b1}"")
            print(f""{a2} {b2}"")
        else:
            print(-1)
    else:
        print(-1)

solve()
","
def solve():
    from math import gcd

    a1, b1 = map(int, input().split())
    a2, b2 = map(int, input().split())

    total_squares_first = a1 * b1
    total_squares_second = a2 * b2

    lcm = abs(total_squares_first * total_squares_second) // gcd(total_squares_first, total_squares_second)

    div1 = lcm // total_squares_first
    div2 = lcm // total_squares_second

    res = 0
    while a1 * b1 != lcm and (a1 % 2 == 0 or b1 % 2 == 0) and a1 % 3 == 0 and b1 % 3 == 0:
        if a1 % 2 == 0 and b1 % 2 == 0:
            a1 //= 2
            b1 //= 2
            res += 1
        else:
            if a1 % 3 == 0:
                a1 = (2 * a1) // 3
                res += 1
            elif b1 % 3 == 0:
                b1 = (2 * b1) // 3
                res += 1

    if a1 * b1 != lcm:
        res1 = -1
    else:
        res1 = res

    res = 0
    while a2 * b2 != lcm and (a2 % 2 == 0 or b2 % 2 == 0) and a2 % 3 == 0 and b2 % 3 == 0:
        if a2 % 2 == 0 and b2 % 2 == 0:
            a2 //= 2
            b2 //= 2
            res += 1
        else:
            if a2 % 3 == 0:
                a2 = (2 * a2) // 3
                res += 1
            elif b2 % 3 == 0:
                b2 = (2 * b2) // 3
                res += 1

    if a2 * b2 != lcm:
        res2 = -1
    else:
        res2 = res

    if res1 == -1 and res2 == -1:
        print(-1)
    else:
        if res1 == -1:
            print(res2)
            print(f""{a2} {b2}"")
            print(f""{a1} {b1}"")
        elif res2 == -1:
            print(res1)
            print(f""{a1} {b1}"")
            print(f""{a2} {b2}"")
        else:
            if res1 <= res2:
                print(res1)
                print(f""{a1} {b1}"")
                print(f""{a2} {b2}"")
            else:
                print(res2)
                print(f""{a2} {b2}"")
                print(f""{a1} {b1}"")

solve()
","
def solve():
    import math

    a1, b1 = map(int, input().split())
    a2, b2 = map(int, input().split())
    
    total_squares1 = a1 * b1
    total_squares2 = a2 * b2
    
    if total_squares1 == total_squares2:
        print(0)
        print(f""{a1} {b1}"")
        print(f""{a2} {b2}"")
        
    elif (a1 == a2 and b1 / b2 == 2) or (b1 == b2 and a1 / a2 == 2):
        print(1)
        if a1 == a2:
            print(f""{a1} {a2+b2}"")
            print(f""{a2} {b2}"")
        elif b1 == b2:
            print(f""{a1+b1} {b1}"")
            print(f""{a2} {b2}"")
            
    elif (a1 % a2 == 0 and b1 == b2) or (a1 == a2 and b1 % b2 == 0):
        div1 = a1 // a2 if a1 % a2 == 0 else b1 // b2
        min_div = min(div1, total_squares1 // total_squares2)
        a1 //= min_div
        b1 //= min_div
        print(int(math.log2(total_squares1) - math.log2(total_squares2)))
        print(f""{a1} {b1}"")
        print(f""{a2} {b2}"")
        
    elif (a1 % b2 == 0 and b1 == a2) or (a1 == b2 and b1 % a2 == 0):
        div2 = a1 // b2 if a1 % b2 == 0 else b1 // a2
        min_div = min(div2, total_squares1 // total_squares2)
        a1 //= min_div
        b1 //= min_div
        print(int(math.log2(total_squares1) - math.log2(total_squares2)))
        print(f""{a1} {b1}"")
        print(f""{a2} {b2}"")
        
    else:
        print(-1)

solve()
","
python
from math import gcd

def solve():
    a1, b1 = map(int, input().split())
    a2, b2 = map(int, input().split())
    
    total_squares_1 = a1 * b1
    total_squares_2 = a2 * b2

    gcd_squares = gcd(total_squares_1, total_squares_2)

    if total_squares_1 != total_squares_2 and total_squares_1 // gcd_squares != a1 and total_squares_1 // gcd_squares != b1:
        print(-1)
    else:
        m = abs(a1 - a2) + abs(b1 - b2)
        print(m)
        print(a2, b2)
        print(a2, b2)

solve()
","20.0","20.0","20.0","0.0","","","",""
"APPS/86","
QUESTION:
Polycarp and Vasiliy love simple logical games. Today they play a game with infinite chessboard and one pawn for each player. Polycarp and Vasiliy move in turns, Polycarp starts. In each turn Polycarp can move his pawn from cell (x, y) to (x - 1, y) or (x, y - 1). Vasiliy can move his pawn from (x, y) to one of cells: (x - 1, y), (x - 1, y - 1) and (x, y - 1). Both players are also allowed to skip move. 

There are some additional restrictions — a player is forbidden to move his pawn to a cell with negative x-coordinate or y-coordinate or to the cell containing opponent's pawn The winner is the first person to reach cell (0, 0). 

You are given the starting coordinates of both pawns. Determine who will win if both of them play optimally well.


-----Input-----

The first line contains four integers: x_{p}, y_{p}, x_{v}, y_{v} (0 ≤ x_{p}, y_{p}, x_{v}, y_{v} ≤ 10^5) — Polycarp's and Vasiliy's starting coordinates.

It is guaranteed that in the beginning the pawns are in different cells and none of them is in the cell (0, 0).


-----Output-----

Output the name of the winner: ""Polycarp"" or ""Vasiliy"".


-----Examples-----
Input
2 1 2 2

Output
Polycarp

Input
4 7 7 4

Output
Vasiliy



-----Note-----

In the first sample test Polycarp starts in (2, 1) and will move to (1, 1) in the first turn. No matter what his opponent is doing, in the second turn Polycarp can move to (1, 0) and finally to (0, 0) in the third turn.
Use user-input-Based format and function signature solve()","
def solve():
    xp, yp, xv, yv = map(int, input().split())
    
    if xp + yp <= min(xv, yv) * 2:
        print(""Polycarp"")
    else:
        print(""Vasiliy"")

solve()","
def solve():
    xp, yp, xv, yv = map(int, input().split())
    
    polycarp_turns_to_zero = min(xp, yp) + (max(xp, yp) - min(xp, yp))
    vasiliy_turns_to_zero = min(xv, yv) + (max(xv, yv) - min(xv, yv))
    
    if polycarp_turns_to_zero <= vasiliy_turns_to_zero:
        print(""Polycarp"")
    else:
        print(""Vasiliy"")

solve()","
def solve():
    xp, yp, xv, yv = map(int, input().split())
    
    polycarp_turns = xp - 1 + yp - 1  # Polycarp's optimal number of turns to reach (0, 0)
    vasiliy_turns = max(xv + yv, xv + 1, yv + 1)  # Vasiliy's optimal number of turns to reach (0, 0)
    
    if polycarp_turns <= vasiliy_turns:
        print(""Polycarp"")
    else:
        print(""Vasiliy"")

solve()","
def solve():
    xp, yp, xv, yv = map(int, input().split())
    
    px_moves = xp + yp
    pv_moves = max(xv, yv)
    
    if px_moves % 2 == pv_moves % 2:
        print(""Polycarp"")
    else:
        print(""Vasiliy"")

solve()","66.66666666666666","80.0","66.66666666666666","60.0","","","",""
"APPS/87","
QUESTION:
Petr wants to make a calendar for current month. For this purpose he draws a table in which columns correspond to weeks (a week is seven consequent days from Monday to Sunday), rows correspond to weekdays, and cells contain dates. For example, a calendar for January 2017 should look like on the picture: $\left. \begin{array}{|r|r|r|r|r|r|} \hline & {2} & {9} & {16} & {23} & {30} \\ \hline & {3} & {10} & {17} & {24} & {31} \\ \hline & {4} & {11} & {18} & {25} & {} \\ \hline & {5} & {12} & {19} & {26} & {} \\ \hline & {6} & {13} & {20} & {27} & {} \\ \hline & {7} & {14} & {21} & {28} & {} \\ \hline 1 & {8} & {15} & {22} & {29} & {} \\ \hline \end{array} \right.$ 

Petr wants to know how many columns his table should have given the month and the weekday of the first date of that month? Assume that the year is non-leap.


-----Input-----

The only line contain two integers m and d (1 ≤ m ≤ 12, 1 ≤ d ≤ 7) — the number of month (January is the first month, December is the twelfth) and the weekday of the first date of this month (1 is Monday, 7 is Sunday).


-----Output-----

Print single integer: the number of columns the table should have.


-----Examples-----
Input
1 7

Output
6

Input
1 1

Output
5

Input
11 6

Output
5



-----Note-----

The first example corresponds to the January 2017 shown on the picture in the statements.

In the second example 1-st January is Monday, so the whole month fits into 5 columns.

In the third example 1-st November is Saturday and 5 columns is enough.
Use user-input-Based format and function signature solve()","
def solve():
    m, d = map(int, input().split())
    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    columns = (days_in_month[m-1] + d - 1 + 6) // 7
    print(columns)

solve()
","
def solve():
    m, d = map(int, input().split())
    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    return (days_in_month[m-1] + d - 1) // 7 + 1

solve()","
def solve():
    m, d = map(int, input().split())
    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    return (days_in_month[m-1] + d + 5) // 7

solve()
","
def solve():
    m, d = map(int, input().split())
    months = {
        1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30,
        7: 31, 8: 31 ,9: 30, 10: 31, 11: 30, 12: 31
    }
    days = (months[m] + d - 1) // 7
    print(days)

solve()","100.0","0.0","0.0","26.666666666666668","","","",""
"APPS/88","
QUESTION:
The year 2015 is almost over.

Limak is a little polar bear. He has recently learnt about the binary system. He noticed that the passing year has exactly one zero in its representation in the binary system — 2015_10 = 11111011111_2. Note that he doesn't care about the number of zeros in the decimal representation.

Limak chose some interval of years. He is going to count all years from this interval that have exactly one zero in the binary representation. Can you do it faster?

Assume that all positive integers are always written without leading zeros.


-----Input-----

The only line of the input contains two integers a and b (1 ≤ a ≤ b ≤ 10^18) — the first year and the last year in Limak's interval respectively.


-----Output-----

Print one integer – the number of years Limak will count in his chosen interval.


-----Examples-----
Input
5 10

Output
2

Input
2015 2015

Output
1

Input
100 105

Output
0

Input
72057594000000000 72057595000000000

Output
26



-----Note-----

In the first sample Limak's interval contains numbers 5_10 = 101_2, 6_10 = 110_2, 7_10 = 111_2, 8_10 = 1000_2, 9_10 = 1001_2 and 10_10 = 1010_2. Two of them (101_2 and 110_2) have the described property.
Use user-input-Based format and function signature solve()","
def solve():
    a, b = map(int, input().split())
    
    def count_zeros(n):
        return bin(n).count('0') == 1
    
    count = 0
    for i in range(a, b+1):
        if count_zeros(i):
            count += 1
    
    print(count)

solve()
","
def solve():
    a, b = map(int, input().split())
    
    def count_one_zero(num):
        binary_num = bin(num)[2:]
        return binary_num.count('0') == 1
    
    count = 0
    for i in range(a, b+1):
        if count_one_zero(i):
            count += 1
    
    print(count)

solve()","
def solve():
    a, b = map(int, input().split())
    
    def count_zeros(num):
        binary_num = bin(num)[2:]
        return binary_num.count('0') == 1
        
    count = 0
    for num in range(a, b+1):
        if count_zeros(num):
            count += 1
            
    print(count)

solve()
","
def solve():
    a, b = map(int, input().split())
    count = 0
    for i in range(a, b+1):
        if bin(i).count('0') == 1:
            count += 1
    print(count)

solve()
","38.46153846153847","100.0","100.0","38.46153846153847","","","",""
"APPS/89","
QUESTION:
You are given an integer N. Consider all possible segments on the coordinate axis with endpoints at integer points with coordinates between 0 and N, inclusive; there will be $\frac{n(n + 1)}{2}$ of them.

You want to draw these segments in several layers so that in each layer the segments don't overlap (they might touch at the endpoints though). You can not move the segments to a different location on the coordinate axis. 

Find the minimal number of layers you have to use for the given N.


-----Input-----

The only input line contains a single integer N (1 ≤ N ≤ 100).


-----Output-----

Output a single integer - the minimal number of layers required to draw the segments for the given N.


-----Examples-----
Input
2

Output
2

Input
3

Output
4

Input
4

Output
6



-----Note-----

As an example, here are the segments and their optimal arrangement into layers for N = 4. [Image]
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    layers = n * (n + 1) // 2
    print(layers)

solve()
","
def solve():
    N = int(input())
    layers = N*(N+1)//2
    result = (layers + 1) // 2
    print(result)

solve()
","
def solve():
    n = int(input())
    layers = n * (n + 1) // 2
    print(layers)

solve()
","
def solve():
    n = int(input())
    layers = (n * (n + 1)) // 2
    result = (layers // 2) + (layers % 2)
    print(result)

solve()
","6.666666666666667","13.333333333333334","6.666666666666667","13.333333333333334","","","",""
"APPS/90","
QUESTION:
Anya loves to fold and stick. Today she decided to do just that.

Anya has n cubes lying in a line and numbered from 1 to n from left to right, with natural numbers written on them. She also has k stickers with exclamation marks. We know that the number of stickers does not exceed the number of cubes.

Anya can stick an exclamation mark on the cube and get the factorial of the number written on the cube. For example, if a cube reads 5, then after the sticking it reads 5!, which equals 120.

You need to help Anya count how many ways there are to choose some of the cubes and stick on some of the chosen cubes at most k exclamation marks so that the sum of the numbers written on the chosen cubes after the sticking becomes equal to S. Anya can stick at most one exclamation mark on each cube. Can you do it?

Two ways are considered the same if they have the same set of chosen cubes and the same set of cubes with exclamation marks.


-----Input-----

The first line of the input contains three space-separated integers n, k and S (1 ≤ n ≤ 25, 0 ≤ k ≤ n, 1 ≤ S ≤ 10^16) — the number of cubes and the number of stickers that Anya has, and the sum that she needs to get. 

The second line contains n positive integers a_{i} (1 ≤ a_{i} ≤ 10^9) — the numbers, written on the cubes. The cubes in the input are described in the order from left to right, starting from the first one. 

Multiple cubes can contain the same numbers.


-----Output-----

Output the number of ways to choose some number of cubes and stick exclamation marks on some of them so that the sum of the numbers became equal to the given number S.


-----Examples-----
Input
2 2 30
4 3

Output
1

Input
2 2 7
4 3

Output
1

Input
3 1 1
1 1 1

Output
6



-----Note-----

In the first sample the only way is to choose both cubes and stick an exclamation mark on each of them.

In the second sample the only way is to choose both cubes but don't stick an exclamation mark on any of them.

In the third sample it is possible to choose any of the cubes in three ways, and also we may choose to stick or not to stick the exclamation mark on it. So, the total number of ways is six.
Use user-input-Based format and function signature solve()","
def solve():
    n, k, S = map(int, input().split())
    a = list(map(int, input().split()))
    
    def factorial(num):
        if num == 0:
            return 1
        else:
            return num * factorial(num - 1)
    
    def count_ways(index, sum_so_far, stickers_left):
        if index == n:
            if sum_so_far == S:
                return 1
            else:
                return 0
        ways = count_ways(index + 1, sum_so_far, stickers_left)
        if stickers_left > 0:
            ways += count_ways(index + 1, sum_so_far + factorial(a[index]), stickers_left - 1)
        return ways
    
    return count_ways(0, 0, k)

solve()
","
def solve():
    n, k, S = map(int, input().split())
    a = list(map(int, input().split()))
    
    def get_ways(idx, taken, sum_so_far):
        if idx == n:
            if sum_so_far == S:
                return 1
            else:
                return 0
                
        ways = 0
        ways += get_ways(idx + 1, taken | {idx}, sum_so_far + a[idx])
        if len(taken) < k:
            ways += get_ways(idx + 1, taken, sum_so_far)
        
        return ways
        
    return get_ways(0, set(), 0)

solve()
","
from math import factorial

def solve():
    n, k, S = map(int, input().split())
    cubes = list(map(int, input().split()))
    
    def count_ways(curr_sum, curr_stickers, idx):
        if idx == n:
            if curr_sum == S and curr_stickers <= k:
                return 1
            else:
                return 0
        stick = count_ways(curr_sum + factorial(cubes[idx]), curr_stickers + 1, idx + 1)
        skip = count_ways(curr_sum + cubes[idx], curr_stickers, idx + 1)
        return stick + skip

    ways = count_ways(0, 0, 0)
    print(ways)

solve()
","
def solve():
    n, k, S = map(int, input().split())
    cubes = list(map(int, input().split()))
    
    def count_ways(curr_sum, idx, curr_stickers):
        if idx == n:
            if curr_sum == S and curr_stickers <= k:
                return 1
            else:
                return 0
        ways = 0
        ways += count_ways(curr_sum, idx + 1, curr_stickers)
        ways += count_ways(curr_sum + cubes[idx], idx + 1, curr_stickers + 1)
        return ways
    
    return count_ways(0, 0, 0)

solve()
","0.0","0.0","54.54545454545454","0.0","","","",""
"APPS/91","
QUESTION:
Suppose you are performing the following algorithm. There is an array $v_1, v_2, \dots, v_n$ filled with zeroes at start. The following operation is applied to the array several times — at $i$-th step ($0$-indexed) you can:   either choose position $pos$ ($1 \le pos \le n$) and increase $v_{pos}$ by $k^i$;  or not choose any position and skip this step. 

You can choose how the algorithm would behave on each step and when to stop it. The question is: can you make array $v$ equal to the given array $a$ ($v_j = a_j$ for each $j$) after some step?


-----Input-----

The first line contains one integer $T$ ($1 \le T \le 1000$) — the number of test cases. Next $2T$ lines contain test cases — two lines per test case.

The first line of each test case contains two integers $n$ and $k$ ($1 \le n \le 30$, $2 \le k \le 100$) — the size of arrays $v$ and $a$ and value $k$ used in the algorithm.

The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($0 \le a_i \le 10^{16}$) — the array you'd like to achieve.


-----Output-----

For each test case print YES (case insensitive) if you can achieve the array $a$ after some step or NO (case insensitive) otherwise.


-----Example-----
Input
5
4 100
0 0 0 0
1 2
1
3 4
1 4 1
3 2
0 1 3
3 9
0 59049 810

Output
YES
YES
NO
NO
YES



-----Note-----

In the first test case, you can stop the algorithm before the $0$-th step, or don't choose any position several times and stop the algorithm.

In the second test case, you can add $k^0$ to $v_1$ and stop the algorithm.

In the third test case, you can't make two $1$ in the array $v$.

In the fifth test case, you can skip $9^0$ and $9^1$, then add $9^2$ and $9^3$ to $v_3$, skip $9^4$ and finally, add $9^5$ to $v_2$.
Use user-input-Based format and function signature solve()","
def solve():
    T = int(input())
    for _ in range(T):
        n, k = map(int, input().split())
        a = list(map(int, input().split()))
        
        possible = False
        for i in range(1 << n):
            v = [0] * n
            for j in range(n):
                if i & (1 << j):
                    v[j] = sum(k ** (i - 1) for i in range(j + 1))
            if v == a:
                possible = True
                break
        
        if possible:
            print(""YES"")
        else:
            print(""NO"")

solve()
","
def solve():
    def check_if_possible(n, k, a):
        sum_a = sum(a)
        bits = [0] * n
        for i in range(n):
            bits[i] = min(a[i], k)
            sum_a -= bits[i]
        if sum_a % k != 0:
            return ""NO""

        sum_a //= k
        for i in range(n - 1):
            if bits[i] + k <= a[i + 1]:
                return ""NO""
            bits[i] = a[i] - bits[i]
            bits[i + 1] = a[i + 1] - sum_a

        if sum_a == a[-1] and all(bit % k == 0 for bit in bits):
            return ""YES""
        return ""NO""

    t = int(input())
    for _ in range(t):
        n, k = map(int, input().split())
        a = list(map(int, input().split()))
        print(check_if_possible(n, k, a))


solve()
  ","
from typing import List

def solve() -> None:
    T = int(input())
    
    for _ in range(T):
        n, k = map(int, input().split())
        a = list(map(int, input().split()))

        max_steps = 30  # maximum number of steps to consider
        
        possible = False
        
        for step in range(max_steps):
            dp = [0] * n
            dp[0] = k ** step
            
            for i in range(1, n):
                dp[i] = dp[i-1]
            
            if dp == a:
                possible = True
                break
        
        if possible:
            print(""YES"")
        else:
            print(""NO"")

solve()","
def solve():
    t = int(input())
    for _ in range(t):
        n, k = map(int, input().split())
        a = list(map(int, input().split()))
        achieved = [0] * n
        
        for i in range(31):
            b = a.copy()
            for j in range(n):
                if achieved[j] < b[j]:
                    if (b[j] - achieved[j]) % k != 0:
                        break
                    diff = (b[j] - achieved[j]) // k
                    achieved[j] = b[j]
                    
                    for l in range(j+1, n):
                        achieved[l] += diff * (k ** (l-j))
            else:
                print(""YES"")
                break
        else:
            print(""NO"")

solve()
","78.57142857142857","80.0","93.33333333333333","53.333333333333336","","","",""
"APPS/92","
QUESTION:
Let's denote d(n) as the number of divisors of a positive integer n. You are given three integers a, b and c. Your task is to calculate the following sum:

$\sum_{i = 1}^{a} \sum_{j = 1}^{b} \sum_{k = 1}^{c} d(i \cdot j \cdot k)$

Find the sum modulo 1073741824 (2^30).


-----Input-----

The first line contains three space-separated integers a, b and c (1 ≤ a, b, c ≤ 100).


-----Output-----

Print a single integer — the required sum modulo 1073741824 (2^30).


-----Examples-----
Input
2 2 2

Output
20

Input
5 6 7

Output
1520



-----Note-----

For the first example.

  d(1·1·1) = d(1) = 1;  d(1·1·2) = d(2) = 2;  d(1·2·1) = d(2) = 2;  d(1·2·2) = d(4) = 3;  d(2·1·1) = d(2) = 2;  d(2·1·2) = d(4) = 3;  d(2·2·1) = d(4) = 3;  d(2·2·2) = d(8) = 4. 

So the result is 1 + 2 + 2 + 3 + 2 + 3 + 3 + 4 = 20.
Use user-input-Based format and function signature solve()","
from math import sqrt

def solve():
    a, b, c = map(int, input().split())
    
    def d(n):
        count = 0
        for i in range(1, int(sqrt(n)) + 1):
            if n % i == 0:
                count += 2 if n // i != i else 1
        return count
    
    result = 0
    for i in range(1, a + 1):
        for j in range(1, b + 1):
            for k in range(1, c + 1):
                result += d(i * j * k)
    
    print(result % 1073741824)

solve()
","
from sympy import divisors

def solve():
    a, b, c = map(int, input().split())
    
    mod = 1073741824
    result = 0
    
    for i in range(1, a+1):
        for j in range(1, b+1):
            for k in range(1, c+1):
                result += len(divisors(i*j*k)) % mod
    
    print(result % mod)

solve()
","
import math

def solve():
    a, b, c = map(int, input().split())

    def d(n):
        count = 0
        for i in range(1, int(math.sqrt(n)) + 1):
            if n % i == 0:
                count += 2 if i * i != n else 1
        return count

    result = 0
    modulo = 1073741824

    for i in range(1, a + 1):
        for j in range(1, b + 1):
            for k in range(1, c + 1):
                result = (result + d(i * j * k)) % modulo

    print(result)

solve()
","
def solve():
    a, b, c = map(int, input().split())
    
    def d(n):
        divisors = 0
        for i in range(1, int(n ** 0.5) + 1):
            if n % i == 0:
                divisors += 2 if n // i != i else 1
        return divisors
    
    result = 0
    for i in range(1, a + 1):
        for j in range(1, b + 1):
            for k in range(1, c + 1):
                result += d(i * j * k)
    
    print(result % 1073741824)

solve()
","100.0","0.0","100.0","100.0","","","",""
"APPS/93","
QUESTION:
Bessie the cow and her best friend Elsie each received a sliding puzzle on Pi Day. Their puzzles consist of a 2 × 2 grid and three tiles labeled 'A', 'B', and 'C'. The three tiles sit on top of the grid, leaving one grid cell empty. To make a move, Bessie or Elsie can slide a tile adjacent to the empty cell into the empty cell as shown below: $\rightarrow$ 

In order to determine if they are truly Best Friends For Life (BFFLs), Bessie and Elsie would like to know if there exists a sequence of moves that takes their puzzles to the same configuration (moves can be performed in both puzzles). Two puzzles are considered to be in the same configuration if each tile is on top of the same grid cell in both puzzles. Since the tiles are labeled with letters, rotations and reflections are not allowed.


-----Input-----

The first two lines of the input consist of a 2 × 2 grid describing the initial configuration of Bessie's puzzle. The next two lines contain a 2 × 2 grid describing the initial configuration of Elsie's puzzle. The positions of the tiles are labeled 'A', 'B', and 'C', while the empty cell is labeled 'X'. It's guaranteed that both puzzles contain exactly one tile with each letter and exactly one empty position.


-----Output-----

Output ""YES""(without quotes) if the puzzles can reach the same configuration (and Bessie and Elsie are truly BFFLs). Otherwise, print ""NO"" (without quotes).


-----Examples-----
Input
AB
XC
XB
AC

Output
YES

Input
AB
XC
AC
BX

Output
NO



-----Note-----

The solution to the first sample is described by the image. All Bessie needs to do is slide her 'A' tile down.

In the second sample, the two puzzles can never be in the same configuration. Perhaps Bessie and Elsie are not meant to be friends after all...
Use user-input-Based format and function signature solve()","
def solve():
    bessie_puzzle = [input() for _ in range(2)]
    elsie_puzzle = [input() for _ in range(2)]

    bessie_tiles = [tile for row in bessie_puzzle for tile in row]
    elsie_tiles = [tile for row in elsie_puzzle for tile in row]

    if sorted(bessie_tiles) == sorted(elsie_tiles):
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    grid_bessie = [input() for _ in range(2)]
    grid_elsie = [input() for _ in range(2)]
    
    bessie_tiles = set([grid_bessie[0][0], grid_bessie[0][1], grid_bessie[1][0]])
    elsie_tiles = set([grid_elsie[0][0], grid_elsie[0][1], grid_elsie[1][0]])
    
    for i in range(3):
        for j in range(3):
            if bessie_tiles == elsie_tiles:
                print(""YES"")
                return
            grid_bessie = [list(row) for row in grid_bessie]
            grid_bessie[0][0], grid_bessie[1][0] = grid_bessie[1][0], grid_bessie[0][0]
            grid_bessie = [''.join(row) for row in grid_bessie]
    
    print(""NO"")

solve()
","
def solve():
    bessie_grid = [input() for _ in range(2)]
    elsie_grid = [input() for _ in range(2)]

    def get_permutations(grid):
        permutations = []
        for _ in range(2):
            for _ in range(2):
                permutations.append([grid[i][j] for i in range(2) for j in range(2)])
                grid = [grid[1][0]+grid[0][0], grid[1][1]+grid[0][1]]
            grid = [grid[0][1]+grid[0][0], grid[1][1]+grid[1][0]]
        return permutations

    bessie_permutations = get_permutations(bessie_grid)
    elsie_permutations = get_permutations(elsie_grid)

    if any(bessie_permutation == elsie_permutation for bessie_permutation in bessie_permutations for elsie_permutation in elsie_permutations):
        print(""YES"")
    else:
        print(""NO"")

solve()","
def solve():
    bessie_puzzle = [input() for _ in range(2)]
    elsie_puzzle = [input() for _ in range(2)]
    
    bessie_puzzle_str = ''.join([''.join(row) for row in bessie_puzzle])
    elsie_puzzle_str = ''.join([''.join(row) for row in elsie_puzzle])
    
    if sorted(bessie_puzzle_str) == sorted(elsie_puzzle_str):
        print(""YES"")
    else:
        print(""NO"")

solve()
","46.666666666666664","53.333333333333336","46.666666666666664","46.666666666666664","","","",""
"APPS/94","
QUESTION:
Alexander is learning how to convert numbers from the decimal system to any other, however, he doesn't know English letters, so he writes any number only as a decimal number, it means that instead of the letter A he will write the number 10. Thus, by converting the number 475 from decimal to hexadecimal system, he gets 11311 (475 = 1·16^2 + 13·16^1 + 11·16^0). Alexander lived calmly until he tried to convert the number back to the decimal number system.

Alexander remembers that he worked with little numbers so he asks to find the minimum decimal number so that by converting it to the system with the base n he will get the number k.


-----Input-----

The first line contains the integer n (2 ≤ n ≤ 10^9). The second line contains the integer k (0 ≤ k < 10^60), it is guaranteed that the number k contains no more than 60 symbols. All digits in the second line are strictly less than n.

Alexander guarantees that the answer exists and does not exceed 10^18.

The number k doesn't contain leading zeros.


-----Output-----

Print the number x (0 ≤ x ≤ 10^18) — the answer to the problem.


-----Examples-----
Input
13
12

Output
12
Input
16
11311

Output
475
Input
20
999

Output
3789
Input
17
2016

Output
594


-----Note-----

In the first example 12 could be obtained by converting two numbers to the system with base 13: 12 = 12·13^0 or 15 = 1·13^1 + 2·13^0.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    k = input()
    
    x = 0
    for digit in k:
        x = x * n + int(digit)
    
    print(x)

solve()
","
def solve():
    n = int(input())
    k = input()

    x = 0
    for digit in k:
        x = x*n + int(digit)

    print(x)

if __name__ == ""__main__"":
    solve()
","
def solve():
    n = int(input())
    k = input()

    x = 0
    for digit in k:
        x = x * n + int(digit)
    
    print(x)

solve()
","
def solve():
    n = int(input())
    k = input().strip()
    
    x = 0
    for digit in k:
        x = x * n + int(digit)
    
    return x

solve()","40.0","40.0","40.0","0.0","","","",""
"APPS/95","
QUESTION:
Array of integers is unimodal, if:

  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. 

The first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.

For example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].

Write a program that checks if an array is unimodal.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 100) — the number of elements in the array.

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 1 000) — the elements of the array.


-----Output-----

Print ""YES"" if the given array is unimodal. Otherwise, print ""NO"".

You can output each letter in any case (upper or lower).


-----Examples-----
Input
6
1 5 5 5 4 2

Output
YES

Input
5
10 20 30 20 10

Output
YES

Input
4
1 2 1 2

Output
NO

Input
7
3 3 3 3 3 3 3

Output
YES



-----Note-----

In the first example the array is unimodal, because it is strictly increasing in the beginning (from position 1 to position 2, inclusively), that it is constant (from position 2 to position 4, inclusively) and then it is strictly decreasing (from position 4 to position 6, inclusively).
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    arr = list(map(int, input().split()))

    increasing = True
    constant = True
    decreasing = True

    for i in range(1, n):
        if arr[i] > arr[i-1]:
            constant = False
            decreasing = False
        elif arr[i] < arr[i-1]:
            increasing = False
            constant = False

    if increasing or constant or decreasing:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    arr = list(map(int, input().split()))

    increasing = True
    decreasing = False

    # Check for increasing part
    for i in range(1, n):
        if arr[i] <= arr[i-1]:
            increasing = False
            break

    # Check for constant part
    if increasing:
        for i in range(1, n):
            if arr[i] != arr[i-1]:
                break

    # Check for decreasing part
    if increasing:
        for i in range(1, n):
            if arr[i] >= arr[i-1]:
                decreasing = True
                break

    if increasing and not decreasing:
        print(""YES"")
    else:
        print(""NO"")
  
solve()","
def solve():
    n = int(input())
    arr = list(map(int, input().split()))
    
    increasing = True
    constant = False
    decreasing = False
    
    if arr[0] >= arr[1]:
        print(""NO"")
        return
    
    for i in range(1, n):
        if arr[i] > arr[i-1]:
            if constant:
                print(""NO"")
                return
        elif arr[i] == arr[i-1]:
            if increasing:
                increasing = False
                constant = True
            elif decreasing:
                print(""NO"")
                return
        else:
            if constant or increasing:
                constant = False
                decreasing = True
                
    print(""YES"")

solve()
  ","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    increasing = True
    decreasing = False

    for i in range(1, n):
        if a[i] < a[i-1]:
            decreasing = True
        elif a[i] == a[i-1]:
            if decreasing:
                print(""NO"")
                return

    print(""YES"")

solve()
","60.0","26.666666666666668","53.333333333333336","80.0","","","",""
"APPS/96","
QUESTION:
At first, let's define function $f(x)$ as follows: $$ \begin{matrix} f(x) & = & \left\{ \begin{matrix} \frac{x}{2} & \mbox{if } x \text{ is even} \\ x - 1 & \mbox{otherwise } \end{matrix} \right. \end{matrix} $$

We can see that if we choose some value $v$ and will apply function $f$ to it, then apply $f$ to $f(v)$, and so on, we'll eventually get $1$. Let's write down all values we get in this process in a list and denote this list as $path(v)$. For example, $path(1) = [1]$, $path(15) = [15, 14, 7, 6, 3, 2, 1]$, $path(32) = [32, 16, 8, 4, 2, 1]$.

Let's write all lists $path(x)$ for every $x$ from $1$ to $n$. The question is next: what is the maximum value $y$ such that $y$ is contained in at least $k$ different lists $path(x)$?

Formally speaking, you need to find maximum $y$ such that $\left| \{ x ~|~ 1 \le x \le n, y \in path(x) \} \right| \ge k$.


-----Input-----

The first line contains two integers $n$ and $k$ ($1 \le k \le n \le 10^{18}$).


-----Output-----

Print the only integer — the maximum value that is contained in at least $k$ paths.


-----Examples-----
Input
11 3

Output
5

Input
11 6

Output
4

Input
20 20

Output
1

Input
14 5

Output
6

Input
1000000 100

Output
31248



-----Note-----

In the first example, the answer is $5$, since $5$ occurs in $path(5)$, $path(10)$ and $path(11)$.

In the second example, the answer is $4$, since $4$ occurs in $path(4)$, $path(5)$, $path(8)$, $path(9)$, $path(10)$ and $path(11)$.

In the third example $n = k$, so the answer is $1$, since $1$ is the only number occuring in all paths for integers from $1$ to $20$.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    
    def f(x):
        if x % 2 == 0:
            return x // 2
        else:
            return x - 1
    
    def path(x):
        res = [x]
        while x != 1:
            x = f(x)
            res.append(x)
        return res
    
    count_dict = {}
    for i in range(1, n+1):
        p = path(i)
        for num in p:
            if num in count_dict:
                count_dict[num] += 1
            else:
                count_dict[num] = 1
    
    max_val = max([key for key, val in count_dict.items() if val >= k])
    
    print(max_val)

solve()
","
def solve():
    import math

    n, k = map(int, input().split())

    def f(x):
        if x % 2 == 0:
            return x // 2
        else:
            return x - 1

    def path(x):
        result = [x]
        while x != 1:
            x = f(x)
            result.append(x)
        return result

    occurrences = {}
    for x in range(1, n + 1):
        for num in path(x):
            occurrences[num] = occurrences.get(num, 0) + 1

    max_value = max(num for num, count in occurrences.items() if count >= k)

    print(max_value)

solve()
","
def solve():
    n, k = map(int, input().split())
    
    def f(x):
        return x // 2 if x % 2 == 0 else x - 1
    
    def path(x):
        result = [x]
        while x != 1:
            x = f(x)
            result.append(x)
        return result
    
    occurrences = {}
    for i in range(1, n + 1):
        for num in path(i):
            if num not in occurrences:
                occurrences[num] = set()
            occurrences[num].add(i)
    
    max_value = max([key for key, value in occurrences.items() if len(value) >= k])
    print(max_value)

solve()
","
def solve():
    n, k = map(int, input().split())

    def f(x):
        return x // 2 if x % 2 == 0 else x - 1

    def path(x):
        res = [x]
        while x != 1:
            x = f(x)
            res.append(x)
        return res

    freq = {}
    for i in range(1, n + 1):
        for num in path(i):
            freq[num] = freq.get(num, 0) + 1

    max_val = max(num for num, count in freq.items() if count >= k)
    print(max_val)

solve()
 ","100.0","100.0","100.0","100.0","","","",""
"APPS/97","
QUESTION:
Consider a billiard table of rectangular size $n \times m$ with four pockets. Let's introduce a coordinate system with the origin at the lower left corner (see the picture).  [Image] 

There is one ball at the point $(x, y)$ currently. Max comes to the table and strikes the ball. The ball starts moving along a line that is parallel to one of the axes or that makes a $45^{\circ}$ angle with them. We will assume that:   the angles between the directions of the ball before and after a collision with a side are equal,  the ball moves indefinitely long, it only stops when it falls into a pocket,  the ball can be considered as a point, it falls into a pocket if and only if its coordinates coincide with one of the pockets,  initially the ball is not in a pocket. 

Note that the ball can move along some side, in this case the ball will just fall into the pocket at the end of the side.

Your task is to determine whether the ball will fall into a pocket eventually, and if yes, which of the four pockets it will be.


-----Input-----

The only line contains $6$ integers $n$, $m$, $x$, $y$, $v_x$, $v_y$ ($1 \leq n, m \leq 10^9$, $0 \leq x \leq n$; $0 \leq y \leq m$; $-1 \leq v_x, v_y \leq 1$; $(v_x, v_y) \neq (0, 0)$) — the width of the table, the length of the table, the $x$-coordinate of the initial position of the ball, the $y$-coordinate of the initial position of the ball, the $x$-component of its initial speed and the $y$-component of its initial speed, respectively. It is guaranteed that the ball is not initially in a pocket.


-----Output-----

Print the coordinates of the pocket the ball will fall into, or $-1$ if the ball will move indefinitely.


-----Examples-----
Input
4 3 2 2 -1 1

Output
0 0
Input
4 4 2 0 1 1

Output
-1
Input
10 10 10 1 -1 0

Output
-1


-----Note-----

The first sample:  [Image] 

The second sample:  [Image] 

In the third sample the ball will never change its $y$ coordinate, so the ball will never fall into a pocket.
Use user-input-Based format and function signature solve()","
def solve():
    n, m, x, y, vx, vy = map(int, input().split())
    
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a
    
    def check_collision(x, y, vx, vy):
        if vx == 0:
            return (0, y) if vy > 0 else (0, 0)
        if vy == 0:
            return (x, 0) if vx > 0 else (0, 0)
        
        dx = x if vx > 0 else n - x
        dy = y if vy > 0 else m - y
        
        gcd_val = gcd(dx, dy)
        dx //= gcd_val
        dy //= gcd_val
        
        if vx > 0:
            x_pocket = n - x
        else:
            x_pocket = x
        
        if vy > 0:
            y_pocket = m - y
        else:
            y_pocket = y
        
        min_dist = min(x_pocket // dx, y_pocket // dy)
        
        x += min_dist * dx
        y += min_dist * dy
        
        if x == 0 and y == 0:
            return (0, 0)
        if x == n and y == 0:
            return (n, 0)
        if x == 0 and y == m:
            return (0, m)
        if x == n and y == m:
            return (n, m)
        
        return (-1, -1)
    
    while True:
        result = check_collision(x, y, vx, vy)
        if result != (-1, -1):
            print(result[0], result[1])
            break
        
        if vx > 0:
            x = n
        elif vx < 0:
            x = 0
        
        if vy > 0:
            y = m
        elif vy < 0:
            y = 0
        
        if vx != 0:
            vx = -vx
        if vy != 0:
            vy = -vy
        
solve()
","
# Define the solve function to handle the billiard table problem
def solve():
    # Parse input values
    n, m, x, y, vx, vy = map(int, input().split())

    # Initialize minimum times to pocket as infinity
    min_time = float('inf')
    pocket = (-1, -1)

    # Check for possible pocket collisions based on the initial position and velocity
    for i, j, dx, dy in [(0, 0, 0, 0), (n, m, 1, 1), (n, 0, 1, 0), (0, m, 0, 1)]:
        if (vx == 0 and x == i) or (vy == 0 and y == j):
            continue

        # Compute the minimum times to reach a pocket based on linear equations
        t = (i - x) / vx if vx != 0 else (j - y) / vy
        if t > 0 and (vx * t + x - i == 0 or vy * t + y - j == 0):
            if t < min_time:
                min_time = t
                pocket = (i, j)

    # Print the pocket coordinates if the ball falls into a pocket eventually
    if min_time == float('inf'):
        print(""-1"")
    else:
        print(*pocket)

# Call the solve function to run the solution logic
solve()
","
def solve():
    n, m, x, y, vx, vy = map(int, input().split())
    while True:
        if vx > 0:
            dx = n - x
            tx = float('inf') if vx == 0 else dx / vx
        elif vx < 0:
            dx = x
            tx = float('inf') if vx == 0 else -dx / vx
        else:
            tx = float('inf')
            
        if vy > 0:
            dy = m - y
            ty = float('inf') if vy == 0 else dy / vy
        elif vy < 0:
            dy = y
            ty = float('inf') if vy == 0 else -dy / vy
        else:
            ty = float('inf')
            
        t = min(tx, ty)
        x += t * vx
        y += t * vy
        
        if x == 0 and y == 0 or x == n and y == 0 or x == 0 and y == m or x == n and y == m:
            print(x, y)
            break
        elif t == tx:
            vy *= -1
        elif t == ty:
            vx *= -1
        else:
            print(-1)
            break
  
solve()","
def solve():
    n, m, x, y, vx, vy = map(int, input().split())
    
    if vx == 0:
        if vy == 1:
            print(f""0 {m}"")
        else:
            print(f""0 0"")
    elif vy == 0:
        if vx == 1:
            print(f""{n} 0"")
        else:
            print(""0 0"")
    elif vx == vy:
        if vx == 1:
            print(f""{min(n - x, m - y) + x} {min(n - x, m - y) + y}"")
        else:
            print(f""{min(x, y) - 1} {min(x, y) - 1}"")
    elif vx == -vy:
        if vx == 1:
            print(f""{min(x, m - y - 1)} {min(x, m - y - 1) + y}"")
        else:
            print(f""{min(n - x - 1, y)} {min(n - x - 1) + x}"")
    else:
        print(""-1"")

solve()","0.0","26.666666666666668","0.0","6.666666666666667","","","",""
"APPS/98","
QUESTION:
Gerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a_1 × b_1 rectangle, the paintings have shape of a a_2 × b_2 and a_3 × b_3 rectangles.

Since the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?


-----Input-----

The first line contains two space-separated numbers a_1 and b_1 — the sides of the board. Next two lines contain numbers a_2, b_2, a_3 and b_3 — the sides of the paintings. All numbers a_{i}, b_{i} in the input are integers and fit into the range from 1 to 1000.


-----Output-----

If the paintings can be placed on the wall, print ""YES"" (without the quotes), and if they cannot, print ""NO"" (without the quotes).


-----Examples-----
Input
3 2
1 3
2 1

Output
YES

Input
5 5
3 3
3 3

Output
NO

Input
4 2
2 3
1 2

Output
YES



-----Note-----

That's how we can place the pictures in the first test:

[Image]

And that's how we can do it in the third one.

[Image]
Use user-input-Based format and function signature solve()","
def solve():
    a1, b1 = map(int, input().split())
    a2, b2 = map(int, input().split())
    a3, b3 = map(int, input().split())

    if (a1 >= max(a2, a3) and b1 >= (b2 + b3)) or (a1 >= (a2 + a3) and b1 >= max(b2, b3)):
        print(""YES"")
    elif (a1 >= max(b2, b3) and b1 >= (a2 + a3)) or (a1 >= (b2 + b3) and b1 >= max(a2, a3)):
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    a1, b1 = map(int, input().split())
    a2, b2 = map(int, input().split())
    a3, b3 = map(int, input().split())
    
    if (a1 >= max(a2, b2) + max(a3, b3)) or (b1 >= max(a2, b2) + max(a3, b3)):
        print(""YES"")
    elif (a1 >= max(a2, b2) + max(b3, a3)) or (b1 >= max(a2, b2) + max(b3, a3)):
        print(""YES"")
    elif (a1 >= max(b2, a2) + max(a3, b3)) or (b1 >= max(b2, a2) + max(a3, b3)):
        print(""YES"")
    elif (a1 >= max(b2, a2) + max(b3, a3)) or (b1 >= max(b2, a2) + max(b3, a3)):
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    a1, b1 = map(int, input().split())
    a2, b2 = map(int, input().split())
    a3, b3 = map(int, input().split())

    if ((a2 <= a1 and b2 <= b1) and (a3 <= a1 and b3 <= b1)) or ((a2 <= a1 and b2 <= b1) and (a3 <= b1 and b3 <= a1)) or ((a2 <= b1 and b2 <= a1) and (a3 <= a1 and b3 <= b1)) or ((a2 <= b1 and b2 <= a1) and (a3 <= b1 and b3 <= a1)):
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    a1, b1 = map(int, input().split())
    a2, b2 = map(int, input().split())
    a3, b3 = map(int, input().split())
    
    possible_orientations = [(a1, b1), (b1, a1), (a1, b1), (b1, a1)]
    paintings = [(a2, b2), (b2, a2), (a3, b3), (b3, a3)]
    
    for orientation in possible_orientations:
        remaining_board = list(orientation)
        can_fit = True
        for painting in paintings:
            if painting[0] <= remaining_board[0] and painting[1] <= remaining_board[1]:
                remaining_board[0] -= painting[0]
            elif painting[0] <= remaining_board[1] and painting[1] <= remaining_board[0]:
                remaining_board[0] -= painting[0]
            else:
                can_fit = False
                break
        
        if can_fit:
            print(""YES"")
            return
    
    print(""NO"")
  
solve()","80.0","33.33333333333333","86.66666666666667","13.333333333333334","","","",""
"APPS/99","
QUESTION:
Masha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.

You are given geometric progression b defined by two integers b_1 and q. Remind that a geometric progression is a sequence of integers b_1, b_2, b_3, ..., where for each i > 1 the respective term satisfies the condition b_{i} = b_{i} - 1·q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b_1 and q can equal 0. Also, Dvastan gave Masha m ""bad"" integers a_1, a_2, ..., a_{m}, and an integer l.

Masha writes all progression terms one by one onto the board (including repetitive) while condition |b_{i}| ≤ l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the ""bad"" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.

But the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print ""inf"" in case she needs to write infinitely many integers.


-----Input-----

The first line of input contains four integers b_1, q, l, m (-10^9 ≤ b_1, q ≤ 10^9, 1 ≤ l ≤ 10^9, 1 ≤ m ≤ 10^5) — the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of ""bad"" integers, respectively.

The second line contains m distinct integers a_1, a_2, ..., a_{m} (-10^9 ≤ a_{i} ≤ 10^9) — numbers that will never be written on the board.


-----Output-----

Print the only integer, meaning the number of progression terms that will be written on the board if it is finite, or ""inf"" (without quotes) otherwise.


-----Examples-----
Input
3 2 30 4
6 14 25 48

Output
3
Input
123 1 2143435 4
123 11 -5453 141245

Output
0
Input
123 1 2143435 4
54343 -13 6 124

Output
inf


-----Note-----

In the first sample case, Masha will write integers 3, 12, 24. Progression term 6 will be skipped because it is a ""bad"" integer. Terms bigger than 24 won't be written because they exceed l by absolute value.

In the second case, Masha won't write any number because all terms are equal 123 and this is a ""bad"" integer.

In the third case, Masha will write infinitely integers 123.
Use user-input-Based format and function signature solve()","
def solve():
    b_1, q, l, m = map(int, input().split())
    bad_integers = set(map(int, input().split()))

    if abs(b_1) > l:
        print(0)
        return

    if q == 0:
        if b_1 in bad_integers:
            print(0)
        else:
            print(""inf"")
        return

    if q == 1:
        if b_1 in bad_integers:
            print(0)
        else:
            print(""inf"")
        return

    if q == -1:
        if b_1 in bad_integers and -b_1 in bad_integers:
            print(0)
        else:
            print(""inf"")
        return

    terms_written = 0
    current_term = b_1

    while abs(current_term) <= l:
        if current_term not in bad_integers:
            terms_written += 1
        current_term *= q

    print(terms_written)

solve()
","
def solve():
    b_1, q, l, m = map(int, input().split())
    bad_integers = set(map(int, input().split()))

    if b_1 == 0:
        if 0 in bad_integers:
            print(0)
        else:
            print(""inf"")
        return

    if q == 0:
        if b_1 in bad_integers:
            print(0)
        else:
            if abs(b_1) <= l:
                print(1)
            else:
                print(0)
        return

    if q == 1 or q == -1:
        if b_1 in bad_integers:
            print(0)
        else:
            if abs(b_1) <= l:
                print(""inf"")
            else:
                print(0)
        return

    if q > 0:
        if q == 1:
            if b_1 not in bad_integers:
                print(""inf"")
            else:
                if abs(b_1) <= l:
                    print(1)
                else:
                    print(0)
        else:
            count = 0
            while abs(b_1) <= l:
                if b_1 not in bad_integers:
                    count += 1
                b_1 *= q
            print(count)
    else:
        if q == -1:
            if b_1 not in bad_integers:
                print(""inf"")
            else:
                if abs(b_1) <= l:
                    print(1)
                else:
                    print(0)
        else:
            count = 0
            while abs(b_1) <= l:
                if b_1 not in bad_integers:
                    count += 1
                b_1 *= q
            print(count)
  
solve()","
def solve():
    b_1, q, l, m = map(int, input().split())
    bad_integers = set(map(int, input().split()))

    if b_1 == 0:
        if 0 not in bad_integers:
            print(""inf"")
        else:
            print(0)
        return

    if q == 1:
        if b_1 in bad_integers:
            print(0)
        else:
            if abs(b_1) <= l:
                print(""inf"")
            else:
                print(0)
        return

    if q == -1:
        terms = set()
        current = b_1
        while abs(current) <= l:
            if current not in bad_integers:
                terms.add(current)
            current *= q
        print(len(terms))
        return

    if q > 0:
        terms = set()
        current = b_1
        while abs(current) <= l:
            if current not in bad_integers:
                terms.add(current)
            current *= q
        print(len(terms))
        return

    else:
        terms = set()
        while abs(b_1) <= l:
            if b_1 not in bad_integers:
                terms.add(b_1)
            b_1 *= q
        print(len(terms))
        return

solve()
","
def solve():
    b_1, q, l, m = map(int, input().split())
    bad_integers = set(map(int, input().split()))
    
    if q == 0:
        if b_1 not in bad_integers:
            if abs(b_1) <= l:
                print(""inf"")
            else:
                print(0)
        else:
            print(0)
    elif q == 1:
        if b_1 in bad_integers:
            print(0)
        else:
            print(""inf"")
    elif q == -1:
        if b_1 not in bad_integers and abs(b_1) <= l:
            if 1 not in bad_integers:
                print(""inf"")
            else:
                print(0)
        else:
            print(0)
    else:
        count = 0
        while abs(b_1) <= l:
            if b_1 not in bad_integers:
                count += 1
            b_1 *= q
        print(count)

solve()
  ","93.33333333333333","86.66666666666667","100.0","93.33333333333333","","","",""
"APPS/100","
QUESTION:
Innocentius has a problem — his computer monitor has broken. Now some of the pixels are ""dead"", that is, they are always black. As consequence, Innocentius can't play the usual computer games. He is recently playing the following game with his younger brother Polycarpus.

Innocentius is touch-typing a program that paints a white square one-pixel wide frame on the black screen. As the monitor is broken, some pixels that should be white remain black. Polycarpus should look at what the program displayed on the screen and guess the position and size of the frame Innocentius has painted. Polycarpus doesn't like the game but Innocentius persuaded brother to play as ""the game is good for the imagination and attention"".

Help Polycarpus, automatize his part in the gaming process. Write the code that finds such possible square frame that:  the frame's width is 1 pixel,  the frame doesn't go beyond the borders of the screen,  all white pixels of the monitor are located on the frame,  of all frames that satisfy the previous three conditions, the required frame must have the smallest size. 

Formally, a square frame is represented by such pixels of the solid square, that are on the square's border, that is, are not fully surrounded by the other pixels of the square. For example, if the frame's size is d = 3, then it consists of 8 pixels, if its size is d = 2, then it contains 4 pixels and if d = 1, then the frame is reduced to a single pixel.


-----Input-----

The first line contains the resolution of the monitor as a pair of integers n, m (1 ≤ n, m ≤ 2000). The next n lines contain exactly m characters each — the state of the monitor pixels at the moment of the game. Character ""."" (period, ASCII code 46) corresponds to the black pixel, and character ""w"" (lowercase English letter w) corresponds to the white pixel. It is guaranteed that at least one pixel of the monitor is white.


-----Output-----

Print the monitor screen. Represent the sought frame by characters ""+"" (the ""plus"" character). The pixels that has become white during the game mustn't be changed. Print them as ""w"". If there are multiple possible ways to position the frame of the minimum size, print any of them.

If the required frame doesn't exist, then print a single line containing number -1.


-----Examples-----
Input
4 8
..w..w..
........
........
..w..w..

Output
..w++w..
..+..+..
..+..+..
..w++w..

Input
5 6
......
.w....
......
..w...
......

Output
......
+w+...
+.+...
++w...
......

Input
2 4
....
.w..

Output
....
.w..

Input
2 6
w..w.w
...w..

Output
-1



-----Note-----

In the first sample the required size of the optimal frame equals 4. In the second sample the size of the optimal frame equals 3. In the third sample, the size of the optimal frame is 1. In the fourth sample, the required frame doesn't exist.
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    monitor = [list(input()) for _ in range(n)]

    white_pixels = [(i, j) for i in range(n) for j in range(m) if monitor[i][j] == 'w']

    if not white_pixels:
        print(-1)
        return

    min_row = min(white_pixels, key=lambda x: x[0])[0]
    max_row = max(white_pixels, key=lambda x: x[0])[0]
    min_col = min(white_pixels, key=lambda x: x[1])[1]
    max_col = max(white_pixels, key=lambda x: x[1])[1]

    for i in range(min_row, max_row + 1):
        for j in range(min_col, max_col + 1):
            if monitor[i][j] == '.':
                print(-1)
                return

    for i in range(n):
        for j in range(m):
            if i == min_row or i == max_row or j == min_col or j == max_col:
                monitor[i][j] = '+'

    for row in monitor:
        print(''.join(row))

solve()
","
def solve():
    n, m = map(int, input().split())
    screen = [input() for _ in range(n)]
    
    white_pixels = [(i, j) for i in range(n) for j in range(m) if screen[i][j] == 'w']
    
    min_x = min(white_pixels, key=lambda p: p[1])[1]
    max_x = max(white_pixels, key=lambda p: p[1])[1]
    min_y = min(white_pixels, key=lambda p: p[0])[0]
    max_y = max(white_pixels, key=lambda p: p[0])[0]
    
    if min_x == max_x and min_y == max_y:
        print(screen[min_y][:min_x] + '+' + screen[min_y][min_x+1:])
    elif max_x - min_x == max_y - min_y:
        size = max_x - min_x
        valid = True
        for i in range(min_y, max_y+1):
            for j in range(min_x, max_x+1):
                if (i, j) not in white_pixels:
                    valid = False
                    break
            if not valid:
                break
        if valid:
            for i in range(n):
                current_line = list(screen[i])
                for j in range(m):
                    if (i, j) in white_pixels and i in [min_y, max_y] and j in [min_x, max_x]:
                        current_line[j] = '+'
                print(''.join(current_line))
        else:
            print(-1)
    else:
        print(-1)

solve()
","
def solve():
    n, m = map(int, input().split())
    monitor = [list(input().strip()) for _ in range(n)]
    
    white_pixels = []
    for i in range(n):
        for j in range(m):
            if monitor[i][j] == 'w':
                white_pixels.append((i, j))
    
    if not white_pixels:
        print(-1)
        return
    
    border = {'+', 'w'}
    for i, j in white_pixels:
        if i > 0 and i < n-1 and j > 0 and j < m-1:
            if monitor[i-1][j] in border and monitor[i+1][j] in border and monitor[i][j-1] in border and monitor[i][j+1] in border:
                monitor[i][j] = '+'
    
    for row in monitor:
        print(''.join(row))

solve()
","
def solve():
    n, m = map(int, input().split())
    screen = [list(input()) for _ in range(n)]
    
    def is_valid(i, j):
        if i >= n or j >= m or i < 0 or j < 0:
            return False
        return True

    def check_frame(i, j):
        if screen[i][j] == 'w':
            return False
        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            ni, nj = i + dx, j + dy
            if not is_valid(ni, nj) or screen[ni][nj] == '.':
                return False
        return True
    
    for i in range(n):
        for j in range(m):
            if screen[i][j] == 'w' and check_frame(i, j):
                screen[i][j] = '+'
    
    for row in screen:
        print(''.join(row))

solve()
","6.666666666666667","20.0","20.0","20.0","","","",""
"APPS/101","
QUESTION:
Vasya has n burles. One bottle of Ber-Cola costs a burles and one Bars bar costs b burles. He can buy any non-negative integer number of bottles of Ber-Cola and any non-negative integer number of Bars bars.

Find out if it's possible to buy some amount of bottles of Ber-Cola and Bars bars and spend exactly n burles.

In other words, you should find two non-negative integers x and y such that Vasya can buy x bottles of Ber-Cola and y Bars bars and x·a + y·b = n or tell that it's impossible.


-----Input-----

First line contains single integer n (1 ≤ n ≤ 10 000 000) — amount of money, that Vasya has.

Second line contains single integer a (1 ≤ a ≤ 10 000 000) — cost of one bottle of Ber-Cola.

Third line contains single integer b (1 ≤ b ≤ 10 000 000) — cost of one Bars bar.


-----Output-----

If Vasya can't buy Bars and Ber-Cola in such a way to spend exactly n burles print «NO» (without quotes).

Otherwise in first line print «YES» (without quotes). In second line print two non-negative integers x and y — number of bottles of Ber-Cola and number of Bars bars Vasya should buy in order to spend exactly n burles, i.e. x·a + y·b = n. If there are multiple answers print any of them.

Any of numbers x and y can be equal 0.


-----Examples-----
Input
7
2
3

Output
YES
2 1

Input
100
25
10

Output
YES
0 10

Input
15
4
8

Output
NO

Input
9960594
2551
2557

Output
YES
1951 1949



-----Note-----

In first example Vasya can buy two bottles of Ber-Cola and one Bars bar. He will spend exactly 2·2 + 1·3 = 7 burles.

In second example Vasya can spend exactly n burles multiple ways:   buy two bottles of Ber-Cola and five Bars bars;  buy four bottles of Ber-Cola and don't buy Bars bars;  don't buy Ber-Cola and buy 10 Bars bars. 

In third example it's impossible to but Ber-Cola and Bars bars in order to spend exactly n burles.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = int(input())
    b = int(input())
    
    for x in range(n // a + 1):
        if (n - x * a) % b == 0:
            y = (n - x * a) // b
            print(""YES"")
            print(x, y)
            return
    
    print(""NO"")

solve()","
def solve():
    n = int(input())
    a = int(input())
    b = int(input())

    for x in range(n // a + 1):
        if (n - x * a) % b == 0:
            y = (n - x * a) // b
            print(""YES"")
            print(x, y)
            return

    print(""NO"")

solve()
","
def solve():
    n = int(input())
    a = int(input())
    b = int(input())

    for x in range(n//a + 1):
        if (n - x*a) % b == 0:
            print(""YES"")
            print(x, (n - x*a) // b)
            return
    
    print(""NO"")

solve()
","
def solve():
    n = int(input())
    a = int(input())
    b = int(input())
    
    for x in range(n//a + 1):
        if (n - x*a) % b == 0:
            y = (n - x*a) // b
            print(""YES"")
            print(x, y)
            return
    
    print(""NO"")

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/102","
QUESTION:
Today Tavas got his test result as an integer score and he wants to share it with his girlfriend, Nafas.

His phone operating system is Tavdroid, and its keyboard doesn't have any digits! He wants to share his score with Nafas via text, so he has no choice but to send this number using words. [Image] 

He ate coffee mix without water again, so right now he's really messed up and can't think.

Your task is to help him by telling him what to type.


-----Input-----

The first and only line of input contains an integer s (0 ≤ s ≤ 99), Tavas's score. 


-----Output-----

In the first and only line of output, print a single string consisting only from English lowercase letters and hyphens ('-'). Do not use spaces.


-----Examples-----
Input
6

Output
six

Input
99

Output
ninety-nine

Input
20

Output
twenty



-----Note-----

You can find all you need to know about English numerals in http://en.wikipedia.org/wiki/English_numerals .
Use user-input-Based format and function signature solve()","
def solve():
    from num2words import num2words
    s = int(input())
    result = num2words(s, lang='en')
    result = result.replace(' ', '-')
    print(result)

solve()","
def solve():
    import inflect
    p = inflect.engine()
    
    s = int(input())
    
    if s < 20:
        return p.number_to_words(s)
    else:
        return p.number_to_words(s, group=2)

solve()","
def solve():
    num_to_words = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',
                    6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten',
                    11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen',
                    15: 'fifteen', 16: 'sixteen', 17: 'seventeen', 18: 'eighteen', 19: 'nineteen',
                    20: 'twenty', 30: 'thirty', 40: 'forty', 50: 'fifty',
                    60: 'sixty', 70: 'seventy', 80: 'eighty', 90: 'ninety'}

    s = int(input())
    if s in num_to_words:
        return num_to_words[s]
    else:
        tens = s // 10 * 10
        ones = s % 10
        return num_to_words[tens] + '-' + num_to_words[ones] if ones != 0 else num_to_words[tens]
  
solve()","
def solve():
    from num2words import num2words
    
    s = int(input())
    result = num2words(s, lang='en')
    result = result.replace(' ', '-').replace(',', '')
    print(result)

solve()","0.0","0.0","0.0","0.0","","","",""
"APPS/103","
QUESTION:
JATC and his friend Giraffe are currently in their room, solving some problems. Giraffe has written on the board an array $a_1$, $a_2$, ..., $a_n$ of integers, such that $1 \le a_1 < a_2 < \ldots < a_n \le 10^3$, and then went to the bathroom.

JATC decided to prank his friend by erasing some consecutive elements in the array. Since he doesn't want for the prank to go too far, he will only erase in a way, such that Giraffe can still restore the array using the information from the remaining elements. Because Giraffe has created the array, he's also aware that it's an increasing array and all the elements are integers in the range $[1, 10^3]$.

JATC wonders what is the greatest number of elements he can erase?


-----Input-----

The first line of the input contains a single integer $n$ ($1 \le n \le 100$) — the number of elements in the array.

The second line of the input contains $n$ integers $a_i$ ($1 \le a_1<a_2<\dots<a_n \le 10^3$) — the array written by Giraffe.


-----Output-----

Print a single integer — the maximum number of consecutive elements in the array that JATC can erase.

If it is impossible to erase even a single element, print $0$.


-----Examples-----
Input
6
1 3 4 5 6 9

Output
2
Input
3
998 999 1000

Output
2
Input
5
1 2 3 4 5

Output
4


-----Note-----

In the first example, JATC can erase the third and fourth elements, leaving the array $[1, 3, \_, \_, 6, 9]$. As you can see, there is only one way to fill in the blanks.

In the second example, JATC can erase the second and the third elements. The array will become $[998, \_, \_]$. Because all the elements are less than or equal to $1000$, the array is still can be restored. Note, that he can't erase the first $2$ elements.

In the third example, JATC can erase the first $4$ elements. Since all the elements are greater than or equal to $1$, Giraffe can still restore the array. Note, that he can't erase the last $4$ elements.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    max_erase = 0
    for i in range(n):
        for j in range(i+1, n):
            if a[j] - a[i] == j - i:
                max_erase = max(max_erase, j - i - 1)
    
    print(max_erase)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    max_erase = 0
    for i in range(n):
        for j in range(i+1, n):
            if a[j] - a[i] == j - i:
                max_erase = max(max_erase, j - i - 1)

    print(max_erase)

solve()
","
def solve():
    n = int(input())
    arr = list(map(int, input().split()))

    max_erase = 0
    current_erase = 0

    for i in range(1, n):
        if arr[i] == arr[i-1] + 1:
            current_erase += 1
        else:
            current_erase = 0
        max_erase = max(max_erase, current_erase)

    print(max_erase)

solve()
","
def solve():
    n = int(input())
    arr = list(map(int, input().split()))
    
    max_erase = 0
    for i in range(n):
        left_count = i
        right_count = n - i - 1
        max_erase = max(max_erase, min(left_count, right_count))
    
    print(max_erase)

solve()
","53.333333333333336","53.333333333333336","73.33333333333333","26.666666666666668","","","",""
"APPS/104","
QUESTION:
Polycarp has created his own training plan to prepare for the programming contests. He will train for $n$ days, all days are numbered from $1$ to $n$, beginning from the first.

On the $i$-th day Polycarp will necessarily solve $a_i$ problems. One evening Polycarp plans to celebrate the equator. He will celebrate it on the first evening of such a day that from the beginning of the training and to this day inclusive he will solve half or more of all the problems.

Determine the index of day when Polycarp will celebrate the equator.


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 200\,000$) — the number of days to prepare for the programming contests.

The second line contains a sequence $a_1, a_2, \dots, a_n$ ($1 \le a_i \le 10\,000$), where $a_i$ equals to the number of problems, which Polycarp will solve on the $i$-th day.


-----Output-----

Print the index of the day when Polycarp will celebrate the equator.


-----Examples-----
Input
4
1 3 2 1

Output
2

Input
6
2 2 2 2 2 2

Output
3



-----Note-----

In the first example Polycarp will celebrate the equator on the evening of the second day, because up to this day (inclusive) he will solve $4$ out of $7$ scheduled problems on four days of the training.

In the second example Polycarp will celebrate the equator on the evening of the third day, because up to this day (inclusive) he will solve $6$ out of $12$ scheduled problems on six days of the training.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    problems_solved = list(map(int, input().split()))
    
    total_problems = sum(problems_solved)
    half_problems = total_problems // 2
    
    solved_so_far = 0
    for i in range(n):
        solved_so_far += problems_solved[i]
        if solved_so_far >= half_problems:
            return i + 1

# Call the function to get the output
print(solve())

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    total_problems = sum(a)
    current_problems = 0
    celebrate_day = 0

    for i in range(n):
        current_problems += a[i]
        if current_problems * 2 >= total_problems:
            celebrate_day = i + 1
            break

    print(celebrate_day)

solve()
","
def solve():
    n = int(input())
    problems = list(map(int, input().split()))
    
    total_problems = sum(problems)
    solved_problems = 0
    
    for i in range(n):
        solved_problems += problems[i]
        if solved_problems * 2 >= total_problems:
            return i + 1

# Call the function to solve the problem
print(solve())

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    total_problems = sum(a)
    solved_problems = 0
    days = 0

    for i in range(n):
        solved_problems += a[i]
        days += 1
        if solved_problems * 2 >= total_problems:
            break

    print(days)

solve()
","0.0","100.0","0.0","100.0","","","",""
"APPS/105","
QUESTION:
You stumbled upon a new kind of chess puzzles. The chessboard you are given is not necesserily $8 \times 8$, but it still is $N \times N$. Each square has some number written on it, all the numbers are from $1$ to $N^2$ and all the numbers are pairwise distinct. The $j$-th square in the $i$-th row has a number $A_{ij}$ written on it.

In your chess set you have only three pieces: a knight, a bishop and a rook. At first, you put one of them on the square with the number $1$ (you can choose which one). Then you want to reach square $2$ (possibly passing through some other squares in process), then square $3$ and so on until you reach square $N^2$. In one step you are allowed to either make a valid move with the current piece or replace it with some other piece. Each square can be visited arbitrary number of times.

A knight can move to a square that is two squares away horizontally and one square vertically, or two squares vertically and one square horizontally. A bishop moves diagonally. A rook moves horizontally or vertically. The move should be performed to a different square from the one a piece is currently standing on.

You want to minimize the number of steps of the whole traversal. Among all the paths to have the same number of steps you want to choose the one with the lowest number of piece replacements.

What is the path you should take to satisfy all conditions?


-----Input-----

The first line contains a single integer $N$ ($3 \le N \le 10$) — the size of the chessboard.

Each of the next $N$ lines contains $N$ integers $A_{i1}, A_{i2}, \dots, A_{iN}$ ($1 \le A_{ij} \le N^2$) — the numbers written on the squares of the $i$-th row of the board.

It is guaranteed that all $A_{ij}$ are pairwise distinct.


-----Output-----

The only line should contain two integers — the number of steps in the best answer and the number of replacement moves in it.


-----Example-----
Input
3
1 9 3
8 6 7
4 2 5

Output
12 1



-----Note-----

Here are the steps for the first example (the starting piece is a knight):  Move to $(3, 2)$  Move to $(1, 3)$  Move to $(3, 2)$  Replace the knight with a rook  Move to $(3, 1)$  Move to $(3, 3)$  Move to $(3, 2)$  Move to $(2, 2)$  Move to $(2, 3)$  Move to $(2, 1)$  Move to $(1, 1)$  Move to $(1, 2)$
Use user-input-Based format and function signature solve()","
def solve():
    import sys
    input = sys.stdin.readline

    N = int(input())
    board = [list(map(int, input().split())) for _ in range(N)]

    def find_position(num):
        for i in range(N):
            for j in range(N):
                if board[i][j] == num:
                    return i, j

    def min_moves(start_piece):
        moves = 0
        replacements = 0
        current_piece = start_piece
        current_position = (0, 0)

        for num in range(1, N*N+1):
            next_position = find_position(num)
            row_diff = abs(next_position[0] - current_position[0])
            col_diff = abs(next_position[1] - current_position[1])

            if current_piece == 'knight':
                moves += max(row_diff, col_diff)
            elif current_piece == 'bishop':
                if row_diff == col_diff:
                    moves += row_diff
                else:
                    moves += max(row_diff, col_diff)
                    replacements += 1
                    current_piece = 'bishop'
            elif current_piece == 'rook':
                if row_diff == 0 or col_diff == 0:
                    moves += max(row_diff, col_diff)
                else:
                    moves += row_diff + col_diff
                    replacements += 1
                    current_piece = 'rook'

            current_position = next_position

        return moves, replacements

    min_steps_knight, min_replacements_knight = min_moves('knight')
    min_steps_bishop, min_replacements_bishop = min_moves('bishop')
    min_steps_rook, min_replacements_rook = min_moves('rook')

    min_steps = min(min_steps_knight, min_steps_bishop, min_steps_rook)
    min_replacements = min(min_replacements_knight, min_replacements_bishop, min_replacements_rook)

    print(min_steps, min_replacements)

solve()
","
def solve():
    import sys
    input = sys.stdin.readline

    N = int(input())
    chessboard = [list(map(int, input().split())) for _ in range(N)]

    coords = {}
    for i in range(N):
        for j in range(N):
            coords[chessboard[i][j]] = (i, j)

    def dist(p1, p2):
        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])

    knight_moves = {(1, 2), (2, 1)}
    bishop_moves = {(1, 1), (1, -1), (-1, 1), (-1, -1)}
    rook_moves = {(1, 0), (-1, 0), (0, 1), (0, -1)}

    steps = 0
    replacements = 0
    cur_pos = coords[1]
    cur_piece = 'knight'

    for i in range(2, N**2 + 1):
        next_pos = coords[i]
        new_piece = None

        if dist(cur_pos, next_pos) in knight_moves:
            new_piece = 'knight'
        elif (cur_pos[0] == next_pos[0] or cur_pos[1] == next_pos[1]) and new_piece != 'bishop':
            new_piece = 'rook'
        else:
            new_piece = 'bishop'
        
        if new_piece != cur_piece:
            replacements += 1
            cur_piece = new_piece

        steps += max(abs(cur_pos[0] - next_pos[0]), abs(cur_pos[1] - next_pos[1]))
        cur_pos = next_pos

    print(steps, replacements)

solve()
","
def solve():
    import heapq

    N = int(input())
    chessboard = [list(map(int, input().split())) for _ in range(N)]

    directions = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (-1, 2), (1, -2), (-1, -2)]

    def get_coordinate(num):
        return (num - 1) // N, (num - 1) % N

    def manhattan_distance(x1, y1, x2, y2):
        return abs(x1 - x2) + abs(y1 - y2)

    def min_steps(source, target):
        visited = set()
        pq = [(0, 0, source[0], source[1])]
        while pq:
            steps, replacements, x, y = heapq.heappop(pq)
            if (x, y) == target:
                return steps, replacements
            visited.add((x, y))
            for dx, dy in directions:
                new_x, new_y = x + dx, y + dy
                if 0 <= new_x < N and 0 <= new_y < N and (new_x, new_y) not in visited:
                    new_steps = steps + 1 + manhattan_distance(new_x, new_y, target[0], target[1])
                    heapq.heappush(pq, (new_steps, replacements, new_x, new_y))
            new_piece = chessboard[y][x]
            best_piece = min(chessboard[i][j] for i in range(N) for j in range(N) if chessboard[i][j] > new_piece)
            if new_piece != target and best_piece >= new_piece:
                replacements += 1
                new_x, new_y = get_coordinate(best_piece)
                new_steps = steps + 1 + manhattan_distance(new_x, new_y, target[0], target[1])
                heapq.heappush(pq, (new_steps, replacements, new_x, new_y))

    source = get_coordinate(1)
    total_steps, replacements = 0, 0
    for num in range(2, N ** 2 + 1):
        target = get_coordinate(num)
        steps, rep = min_steps(source, target)
        total_steps += steps
        replacements += rep
        source = target

    print(total_steps, replacements)

solve()
  ","
def solve():
    import math

    N = int(input())
    chessboard = []
    for _ in range(N):
        row = list(map(int, input().split()))
        chessboard.append(row)

    piece_positions = {}
    for i in range(N):
        for j in range(N):
            piece_positions[chessboard[i][j]] = (i, j)

    knight = (2, 1)
    bishop = (1, 1)
    rook = (1, 0)

    def get_moves(piece, current_pos, dest_pos):
        diff_x = abs(current_pos[0] - dest_pos[0])
        diff_y = abs(current_pos[1] - dest_pos[1])

        if piece == knight:
            if (diff_x == 2 and diff_y == 1) or (diff_x == 1 and diff_y == 2):
                return 1
            else:
                return math.inf
        elif piece == bishop:
            if diff_x == diff_y:
                return 1
            else:
                return math.inf
        else:
            if current_pos[0] == dest_pos[0] and current_pos[1] == dest_pos[1]:
                return 0
            elif current_pos[0] == dest_pos[0] or current_pos[1] == dest_pos[1]:
                return 1
            else:
                return 2

    current_piece = knight
    total_steps = 0
    total_replacements = 0

    for num in range(1, N * N + 1):
        dest_pos = piece_positions[num]
        steps = get_moves(current_piece, (0, 0), dest_pos)
        total_steps += steps

        if num < N * N:
            next_pos = piece_positions[num + 1]

            if steps == 2:
                current_piece = rook
                total_replacements += 1
            elif steps == 1:
                current_piece = knight if current_piece != knight else bishop

    print(total_steps, total_replacements)

solve()
","0.0","0.0","0.0","0.0","","","",""
"APPS/106","
QUESTION:
Есть n-подъездный дом, в каждом подъезде по m этажей, и на каждом этаже каждого подъезда ровно k квартир. Таким образом, в доме всего n·m·k квартир. Они пронумерованы естественным образом от 1 до n·m·k, то есть первая квартира на первом этаже в первом подъезде имеет номер 1, первая квартира на втором этаже первого подъезда имеет номер k + 1 и так далее. Особенность этого дома состоит в том, что он круглый. То есть если обходить его по часовой стрелке, то после подъезда номер 1 следует подъезд номер 2, затем подъезд номер 3 и так далее до подъезда номер n. После подъезда номер n снова идёт подъезд номер 1.

Эдвард живёт в квартире номер a, а Наташа — в квартире номер b. Переход на 1 этаж вверх или вниз по лестнице занимает 5 секунд, переход от двери подъезда к двери соседнего подъезда — 15 секунд, а переход в пределах одного этажа одного подъезда происходит мгновенно. Также в каждом подъезде дома есть лифт. Он устроен следующим образом: он всегда приезжает ровно через 10 секунд после вызова, а чтобы переместить пассажира на один этаж вверх или вниз, лифт тратит ровно 1 секунду. Посадка и высадка происходят мгновенно.

Помогите Эдварду найти минимальное время, за которое он сможет добраться до квартиры Наташи. Считайте, что Эдвард может выйти из подъезда только с первого этажа соответствующего подъезда (это происходит мгновенно). Если Эдвард стоит перед дверью какого-то подъезда, он может зайти в него и сразу окажется на первом этаже этого подъезда (это также происходит мгновенно). Эдвард может выбирать, в каком направлении идти вокруг дома.


-----Входные данные-----

В первой строке входных данных следуют три числа n, m, k (1 ≤ n, m, k ≤ 1000) — количество подъездов в доме, количество этажей в каждом подъезде и количество квартир на каждом этаже каждого подъезда соответственно.

Во второй строке входных данных записаны два числа a и b (1 ≤ a, b ≤ n·m·k) — номера квартир, в которых живут Эдвард и Наташа, соответственно. Гарантируется, что эти номера различны. 


-----Выходные данные-----

Выведите единственное целое число — минимальное время (в секундах), за которое Эдвард сможет добраться от своей квартиры до квартиры Наташи.


-----Примеры-----
Входные данные
4 10 5
200 6

Выходные данные
39

Входные данные
3 1 5
7 2

Выходные данные
15



-----Примечание-----

В первом тестовом примере Эдвард находится в 4 подъезде на 10 этаже, а Наташа находится в 1 подъезде на 2 этаже. Поэтому Эдварду выгодно сначала спуститься на лифте на первый этаж (на это он потратит 19 секунд, из которых 10 — на ожидание и 9 — на поездку на лифте), затем обойти дом против часовой стрелки до подъезда номер 1 (на это он потратит 15 секунд), и наконец подняться по лестнице на этаж номер 2 (на это он потратит 5 секунд). Таким образом, ответ равен 19 + 15 + 5 = 39.

Во втором тестовом примере Эдвард живёт в подъезде 2 на этаже 1, а Наташа находится в подъезде 1 на этаже 1. Поэтому Эдварду выгодно просто обойти дом по часовой стрелке до подъезда 1, на это он потратит 15 секунд.
Use user-input-Based format and function signature solve()","
def solve():
    n, m, k = map(int, input().split())
    a, b = map(int, input().split())

    a -= 1
    b -= 1

    time = 0

    time += min(abs(a // (m * k) - b // (m * k)) * 15, n * 15)
    time += min(abs(a // k - b // k) * 5, m * 5)
    time += abs(a % k - b % k) * 1

    print(time)

solve()
","
def solve():
    n, m, k = map(int, input().split())
    a, b = map(int, input().split())

    # Calculate the minimum time to reach Natasha's apartment from Edward's apartment
    time_to_move_to_same_building = min(abs(a - b), n*m*k - abs(a - b))
    time_using_lift = (time_to_move_to_same_building // (m * k)) * 20 + 10 + (time_to_move_to_same_building % (m * k)) - 1
    time_to_reach_natasha = min(time_using_lift, (abs(a % (m * k) - b % (m * k)) // k) * 5 + 10)

    print(time_to_reach_natasha)

solve()
","
def solve():
    n, m, k = map(int, input().split())
    a, b = map(int, input().split())
    
    time_to_elevator = 10 + ((a - 1) // (m * k)) * 15
    time_to_neighbour_flat = 5 * ((a - 1) % k)
    
    min_time = float('inf')
    
    for i in range(n):
        for j in range(m * k):
            time_from_elevator = 10 + ((j + k - 1) // k) * 15
            time_to_flat = 5 * ((j - (b - 1)) % k)
            time = time_to_elevator + time_to_neighbour_flat + time_from_elevator + time_to_flat
            min_time = min(min_time, time)
    
    print(min_time)

solve()
","
def solve():
    n, m, k = map(int, input().split())
    a, b = map(int, input().split())

    a -= 1
    b -= 1

    time = min(abs(a // (m*k) - b // (m*k)) * 15 + abs(a % (m*k) - b % (m*k)) * 5,
               abs(a // (m*k) - b // (m*k) * n) * 15 + abs(a % (m*k) - b % (m*k)) * 5,
               abs(a // (m*k) * n - b // (m*k)) * 15 + abs(a % (m*k) - b % (m*k)) * 5,
               abs(a // (m*k) * n - b // (m*k) * n) * 15 + abs(a % (m*k) - b % (m*k)) * 5)

    return time

solve()
","0.0","0.0","0.0","0.0","","","",""
"APPS/107","
QUESTION:
Top-model Izabella participates in the competition. She wants to impress judges and show her mathematical skills.

Her problem is following: for given string, consisting of only 0 and 1, tell if it's possible to remove some digits in such a way, that remaining number is a representation of some positive integer, divisible by 64, in the binary numerical system.


-----Input-----

In the only line given a non-empty binary string s with length up to 100.


-----Output-----

Print «yes» (without quotes) if it's possible to remove digits required way and «no» otherwise.


-----Examples-----
Input
100010001

Output
yes
Input
100

Output
no


-----Note-----

In the first test case, you can get string 1 000 000 after removing two ones which is a representation of number 64 in the binary numerical system.

You can read more about binary numeral system representation here: https://en.wikipedia.org/wiki/Binary_system
Use user-input-Based format and function signature solve()","
def solve():
    s = input().strip()
    count_zeros = s.count('0')
    count_ones = s.count('1')
    
    if count_zeros >= 6 or (count_zeros == 5 and count_ones >= 1) or (count_zeros == 4 and count_ones >= 2) or (count_zeros == 3 and count_ones >= 3) or (count_zeros == 2 and count_ones >= 4) or (count_zeros == 1 and count_ones >= 5) or count_ones >= 6:
        print(""yes"")
    else:
        print(""no"")

solve()
","
def solve():
    s = input().strip()
    ones = s.count('1')
    if ones < 6:
        print(""no"")
    else:
        zeros_to_remove = ones - 6
        zeros_count = s.count('0')
        if zeros_count >= zeros_to_remove:
            print(""yes"")
        else:
            print(""no"")

solve()","
def solve():
    s = input()
    count = s.count('0')
    if count >= 6 and ('1' in s) and int(s, 2) % 64 == 0:
        print(""yes"")
    else:
        print(""no"")

solve()
","
def solve():
    s = input().strip()
    n = len(s)
    
    for i in range(n):
        if s[i] == '1':
            for j in range(i + 1, n):
                if s[j] == '1':
                    for k in range(j + 1, n):
                        if int(s[k:], 2) % 64 == 0:
                            print(""yes"")
                            return
    
    print(""no"")

solve()
","53.333333333333336","66.66666666666666","73.33333333333333","60.0","","","",""
"APPS/108","
QUESTION:
You are given a string s consisting of |s| small english letters.

In one move you can replace any character of this string to the next character in alphabetical order (a will be replaced with b, s will be replaced with t, etc.). You cannot replace letter z with any other letter.

Your target is to make some number of moves (not necessary minimal) to get string abcdefghijklmnopqrstuvwxyz (english alphabet) as a subsequence. Subsequence of the string is the string that is obtained by deleting characters at some positions. You need to print the string that will be obtained from the given string and will be contain english alphabet as a subsequence or say that it is impossible.


-----Input-----

The only one line of the input consisting of the string s consisting of |s| (1 ≤ |s| ≤ 10^5) small english letters.


-----Output-----

If you can get a string that can be obtained from the given string and will contain english alphabet as a subsequence, print it. Otherwise print «-1» (without quotes).


-----Examples-----
Input
aacceeggiikkmmooqqssuuwwyy

Output
abcdefghijklmnopqrstuvwxyz

Input
thereisnoanswer

Output
-1
Use user-input-Based format and function signature solve()","
def solve():
    import string

    s = input().strip()
    alphabet = string.ascii_lowercase
    target = 'abcdefghijklmnopqrstuvwxyz'
    
    idx = 0
    result = ''
    
    for char in s:
        if char == target[idx]:
            result += char
            idx += 1
            if idx == 26:
                break
    
    if len(result) == 26:
        print(result)
    else:
        print(-1)

solve()","
def solve():
    import string

    s = input().strip()
    alphabet = string.ascii_lowercase

    result = []
    curr_index = 0

    for c in s:
        while curr_index < 26 and (c > alphabet[curr_index] or alphabet[curr_index] in result):
            curr_index += 1

        if curr_index == 26:
            print(""-1"")
            return

        if c == alphabet[curr_index]:
            result.append(c)

    if len(result) < 26:
        print(""-1"")
    else:
        print("""".join(result))

solve()
","
def solve():
    import string

    s = input()
    alphabet = string.ascii_lowercase

    result = []
    i = 0
    for char in s:
        if char <= alphabet[i]:
            result.append(alphabet[i])
            i += 1
        if i == 26:
            break

    if i == 26:
        return ''.join(result)
    else:
        return '-1'

solve()","
def solve():
    import string

    s = input().strip()
    alphabet = string.ascii_lowercase
    pointer = 0
    result = []

    for i in range(len(s)):
        if s[i] <= alphabet[pointer]:
            result.append(alphabet[pointer])
            pointer += 1
        if pointer == 26:
            break

    if pointer == 26:
        print(''.join(result))
    else:
        print(-1)

solve()
","26.666666666666668","26.666666666666668","0.0","60.0","","","",""
"APPS/109","
QUESTION:
While Grisha was celebrating New Year with Ded Moroz, Misha gifted Sasha a small rectangular pond of size n × m, divided into cells of size 1 × 1, inhabited by tiny evil fishes (no more than one fish per cell, otherwise they'll strife!).

The gift bundle also includes a square scoop of size r × r, designed for fishing. If the lower-left corner of the scoop-net is located at cell (x, y), all fishes inside the square (x, y)...(x + r - 1, y + r - 1) get caught. Note that the scoop-net should lie completely inside the pond when used.

Unfortunately, Sasha is not that skilled in fishing and hence throws the scoop randomly. In order to not frustrate Sasha, Misha decided to release k fishes into the empty pond in such a way that the expected value of the number of caught fishes is as high as possible. Help Misha! In other words, put k fishes in the pond into distinct cells in such a way that when the scoop-net is placed into a random position among (n - r + 1)·(m - r + 1) possible positions, the average number of caught fishes is as high as possible.


-----Input-----

The only line contains four integers n, m, r, k (1 ≤ n, m ≤ 10^5, 1 ≤ r ≤ min(n, m), 1 ≤ k ≤ min(n·m, 10^5)).


-----Output-----

Print a single number — the maximum possible expected number of caught fishes.

You answer is considered correct, is its absolute or relative error does not exceed 10^{ - 9}. Namely, let your answer be a, and the jury's answer be b. Your answer is considered correct, if $\frac{|a - b|}{\operatorname{max}(1,|b|)} \leq 10^{-9}$.


-----Examples-----
Input
3 3 2 3

Output
2.0000000000

Input
12 17 9 40

Output
32.8333333333



-----Note-----

In the first example you can put the fishes in cells (2, 1), (2, 2), (2, 3). In this case, for any of four possible positions of the scoop-net (highlighted with light green), the number of fishes inside is equal to two, and so is the expected value. [Image]
Use user-input-Based format and function signature solve()","
def solve():
    import sys
    n, m, r, k = map(int, sys.stdin.readline().split())
    if r > n or r > m:
        r = min(n, m)
    if k == 1:
        print(""{:.10f}"".format(min(n - r + 1, m - r + 1)))
    else:
        s = (r * r) * k
        if s >= n * m:
            print(""{:.10f}"".format(n * m))
        else:
            l, r = 0, 2 * 10 ** 9
            while r - l > 10 ** -9:
                mid = (l + r) / 2
                cnt = 0
                for i in range(1, n + 1):
                    cnt += min(m, mid // i)
                if cnt < k:
                    l = mid
                else:
                    r = mid
            print(""{:.10f}"".format(l))

solve()","
def solve():
    import math

    n, m, r, k = map(int, input().split())
    
    def count_fishes(x, y):
        x_start = max(1, x - r + 1)
        x_end = min(n - r + 1, x)
        y_start = max(1, y - r + 1)
        y_end = min(m - r + 1, y)
        return (x_end - x_start + 1) * (y_end - y_start + 1)

    def caught_fishes(x, y):
        return count_fishes(x, y) * (n - r + 1) * (m - r + 1)
    
    def binary_search():
        left, right = 1, n * m
        while left < right:
            mid = (left + right) / 2
            count = sum(caught_fishes(x, y) for x in range(1, n + 1) for y in range(1, m + 1)) / n / m
            if count < mid:
                right = mid
            else:
                left = mid + 1
        return left - 1

    print(""{:.10f}"".format(binary_search()))

solve()
","
def solve():
    import math
    
    n, m, r, k = map(int, input().split())
    
    if k * r * r >= n * m:
        print(""{:.10f}"".format(n * m))
    else:
        cells = [(i + 1, j + 1) for i in range(n) for j in range(m)]
        max_fishes = 0
        for i in range(len(cells)):
            for j in range(i + 1, len(cells)):
                x1, y1 = cells[i]
                x2, y2 = cells[j]
                dx = abs(x1 - x2) + 1
                dy = abs(y1 - y2) + 1
                fishes_inside = max(0, r - dx + 1) * max(0, r - dy + 1)
                max_fishes = max(max_fishes, fishes_inside)
        
        total_fishes = min(k, max_fishes)
        # Expected value calculation based on probability
        expected_fishes = total_fishes + (k - total_fishes) * (max_fishes / 2)
        
        print(""{:.10f}"".format(expected_fishes))

solve()
","
from functools import reduce

def solve():
    n, m, r, k = map(int, input().split())
    if r > n or r > m:
        r = min(n, m)
    if k <= (r * r + 1) // 2:
        print(k)
    else:
        k -= (r * r + 1) // 2
        print(""{:.10f}"".format(1 + (4 * k + 4 * r - 2 * n - 2 * m) / (2 * r)))

solve()","6.666666666666667","0.0","6.666666666666667","0.0","","","",""
"APPS/110","
QUESTION:
Nick had received an awesome array of integers $a=[a_1, a_2, \dots, a_n]$ as a gift for his $5$ birthday from his mother. He was already going to explore its various properties but after unpacking he was disappointed a lot because the product $a_1 \cdot a_2 \cdot \dots a_n$ of its elements seemed to him not large enough.

He was ready to throw out the array, but his mother reassured him. She told him, that array would not be spoiled after the following operation: choose any index $i$ ($1 \le i \le n$) and do $a_i := -a_i - 1$.

For example, he can change array $[3, -1, -4, 1]$ to an array $[-4, -1, 3, 1]$ after applying this operation to elements with indices $i=1$ and $i=3$. 

Kolya had immediately understood that sometimes it's possible to increase the product of integers of the array a lot. Now he has decided that he wants to get an array with the maximal possible product of integers using only this operation with its elements (possibly zero, one or more times, as many as he wants), it is not forbidden to do this operation several times for the same index. 

Help Kolya and print the array with the maximal possible product of elements $a_1 \cdot a_2 \cdot \dots a_n$ which can be received using only this operation in some order.

If there are multiple answers, print any of them.


-----Input-----

The first line contains integer $n$ ($1 \leq n \leq 10^{5}$) — number of integers in the array.

The second line contains $n$ integers $a_1, a_2, \ldots, a_n$ ($-10^{6} \leq a_i \leq 10^{6}$) — elements of the array


-----Output-----

Print $n$ numbers — elements of the array with the maximal possible product of elements which can be received using only this operation in some order from the given array.

If there are multiple answers, print any of them.


-----Examples-----
Input
4
2 2 2 2

Output
-3 -3 -3 -3 
Input
1
0

Output
0 
Input
3
-3 -3 2

Output
-3 -3 2
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    negatives = sum(1 for num in a if num < 0)
    
    if negatives % 2 == 0:
        for i in range(n):
            if a[i] < 0:
                a[i] = -a[i] - 1
    else:
        min_abs = min(abs(num) for num in a)
        for i in range(n):
            if abs(a[i]) == min_abs:
                a[i] = -a[i] - 1
    
    print(*a)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    negatives = 0
    num_zeros = 0
    for i in range(n):
        if a[i] < 0:
            negatives += 1
        elif a[i] == 0:
            num_zeros += 1

    if num_zeros > 0:
        for i in range(n):
            if a[i] < 0:
                a[i] = -a[i] - 1
        print(*a)
    else:
        if negatives % 2 == 0:
            for i in range(n):
                if a[i] < 0:
                    a[i] = -a[i] - 1
            print(*a)
        else:
            min_abs = min(abs(val) for val in a)
            for i in range(n):
                if abs(a[i]) == min_abs:
                    a[i] = -a[i] - 1
                    break
            print(*a)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    negatives = sum(1 for num in a if num < 0)
    
    if negatives % 2 == 0:
        result = [-1*num-1 if num != 0 else num for num in a]
    else:
        min_abs = min(abs(num) for num in a)
        result = [-1*num-1 if abs(num) == min_abs else num for num in a]
        
    print(*result)

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    negative_count = 0
    zero_count = 0

    for i in range(n):
        if a[i] < 0:
            negative_count += 1
            a[i] = -a[i] - 1
        elif a[i] == 0:
            zero_count += 1

    if zero_count == 0 and negative_count % 2 == 1:
        min_negative = float('inf')
        min_negative_idx = -1

        for i in range(n):
            if abs(a[i]) < min_negative:
                min_negative = abs(a[i])
                min_negative_idx = i

        a[min_negative_idx] = -a[min_negative_idx] - 1

    print(*a)

solve()
","13.333333333333334","20.0","26.666666666666668","6.666666666666667","","","",""
"APPS/111","
QUESTION:
You are given two integers n and k. Find k-th smallest divisor of n, or report that it doesn't exist.

Divisor of n is any such natural number, that n can be divided by it without remainder.


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 10^15, 1 ≤ k ≤ 10^9).


-----Output-----

If n has less than k divisors, output -1.

Otherwise, output the k-th smallest divisor of n.


-----Examples-----
Input
4 2

Output
2

Input
5 3

Output
-1

Input
12 5

Output
6



-----Note-----

In the first example, number 4 has three divisors: 1, 2 and 4. The second one is 2.

In the second example, number 5 has only two divisors: 1 and 5. The third divisor doesn't exist, so the answer is -1.
Use user-input-Based format and function signature solve()","
import math

def solve():
    n, k = map(int, input().split())
    
    divisors = []
    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:
            divisors.append(i)
            if i != n // i:
                divisors.append(n // i)
    
    divisors.sort()
    
    if len(divisors) < k:
        print(-1)
    else:
        print(divisors[k - 1])

solve()
","
import math

def solve():
    n, k = map(int, input().split())

    divisors = []
    for i in range(1, math.isqrt(n) + 1):
        if n % i == 0:
            divisors.append(i)
            if i != n // i:
                divisors.append(n // i)

    divisors.sort()
    
    if k > len(divisors):
        print(-1)
    else:
        print(divisors[k - 1])

solve()","
def solve():
    import math

    def count_divisors(n):
        count = 0
        for i in range(1, int(math.sqrt(n)) + 1):
            if n % i == 0:
                count += 2 if n // i != i else 1
        return count

    n, k = map(int, input().split())
    divisors_count = count_divisors(n)

    if divisors_count < k:
        print(-1)
    else:
        for i in range(1, n + 1):
            if n % i == 0:
                k -= 1
                if k == 0:
                    print(i)
                    break

solve()
  ","
from math import sqrt

def solve():
    n, k = map(int, input().split())
    
    divisors = []
    for i in range(1, int(sqrt(n)) + 1):
        if n % i == 0:
            divisors.append(i)
            if i != n // i:
                divisors.append(n // i)
    
    divisors.sort()
    
    if k > len(divisors):
        print(-1)
    else:
        print(divisors[k - 1])

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/112","
QUESTION:
Absent-minded Masha got set of n cubes for her birthday.

At each of 6 faces of each cube, there is exactly one digit from 0 to 9. Masha became interested what is the largest natural x such she can make using her new cubes all integers from 1 to x.

To make a number Masha can rotate her cubes and put them in a row. After that, she looks at upper faces of cubes from left to right and reads the number.

The number can't contain leading zeros. It's not required to use all cubes to build a number.

Pay attention: Masha can't make digit 6 from digit 9 and vice-versa using cube rotations.


-----Input-----

In first line integer n is given (1 ≤ n ≤ 3) — the number of cubes, Masha got for her birthday.

Each of next n lines contains 6 integers a_{i}_{j} (0 ≤ a_{i}_{j} ≤ 9) — number on j-th face of i-th cube.


-----Output-----

Print single integer — maximum number x such Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.


-----Examples-----
Input
3
0 1 2 3 4 5
6 7 8 9 0 1
2 3 4 5 6 7

Output
87
Input
3
0 1 3 5 6 8
1 2 4 5 7 8
2 3 4 6 7 9

Output
98


-----Note-----

In the first test case, Masha can build all numbers from 1 to 87, but she can't make 88 because there are no two cubes with digit 8.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    cubes = [list(map(int, input().split())) for _ in range(n)]
    
    digits = set()
    for cube in cubes:
        for digit in cube:
            digits.add(digit)
    
    for i in range(1, 100):
        num_str = str(i)
        valid = True
        for digit in num_str:
            if int(digit) not in digits:
                valid = False
                break
        if valid:
            x = i
        else:
            break
    
    print(x)

solve()
","
def solve():
    n = int(input())
    cubes = [list(map(int, input().split())) for _ in range(n)]

    digits_possible = set()
    for cube in cubes:
        digits = set([cube[i] for i in range(6)])
        digits_possible.update(digits)
    
    max_number = 0
    for i in range(1, 100):
        used_digits = set(map(int, str(i)))
        if used_digits.issubset(digits_possible):
            max_number = i
        else:
            break

    print(max_number)

if __name__ == '__main__':
    solve()
","
def solve():
    n = int(input())
    cubes = [list(map(int, input().split())) for _ in range(n)]

    faces = set()
    for cube in cubes:
        for face in cube:
            faces.add(face)

    for i in range(1, 100):
        x = str(i)
        valid = True
        for digit in x:
            if int(digit) not in faces:
                valid = False
                break
        if valid:
            max_num = i
        else:
            break

    print(max_num)

solve()
","
def solve():
    n = int(input())
    cubes = [list(map(int, input().split())) for _ in range(n)]
    
    possible_nums = set()
    
    for c in cubes:
        for i, face in enumerate(c):
            if face == 6:
                possible_nums.add(9)
            elif face == 9:
                possible_nums.add(6)
            else:
                possible_nums.add(face)
    
    possible_nums = list(possible_nums)
    possible_nums.sort(reverse=True)
    
    max_num = 0
    for i in range(1, len(possible_nums)+1):
        if set(map(int, str(i)).issubset(possible_nums):
            max_num = i
        else:
            break
    
    print(max_num)

solve()","66.66666666666666","86.66666666666667","66.66666666666666","0.0","","","",""
"APPS/113","
QUESTION:
For a given positive integer n denote its k-rounding as the minimum positive integer x, such that x ends with k or more zeros in base 10 and is divisible by n.

For example, 4-rounding of 375 is 375·80 = 30000. 30000 is the minimum integer such that it ends with 4 or more zeros and is divisible by 375.

Write a program that will perform the k-rounding of n.


-----Input-----

The only line contains two integers n and k (1 ≤ n ≤ 10^9, 0 ≤ k ≤ 8).


-----Output-----

Print the k-rounding of n.


-----Examples-----
Input
375 4

Output
30000

Input
10000 1

Output
10000

Input
38101 0

Output
38101

Input
123456789 8

Output
12345678900000000
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    x = n
    while x % 10**k != 0:
        x += n
    print(x)

solve()
","
def solve():
    n, k = map(int, input().split())
    if k == 0:
        print(n)
    else:
        x = 10**k
        result = (n * x)
        print(result - (result % n))

solve()
","
def solve():
    import math
    
    n, k = map(int, input().split())
    
    x = n * 10**k
    gcd_val = math.gcd(n, 10**k)
    
    print(x // gcd_val * gcd_val)

solve()
","
def solve():
    n, k = map(int, input().split())

    if k == 0:
        print(n)
    else:
        x = n
        for i in range(k):
            if x % 10 != 0:
                x *= 10
            else:
                break
        print(x)

if __name__ == ""__main__"":
    solve()
","100.0","66.66666666666666","66.66666666666666","66.66666666666666","","","",""
"APPS/114","
QUESTION:
You are given two matrices $A$ and $B$. Each matrix contains exactly $n$ rows and $m$ columns. Each element of $A$ is either $0$ or $1$; each element of $B$ is initially $0$.

You may perform some operations with matrix $B$. During each operation, you choose any submatrix of $B$ having size $2 \times 2$, and replace every element in the chosen submatrix with $1$. In other words, you choose two integers $x$ and $y$ such that $1 \le x < n$ and $1 \le y < m$, and then set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$.

Your goal is to make matrix $B$ equal to matrix $A$. Two matrices $A$ and $B$ are equal if and only if every element of matrix $A$ is equal to the corresponding element of matrix $B$.

Is it possible to make these matrices equal? If it is, you have to come up with a sequence of operations that makes $B$ equal to $A$. Note that you don't have to minimize the number of operations.


-----Input-----

The first line contains two integers $n$ and $m$ ($2 \le n, m \le 50$).

Then $n$ lines follow, each containing $m$ integers. The $j$-th integer in the $i$-th line is $A_{i, j}$. Each integer is either $0$ or $1$.


-----Output-----

If it is impossible to make $B$ equal to $A$, print one integer $-1$.

Otherwise, print any sequence of operations that transforms $B$ into $A$ in the following format: the first line should contain one integer $k$ — the number of operations, and then $k$ lines should follow, each line containing two integers $x$ and $y$ for the corresponding operation (set $B_{x, y}$, $B_{x, y + 1}$, $B_{x + 1, y}$ and $B_{x + 1, y + 1}$ to $1$). The condition $0 \le k \le 2500$ should hold.


-----Examples-----
Input
3 3
1 1 1
1 1 1
0 1 1

Output
3
1 1
1 2
2 2

Input
3 3
1 0 1
1 0 1
0 0 0

Output
-1

Input
3 2
0 0
0 0
0 0

Output
0



-----Note-----

The sequence of operations in the first example: $\begin{matrix} 0 & 0 & 0 & & 1 & 1 & 0 & & 1 & 1 & 1 & & 1 & 1 & 1 \\ 0 & 0 & 0 & \rightarrow & 1 & 1 & 0 & \rightarrow & 1 & 1 & 1 & \rightarrow & 1 & 1 & 1 \\ 0 & 0 & 0 & & 0 & 0 & 0 & & 0 & 0 & 0 & & 0 & 1 & 1 \end{matrix}$
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    A = [list(map(int, input().split())) for _ in range(n)]
    B = [[0] * m for _ in range(n)]
    operations = []

    for i in range(n-1):
        for j in range(m-1):
            if A[i][j] == 1:
                operations.append((i+1, j+1))
                B[i][j] = 1
                B[i][j+1] = 1
                B[i+1][j] = 1
                B[i+1][j+1] = 1

    if A == B:
        print(len(operations))
        for op in operations:
            print(op[0], op[1])
    else:
        print(-1)

import sys
if __name__ == ""__main__"":
    solve()
","
def solve():
    n, m = map(int, input().split())
    a = [list(map(int, input().split())) for _ in range(n)]
    b = [[0] * m for _ in range(n)]
    operations = []

    for i in range(n-1):
        for j in range(m-1):
            if a[i][j] == 1:
                operations.append((i+1, j+1))
                b[i][j] = 1
                b[i][j+1] = 1
                b[i+1][j] = 1
                b[i+1][j+1] = 1

    if a == b:
        print(len(operations))
        for op in operations:
            print(*op)
    else:
        print(-1)

# Input example
solve()
  ","
from copy import deepcopy

def solve(n, m, A):
    B = [[0 for _ in range(m)] for _ in range(n)]
    
    def operation(x, y):
        B[x][y] = 1
        B[x][y+1] = 1
        B[x+1][y] = 1
        B[x+1][y+1] = 1
    
    ops = []
    
    for i in range(n-1):
        for j in range(m-1):
            if A[i][j] == 1:
                if B[i][j] == 0:
                    operation(i, j)
                    ops.append((i+1, j+1))
                else:
                    if B[i+1][j] == 0:
                        operation(i+1, j)
                        ops.append((i+2, j+1))
                    elif B[i][j+1] == 0:
                        operation(i, j+1)
                        ops.append((i+1, j+2))
                    elif B[i+1][j+1] == 0:
                        operation(i+1, j+1)
                        ops.append((i+2, j+2))
                    else:
                        print(-1)
                        return
    
    print(len(ops))
    for op in ops:
        print(op[0], op[1])

# Example usage:
n, m = 3, 3
A = [
    [1, 1, 1],
    [1, 1, 1],
    [0, 1, 1]
]

solve(n, m, A)

solve()","
def solve():
    n, m = map(int, input().split())
    A = [list(map(int, input().split())) for _ in range(n)]
    B = [[0] * m for _ in range(n)]

    operations = []
    for i in range(n-1):
        for j in range(m-1):
            if A[i][j] == 1:
                operations.append((i+1, j+1))
                B[i][j] = 1
                B[i][j+1] = 1
                B[i+1][j] = 1
                B[i+1][j+1] = 1

    if A == B:
        print(len(operations))
        for op in operations:
            print(op[0], op[1])
    else:
        print(-1)

solve()
","80.0","80.0","0.0","80.0","","","",""
"APPS/115","
QUESTION:
The Bad Luck Island is inhabited by three kinds of species: r rocks, s scissors and p papers. At some moments of time two random individuals meet (all pairs of individuals can meet equiprobably), and if they belong to different species, then one individual kills the other one: a rock kills scissors, scissors kill paper, and paper kills a rock. Your task is to determine for each species what is the probability that this species will be the only one to inhabit this island after a long enough period of time.


-----Input-----

The single line contains three integers r, s and p (1 ≤ r, s, p ≤ 100) — the original number of individuals in the species of rock, scissors and paper, respectively.


-----Output-----

Print three space-separated real numbers: the probabilities, at which the rocks, the scissors and the paper will be the only surviving species, respectively. The answer will be considered correct if the relative or absolute error of each number doesn't exceed 10^{ - 9}.


-----Examples-----
Input
2 2 2

Output
0.333333333333 0.333333333333 0.333333333333

Input
2 1 2

Output
0.150000000000 0.300000000000 0.550000000000

Input
1 1 3

Output
0.057142857143 0.657142857143 0.285714285714
Use user-input-Based format and function signature solve()","
def solve():
    r, s, p = map(int, input().split())
    dp = [[[0.0] * 101 for _ in range(101)] for _ in range(101)]
    dp[r][s][p] = 1.0

    for i in range(r, -1, -1):
        for j in range(s, -1, -1):
            for k in range(p, -1, -1):
                total = i * j + j * k + k * i
                if total == 0:
                    continue
                if i >= 1:
                    dp[i - 1][j][k] += dp[i][j][k] * (i * k) / total
                if j >= 1:
                    dp[i][j - 1][k] += dp[i][j][k] * (j * i) / total
                if k >= 1:
                    dp[i][j][k - 1] += dp[i][j][k] * (k * j) / total

    res_r = res_s = res_p = 0.0
    for i in range(1, 101):
        res_r += dp[i][0][0]
        res_s += dp[0][i][0]
        res_p += dp[0][0][i]

    print(""{:.12f} {:.12f} {:.12f}"".format(res_r, res_s, res_p))

solve()
","
def solve():
    r, s, p = map(int, input().split())

    dp = [[[0.0 for _ in range(p+1)] for _ in range(s+1)] for _ in range(r+1)]
    dp[r][s][p] = 1.0

    for i in range(r, -1, -1):
        for j in range(s, -1, -1):
            for k in range(p, -1, -1):
                total = i*j + j*k + k*i

                if total == 0:
                    continue

                if i > 0:
                    dp[i-1][j][k] += dp[i][j][k] * (i*k) / total
                if j > 0:
                    dp[i][j-1][k] += dp[i][j][k] * (i*j) / total
                if k > 0:
                    dp[i][j][k-1] += dp[i][j][k] * (j*k) / total

    print(""{:.12f} {:.12f} {:.12f}"".format(dp[0][0][p], dp[0][s][0], dp[r][0][0]))
    
import sys
if 'ipykernel' in sys.modules:
    solve()
","
def solve():
    r, s, p = map(int, input().split())
    dp = [[[0.0 for _ in range(p+1)] for _ in range(s+1)] for _ in range(r+1)]
    dp[r][s][p] = 1.0
    for i in range(r, -1, -1):
        for j in range(s, -1, -1):
            for k in range(p, -1, -1):
                denom = i * j + j * k + k * i
                if denom == 0:
                    continue
                if i > 0:
                    dp[i-1][j][k] += dp[i][j][k] * i * k / denom
                if j > 0:
                    dp[i][j-1][k] += dp[i][j][k] * j * i / denom
                if k > 0:
                    dp[i][j][k-1] += dp[i][j][k] * k * j / denom
    
    sr, ss, sp = 0, 0, 0
    for i in range(1, r+1):
        sr += dp[i][0][0]
    for j in range(1, s+1):
        ss += dp[0][j][0]
    for k in range(1, p+1):
        sp += dp[0][0][k]
    
    print(f""{sr:.12f} {ss:.12f} {sp:.12f}"")

solve()
","
def solve():
    r, s, p = map(int, input().split())
    dp = [[[0.0] * 101 for _ in range(101)] for _ in range(101)]
    dp[r][s][p] = 1.0
    
    for x in range(r, -1, -1):
        for y in range(s, -1, -1):
            for z in range(p, -1, -1):
                total = x * y + y * z + z * x
                
                if total == 0:
                    continue
                
                if x > 0:
                    dp[x - 1][y][z] += dp[x][y][z] * x * z / total
                if y > 0:
                    dp[x][y - 1][z] += dp[x][y][z] * y * x / total
                if z > 0:
                    dp[x][y][z - 1] += dp[x][y][z] * z * y / total
                
    res_r = res_s = res_p = 0.0
    for x in range(101):
        for y in range(101):
            for z in range(101):
                if x > 0 and y == 0 and z == 0:
                    res_r += dp[x][y][z]
                if x == 0 and y > 0 and z == 0:
                    res_s += dp[x][y][z]
                if x == 0 and y == 0 and z > 0:
                    res_p += dp[x][y][z]
    
    print(""{:.12f} {:.12f} {:.12f}"".format(res_r, res_s, res_p))

solve()
","100.0","0.0","100.0","100.0","","","",""
"APPS/116","
QUESTION:
Today an outstanding event is going to happen in the forest — hedgehog Filya will come to his old fried Sonya!

Sonya is an owl and she sleeps during the day and stay awake from minute l_1 to minute r_1 inclusive. Also, during the minute k she prinks and is unavailable for Filya.

Filya works a lot and he plans to visit Sonya from minute l_2 to minute r_2 inclusive.

Calculate the number of minutes they will be able to spend together.


-----Input-----

The only line of the input contains integers l_1, r_1, l_2, r_2 and k (1 ≤ l_1, r_1, l_2, r_2, k ≤ 10^18, l_1 ≤ r_1, l_2 ≤ r_2), providing the segments of time for Sonya and Filya and the moment of time when Sonya prinks.


-----Output-----

Print one integer — the number of minutes Sonya and Filya will be able to spend together.


-----Examples-----
Input
1 10 9 20 1

Output
2

Input
1 100 50 200 75

Output
50



-----Note-----

In the first sample, they will be together during minutes 9 and 10.

In the second sample, they will be together from minute 50 to minute 74 and from minute 76 to minute 100.
Use user-input-Based format and function signature solve()","
def solve():
    l1, r1, l2, r2, k = map(int, input().split())
    start = max(l1, l2)
    end = min(r1, r2)
    overlap = max(0, end - start + 1)
    if k >= start and k <= end:
        overlap -= 1
    print(overlap)

solve()
","
def solve():
    l1, r1, l2, r2, k = map(int, input().split())
    start = max(l1, l2)
    end = min(r1, r2)
    
    if start > end:
        print(0)
    else:
        if k >= start and k <= end:
            print(end - start)
        else:
            print(end - start + 1)

solve()
","
def solve():
    l1, r1, l2, r2, k = map(int, input().split())
    intersect_left = max(l1, l2)
    intersect_right = min(r1, r2)
    overlap = max(0, intersect_right - intersect_left + 1)
    if l2 <= k <= r2:
        overlap -= 1
    print(overlap)

solve()
","
def solve():
    l1, r1, l2, r2, k = map(int, input().split())
    
    intersect_start = max(l1, l2)
    intersect_end = min(r1, r2)
    
    total_time_spent_together = max(0, intersect_end - intersect_start + 1)
    
    if k >= intersect_start and k <= intersect_end:
        total_time_spent_together -= 1
    
    print(total_time_spent_together)

solve()
","100.0","100.0","93.33333333333333","100.0","","","",""
"APPS/117","
QUESTION:
There is a grass field that stretches infinitely.
In this field, there is a negligibly small cow. Let (x, y) denote the point that is x\ \mathrm{cm} south and y\ \mathrm{cm} east of the point where the cow stands now. The cow itself is standing at (0, 0).
There are also N north-south lines and M east-west lines drawn on the field. The i-th north-south line is the segment connecting the points (A_i, C_i) and (B_i, C_i), and the j-th east-west line is the segment connecting the points (D_j, E_j) and (D_j, F_j).
What is the area of the region the cow can reach when it can move around as long as it does not cross the segments (including the endpoints)? If this area is infinite, print INF instead.

-----Constraints-----
 - All values in input are integers between -10^9 and 10^9  (inclusive).
 - 1 \leq N, M \leq 1000
 - A_i < B_i\ (1 \leq i \leq N)
 - E_j < F_j\ (1 \leq j \leq M)
 - The point (0, 0) does not lie on any of the given segments.

-----Input-----
Input is given from Standard Input in the following format:
N M
A_1 B_1 C_1
:
A_N B_N C_N
D_1 E_1 F_1
:
D_M E_M F_M

-----Output-----
If the area of the region the cow can reach is infinite, print INF; otherwise, print an integer representing the area in \mathrm{cm^2}.
(Under the constraints, it can be proved that the area of the region is always an integer if it is not infinite.)

-----Sample Input-----
5 6
1 2 0
0 1 1
0 2 2
-3 4 -1
-2 6 3
1 0 1
0 1 2
2 0 2
-1 -4 5
3 -2 4
1 2 4

-----Sample Output-----
13

The area of the region the cow can reach is 13\ \mathrm{cm^2}.
Use user-input-Based format and function signature solve()","
def solve():
    import sys
    input = sys.stdin.readline

    N, M = map(int, input().split())
    vertical_lines = [list(map(int, input().split())) for _ in range(N)]
    horizontal_lines = [list(map(int, input().split())) for _ in range(M)]

    vertical_lines.sort()
    horizontal_lines.sort()

    def get_area_between_lines(lines):
        area = 0
        prev_end = -10**9
        for start, end, _ in lines:
            if start > prev_end:
                area += end - start
            else:
                area += max(0, end - prev_end)
            prev_end = max(prev_end, end)
        return area

    vertical_area = get_area_between_lines(vertical_lines)
    horizontal_area = get_area_between_lines(horizontal_lines)

    if vertical_area == 0 or horizontal_area == 0:
        print(""INF"")
    else:
        print(vertical_area * horizontal_area)

solve()
","
def solve():
    from collections import defaultdict
    
    N, M = map(int, input().split())
    ns_lines = defaultdict(list)
    ew_lines = defaultdict(list)
    
    for _ in range(N):
        A, B, C = map(int, input().split())
        for x in range(A, B):
            ns_lines[C].append(x)
    
    for _ in range(M):
        D, E, F = map(int, input().split())
        for y in range(E, F):
            ew_lines[D].append(y)
    
    reachable_points = set()
    
    for C, ns_segment in ns_lines.items():
        for x in range(min(ns_segment), max(ns_segment) + 1):
            for y in range(-10**9, 10**9):
                reachable_points.add((x, y))
    
    for D, ew_segment in ew_lines.items():
        for y in range(min(ew_segment), max(ew_segment) + 1):
            for x in range(-10**9, 10**9):
                reachable_points.add((x, y))
    
    if len(reachable_points) == 10**18:
        print(""INF"")
    else:
        print(len(reachable_points))
  
solve()","
def solve():
    import sys
    input = sys.stdin.readline

    N, M = map(int, input().split())

    north_south_lines = [list(map(int, input().split())) for _ in range(N)]
    east_west_lines = [list(map(int, input().split())) for _ in range(M)]

    min_x = min([line[0] for line in north_south_lines])
    max_x = max([line[1] for line in north_south_lines])
    min_y = min([line[1] for line in east_west_lines])
    max_y = max([line[2] for line in east_west_lines])

    area = (max_x - min_x) * (max_y - min_y)

    if area < 0:
        print(""INF"")
    else:
        print(area)


solve()
","
def solve():
    import sys
    input = sys.stdin.readline
    N, M = map(int, input().split())
    vertical_lines = [tuple(map(int, input().split())) for _ in range(N)]
    horizontal_lines = [tuple(map(int, input().split())) for _ in range(M)]
    
    vertical_lines.sort(key=lambda x: x[0])
    horizontal_lines.sort(key=lambda x: x[1])
    
    x_vals = [0]
    y_vals = [0]
    
    for a, b, c in vertical_lines:
        if a < 0 and b > 0:
            x_vals.append(a)
            x_vals.append(b)
    
    for d, e, f in horizontal_lines:
        if e < 0 and f > 0:
            y_vals.append(e)
            y_vals.append(f)
    
    x_vals.sort()
    y_vals.sort()
    
    area = 0
    
    for i in range(1, len(x_vals)):
        for j in range(1, len(y_vals)):
            count = 0
            x1, x2 = x_vals[i - 1], x_vals[i]
            y1, y2 = y_vals[j - 1], y_vals[j]
            for a, b, c in vertical_lines:
                if x1 < a < x2 and y1 < c < y2:
                    count += 1
            for d, e, f in horizontal_lines:
                if x1 < d < x2 and y1 < e < y2:
                    count += 1
            if count % 2 == 1:
                area += (x2 - x1) * (y2 - y1)
    
    if area == 0:
        print(""INF"")
    else:
        print(area)

solve()
","0.0","0","0.0","7.142857142857142","","","",""
"APPS/118","
QUESTION:
Ted has a pineapple. This pineapple is able to bark like a bulldog! At time t (in seconds) it barks for the first time. Then every s seconds after it, it barks twice with 1 second interval. Thus it barks at times t, t + s, t + s + 1, t + 2s, t + 2s + 1, etc.

 [Image] 

Barney woke up in the morning and wants to eat the pineapple, but he can't eat it when it's barking. Barney plans to eat it at time x (in seconds), so he asked you to tell him if it's gonna bark at that time.


-----Input-----

The first and only line of input contains three integers t, s and x (0 ≤ t, x ≤ 10^9, 2 ≤ s ≤ 10^9) — the time the pineapple barks for the first time, the pineapple barking interval, and the time Barney wants to eat the pineapple respectively.


-----Output-----

Print a single ""YES"" (without quotes) if the pineapple will bark at time x or a single ""NO"" (without quotes) otherwise in the only line of output.


-----Examples-----
Input
3 10 4

Output
NO

Input
3 10 3

Output
YES

Input
3 8 51

Output
YES

Input
3 8 52

Output
YES



-----Note-----

In the first and the second sample cases pineapple will bark at moments 3, 13, 14, ..., so it won't bark at the moment 4 and will bark at the moment 3.

In the third and fourth sample cases pineapple will bark at moments 3, 11, 12, 19, 20, 27, 28, 35, 36, 43, 44, 51, 52, 59, ..., so it will bark at both moments 51 and 52.
Use user-input-Based format and function signature solve()","
def solve():
    t, s, x = map(int, input().split())
    
    if x < t:
        print(""NO"")
    elif (x - t) % s == 0 or (x - t - 1) % s == 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    t, s, x = map(int, input().split())
    if t == x:
        print(""YES"") 
    elif t > x:
        print(""NO"")
    elif (x - t) % s == 0 or ((x - t) - 1) % s == 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    t, s, x = map(int, input().split())
    if (x - t) % s == 0 or (x - t) % s == 1 and x >= t + s:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    t, s, x = map(int, input().split())
    if x < t:
        print(""NO"")
    elif x == t:
        print(""YES"")
    else:
        rem = (x - t) % s
        if (x - t) % s == 0 or (x - t) % s == 1:
            if (x - t) // s >= 1:
                print(""YES"")
            else:
                print(""NO"")
        else:
            print(""NO"")

solve()
","93.33333333333333","93.33333333333333","93.33333333333333","100.0","","","",""
"APPS/119","
QUESTION:
You are given a sequence a_1, a_2, ..., a_{n} of one-dimensional segments numbered 1 through n. Your task is to find two distinct indices i and j such that segment a_{i} lies within segment a_{j}.

Segment [l_1, r_1] lies within segment [l_2, r_2] iff l_1 ≥ l_2 and r_1 ≤ r_2.

Print indices i and j. If there are multiple answers, print any of them. If no answer exists, print -1 -1.


-----Input-----

The first line contains one integer n (1 ≤ n ≤ 3·10^5) — the number of segments.

Each of the next n lines contains two integers l_{i} and r_{i} (1 ≤ l_{i} ≤ r_{i} ≤ 10^9) — the i-th segment.


-----Output-----

Print two distinct indices i and j such that segment a_{i} lies within segment a_{j}. If there are multiple answers, print any of them. If no answer exists, print -1 -1.


-----Examples-----
Input
5
1 10
2 9
3 9
2 3
2 9

Output
2 1

Input
3
1 5
2 6
6 20

Output
-1 -1



-----Note-----

In the first example the following pairs are considered correct:  (2, 1), (3, 1), (4, 1), (5, 1) — not even touching borders;  (3, 2), (4, 2), (3, 5), (4, 5) — touch one border;  (5, 2), (2, 5) — match exactly.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    segments = [list(map(int, input().split())) for _ in range(n)]
    
    for i in range(n):
        for j in range(n):
            if i != j and segments[j][0] <= segments[i][0] <= segments[i][1] <= segments[j][1]:
                print(i+1, j+1)
                return
    print(-1, -1)

solve()
","
def solve():
    n = int(input())
    segments = []
    for i in range(n):
        l, r = map(int, input().split())
        segments.append((l, r))
    
    for i in range(n):
        for j in range(n):
            if i != j and segments[j][0] <= segments[i][0] <= segments[i][1] <= segments[j][1]:
                print(i+1, j+1)
                return
    
    print(-1, -1)

solve()","
def solve():
    n = int(input())
    segments = [list(map(int, input().split())) for _ in range(n)]

    for i in range(n):
        for j in range(n):
            if i != j and segments[j][0] <= segments[i][0] and segments[i][1] <= segments[j][1]:
                print(i+1, j+1)
                return
    
    print(-1, -1)

solve()","
def solve():
    n = int(input())
    segments = [list(map(int, input().split())) for _ in range(n)]

    segments.sort(key=lambda x: (x[0], -x[1]))
    
    for i in range(1, n):
        if segments[i-1][0] <= segments[i][0] and segments[i-1][1] >= segments[i][1]:
            print(i+1, i)
            return
    
    print(-1, -1)

solve()","80.0","80.0","80.0","60.0","","","",""
"APPS/120","
QUESTION:
The process of mammoth's genome decoding in Berland comes to its end!

One of the few remaining tasks is to restore unrecognized nucleotides in a found chain s. Each nucleotide is coded with a capital letter of English alphabet: 'A', 'C', 'G' or 'T'. Unrecognized nucleotides are coded by a question mark '?'. Thus, s is a string consisting of letters 'A', 'C', 'G', 'T' and characters '?'.

It is known that the number of nucleotides of each of the four types in the decoded genome of mammoth in Berland should be equal.

Your task is to decode the genome and replace each unrecognized nucleotide with one of the four types so that the number of nucleotides of each of the four types becomes equal.


-----Input-----

The first line contains the integer n (4 ≤ n ≤ 255) — the length of the genome.

The second line contains the string s of length n — the coded genome. It consists of characters 'A', 'C', 'G', 'T' and '?'.


-----Output-----

If it is possible to decode the genome, print it. If there are multiple answer, print any of them. If it is not possible, print three equals signs in a row: ""==="" (without quotes).


-----Examples-----
Input
8
AG?C??CT

Output
AGACGTCT

Input
4
AGCT

Output
AGCT

Input
6
????G?

Output
===

Input
4
AA??

Output
===



-----Note-----

In the first example you can replace the first question mark with the letter 'A', the second question mark with the letter 'G', the third question mark with the letter 'T', then each nucleotide in the genome would be presented twice.

In the second example the genome is already decoded correctly and each nucleotide is exactly once in it.

In the third and the fourth examples it is impossible to decode the genom.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    s = input()

    counts = {'A': s.count('A'), 'C': s.count('C'), 'G': s.count('G'), 'T': s.count('T'), '?': s.count('?')}
    max_count = max(counts.values())

    if max_count > n // 4:
        print(""==="")
    else:
        decoded_genome = ''
        for char in s:
            if char == '?':
                for nucleotide, count in counts.items():
                    if count < n // 4:
                        decoded_genome += nucleotide
                        counts[nucleotide] += 1
                        break
            else:
                decoded_genome += char
        print(decoded_genome)

solve()
","
def solve():
    n = int(input())
    s = input()
    
    nucleotides = {'A': 0, 'C': 0, 'G': 0, 'T': 0}
    for char in s:
        if char in nucleotides:
            nucleotides[char] += 1
    
    max_count = max(nucleotides.values())
    min_count = min(nucleotides.values())
    
    if max_count - min_count > n % 4:
        print(""==="")
    else:
        for i in range(n):
            if s[i] == '?':
                for nucleotide in ['A', 'C', 'G', 'T']:
                    if nucleotides[nucleotide] < n // 4:
                        nucleotides[nucleotide] += 1
                        s = s[:i] + nucleotide + s[i+1:]
                        break
        print(s)

solve()
  ","
def solve():
    n = int(input())
    s = input()
    
    num_ques = s.count('?')
    num_nucleotides = n - num_ques
    if num_nucleotides % 4 != 0:
        print(""==="")
    else:
        num_each = num_nucleotides // 4
        if s.count('A') > num_each or s.count('C') > num_each or s.count('G') > num_each or s.count('T') > num_each:
            print(""==="")
        else:
            decoded_genome = []
            for char in s:
                if char == '?':
                    decoded_genome.append('A')
                    num_each -= 1
                else:
                    decoded_genome.append(char)
            nucleotides = ['A', 'C', 'G', 'T']
            for i in range(len(decoded_genome)):
                if decoded_genome[i] == '?':
                    decoded_genome[i] = nucleotides[num_each % 4]
                    num_each += 1
            print(''.join(decoded_genome))


solve()","
def solve():
    n = int(input())
    s = input().strip()
    
    counts = {c: s.count(c) for c in 'ACGT'}
    question_marks_count = s.count('?')
    min_count = min(counts.values())
    
    if min_count * 4 < n:
        print('===')
        return
    
    for c, count in counts.items():
        counts[c] += (n - count - question_marks_count) // 4

    res = []
    for char in s:
        if char == '?':
            for c, count in counts.items():
                if count > 0:
                    res.append(c)
                    counts[c] -= 1
                    break
        else:
            res.append(char)

    print(''.join(res))

solve()","26.666666666666668","20.0","20.0","26.666666666666668","","","",""
"APPS/121","
QUESTION:
Ilya is an experienced player in tic-tac-toe on the 4 × 4 field. He always starts and plays with Xs. He played a lot of games today with his friend Arseny. The friends became tired and didn't finish the last game. It was Ilya's turn in the game when they left it. Determine whether Ilya could have won the game by making single turn or not. 

The rules of tic-tac-toe on the 4 × 4 field are as follows. Before the first turn all the field cells are empty. The two players take turns placing their signs into empty cells (the first player places Xs, the second player places Os). The player who places Xs goes first, the another one goes second. The winner is the player who first gets three of his signs in a row next to each other (horizontal, vertical or diagonal).


-----Input-----

The tic-tac-toe position is given in four lines.

Each of these lines contains four characters. Each character is '.' (empty cell), 'x' (lowercase English letter x), or 'o' (lowercase English letter o). It is guaranteed that the position is reachable playing tic-tac-toe, and it is Ilya's turn now (in particular, it means that the game is not finished). It is possible that all the cells are empty, it means that the friends left without making single turn.


-----Output-----

Print single line: ""YES"" in case Ilya could have won by making single turn, and ""NO"" otherwise.


-----Examples-----
Input
xx..
.oo.
x...
oox.

Output
YES

Input
x.ox
ox..
x.o.
oo.x

Output
NO

Input
x..x
..oo
o...
x.xo

Output
YES

Input
o.x.
o...
.x..
ooxx

Output
NO



-----Note-----

In the first example Ilya had two winning moves: to the empty cell in the left column and to the leftmost empty cell in the first row.

In the second example it wasn't possible to win by making single turn.

In the third example Ilya could have won by placing X in the last row between two existing Xs.

In the fourth example it wasn't possible to win by making single turn.
Use user-input-Based format and function signature solve()","
def solve():
    board = [input() for _ in range(4)]

    for i in range(4):
        for j in range(4):
            if board[i][j] == '.':
                board[i] = board[i][:j] + 'x' + board[i][j+1:]
                if check_win(board):
                    print(""YES"")
                    return
                board[i] = board[i][:j] + '.' + board[i][j+1:]

    print(""NO"")

def check_win(board):
    for i in range(4):
        if board[i][0] == board[i][1] == board[i][2] == 'x' or board[i][1] == board[i][2] == board[i][3] == 'x':
            return True
        if board[0][i] == board[1][i] == board[2][i] == 'x' or board[1][i] == board[2][i] == board[3][i] == 'x':
            return True

    if board[0][0] == board[1][1] == board[2][2] == 'x' or board[1][1] == board[2][2] == board[3][3] == 'x':
        return True
    if board[0][3] == board[1][2] == board[2][1] == 'x' or board[1][2] == board[2][1] == board[3][0] == 'x':
        return True

    return False

solve()","
def solve():
    board = [input() for _ in range(4)]
    
    for i in range(4):
        for j in range(4):
            if board[i][j] == '.':
                board[i] = board[i][:j] + 'x' + board[i][j+1:]
                result = check_win(board)
                if result == ""YES"":
                    print(""YES"")
                    return
                board[i] = board[i][:j] + '.' + board[i][j+1:]
    
    print(""NO"")

def check_win(board):
    for i in range(4):
        # Check rows
        if board[i].count('x') >= 3:
            return ""YES""
        
        # Check columns
        if board[0][i] == 'x' and board[1][i] == 'x' and board[2][i] == 'x':
            return ""YES""
        
    # Check diagonals
    if board[0][0] == 'x' and board[1][1] == 'x' and board[2][2] == 'x':
        return ""YES""
    if board[0][3] == 'x' and board[1][2] == 'x' and board[2][1] == 'x':
        return ""YES""

    return ""NO""

solve()
","
def solve():
    board = [input() for _ in range(4)]

    def check_win(board, player):
        for i in range(4):
            if all([cell == player or cell == '.' for cell in board[i]]):
                return True

            if all([board[j][i] == player or board[j][i] == '.' for j in range(4)]):
                return True

        if all([board[i][i] == player or board[i][i] == '.' for i in range(4)]) or all([board[i][3-i] == player or board[i][3-i] == '.' for i in range(4)]):
            return True

        return False

    for i in range(4):
        for j in range(4):
            if board[i][j] == '.':
                board[i] = board[i][:j] + 'x' + board[i][j + 1:]
                if check_win(board, 'x'):
                    print(""YES"")
                    return
                board[i] = board[i][:j] + '.' + board[i][j + 1:]

    print(""NO"")

solve()
","
def solve():
    board = [input() for _ in range(4)]

    def check_win(char):
        for i in range(4):
            if board[i].count(char) == 3:
                return True
            if [board[j][i] for j in range(4)].count(char) == 3:
                return True
        if board[0][0] == char and board[1][1] == char and board[2][2] == char:
            return True
        if board[0][2] == char and board[1][1] == char and board[2][0] == char:
            return True
        return False

    for i in range(4):
        for j in range(4):
            if board[i][j] == '.':
                board[i] = board[i][:j] + 'x' + board[i][j + 1:]
                if check_win('x'):
                    print(""YES"")
                    return
                board[i] = board[i][:j] + '.' + board[i][j + 1:]

    print(""NO"")

solve()","86.66666666666667","60.0","60.0","53.333333333333336","","","",""
"APPS/122","
QUESTION:
Vasya has an array a consisting of positive integer numbers. Vasya wants to divide this array into two non-empty consecutive parts (the prefix and the suffix) so that the sum of all elements in the first part equals to the sum of elements in the second part. It is not always possible, so Vasya will move some element before dividing the array (Vasya will erase some element and insert it into an arbitrary position).

Inserting an element in the same position he was erased from is also considered moving.

Can Vasya divide the array after choosing the right element to move and its new position?


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 100000) — the size of the array.

The second line contains n integers a_1, a_2... a_{n} (1 ≤ a_{i} ≤ 10^9) — the elements of the array.


-----Output-----

Print YES if Vasya can divide the array after moving one element. Otherwise print NO.


-----Examples-----
Input
3
1 3 2

Output
YES

Input
5
1 2 3 4 5

Output
NO

Input
5
2 2 3 4 5

Output
YES



-----Note-----

In the first example Vasya can move the second element to the end of the array.

In the second example no move can make the division possible.

In the third example Vasya can move the fourth element by one position to the left.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    total_sum = sum(a)
    prefix_sum = 0
    suffix_sum = total_sum
    
    for i in range(n):
        prefix_sum += a[i]
        suffix_sum -= a[i]
        
        if prefix_sum == suffix_sum:
            print(""YES"")
            return
    
    for i in range(n-1):
        prefix_sum -= a[i]
        suffix_sum += a[i]
        
        if prefix_sum == suffix_sum:
            print(""YES"")
            return
    
    print(""NO"")

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    total_sum = sum(a)
    left_sum = 0
    
    for i in range(n):
        if left_sum * 2 == total_sum - a[i]:
            print(""YES"")
            return
        left_sum += a[i]
    
    print(""NO"")

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    prefix_sum = 0
    suffix_sum = sum(a)
    for i in range(n):
        prefix_sum += a[i]
        suffix_sum -= a[i]
        if prefix_sum == suffix_sum:
            print(""YES"")
            return
    print(""NO"")

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    total_sum = sum(a)
    
    prefix_sum = 0
    for i in range(n):
        prefix_sum += a[i]
        if prefix_sum * 2 == total_sum or (i < n-1 and prefix_sum * 2 + a[i+1] == total_sum) or (i > 0 and (prefix_sum + a[i-1]) * 2 == total_sum):
            print(""YES"")
            return
    
    print(""NO"")

solve()","80.0","66.66666666666666","80.0","73.33333333333333","","","",""
"APPS/123","
QUESTION:
A few years ago, Hitagi encountered a giant crab, who stole the whole of her body weight. Ever since, she tried to avoid contact with others, for fear that this secret might be noticed.

To get rid of the oddity and recover her weight, a special integer sequence is needed. Hitagi's sequence has been broken for a long time, but now Kaiki provides an opportunity.

Hitagi's sequence a has a length of n. Lost elements in it are denoted by zeros. Kaiki provides another sequence b, whose length k equals the number of lost elements in a (i.e. the number of zeros). Hitagi is to replace each zero in a with an element from b so that each element in b should be used exactly once. Hitagi knows, however, that, apart from 0, no integer occurs in a and b more than once in total.

If the resulting sequence is not an increasing sequence, then it has the power to recover Hitagi from the oddity. You are to determine whether this is possible, or Kaiki's sequence is just another fake. In other words, you should detect whether it is possible to replace each zero in a with an integer from b so that each integer from b is used exactly once, and the resulting sequence is not increasing.


-----Input-----

The first line of input contains two space-separated positive integers n (2 ≤ n ≤ 100) and k (1 ≤ k ≤ n) — the lengths of sequence a and b respectively.

The second line contains n space-separated integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 200) — Hitagi's broken sequence with exactly k zero elements.

The third line contains k space-separated integers b_1, b_2, ..., b_{k} (1 ≤ b_{i} ≤ 200) — the elements to fill into Hitagi's sequence.

Input guarantees that apart from 0, no integer occurs in a and b more than once in total.


-----Output-----

Output ""Yes"" if it's possible to replace zeros in a with elements in b and make the resulting sequence not increasing, and ""No"" otherwise.


-----Examples-----
Input
4 2
11 0 0 14
5 4

Output
Yes

Input
6 1
2 3 0 8 9 10
5

Output
No

Input
4 1
8 94 0 4
89

Output
Yes

Input
7 7
0 0 0 0 0 0 0
1 2 3 4 5 6 7

Output
Yes



-----Note-----

In the first sample:   Sequence a is 11, 0, 0, 14.  Two of the elements are lost, and the candidates in b are 5 and 4.  There are two possible resulting sequences: 11, 5, 4, 14 and 11, 4, 5, 14, both of which fulfill the requirements. Thus the answer is ""Yes"". 

In the second sample, the only possible resulting sequence is 2, 3, 5, 8, 9, 10, which is an increasing sequence and therefore invalid.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))

    zeros_indices = [i for i, num in enumerate(a) if num == 0]

    possible_sequences = []
    from itertools import permutations
    for perm in permutations(b):
        temp_a = a.copy()
        for i, index in enumerate(zeros_indices):
            temp_a[index] = perm[i]
        if temp_a != sorted(temp_a):
            possible_sequences.append(temp_a)

    if possible_sequences:
        print(""Yes"")
    else:
        print(""No"")

solve()
","
def solve():
    n, k = map(int, input().split())
    a = list(map(int, input().split()))
    b = sorted(map(int, input().split()))

    zeros_idx = [i for i in range(len(a)) if a[i] == 0]
    a_sorted = sorted(a)

    for i, idx in enumerate(zeros_idx):
        a[idx] = b[i]

    if a != a_sorted and sorted(a) != a_sorted:
        print(""Yes"")
    else:
        print(""No"")

solve()
","
def solve():
    n, k = map(int, input().split())
    a = list(map(int, input().split()))
    b = sorted(list(map(int, input().split())))
    
    zeros_indices = [i for i, num in enumerate(a) if num == 0]
    possible_sequences = []
    
    def generate_sequences(curr_sequence, index):
        nonlocal possible_sequences
        if index == len(zeros_indices):
            possible_sequences.append(curr_sequence.copy())
            return
        for num in b:
            if num not in curr_sequence:
                curr_sequence[zeros_indices[index]] = num
                generate_sequences(curr_sequence, index + 1)
                curr_sequence[zeros_indices[index]] = 0
    
    generate_sequences(a, 0)
    
    for seq in possible_sequences:
        if not all(seq[i] > seq[i-1] for i in range(1, len(seq))):
            print(""Yes"")
            return
    
    print(""No"")

solve()
","
def solve():
    n, k = map(int, input().split())
    a = list(map(int, input().split()))
    b = sorted(list(map(int, input().split())))

    zero_indices = [i for i in range(n) if a[i] == 0]
    zero_indices.reverse()

    for i in zero_indices:
        a[i] = b.pop()

    for i in range(1, n):
        if a[i] <= a[i-1]:
            print(""Yes"")
            return

    print(""No"")

solve()","100.0","60.0","100.0","86.66666666666667","","","",""
"APPS/124","
QUESTION:
The Duck song

For simplicity, we'll assume that there are only three types of grapes: green grapes, purple grapes and black grapes.

Andrew, Dmitry and Michal are all grapes' lovers, however their preferences of grapes are different. To make all of them happy, the following should happen: Andrew, Dmitry and Michal should eat at least $x$, $y$ and $z$ grapes, respectively. Andrew has an extreme affinity for green grapes, thus he will eat green grapes and green grapes only. On the other hand, Dmitry is not a fan of black grapes — any types of grapes except black would do for him. In other words, Dmitry can eat green and purple grapes. Michal has a common taste — he enjoys grapes in general and will be pleased with any types of grapes, as long as the quantity is sufficient.

Knowing that his friends are so fond of grapes, Aki decided to host a grape party with them. He has prepared a box with $a$ green grapes, $b$ purple grapes and $c$ black grapes.

However, Aki isn't sure if the box he prepared contains enough grapes to make everyone happy. Can you please find out whether it's possible to distribute grapes so that everyone is happy or Aki has to buy some more grapes?

It is not required to distribute all the grapes, so it's possible that some of them will remain unused.


-----Input-----

The first line contains three integers $x$, $y$ and $z$ ($1 \le x, y, z \le 10^5$) — the number of grapes Andrew, Dmitry and Michal want to eat.

The second line contains three integers $a$, $b$, $c$ ($1 \le a, b, c \le 10^5$) — the number of green, purple and black grapes in the box.


-----Output-----

If there is a grape distribution that allows everyone to be happy, print ""YES"", otherwise print ""NO"".


-----Examples-----
Input
1 6 2
4 3 3

Output
YES

Input
5 1 1
4 3 2

Output
NO



-----Note-----

In the first example, there is only one possible distribution:

Andrew should take $1$ green grape, Dmitry should take $3$ remaining green grapes and $3$ purple grapes, and Michal will take $2$ out of $3$ available black grapes.

In the second test, there is no possible distribution, since Andrew is not be able to eat enough green grapes. :(
Use user-input-Based format and function signature solve()","
def solve():
    x, y, z = map(int, input().split())
    a, b, c = map(int, input().split())
    
    if x <= a and x + y <= a + b and x + y + z <= a + b + c:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    x, y, z = map(int, input().split())
    a, b, c = map(int, input().split())
    
    if x <= a and x + y <= a + b and x + y + z <= a + b + c:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    x, y, z = map(int, input().split())
    a, b, c = map(int, input().split())
    
    if x <= a and x + y <= a + b and x + y + z <= a + b + c:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    x, y, z = map(int, input().split())
    a, b, c = map(int, input().split())

    if a >= x:
        a -= x
    else:
        print(""NO"")
        return

    remaining_green_purple = a + b

    if remaining_green_purple >= y:
        if a >= y:
            a -= y
        else:
            y -= a
            b -= y
    else:
        print(""NO"")
        return

    if a + b + c >= z:
        print(""YES"")
    else:
        print(""NO"")

solve()","100.0","100.0","100.0","93.33333333333333","","","",""
"APPS/125","
QUESTION:
Sagheer is walking in the street when he comes to an intersection of two roads. Each road can be represented as two parts where each part has 3 lanes getting into the intersection (one for each direction) and 3 lanes getting out of the intersection, so we have 4 parts in total. Each part has 4 lights, one for each lane getting into the intersection (l — left, s — straight, r — right) and a light p for a pedestrian crossing.  [Image] 

An accident is possible if a car can hit a pedestrian. This can happen if the light of a pedestrian crossing of some part and the light of a lane that can get to or from that same part are green at the same time.

Now, Sagheer is monitoring the configuration of the traffic lights. Your task is to help him detect whether an accident is possible.


-----Input-----

The input consists of four lines with each line describing a road part given in a counter-clockwise order.

Each line contains four integers l, s, r, p — for the left, straight, right and pedestrian lights, respectively. The possible values are 0 for red light and 1 for green light.


-----Output-----

On a single line, print ""YES"" if an accident is possible, and ""NO"" otherwise.


-----Examples-----
Input
1 0 0 1
0 1 0 0
0 0 1 0
0 0 0 1

Output
YES

Input
0 1 1 0
1 0 1 0
1 1 0 0
0 0 0 1

Output
NO

Input
1 0 0 0
0 0 0 1
0 0 0 0
1 0 1 0

Output
NO



-----Note-----

In the first example, some accidents are possible because cars of part 1 can hit pedestrians of parts 1 and 4. Also, cars of parts 2 and 3 can hit pedestrians of part 4.

In the second example, no car can pass the pedestrian crossing of part 4 which is the only green pedestrian light. So, no accident can occur.
Use user-input-Based format and function signature solve()","
def solve():
    lights = []
    for _ in range(4):
        lights.append(list(map(int, input().split())))

    for i in range(4):
        for j in range(4):
            if lights[i][j] == 1:
                if lights[i][3] == 1 or lights[j][3] == 1:
                    print(""YES"")
                    return
    print(""NO"")

solve()
","
def solve():
    lights = []
    for _ in range(4):
        lights.append(list(map(int, input().split())))

    for i in range(4):
        for j in range(4):
            if i != j and lights[i][3] == 1 and (lights[j][0] == 1 or lights[j][1] == 1 or lights[j][2] == 1):
                print(""YES"")
                return
    print(""NO"")

solve()
  ","
def solve():
    lights = []
    for _ in range(4):
        lights.append(list(map(int, input().split())))
    
    for i in range(4):
        for j in range(4):
            if lights[i][j] == 1 and (lights[i][3] == 1 or lights[j][3] == 1):
                print(""YES"")
                return
    print(""NO"")

solve()
","
def solve():
    lights = []
    for _ in range(4):
        lights.append(list(map(int, input().split())))
    
    for i in range(4):
        if lights[i][3] == 1:
            for j in range(4):
                if i != j and (lights[j][0] == 1 or lights[j][1] == 1 or lights[j][2] == 1):
                    print(""YES"")
                    return
    print(""NO"")

solve()
","53.333333333333336","66.66666666666666","53.333333333333336","66.66666666666666","","","",""
"APPS/126","
QUESTION:
While swimming at the beach, Mike has accidentally dropped his cellphone into the water. There was no worry as he bought a cheap replacement phone with an old-fashioned keyboard. The keyboard has only ten digital equal-sized keys, located in the following way: [Image] 

Together with his old phone, he lost all his contacts and now he can only remember the way his fingers moved when he put some number in. One can formally consider finger movements as a sequence of vectors connecting centers of keys pressed consecutively to put in a number. For example, the finger movements for number ""586"" are the same as finger movements for number ""253"": [Image]  [Image] 

Mike has already put in a number by his ""finger memory"" and started calling it, so he is now worrying, can he be sure that he is calling the correct number? In other words, is there any other number, that has the same finger movements?


-----Input-----

The first line of the input contains the only integer n (1 ≤ n ≤ 9) — the number of digits in the phone number that Mike put in.

The second line contains the string consisting of n digits (characters from '0' to '9') representing the number that Mike put in.


-----Output-----

If there is no other phone number with the same finger movements and Mike can be sure he is calling the correct number, print ""YES"" (without quotes) in the only line.

Otherwise print ""NO"" (without quotes) in the first line.


-----Examples-----
Input
3
586

Output
NO

Input
2
09

Output
NO

Input
9
123456789

Output
YES

Input
3
911

Output
YES



-----Note-----

You can find the picture clarifying the first sample case in the statement above.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    number = input()

    same_finger_movements = {
        '1': '789',
        '2': '689',
        '3': '578',
        '4': '678',
        '5': '379',
        '6': '478',
        '7': '159',
        '8': '256',
        '9': '135',
        '0': '09'
    }

    for _ in range(n - 1):
        current_digit = number[_]
        next_digit = number[_ + 1]
        if next_digit not in same_finger_movements[current_digit]:
            print(""NO"")
            return

    print(""YES"")

solve()","
def solve():
    n = int(input())
    number = input()

    unique_movements = set()

    for i in range(n):
        if number[i] == '1':
            unique_movements.add('789')
        elif number[i] == '2':
            unique_movements.add('147')
        elif number[i] == '3':
            unique_movements.add('258')
        elif number[i] == '4':
            unique_movements.add('369')
        elif number[i] == '5':
            unique_movements.add('123')
        elif number[i] == '6':
            unique_movements.add('456')
        elif number[i] == '7':
            unique_movements.add('147')
        elif number[i] == '8':
            unique_movements.add('2589')
        elif number[i] == '9':
            unique_movements.add('478')
        elif number[i] == '0':
            unique_movements.add('058')

    if len(unique_movements) == 1:
        print(""YES"")
    else:
        print(""NO"")
  
solve()","
def solve():
    n = int(input())
    number = input()
    
    reverse_dict = {
        '1': '7890', '2': '14780', '3': '25890',
        '4': '125', '5': '23649', '6': '358',
        '7': '14780', '8': '2569', '9': '3560', '0': '178'
    }
    
    finger_movement = ''
    for digit in number:
        finger_movement += reverse_dict[digit]
    
    for _ in range(int(input())):
        if input() == finger_movement:
            print(""YES"")
            return
    
    print(""NO"")

solve()","
def solve():
    n = int(input())
    number = input()
    
    possible_movements = {
        '1': (0, 0), '2': (0, 1), '3': (0, 2),
        '4': (1, 0), '5': (1, 1), '6': (1, 2),
        '7': (2, 0), '8': (2, 1), '9': (2, 2),
        '0': (3, 1)
    }
    
    finger_movements = []
    for digit in number:
        finger_movements.append(possible_movements[digit])
    
    for _ in range(int(input()) - 1):
        test_number = input()
        test_finger_movements = []
        for digit in test_number:
            test_finger_movements.append(possible_movements[digit])
        
        if finger_movements == test_finger_movements:
            print(""NO"")
            return
    
    print(""YES"")

solve()","46.666666666666664","53.333333333333336","0.0","0.0","","","",""
"APPS/127","
QUESTION:
Summer holidays! Someone is going on trips, someone is visiting grandparents, but someone is trying to get a part-time job. This summer Noora decided that she wants to earn some money, and took a job in a shop as an assistant.

Shop, where Noora is working, has a plan on the following n days. For each day sales manager knows exactly, that in i-th day k_{i} products will be put up for sale and exactly l_{i} clients will come to the shop that day. Also, the manager is sure, that everyone, who comes to the shop, buys exactly one product or, if there aren't any left, leaves the shop without buying anything. Moreover, due to the short shelf-life of the products, manager established the following rule: if some part of the products left on the shelves at the end of the day, that products aren't kept on the next day and are sent to the dump.

For advertising purposes manager offered to start a sell-out in the shop. He asked Noora to choose any f days from n next for sell-outs. On each of f chosen days the number of products were put up for sale would be doubled. Thus, if on i-th day shop planned to put up for sale k_{i} products and Noora has chosen this day for sell-out, shelves of the shop would keep 2·k_{i} products. Consequently, there is an opportunity to sell two times more products on days of sell-out.

Noora's task is to choose f days to maximize total number of sold products. She asks you to help her with such a difficult problem.


-----Input-----

The first line contains two integers n and f (1 ≤ n ≤ 10^5, 0 ≤ f ≤ n) denoting the number of days in shop's plan and the number of days that Noora has to choose for sell-out.

Each line of the following n subsequent lines contains two integers k_{i}, l_{i} (0 ≤ k_{i}, l_{i} ≤ 10^9) denoting the number of products on the shelves of the shop on the i-th day and the number of clients that will come to the shop on i-th day.


-----Output-----

Print a single integer denoting the maximal number of products that shop can sell.


-----Examples-----
Input
4 2
2 1
3 5
2 3
1 5

Output
10
Input
4 1
0 2
0 3
3 5
0 6

Output
5


-----Note-----

In the first example we can choose days with numbers 2 and 4 for sell-out. In this case new numbers of products for sale would be equal to [2, 6, 2, 2] respectively. So on the first day shop will sell 1 product, on the second — 5, on the third — 2, on the fourth — 2. In total 1 + 5 + 2 + 2 = 10 product units.

In the second example it is possible to sell 5 products, if you choose third day for sell-out.
Use user-input-Based format and function signature solve()","
def solve():
    n, f = map(int, input().split())
    products = []
    for _ in range(n):
        k, l = map(int, input().split())
        products.append((min(2*k, l), min(k, l)))
    
    products.sort(key=lambda x: min(x[0]-x[1], x[1]))
    
    total_sold = 0
    for i in range(n):
        if i < f:
            total_sold += min(products[i][0], products[i][1])
        else:
            total_sold += min(products[i][1], products[i][0] - products[i][1])
    
    print(total_sold)

solve()
","
def solve():
    n, f = map(int, input().split())
    total_products = 0
    sellout_days = []
    
    for _ in range(n):
        k_i, l_i = map(int, input().split())
        if k_i == 0:
            total_products += min(l_i, 1)
        elif k_i * 2 <= l_i:
            total_products += k_i
            sellout_days.append(min(k_i, l_i - k_i))
        else:
            total_products += min(l_i, k_i)
    
    sellout_days.sort(reverse=True)
    total_products += sum(sellout_days[:f])
    
    print(total_products)

solve()
","
def solve():
    n, f = map(int, input().split())
    products = []
    for _ in range(n):
        k, l = map(int, input().split())
        original_products = min(k, l)
        double_products = min(2*k, l)
        products.append(min(original_products, double_products))
    
    products.sort(reverse=True)
    total = sum(products[:f])
    
    print(total)

solve()
","
def solve():
    n, f = map(int, input().split())
    days = []
    for _ in range(n):
        k, l = map(int, input().split())
        days.append((k, l))

    profit = 0
    diff = []
    for k, l in days:
        a = min(k, l)
        b = min(2*k, l)
        profit += a
        diff.append(min(b-a, a))

    diff.sort(reverse=True)
    for i in range(f):
        profit += diff[i]

    print(profit)

solve()
","6.666666666666667","46.666666666666664","0.0","100.0","","","",""
"APPS/128","
QUESTION:
It is a balmy spring afternoon, and Farmer John's n cows are ruminating about link-cut cacti in their stalls. The cows, labeled 1 through n, are arranged so that the i-th cow occupies the i-th stall from the left. However, Elsie, after realizing that she will forever live in the shadows beyond Bessie's limelight, has formed the Mischievous Mess Makers and is plotting to disrupt this beautiful pastoral rhythm. While Farmer John takes his k minute long nap, Elsie and the Mess Makers plan to repeatedly choose two distinct stalls and swap the cows occupying those stalls, making no more than one swap each minute.

Being the meticulous pranksters that they are, the Mischievous Mess Makers would like to know the maximum messiness attainable in the k minutes that they have. We denote as p_{i} the label of the cow in the i-th stall. The messiness of an arrangement of cows is defined as the number of pairs (i, j) such that i < j and p_{i} > p_{j}.


-----Input-----

The first line of the input contains two integers n and k (1 ≤ n, k ≤ 100 000) — the number of cows and the length of Farmer John's nap, respectively.


-----Output-----

Output a single integer, the maximum messiness that the Mischievous Mess Makers can achieve by performing no more than k swaps. 


-----Examples-----
Input
5 2

Output
10

Input
1 10

Output
0



-----Note-----

In the first sample, the Mischievous Mess Makers can swap the cows in the stalls 1 and 5 during the first minute, then the cows in stalls 2 and 4 during the second minute. This reverses the arrangement of cows, giving us a total messiness of 10.

In the second sample, there is only one cow, so the maximum possible messiness is 0.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    if n == 1:
        print(0)
    else:
        if k >= n // 2:
            print(n * (n - 1) // 2)
        else:
            print(k * n)

solve()","
def solve():
    n, k = map(int, input().split())
    if n == 1:
        print(0)
    else:
        print(n*(n-1)//2)

solve()","
def solve():
    n, k = map(int, input().split())
    if n == 1:
        print(0)
    else:
        max_messiness = n * (n - 1) // 2
        swap_count = min(k, n // 2)
        messiness = swap_count * n - swap_count * (swap_count + 1)
        print(2 * messiness)

solve()","
def solve():
    n, k = map(int, input().split())
    if n == 1:
        print(0)
    else:
        print(n * (n-1) // 2 * k)

solve()","53.333333333333336","53.333333333333336","20.0","20.0","","","",""
"APPS/129","
QUESTION:
Ivan is collecting coins. There are only $N$ different collectible coins, Ivan has $K$ of them. He will be celebrating his birthday soon, so all his $M$ freinds decided to gift him coins. They all agreed to three terms:  Everyone must gift as many coins as others. All coins given to Ivan must be different. Not less than $L$ coins from gifts altogether, must be new in Ivan's collection.

But his friends don't know which coins have Ivan already got in his collection. They don't want to spend money so they want to buy minimum quantity of coins, that satisfy all terms, irrespective of the Ivan's collection. Help them to find this minimum number of coins or define it's not possible to meet all the terms.


-----Input-----

The only line of input contains 4 integers $N$, $M$, $K$, $L$ ($1 \le K \le N \le 10^{18}$; $1 \le M, \,\, L \le 10^{18}$) — quantity of different coins, number of Ivan's friends, size of Ivan's collection and quantity of coins, that must be new in Ivan's collection.


-----Output-----

Print one number — minimal number of coins one friend can gift to satisfy all the conditions. If it is impossible to satisfy all three conditions print ""-1"" (without quotes).


-----Examples-----
Input
20 15 2 3

Output
1
Input
10 11 2 4

Output
-1


-----Note-----

In the first test, one coin from each friend is enough, as he will be presented with 15 different coins and 13 of them will definitely be new.

In the second test, Ivan has 11 friends, but there are only 10 different coins. So all friends can't present him different coins.
Use user-input-Based format and function signature solve()","
def solve():
    N, M, K, L = map(int, input().split())
    
    if K + L > N * M:
        print(-1)
    else:
        min_coins = (K + L + M - 1) // M
        print(max(0, min_coins - K))

solve()","
def solve():
    n, m, k, l = map(int, input().split())
    
    total_coins = n * m
    min_gifts_needed = (total_coins + l - k + m - 1) // m
    
    if min_gifts_needed > n:
        print(-1)
    else:
        print(min_gifts_needed)

solve()
","
def solve():
    N, M, K, L = map(int, input().split())

    if (N < M) or  (N == 1 and K >= 1) or (M * std(M-1) + K < L):
        print(-1)
    else:
        min_coins = (L - K + M - 1) // M
        print(max(min_coins, 0))

solve()
  ","
def solve():
    n, m, k, l = map(int, input().split())
    
    total_coins_given = m * n
    extra_coins_needed = max(0, l - k)
    coins_needed = max(0, extra_coins_needed + 1)
    
    if coins_needed * m > total_coins_given:
        print(-1)
    else:
        coins_per_friend = max(0, coins_needed)
        print(coins_per_friend)

solve()
","6.666666666666667","33.33333333333333","20.0","6.666666666666667","","","",""
"APPS/130","
QUESTION:
Polycarp has a checkered sheet of paper of size n × m. Polycarp painted some of cells with black, the others remained white. Inspired by Malevich's ""Black Square"", Polycarp wants to paint minimum possible number of white cells with black so that all black cells form a square.

You are to determine the minimum possible number of cells needed to be painted black so that the black cells form a black square with sides parallel to the painting's sides. All the cells that do not belong to the square should be white. The square's side should have positive length.


-----Input-----

The first line contains two integers n and m (1 ≤ n, m ≤ 100) — the sizes of the sheet.

The next n lines contain m letters 'B' or 'W' each — the description of initial cells' colors. If a letter is 'B', then the corresponding cell is painted black, otherwise it is painted white.


-----Output-----

Print the minimum number of cells needed to be painted black so that the black cells form a black square with sides parallel to the painting's sides. All the cells that do not belong to the square should be white. If it is impossible, print -1.


-----Examples-----
Input
5 4
WWWW
WWWB
WWWB
WWBB
WWWW

Output
5

Input
1 2
BB

Output
-1

Input
3 3
WWW
WWW
WWW

Output
1



-----Note-----

In the first example it is needed to paint 5 cells — (2, 2), (2, 3), (3, 2), (3, 3) and (4, 2). Then there will be a square with side equal to three, and the upper left corner in (2, 2).

In the second example all the cells are painted black and form a rectangle, so it's impossible to get a square.

In the third example all cells are colored white, so it's sufficient to color any cell black.
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    grid = [input() for _ in range(n)]

    black_cells = [(i, j) for i in range(n) for j in range(m) if grid[i][j] == 'B']

    if not black_cells:
        print(1)
        return

    min_row, max_row, min_col, max_col = min([i for i, _ in black_cells]), max([i for i, _ in black_cells]), min([j for _, j in black_cells]), max([j for _, j in black_cells])

    side = max(max_row - min_row + 1, max_col - min_col + 1)
    if all(grid[i][j] == 'B' for i in range(min_row, min_row + side) for j in range(min_col, min_col + side) if 0 <= i < n and 0 <= j < m):
        print(len(black_cells) - side**2)
    else:
        print(-1)

solve()
","
def solve():
    n, m = map(int, input().split())
    sheet = [input() for _ in range(n)]
    
    black_cells = [(i, j) for i in range(n) for j in range(m) if sheet[i][j] == 'B']
    
    if not black_cells:
        print(1)
        return
    
    min_row, max_row, min_col, max_col = min([i for i, _ in black_cells]), max([i for i, _ in black_cells]), min([j for _, j in black_cells]), max([j for _, j in black_cells])
    
    side = max(max_row - min_row + 1, max_col - min_col + 1)
    
    if all(sheet[i][j] == 'B' for i in range(min_row, min_row + side) for j in range(min_col, min_col + side)):
        print(len(black_cells) - side*side)
    else:
        print(-1)
  
solve()","
def solve():
    n, m = map(int, input().split())
    sheet = [input() for _ in range(n)]
    
    black_cells = []
    for i in range(n):
        for j in range(m):
            if sheet[i][j] == 'B':
                black_cells.append((i, j))
    
    if not black_cells:
        print(1)
        return
    
    min_area = float('inf')
    for i in range(n):
        for j in range(m):
            for side_length in range(1, min(n, m) + 1):
                if all((i+a, j+b) in black_cells for a in range(side_length) for b in range(side_length)):
                    min_area = min(min_area, side_length**2 - len(black_cells))
    
    if min_area == float('inf'):
        print(-1)
    else:
        print(min_area)

solve()
","
def solve():
    n, m = map(int, input().split())
    grid = [input() for _ in range(n)]

    black_positions = []
    for i in range(n):
        for j in range(m):
            if grid[i][j] == 'B':
                black_positions.append((i, j))

    if not black_positions:
        print(1)
        return

    min_row, max_row = min(pos[0] for pos in black_positions), max(pos[0] for pos in black_positions)
    min_col, max_col = min(pos[1] for pos in black_positions), max(pos[1] for pos in black_positions)

    side = max(max_row - min_row + 1, max_col - min_col + 1)
    if all(grid[i][j] == 'B' for i in range(min_row, min_row + side) for j in range(min_col, min_col + side)):
        print(len(black_positions) - side ** 2)
    else:
        print(-1)

solve()","60.0","53.333333333333336","60.0","53.333333333333336","","","",""
"APPS/131","
QUESTION:
There is a beautiful garden of stones in Innopolis.

Its most beautiful place is the $n$ piles with stones numbered from $1$ to $n$.

EJOI participants have visited this place twice. 

When they first visited it, the number of stones in piles was $x_1, x_2, \ldots, x_n$, correspondingly. One of the participants wrote down this sequence in a notebook. 

They visited it again the following day, and the number of stones in piles was equal to $y_1, y_2, \ldots, y_n$. One of the participants also wrote it down in a notebook.

It is well known that every member of the EJOI jury during the night either sits in the room $108$ or comes to the place with stones. Each jury member who comes there either takes one stone for himself or moves one stone from one pile to another. We can assume that there is an unlimited number of jury members. No one except the jury goes to the place with stones at night.

Participants want to know whether their notes can be correct or they are sure to have made a mistake.


-----Input-----

The first line of the input file contains a single integer $n$, the number of piles with stones in the garden ($1 \leq n \leq 50$).

The second line contains $n$ integers separated by spaces $x_1, x_2, \ldots, x_n$, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the first time ($0 \leq x_i \leq 1000$).

The third line contains $n$ integers separated by spaces $y_1, y_2, \ldots, y_n$, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the second time ($0 \leq y_i \leq 1000$).


-----Output-----

If the records can be consistent output ""Yes"", otherwise output ""No"" (quotes for clarity).


-----Examples-----
Input
5
1 2 3 4 5
2 1 4 3 5

Output
Yes

Input
5
1 1 1 1 1
1 0 1 0 1

Output
Yes

Input
3
2 3 9
1 7 9

Output
No



-----Note-----

In the first example, the following could have happened during the night: one of the jury members moved one stone from the second pile to the first pile, and the other jury member moved one stone from the fourth pile to the third pile.

In the second example, the jury took stones from the second and fourth piles.

It can be proved that it is impossible for the jury members to move and took stones to convert the first array into the second array.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    x = list(map(int, input().split()))
    y = list(map(int, input().split()))

    sum_x = sum(x)
    sum_y = sum(y)

    if sum_x >= sum_y:
        print(""Yes"")
    else:
        print(""No"")

solve()","
def solve():
    n = int(input())
    x = list(map(int, input().split()))
    y = list(map(int, input().split()))
    
    diff_sum = sum(y) - sum(x)
    if diff_sum % 2 != 0 or diff_sum < 0:
        print(""No"")
        return
    
    diff_half = diff_sum // 2
    diff_counts = [0] * 1001
    for xi, yi in zip(x, y):
        diff_counts[yi] += 1
        diff_counts[xi] -= 1
        diff_counts[xi + diff_half] -= 1
        
    for count in diff_counts:
        if count != 0:
            print(""No"")
            return
    
    print(""Yes"")

solve()
","
def solve():
    n = int(input())
    x = list(map(int, input().split()))
    y = list(map(int, input().split()))
    
    sum_x = sum(x)
    sum_y = sum(y)
    
    if sum_x >= sum_y:
        diff = sum_x - sum_y
        for i in range(n):
            if (x[i] - y[i]) <= diff:
                diff -= (x[i] - y[i])
            else:
                print(""No"")
                return
    else:
        print(""No"")
        return
    
    print(""Yes"")

solve()","
def solve():
    n = int(input())
    x = list(map(int, input().split()))
    y = list(map(int, input().split()))
    
    sum_x = sum(x)
    sum_y = sum(y)
    
    if sum_x < sum_y:
        print(""No"")
    else:
        diff = [max(y[i]-x[i], 0) for i in range(n)]
        if sum(diff) == sum_x - sum_y:
            print(""Yes"")
        else:
            print(""No"")

solve()","100.0","26.666666666666668","80.0","53.333333333333336","","","",""
"APPS/132","
QUESTION:
Students Vasya and Petya are studying at the BSU (Byteland State University). At one of the breaks they decided to order a pizza. In this problem pizza is a circle of some radius. The pizza was delivered already cut into n pieces. The i-th piece is a sector of angle equal to a_{i}. Vasya and Petya want to divide all pieces of pizza into two continuous sectors in such way that the difference between angles of these sectors is minimal. Sector angle is sum of angles of all pieces in it. Pay attention, that one of sectors can be empty.


-----Input-----

The first line contains one integer n (1 ≤ n ≤ 360)  — the number of pieces into which the delivered pizza was cut.

The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 360)  — the angles of the sectors into which the pizza was cut. The sum of all a_{i} is 360.


-----Output-----

Print one integer  — the minimal difference between angles of sectors that will go to Vasya and Petya.


-----Examples-----
Input
4
90 90 90 90

Output
0

Input
3
100 100 160

Output
40

Input
1
360

Output
360

Input
4
170 30 150 10

Output
0



-----Note-----

In first sample Vasya can take 1 and 2 pieces, Petya can take 3 and 4 pieces. Then the answer is |(90 + 90) - (90 + 90)| = 0.

In third sample there is only one piece of pizza that can be taken by only one from Vasya and Petya. So the answer is |360 - 0| = 360.

In fourth sample Vasya can take 1 and 4 pieces, then Petya will take 2 and 3 pieces. So the answer is |(170 + 10) - (30 + 150)| = 0.

Picture explaning fourth sample:

[Image]

Both red and green sectors consist of two adjacent pieces of pizza. So Vasya can take green sector, then Petya will take red sector.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    angles = list(map(int, input().split()))
    
    total_angle = sum(angles)
    half_angle = total_angle // 2
    
    dp = [0] * (half_angle + 1)
    dp[0] = 1
    
    for angle in angles:
        for i in range(half_angle, angle - 1, -1):
            dp[i] |= dp[i - angle]
    
    min_diff = total_angle
    for i in range(half_angle + 1):
        if dp[i]:
            min_diff = min(min_diff, total_angle - 2 * i)
    
    print(min_diff)

solve()
","
def solve():
    n = int(input())
    angles = list(map(int, input().split()))

    target_sum = sum(angles) // 2
    
    dp = [False] * 400
    dp[0] = True
    
    for angle in angles:
        for i in range(400 - angle - 1, -1, -1):
            if dp[i]:
                dp[i + angle] = True
    
    result = float('inf')
    for i in range(target_sum+1):
        if dp[i]:
            result = min(result, abs(target_sum - i - i))

    print(result)

solve()
","
def solve():
    n = int(input())
    angles = list(map(int, input().split()))
    
    total_sum = sum(angles)
    min_diff = float('inf')
    
    current_sum = 0
    for i in range(n):
        current_sum += angles[i]
        remaining_sum = total_sum - current_sum
        
        diff = abs(current_sum - remaining_sum)
        min_diff = min(min_diff, diff)
    
    print(min_diff)

solve()
","
def solve():
    num_pieces = int(input())
    sector_angles = list(map(int, input().split()))
    
    total_angle = sum(sector_angles)
    target_angle = total_angle // 2
    
    dp = [[False for _ in range(target_angle + 1)] for _ in range(num_pieces + 1)]
    dp[0][0] = True
    
    for i in range(1, num_pieces + 1):
        for j in range(target_angle + 1):
            if dp[i - 1][j]:
                dp[i][j] = True
                if j + sector_angles[i - 1] <= target_angle:
                    dp[i][j + sector_angles[i - 1]] = True
    
    diff = float('inf')
    for j in range(target_angle + 1):
        if dp[num_pieces][j]:
            angle1 = j
            angle2 = total_angle - j
            diff = min(diff, abs(angle1 - angle2))
    
    print(diff)

solve()
","93.33333333333333","26.666666666666668","80.0","93.33333333333333","","","",""
"APPS/133","
QUESTION:
Alice got many presents these days. So she decided to pack them into boxes and send them to her friends.

There are $n$ kinds of presents. Presents of one kind are identical (i.e. there is no way to distinguish two gifts of the same kind). Presents of different kinds are different (i.e. that is, two gifts of different kinds are distinguishable). The number of presents of each kind, that Alice has is very big, so we can consider Alice has an infinite number of gifts of each kind.

Also, there are $m$ boxes. All of them are for different people, so they are pairwise distinct (consider that the names of $m$ friends are written on the boxes). For example, putting the first kind of present into the first box but not into the second box, is different from putting the first kind of present into the second box but not into the first box.

Alice wants to pack presents with the following rules:  She won't pack more than one present of each kind into the same box, so each box should contain presents of different kinds (i.e. each box contains a subset of $n$ kinds, empty boxes are allowed);  For each kind at least one present should be packed into some box. 

Now Alice wants to know how many different ways to pack the presents exists. Please, help her and calculate this number. Since the answer can be huge, output it by modulo $10^9+7$.

See examples and their notes for clarification.


-----Input-----

The first line contains two integers $n$ and $m$, separated by spaces ($1 \leq n,m \leq 10^9$) — the number of kinds of presents and the number of boxes that Alice has.


-----Output-----

Print one integer  — the number of ways to pack the presents with Alice's rules, calculated by modulo $10^9+7$


-----Examples-----
Input
1 3

Output
7
Input
2 2

Output
9


-----Note-----

In the first example, there are seven ways to pack presents:

$\{1\}\{\}\{\}$

$\{\}\{1\}\{\}$

$\{\}\{\}\{1\}$

$\{1\}\{1\}\{\}$

$\{\}\{1\}\{1\}$

$\{1\}\{\}\{1\}$

$\{1\}\{1\}\{1\}$

In the second example there are nine ways to pack presents:

$\{\}\{1,2\}$

$\{1\}\{2\}$

$\{1\}\{1,2\}$

$\{2\}\{1\}$

$\{2\}\{1,2\}$

$\{1,2\}\{\}$

$\{1,2\}\{1\}$

$\{1,2\}\{2\}$

$\{1,2\}\{1,2\}$

For example, the way $\{2\}\{2\}$ is wrong, because presents of the first kind should be used in the least one box.
Use user-input-Based format and function signature solve()","
def solve():
    MOD = 10**9 + 7
    n, m = map(int, input().split())
    result = pow(2, n, MOD) - 1
    result = pow(result, m, MOD)
    print(result)

solve()
","
def solve():
    # Take user input for n and m
    n, m = map(int, input().split())

    # Calculate the answer by taking modulo 10^9+7
    total_ways = pow(pow(2, n, 10**9+7) - 1, m, 10**9+7)

    # Output the result
    print(total_ways)

# Call the function to solve the problem
solve()
","
def solve():
    import math

    MOD = 10**9 + 7

    def power(x, y):
        if y == 0:
            return 1
        if y % 2 == 0:
            return power(x, y // 2) ** 2 % MOD
        else:
            return x * power(x, y - 1) % MOD

    n, m = map(int, input().split())
    result = power(2, m) - 1
    result = power(result, n)
    print(result)

solve()
","
from math import pow

def solve():
    n, m = map(int, input().split())
    mod = int(1e9 + 7)
    result = int(pow(2, n, mod) - 1)
    answer = int(pow(result, m, mod))
    print(answer)

solve()
","20.0","20.0","100.0","0.0","","","",""
"APPS/134","
QUESTION:
Katya studies in a fifth grade. Recently her class studied right triangles and the Pythagorean theorem. It appeared, that there are triples of positive integers such that you can construct a right triangle with segments of lengths corresponding to triple. Such triples are called Pythagorean triples.

For example, triples (3, 4, 5), (5, 12, 13) and (6, 8, 10) are Pythagorean triples.

Here Katya wondered if she can specify the length of some side of right triangle and find any Pythagorean triple corresponding to such length? Note that the side which length is specified can be a cathetus as well as hypotenuse.

Katya had no problems with completing this task. Will you do the same?


-----Input-----

The only line of the input contains single integer n (1 ≤ n ≤ 10^9) — the length of some side of a right triangle.


-----Output-----

Print two integers m and k (1 ≤ m, k ≤ 10^18), such that n, m and k form a Pythagorean triple, in the only line.

In case if there is no any Pythagorean triple containing integer n, print  - 1 in the only line. If there are many answers, print any of them.


-----Examples-----
Input
3

Output
4 5
Input
6

Output
8 10
Input
1

Output
-1
Input
17

Output
144 145
Input
67

Output
2244 2245


-----Note-----[Image]

Illustration for the first sample.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    if n == 1:
        print(""-1"")
    else:
        m = n * n // 2
        k = m + 1
        print(m, k)

solve()
","
def solve():
    import math
    n = int(input())
    if n % 2 == 0:
        m = n * n // 4 - 1
        k = n * n // 4 + 1
        print(m, k)
    elif n % 2 != 0 and n != 1:
        m = (n * n - 1) // 2
        k = (n * n + 1) // 2
        print(m, k)
    else:
        print(-1)

solve()","
def solve():
    n = int(input())
    
    if n <= 2:
        print(-1)
    else:
        m = n*n // 2 + n // 2
        k = n*n // 2 + n // 2 + 1
        print(m, k)

solve()","
def solve():
    n = int(input())
    if n % 2 == 0:
        m = n // 2 - 1
        k = n // 2 + 1
        print(m, k)
    elif n == 1:
        print(-1)
    else:
        m = (n*n - 1) // 2
        k = (n*n + 1) // 2
        print(m, k)

solve()
","33.33333333333333","93.33333333333333","6.666666666666667","33.33333333333333","","","",""
"APPS/135","
QUESTION:
Imp is watching a documentary about cave painting. [Image] 

Some numbers, carved in chaotic order, immediately attracted his attention. Imp rapidly proposed a guess that they are the remainders of division of a number n by all integers i from 1 to k. Unfortunately, there are too many integers to analyze for Imp.

Imp wants you to check whether all these remainders are distinct. Formally, he wants to check, if all $n \text{mod} i$, 1 ≤ i ≤ k, are distinct, i. e. there is no such pair (i, j) that:   1 ≤ i < j ≤ k,  $n \operatorname{mod} i = n \operatorname{mod} j$, where $x \operatorname{mod} y$ is the remainder of division x by y. 


-----Input-----

The only line contains two integers n, k (1 ≤ n, k ≤ 10^18).


-----Output-----

Print ""Yes"", if all the remainders are distinct, and ""No"" otherwise.

You can print each letter in arbitrary case (lower or upper).


-----Examples-----
Input
4 4

Output
No

Input
5 3

Output
Yes



-----Note-----

In the first sample remainders modulo 1 and 4 coincide.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    remainders = set()
    for i in range(1, k+1):
        remainder = n % i
        if remainder in remainders:
            print(""No"")
            return
        remainders.add(remainder)
    print(""Yes"")

solve()
","
def solve():
    n, k = map(int, input().split())
    remainders = set()
    
    for i in range(1, k+1):
        remainder = n % i
        if remainder in remainders:
            print(""No"")
            return
        remainders.add(remainder)
    
    print(""Yes"")

solve()
  ","
def solve():
    n, k = map(int, input().split())
    remainders = set()
    for i in range(1, k+1):
        remainder = n % i
        if remainder in remainders:
            print(""No"")
            return
        remainders.add(remainder)
    print(""Yes"")

solve()
","
def solve():
    n, k = map(int, input().split())
    
    remainders = set()
    for i in range(1, k + 1):
        remainder = n % i
        if remainder in remainders:
            print(""No"")
            return
        remainders.add(remainder)
    
    print(""Yes"")

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/136","
QUESTION:
You are given two very long integers a, b (leading zeroes are allowed). You should check what number a or b is greater or determine that they are equal.

The input size is very large so don't use the reading of symbols one by one. Instead of that use the reading of a whole line or token.

As input/output can reach huge size it is recommended to use fast input/output methods: for example, prefer to use scanf/printf instead of cin/cout in C++, prefer to use BufferedReader/PrintWriter instead of Scanner/System.out in Java. Don't use the function input() in Python2 instead of it use the function raw_input().


-----Input-----

The first line contains a non-negative integer a.

The second line contains a non-negative integer b.

The numbers a, b may contain leading zeroes. Each of them contains no more than 10^6 digits.


-----Output-----

Print the symbol ""<"" if a < b and the symbol "">"" if a > b. If the numbers are equal print the symbol ""="".


-----Examples-----
Input
9
10

Output
<

Input
11
10

Output
>

Input
00012345
12345

Output
=

Input
0123
9

Output
>

Input
0123
111

Output
>
Use user-input-Based format and function signature solve()","
from sys import stdin, stdout

def solve():
    a = stdin.readline().strip()
    b = stdin.readline().strip()

    a = a.lstrip('0')
    b = b.lstrip('0')

    if len(a) < len(b):
        stdout.write('<')
    elif len(a) > len(b):
        stdout.write('>')
    else:
        if a < b:
            stdout.write('<')
        elif a > b:
            stdout.write('>')
        else:
            stdout.write('=')

solve()
","
from sys import stdin, stdout

def solve():
    a = stdin.readline().strip()
    b = stdin.readline().strip()

    a = a.lstrip('0')
    b = b.lstrip('0')

    if len(a) < len(b):
        ans = ""<""
    elif len(a) > len(b):
        ans = "">""
    else:
        if a < b:
            ans = ""<""
        elif a > b:
            ans = "">""
        else:
            ans = ""=""

    stdout.write(ans)

if __name__ == ""__main__"":
    solve()
","
def solve():
    import sys

    a = int(sys.stdin.readline().strip())
    b = int(sys.stdin.readline().strip())

    if a < b:
        print(""<"")
    elif a > b:
        print("">"")
    else:
        print(""="")

solve()
","
from sys import stdin, stdout

def solve():
    a = stdin.readline().strip()
    b = stdin.readline().strip()

    a = a.lstrip('0')
    b = b.lstrip('0')

    if len(a) < len(b):
        stdout.write('<')
    elif len(a) > len(b):
        stdout.write('>')
    else:
        if a < b:
            stdout.write('<')
        elif a > b:
            stdout.write('>')
        else:
            stdout.write('=')

if __name__ == ""__main__"":
    solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/137","
QUESTION:
Kuro has recently won the ""Most intelligent cat ever"" contest. The three friends then decided to go to Katie's home to celebrate Kuro's winning. After a big meal, they took a small break then started playing games.

Kuro challenged Katie to create a game with only a white paper, a pencil, a pair of scissors and a lot of arrows (you can assume that the number of arrows is infinite). Immediately, Katie came up with the game called Topological Parity.

The paper is divided into $n$ pieces enumerated from $1$ to $n$. Shiro has painted some pieces with some color. Specifically, the $i$-th piece has color $c_{i}$ where $c_{i} = 0$ defines black color, $c_{i} = 1$ defines white color and $c_{i} = -1$ means that the piece hasn't been colored yet.

The rules of the game is simple. Players must put some arrows between some pairs of different pieces in such a way that for each arrow, the number in the piece it starts from is less than the number of the piece it ends at. Also, two different pieces can only be connected by at most one arrow. After that the players must choose the color ($0$ or $1$) for each of the unpainted pieces. The score of a valid way of putting the arrows and coloring pieces is defined as the number of paths of pieces of alternating colors. For example, $[1 \to 0 \to 1 \to 0]$, $[0 \to 1 \to 0 \to 1]$, $[1]$, $[0]$ are valid paths and will be counted. You can only travel from piece $x$ to piece $y$ if and only if there is an arrow from $x$ to $y$.

But Kuro is not fun yet. He loves parity. Let's call his favorite parity $p$ where $p = 0$ stands for ""even"" and $p = 1$ stands for ""odd"". He wants to put the arrows and choose colors in such a way that the score has the parity of $p$.

It seems like there will be so many ways which satisfy Kuro. He wants to count the number of them but this could be a very large number. Let's help him with his problem, but print it modulo $10^{9} + 7$.


-----Input-----

The first line contains two integers $n$ and $p$ ($1 \leq n \leq 50$, $0 \leq p \leq 1$) — the number of pieces and Kuro's wanted parity.

The second line contains $n$ integers $c_{1}, c_{2}, ..., c_{n}$ ($-1 \leq c_{i} \leq 1$) — the colors of the pieces.


-----Output-----

Print a single integer — the number of ways to put the arrows and choose colors so the number of valid paths of alternating colors has the parity of $p$.


-----Examples-----
Input
3 1
-1 0 1

Output
6
Input
2 1
1 0

Output
1
Input
1 1
-1

Output
2


-----Note-----

In the first example, there are $6$ ways to color the pieces and add the arrows, as are shown in the figure below. The scores are $3, 3, 5$ for the first row and $5, 3, 3$ for the second row, both from left to right.

 [Image]
Use user-input-Based format and function signature solve()","
def solve():
    MOD = 10**9 + 7

    n, p = map(int, input().split())
    colors = list(map(int, input().split()))

    dp = [[[[0, 0] for _ in range(2)] for _ in range(2)] for _ in range(n+1)]
    dp[0][0][0][0] = 1

    for i in range(1, n+1):
        for j in range(2):
            for k in range(2):
                for l in range(2):
                    for m in range(2):
                        for o in range(2):
                            if colors[i-1] != -1 and colors[i-1] != j:
                                continue
                            if i > 1 and l != m:
                                continue
                            if i > 1 and j == k and l == m:
                                continue
                            dp[i][j][k][o] += dp[i-1][k][m][o^1]
                            dp[i][j][k][o] %= MOD

    print(sum(dp[n][j][k][p] for j in range(2) for k in range(2)) % MOD)

solve()
","
def solve():
    MOD = 10**9 + 7
    n, p = map(int, input().split())
    colors = list(map(int, input().split()))
    
    dp = [[[[0 for _ in range(2)] for _ in range(2)] for _ in range(2)] for _ in range(n+1)]
    dp[0][0][0][0] = 1
    
    for i in range(1, n+1):
        for j in range(2):
            for k in range(2):
                for l in range(2):
                    for m in range(2):
                        tot = dp[i-1][j][k][l]
                        if colors[i-1] != -1 and colors[i-1] != m:
                            continue
                        if j != k and l != m:
                            dp[i][k][l][m] = (dp[i][k][l][m] + tot) % MOD
                        if i > 1 and k != l and j != m:
                            dp[i][k][l][m] = (dp[i][k][l][m] + tot) % MOD
    
    ans = sum(dp[n][p][j][k] for j in range(2) for k in range(2)) % MOD
    print(ans)

if __name__ == ""__main__"":
    solve()
","
def solve():
    mod = 10 ** 9 + 7

    n, p = map(int, input().split())
    c = list(map(int, input().split()))

    cnt = [[0] * 3 for _ in range(2)]
    for i in range(n):
        if c[i] == -1:
            for j in range(2):
                cnt[j][0] = (cnt[j][0] * 2) % mod
                cnt[j][1] = (cnt[j][1] * 2) % mod
                cnt[j][2] = (cnt[j][2] * 2) % mod
                if j:
                    cnt[j][1] = (cnt[j][1] + cnt[j - 1][0]) % mod
                    cnt[j][0] = (cnt[j][0] + cnt[j - 1][1]) % mod
                cnt[j][2] = (cnt[j][2] + cnt[j - 1][2]) % mod

        else:
            j = (c[i] != 0)
            cnt[j][0] = 0 if j else cnt[0][0]
            cnt[j][1] = (cnt[j][1] + cnt[j - 1][0]) % mod
            cnt[j][0] = (cnt[j][0] + cnt[j - 1][1]) % mod
            cnt[j][2] = (cnt[j][2] + cnt[j - 1][2]) % mod

    print(cnt[p][2])

if __name__ == ""__main__"":
    solve()
  ","
from itertools import product

def solve():
    n, p = map(int, input().split())
    c = list(map(int, input().split()))

    mod = 10**9 + 7

    dp = [[[[0, 0] for _ in range(2)] for _ in range(n+1)] for _ in range(n+1)]
    dp[0][0][0][0] = 1

    for i, j in product(range(n), repeat=2):
        for x, y in product(range(2), repeat=2):
            if c[i] != -1 and c[i] != x:
                continue
            if c[j] != -1 and c[j] != y:
                continue
            for a, b in product(range(2), repeat=2):
                dp[i + (i>=j)][j + 1][y][a ^ b] += dp[i][j][x][b]
                dp[i + 1][j][a][a ^ b] += dp[i][j][x][b]
    
    result = sum(dp[-1][-1][p]) % mod
    print(result)

solve()
","6.666666666666667","6.666666666666667","6.666666666666667","6.666666666666667","","","",""
"APPS/138","
QUESTION:
Little girl Alyona is in a shop to buy some copybooks for school. She study four subjects so she wants to have equal number of copybooks for each of the subjects. There are three types of copybook's packs in the shop: it is possible to buy one copybook for a rubles, a pack of two copybooks for b rubles, and a pack of three copybooks for c rubles. Alyona already has n copybooks.

What is the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4? There are infinitely many packs of any type in the shop. Alyona can buy packs of different type in the same purchase.


-----Input-----

The only line contains 4 integers n, a, b, c (1 ≤ n, a, b, c ≤ 10^9).


-----Output-----

Print the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4.


-----Examples-----
Input
1 1 3 4

Output
3

Input
6 2 1 1

Output
1

Input
4 4 4 4

Output
0

Input
999999999 1000000000 1000000000 1000000000

Output
1000000000



-----Note-----

In the first example Alyona can buy 3 packs of 1 copybook for 3a = 3 rubles in total. After that she will have 4 copybooks which she can split between the subjects equally. 

In the second example Alyuna can buy a pack of 2 copybooks for b = 1 ruble. She will have 8 copybooks in total.

In the third example Alyona can split the copybooks she already has between the 4 subject equally, so she doesn't need to buy anything.

In the fourth example Alyona should buy one pack of one copybook.
Use user-input-Based format and function signature solve()","
def solve():
    n, a, b, c = map(int, input().split())
    remainder = (4 - (n % 4)) % 4
    min_rubles = min(a, b*2, c*3)
    print(min_rubles * remainder)

solve()
","
def solve():
    n, a, b, c = map(int, input().split())

    if (n % 4) == 0:
        print(0)
    else:
        packs = [a, b, c]
        costs = [a, b*2, c*3]
        min_cost = float('inf')

        for i in range(3):
            needed = (4 - n % 4) % 4
            total_cost = packs[i] * (needed // (i+1))
            if needed % (i+1) != 0:
                total_cost += costs[i]
            min_cost = min(min_cost, total_cost)

        print(min_cost)

solve()","
def solve():
    n, a, b, c = map(int, input().split())
    rem = (4 - (n % 4)) % 4
    cost = min(a, b*2, c*3)
    print(min(cost, rem*a, (rem//2)*b + (rem%2)*a, (rem//3)*c + (rem%3)*a))

solve()
","
def solve():
    n, a, b, c = map(int, input().split())
    remainder = (4 - (n % 4)) % 4
    prices = [a, b, c, a + b + c]
    min_price = min(prices)
    print(min_price * remainder)

solve()
","53.333333333333336","86.66666666666667","60.0","53.333333333333336","","","",""
"APPS/139","
QUESTION:
You are given a directed graph consisting of n vertices and m edges (each edge is directed, so it can be traversed in only one direction). You are allowed to remove at most one edge from it.

Can you make this graph acyclic by removing at most one edge from it? A directed graph is called acyclic iff it doesn't contain any cycle (a non-empty path that starts and ends in the same vertex).


-----Input-----

The first line contains two integers n and m (2 ≤ n ≤ 500, 1 ≤ m ≤ min(n(n - 1), 100000)) — the number of vertices and the number of edges, respectively.

Then m lines follow. Each line contains two integers u and v denoting a directed edge going from vertex u to vertex v (1 ≤ u, v ≤ n, u ≠ v). Each ordered pair (u, v) is listed at most once (there is at most one directed edge from u to v).


-----Output-----

If it is possible to make this graph acyclic by removing at most one edge, print YES. Otherwise, print NO.


-----Examples-----
Input
3 4
1 2
2 3
3 2
3 1

Output
YES

Input
5 6
1 2
2 3
3 2
3 1
2 1
4 5

Output
NO



-----Note-----

In the first example you can remove edge $2 \rightarrow 3$, and the graph becomes acyclic.

In the second example you have to remove at least two edges (for example, $2 \rightarrow 1$ and $2 \rightarrow 3$) in order to make the graph acyclic.
Use user-input-Based format and function signature solve()","
from collections import defaultdict

def solve():
    n, m = map(int, input().split())
    edges = []
    for _ in range(m):
        u, v = map(int, input().split())
        edges.append((u, v))

    def has_cycle(graph):
        visited = set()
        stack = set()

        def dfs(node):
            if node in stack:
                return True
            if node in visited:
                return False

            visited.add(node)
            stack.add(node)

            for neighbor in graph[node]:
                if dfs(neighbor):
                    return True

            stack.remove(node)
            return False

        for node in graph:
            if node not in visited:
                if dfs(node):
                    return True

        return False

    graph = defaultdict(list)
    for u, v in edges:
        graph[u].append(v)

    for i, (u, v) in enumerate(edges):
        graph[u].remove(v)
        if not has_cycle(graph):
            return ""YES""
        graph[u].append(v)

    return ""NO""


solve()","
def solve():
    import sys
    from collections import defaultdict
    
    input = sys.stdin.readline
    
    n, m = map(int, input().split())
    graph = defaultdict(list)
    
    def dfs(v, visited, parents):
        visited[v] = True
        for u in graph[v]:
            if not visited[u]:
                if dfs(u, visited, parents):
                    return True
            elif parents[u] != v:
                return True
        return False
    
    def is_cyclic():
        visited = [False] * (n+1)
        parents = [-1] * (n+1)
        for u in graph:
            if not visited[u]:
                if dfs(u, visited, parents):
                    return True
        return False
    
    for _ in range(m):
        u, v = map(int, input().split())
        graph[u].append(v)
    
    for edge in range(m):
        u, v = map(int, input().split())
        graph[u].remove(v)
        if not is_cyclic():
            return ""YES""
        graph[u].append(v)
    
    return ""NO""

solve()","
def solve():
    n, m = map(int, input().split())
    edges = []
    for _ in range(m):
        edges.append(tuple(map(int, input().split())))

    graph = {i: [] for i in range(1, n + 1)}
    for u, v in edges:
        graph[u].append(v)

    def is_acyclic_remove_one_edge():
        for edge in edges:
            u, v = edge
            graph[u].remove(v)
            if not has_cycle():
                return ""YES""
            graph[u].append(v)
        return ""NO""

    def has_cycle():
        visited = set()
        rec_stack = set()

        def dfs(node):
            if node in rec_stack:
                return True
            if node in visited:
                return False

            visited.add(node)
            rec_stack.add(node)

            for neighbor in graph[node]:
                if dfs(neighbor):
                    return True

            rec_stack.remove(node)
            return False

        for node in graph:
            if dfs(node):
                return True

        return False

    print(is_acyclic_remove_one_edge())

solve()
  ","
def solve():
    import sys
    
    n, m = map(int, sys.stdin.readline().split())
    edges = [list(map(int, sys.stdin.readline().split())) for _ in range(m)]
    
    def is_acyclic():
        graph = {i: [] for i in range(1, n+1)}
        for u, v in edges:
            graph[u].append(v)
        
        def has_cycle(node, visited, stack):
            visited[node] = True
            stack[node] = True
            
            for neighbor in graph[node]:
                if not visited[neighbor]:
                    if has_cycle(neighbor, visited, stack):
                        return True
                elif stack[neighbor]:
                    return True
            
            stack[node] = False
            return False
        
        for node in range(1, n+1):
            visited = [False] * (n+1)
            stack = [False] * (n+1)
            if has_cycle(node, visited, stack):
                return ""YES""
        
        return ""NO""
    
    for i in range(m):
        u, v = edges[i]
        edges[i] = None
        result = is_acyclic()
        if result == ""YES"":
            return result
        edges[i] = [u, v]
    
    return ""NO""

solve()
","0.0","0.0","100.0","0.0","","","",""
"APPS/140","
QUESTION:
The mayor of the Central Town wants to modernize Central Street, represented in this problem by the $(Ox)$ axis.

On this street, there are $n$ antennas, numbered from $1$ to $n$. The $i$-th antenna lies on the position $x_i$ and has an initial scope of $s_i$: it covers all integer positions inside the interval $[x_i - s_i; x_i + s_i]$.

It is possible to increment the scope of any antenna by $1$, this operation costs $1$ coin. We can do this operation as much as we want (multiple times on the same antenna if we want).

To modernize the street, we need to make all integer positions from $1$ to $m$ inclusive covered by at least one antenna. Note that it is authorized to cover positions outside $[1; m]$, even if it's not required.

What is the minimum amount of coins needed to achieve this modernization?


-----Input-----

The first line contains two integers $n$ and $m$ ($1 \le n \le 80$ and $n \le m \le 100\ 000$).

The $i$-th of the next $n$ lines contains two integers $x_i$ and $s_i$ ($1 \le x_i \le m$ and $0 \le s_i \le m$).

On each position, there is at most one antenna (values $x_i$ are pairwise distinct).


-----Output-----

You have to output a single integer: the minimum amount of coins required to make all integer positions from $1$ to $m$ inclusive covered by at least one antenna.


-----Examples-----
Input
3 595
43 2
300 4
554 10

Output
281

Input
1 1
1 1

Output
0

Input
2 50
20 0
3 1

Output
30

Input
5 240
13 0
50 25
60 5
155 70
165 70

Output
26



-----Note-----

In the first example, here is a possible strategy:

  Increase the scope of the first antenna by $40$, so that it becomes $2 + 40 = 42$. This antenna will cover interval $[43 - 42; 43 + 42]$ which is $[1; 85]$  Increase the scope of the second antenna by $210$, so that it becomes $4 + 210 = 214$. This antenna will cover interval $[300 - 214; 300 + 214]$, which is $[86; 514]$  Increase the scope of the third antenna by $31$, so that it becomes $10 + 31 = 41$. This antenna will cover interval $[554 - 41; 554 + 41]$, which is $[513; 595]$ 

Total cost is $40 + 210 + 31 = 281$. We can prove that it's the minimum cost required to make all positions from $1$ to $595$ covered by at least one antenna.

Note that positions $513$ and $514$ are in this solution covered by two different antennas, but it's not important.

—

In the second example, the first antenna already covers an interval $[0; 2]$ so we have nothing to do.

Note that the only position that we needed to cover was position $1$; positions $0$ and $2$ are covered, but it's not important.
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    antennas = []
    for _ in range(n):
        x, s = map(int, input().split())
        antennas.append((x, s))

    antennas.sort()
    covered = 0
    coins = 0

    for x, s in antennas:
        if x - s > covered + 1:
            coins += x - s - covered - 1
            covered = x + s
        elif x + s > covered:
            covered = x + s

    if covered < m:
        coins += m - covered

    print(coins)

solve()
","
def solve():
    import heapq

    n, m = map(int, input().split())
    antennas = []
    total_cost = 0

    for _ in range(n):
        x, s = map(int, input().split())
        antennas.append((max(0, x-s-1), x+s+1, x, s))

    antennas.sort()
    heap = []
    i, j = 0, 0

    while j < m:
        while i < n and antennas[i][0] <= j:
            heapq.heappush(heap, (-antennas[i][3], antennas[i][2]))
            i += 1

        if not heap:
            return -1

        cost, endpoint = heapq.heappop(heap)
        total_cost -= cost
        j = endpoint

    return total_cost

  
solve()","
def solve():
    n, m = map(int, input().split())
    
    antennas = []
    for _ in range(n):
        x, s = map(int, input().split())
        antennas.append((x, s))
    
    required_coverage = [0] * (m + 1)
    for x, s in antennas:
        left = max(1, x - s)
        right = min(m, x + s)
        required_coverage[left:right+1] = [1] * (right - left + 1)
    
    cost = 0
    current_coverage = 0
    for i in range(1, m + 1):
        if required_coverage[i] == 0 and current_coverage == 0:
            cost += 1
            current_coverage = 1
        elif required_coverage[i] == 0 and current_coverage == 1:
            current_coverage = 0

    print(cost)

solve()
","
def solve():
    n, m = map(int, input().split())

    antennas = []
    for _ in range(n):
        x, s = map(int, input().split())
        antennas.append((x, s))

    intervals = [0] * (m + 2)

    for x, s in antennas:
        left = max(x - s, 1)
        right = min(x + s, m)
        intervals[left] += 1
        intervals[right + 1] -= 1

    cost = 0
    sum_antennas = 0
    for i in range(1, m + 1):
        sum_antennas += intervals[i]
        if sum_antennas == 0:
            cost += 1

    print(cost)

# Input reading
solve()
","26.666666666666668","0.0","6.666666666666667","33.33333333333333","","","",""
"APPS/141","
QUESTION:
You have a set of items, each having some integer weight not greater than $8$. You denote that a subset of items is good if total weight of items in the subset does not exceed $W$.

You want to calculate the maximum possible weight of a good subset of items. Note that you have to consider the empty set and the original set when calculating the answer.


-----Input-----

The first line contains one integer $W$ ($0 \le W \le 10^{18}$) — the maximum total weight of a good subset.

The second line denotes the set of items you have. It contains $8$ integers $cnt_1$, $cnt_2$, ..., $cnt_8$ ($0 \le cnt_i \le 10^{16}$), where $cnt_i$ is the number of items having weight $i$ in the set.


-----Output-----

Print one integer — the maximum possible weight of a good subset of items.


-----Examples-----
Input
10
1 2 3 4 5 6 7 8

Output
10

Input
0
0 0 0 0 0 0 0 0

Output
0

Input
3
0 4 1 0 0 9 8 3

Output
3
Use user-input-Based format and function signature solve()","
def solve():
    W = int(input())
    cnt = list(map(int, input().split()))
    
    dp = [0] * (W + 1)
    for i in range(1, 9):
        for j in range(W, -1, -1):
            for k in range(min(cnt[i-1], j//i) + 1):
                dp[j] = max(dp[j], dp[j - k*i] + k*i)
    
    print(dp[W])

solve()
","
def solve():
    def max_good_subset(W, items):
        max_weight = 0
        for i in range(1, 8+1):
            if items[i] == 0:
                continue
            taken = min(items[i], W // i)
            max_weight = max(max_weight, i * taken + max_good_subset(W - taken * i, items))
        return max_weight

    W = int(input())
    items = [0] + list(map(int, input().split()))

    result = max_good_subset(W, items)
    print(result)

solve()
","
from itertools import product

def solve():
    W = int(input())
    cnt = list(map(int, input().split()))
    
    max_weight = 0
    for subset in product(*[range(cnt[i] + 1) for i in range(8)]):
        weight = sum(subset[i] * (i + 1) for i in range(8))
        if weight <= W:
            max_weight = max(max_weight, weight)
    
    print(max_weight)


solve()","
def solve():
    W = int(input())
    cnt = list(map(int, input().split()))

    dp = [0] * (W + 1)
    res = 0

    for i in range(1, 9):
        for j in range(W, 0, -1):
            for k in range(min(W // i, cnt[i-1]), -1, -1):
                dp[j] = max(dp[j], dp[j - i*k] + i*k)
                res = max(dp[j], res)

    print(res)

solve()
","66.66666666666666","6.666666666666667","66.66666666666666","20.0","","","",""
"APPS/142","
QUESTION:
A New Year party is not a New Year party without lemonade! As usual, you are expecting a lot of guests, and buying lemonade has already become a pleasant necessity.

Your favorite store sells lemonade in bottles of n different volumes at different costs. A single bottle of type i has volume 2^{i} - 1 liters and costs c_{i} roubles. The number of bottles of each type in the store can be considered infinite.

You want to buy at least L liters of lemonade. How many roubles do you have to spend?


-----Input-----

The first line contains two integers n and L (1 ≤ n ≤ 30; 1 ≤ L ≤ 10^9) — the number of types of bottles in the store and the required amount of lemonade in liters, respectively.

The second line contains n integers c_1, c_2, ..., c_{n} (1 ≤ c_{i} ≤ 10^9) — the costs of bottles of different types.


-----Output-----

Output a single integer — the smallest number of roubles you have to pay in order to buy at least L liters of lemonade.


-----Examples-----
Input
4 12
20 30 70 90

Output
150

Input
4 3
10000 1000 100 10

Output
10

Input
4 3
10 100 1000 10000

Output
30

Input
5 787787787
123456789 234567890 345678901 456789012 987654321

Output
44981600785557577



-----Note-----

In the first example you should buy one 8-liter bottle for 90 roubles and two 2-liter bottles for 30 roubles each. In total you'll get 12 liters of lemonade for just 150 roubles.

In the second example, even though you need only 3 liters, it's cheaper to buy a single 8-liter bottle for 10 roubles.

In the third example it's best to buy three 1-liter bottles for 10 roubles each, getting three liters for 30 roubles.
Use user-input-Based format and function signature solve()","
def solve():
    n, L = map(int, input().split())
    costs = list(map(int, input().split()))
    
    total_cost = 0
    i = n - 1
    while L > 0:
        bottles_needed = L // (2**i - 1)
        total_cost += bottles_needed * costs[i]
        L -= bottles_needed * (2**i - 1)
        i -= 1
    
    print(total_cost)

solve()
","
def solve():
    import math

    n, L = map(int, input().split())
    costs = list(map(int, input().split()))

    min_cost = float('inf')

    for i in range(n):
        bottles_needed = math.ceil(L / (2**i - 1))
        total_cost = bottles_needed * costs[i]
        min_cost = min(min_cost, total_cost)

    print(min_cost)

solve()
","
def solve():
    import math

    n, L = map(int, input().split())
    costs = list(map(int, input().split()))

    total_cost = 0
    remaining_liters = L
    i = n - 1

    while remaining_liters > 0:
        bottles_needed = remaining_liters // (2**i - 1)
        total_cost += bottles_needed * costs[i]
        remaining_liters -= bottles_needed * (2**i - 1)
        i -= 1

    print(total_cost)

solve()
","
def solve():
    import math
    
    n, L = map(int, input().split())
    costs = list(map(int, input().split()))

    min_cost = float('inf')
    for i in range(n, -1, -1):
        liters_left = L
        cost = 0
        for j in range(n, i, -1):
            bottles_needed = math.ceil(liters_left / (2**j - 1))
            cost += bottles_needed * costs[j-1]
            liters_left -= bottles_needed * (2**j - 1)
        min_cost = min(min_cost, cost)

    print(min_cost)

solve()
","0.0","0.0","0.0","0.0","","","",""
"APPS/143","
QUESTION:
Someone gave Alyona an array containing n positive integers a_1, a_2, ..., a_{n}. In one operation, Alyona can choose any element of the array and decrease it, i.e. replace with any positive integer that is smaller than the current one. Alyona can repeat this operation as many times as she wants. In particular, she may not apply any operation to the array at all.

Formally, after applying some operations Alyona will get an array of n positive integers b_1, b_2, ..., b_{n} such that 1 ≤ b_{i} ≤ a_{i} for every 1 ≤ i ≤ n. Your task is to determine the maximum possible value of mex of this array.

Mex of an array in this problem is the minimum positive integer that doesn't appear in this array. For example, mex of the array containing 1, 3 and 4 is equal to 2, while mex of the array containing 2, 3 and 2 is equal to 1.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of elements in the Alyona's array.

The second line of the input contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the elements of the array.


-----Output-----

Print one positive integer — the maximum possible value of mex of the array after Alyona applies some (possibly none) operations.


-----Examples-----
Input
5
1 3 3 3 6

Output
5

Input
2
2 1

Output
3



-----Note-----

In the first sample case if one will decrease the second element value to 2 and the fifth element value to 4 then the mex value of resulting array 1 2 3 3 4 will be equal to 5.

To reach the answer to the second sample case one must not decrease any of the array elements.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    a.sort()
    
    mex = 1
    for num in a:
        if num >= mex:
            mex += 1
    
    print(mex)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    a.sort()
    
    mex = 1
    for num in a:
        if num >= mex:
            mex += 1
    
    print(mex)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    a.sort()
    mex = 1
    
    for i in range(n):
        if a[i] >= mex:
            mex += 1
    
    print(mex)

solve()
","
def solve():
    n = int(input())
    array = list(map(int, input().split()))
    
    array.sort()
    
    mex = 1
    for num in array:
        if num >= mex:
            mex += 1
    
    print(mex)

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/144","
QUESTION:
Recently Vasya found a golden ticket — a sequence which consists of $n$ digits $a_1a_2\dots a_n$. Vasya considers a ticket to be lucky if it can be divided into two or more non-intersecting segments with equal sums. For example, ticket $350178$ is lucky since it can be divided into three segments $350$, $17$ and $8$: $3+5+0=1+7=8$. Note that each digit of sequence should belong to exactly one segment.

Help Vasya! Tell him if the golden ticket he found is lucky or not.


-----Input-----

The first line contains one integer $n$ ($2 \le n \le 100$) — the number of digits in the ticket.

The second line contains $n$ digits $a_1 a_2 \dots a_n$ ($0 \le a_i \le 9$) — the golden ticket. Digits are printed without spaces.


-----Output-----

If the golden ticket is lucky then print ""YES"", otherwise print ""NO"" (both case insensitive).


-----Examples-----
Input
5
73452

Output
YES

Input
4
1248

Output
NO



-----Note-----

In the first example the ticket can be divided into $7$, $34$ and $52$: $7=3+4=5+2$.

In the second example it is impossible to divide ticket into segments with equal sum.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    ticket = list(map(int, input().strip()))

    total_sum = sum(ticket)
    if total_sum % 2 != 0:
        print(""NO"")
        return

    target_sum = total_sum // 2
    current_sum = 0
    segments = 0

    for digit in ticket:
        current_sum += digit
        if current_sum == target_sum:
            segments += 1
            current_sum = 0
        elif current_sum > target_sum:
            print(""NO"")
            return

    if segments >= 2:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    ticket = list(map(int, input().strip()))

    total_sum = sum(ticket)

    if total_sum % 2 != 0:
        print(""NO"")
        return

    target_sum = total_sum // 2
    dp = [[False] * (target_sum + 1) for _ in range(n + 1)]
    dp[0][0] = True

    for i in range(1, n + 1):
        for j in range(target_sum + 1):
            dp[i][j] = dp[i-1][j]
            if j >= ticket[i-1]:
                dp[i][j] |= dp[i-1][j - ticket[i-1]]

    if dp[n][target_sum]:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    ticket = input().strip()

    total_sum = sum([int(digit) for digit in ticket])
    if total_sum % 2 != 0:
        print(""NO"")
        return

    target_sum = total_sum // 2
    prefix_sum = 0
    segments = 0

    for digit in ticket[:-1]:
        prefix_sum += int(digit)
        if prefix_sum == target_sum:
            segments += 1
            prefix_sum = 0
        elif prefix_sum > target_sum:
            print(""NO"")
            return

    if segments >= 1:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    digits = list(map(int, input()))

    total_sum = sum(digits)
    if total_sum % n != 0:
        print(""NO"")
        return
    
    target_sum = total_sum // n
    current_sum = 0
    segment_count = 0
    
    for digit in digits:
        current_sum += digit
        if current_sum == target_sum:
            segment_count += 1
            current_sum = 0
        
    if segment_count >= 2:
        print(""YES"")
    else:
        print(""NO"")

if __name__ == ""__main__"":
    solve()
","86.66666666666667","80.0","86.66666666666667","46.666666666666664","","","",""
"APPS/145","
QUESTION:
Those days, many boys use beautiful girls' photos as avatars in forums. So it is pretty hard to tell the gender of a user at the first glance. Last year, our hero went to a forum and had a nice chat with a beauty (he thought so). After that they talked very often and eventually they became a couple in the network. 

But yesterday, he came to see ""her"" in the real world and found out ""she"" is actually a very strong man! Our hero is very sad and he is too tired to love again now. So he came up with a way to recognize users' genders by their user names.

This is his method: if the number of distinct characters in one's user name is odd, then he is a male, otherwise she is a female. You are given the string that denotes the user name, please help our hero to determine the gender of this user by his method.


-----Input-----

The first line contains a non-empty string, that contains only lowercase English letters — the user name. This string contains at most 100 letters.


-----Output-----

If it is a female by our hero's method, print ""CHAT WITH HER!"" (without the quotes), otherwise, print ""IGNORE HIM!"" (without the quotes).


-----Examples-----
Input
wjmzbmr

Output
CHAT WITH HER!

Input
xiaodao

Output
IGNORE HIM!

Input
sevenkplus

Output
CHAT WITH HER!



-----Note-----

For the first example. There are 6 distinct characters in ""wjmzbmr"". These characters are: ""w"", ""j"", ""m"", ""z"", ""b"", ""r"". So wjmzbmr is a female and you should print ""CHAT WITH HER!"".
Use user-input-Based format and function signature solve()","
def solve():
    username = input().strip()
    distinct_chars = set(username)
    
    if len(distinct_chars) % 2 == 0:
        print(""IGNORE HIM!"")
    else:
        print(""CHAT WITH HER!"")

solve()
","
def solve():
    username = input().strip()
    distinct_chars = set(username)
    
    if len(distinct_chars) % 2 == 0:
        print(""IGNORE HIM!"")
    else:
        print(""CHAT WITH HER!"")

solve()
","
def solve():
    username = input()
    distinct_chars = set(username)
    
    if len(distinct_chars) % 2 == 0:
        print(""IGNORE HIM!"")
    else:
        print(""CHAT WITH HER!"")
        
solve()
","
def solve():
    username = input()
    distinct_chars = set(username)
    if len(distinct_chars) % 2 == 0:
        print(""IGNORE HIM!"")
    else:
        print(""CHAT WITH HER!"")

solve()
","0.0","0.0","0.0","0.0","","","",""
"APPS/146","
QUESTION:
This morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.

He decided to accomplish this by closing every $k$-th ($2 \leq k \leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \cdot k$ that satisfy the following condition: $1 \leq c \leq n$ and $i$ is an integer (it may be positive, negative or zero).

For example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.

After closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.


-----Input-----

The first line contains two integers $n$ and $k$ ($2 \leq k < n \leq 100$) — the amount of tabs opened currently and the distance between the tabs closed.

The second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.


-----Output-----

Output a single integer — the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.


-----Examples-----
Input
4 2
1 1 -1 1

Output
2

Input
14 3
-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1

Output
9



-----Note-----

In the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.

In the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    tabs = list(map(int, input().split()))
    
    max_diff = 0
    for b in range(1, k+1):
        e = sum(tabs[i] for i in range(b-1, n, k) if tabs[i] == 1)
        s = sum(tabs[i] for i in range(b-1, n, k) if tabs[i] == -1)
        max_diff = max(max_diff, abs(e - s))
    
    print(max_diff)

solve()
","
def solve():
    n, k = map(int, input().split())
    tabs = list(map(int, input().split()))
    
    num_tests = tabs.count(1)
    num_social = tabs.count(-1)
    
    max_diff = abs(num_tests - num_social)
    
    print(max_diff)

solve()","
def solve():
    n, k = map(int, input().split())
    tabs = list(map(int, input().split()))

    e_count = tabs.count(1)
    s_count = tabs.count(-1)

    max_diff = 0
    for b in range(1, n + 1):
        e = e_count
        s = s_count
        for i in range(b, n + 1, k):
            if tabs[i - 1] == 1:
                e -= 1
            else:
                s -= 1
        max_diff = max(max_diff, abs(e - s))

    print(max_diff)

solve()
","
def solve():
    n, k = map(int, input().split())
    tabs = list(map(int, input().split()))
    
    test_tabs = tabs.count(1)
    social_tabs = tabs.count(-1)

    max_abs_diff = 0
    for b in range(1, n+1):
        test_remaining = test_tabs
        social_remaining = social_tabs
        
        for i in range(b, n+1, k):
            if tabs[i-1] == 1:
                test_remaining -= 1
            else:
                social_remaining -= 1
        
        max_abs_diff = max(max_abs_diff, abs(test_remaining - social_remaining))

    print(max_abs_diff)

solve()
","20.0","40.0","53.333333333333336","53.333333333333336","","","",""
"APPS/147","
QUESTION:
R3D3 spent some time on an internship in MDCS. After earning enough money, he decided to go on a holiday somewhere far, far away. He enjoyed suntanning, drinking alcohol-free cocktails and going to concerts of popular local bands. While listening to ""The White Buttons"" and their hit song ""Dacan the Baker"", he met another robot for whom he was sure is the love of his life. Well, his summer, at least. Anyway, R3D3 was too shy to approach his potential soulmate, so he decided to write her a love letter. However, he stumbled upon a problem. Due to a terrorist threat, the Intergalactic Space Police was monitoring all letters sent in the area. Thus, R3D3 decided to invent his own alphabet, for which he was sure his love would be able to decipher.

There are n letters in R3D3’s alphabet, and he wants to represent each letter as a sequence of '0' and '1', so that no letter’s sequence is a prefix of another letter's sequence. Since the Intergalactic Space Communications Service has lately introduced a tax for invented alphabets, R3D3 must pay a certain amount of money for each bit in his alphabet’s code (check the sample test for clarifications). He is too lovestruck to think clearly, so he asked you for help.

Given the costs c_0 and c_1 for each '0' and '1' in R3D3’s alphabet, respectively, you should come up with a coding for the alphabet (with properties as above) with minimum total cost.


-----Input-----

The first line of input contains three integers n (2 ≤ n ≤ 10^8), c_0 and c_1 (0 ≤ c_0, c_1 ≤ 10^8) — the number of letters in the alphabet, and costs of '0' and '1', respectively. 


-----Output-----

Output a single integer — minimum possible total a cost of the whole alphabet.


-----Example-----
Input
4 1 2

Output
12



-----Note-----

There are 4 letters in the alphabet. The optimal encoding is ""00"", ""01"", ""10"", ""11"". There are 4 zeroes and 4 ones used, so the total cost is 4·1 + 4·2 = 12.
Use user-input-Based format and function signature solve()","
def solve():
    n, c0, c1 = map(int, input().split())
    total_cost = n * min(c0, c1) + max(c0, c1)
    print(total_cost)

solve()
","
def solve():
    n, c0, c1 = map(int, input().split())
    if c0 <= c1:
        total_cost = (n-1)*c0 + c1
    else:
        total_cost = n*c1
    print(total_cost)

# Call the function to execute
solve()
","
def solve():
    n, c0, c1 = map(int, input().split())
    if c0 <= c1:
        print(n*c0 + min(c0, c1))
    else:
        print(n*c1 + min(c0, c1))

solve()
","
def solve():
    n, c0, c1 = map(int, input().split())
    if c0 < c1:
        c0, c1 = c1, c0
    total_cost = (n-1) * min(c0, c1) + max(c0, c1)
    print(total_cost)

solve()
","33.33333333333333","46.666666666666664","26.666666666666668","53.333333333333336","","","",""
"APPS/148","
QUESTION:
The circle line of the Roflanpolis subway has $n$ stations.

There are two parallel routes in the subway. The first one visits stations in order $1 \to 2 \to \ldots \to n \to 1 \to 2 \to \ldots$ (so the next stop after station $x$ is equal to $(x+1)$ if $x < n$ and $1$ otherwise). The second route visits stations in order $n \to (n-1) \to \ldots \to 1 \to n \to (n-1) \to \ldots$ (so the next stop after station $x$ is equal to $(x-1)$ if $x>1$ and $n$ otherwise). All trains depart their stations simultaneously, and it takes exactly $1$ minute to arrive at the next station.

Two toads live in this city, their names are Daniel and Vlad.

Daniel is currently in a train of the first route at station $a$ and will exit the subway when his train reaches station $x$.

Coincidentally, Vlad is currently in a train of the second route at station $b$ and he will exit the subway when his train reaches station $y$.

Surprisingly, all numbers $a,x,b,y$ are distinct.

Toad Ilya asks you to check if Daniel and Vlad will ever be at the same station at the same time during their journey. In other words, check if there is a moment when their trains stop at the same station. Note that this includes the moments when Daniel or Vlad enter or leave the subway.


-----Input-----

The first line contains five space-separated integers $n$, $a$, $x$, $b$, $y$ ($4 \leq n \leq 100$, $1 \leq a, x, b, y \leq n$, all numbers among $a$, $x$, $b$, $y$ are distinct) — the number of stations in Roflanpolis, Daniel's start station, Daniel's finish station, Vlad's start station and Vlad's finish station, respectively.


-----Output-----

Output ""YES"" if there is a time moment when Vlad and Daniel are at the same station, and ""NO"" otherwise. You can print each letter in any case (upper or lower).


-----Examples-----
Input
5 1 4 3 2

Output
YES

Input
10 2 1 9 10

Output
NO



-----Note-----

In the first example, Daniel and Vlad start at the stations $(1, 3)$. One minute later they are at stations $(2, 2)$. They are at the same station at this moment. Note that Vlad leaves the subway right after that.

Consider the second example, let's look at the stations Vlad and Daniel are at. They are:   initially $(2, 9)$,  after $1$ minute $(3, 8)$,  after $2$ minutes $(4, 7)$,  after $3$ minutes $(5, 6)$,  after $4$ minutes $(6, 5)$,  after $5$ minutes $(7, 4)$,  after $6$ minutes $(8, 3)$,  after $7$ minutes $(9, 2)$,  after $8$ minutes $(10, 1)$,  after $9$ minutes $(1, 10)$. 

After that, they both leave the subway because they are at their finish stations, so there is no moment when they both are at the same station.
Use user-input-Based format and function signature solve()","
def solve():
    n, a, x, b, y = map(int, input().split())
    
    while True:
        if a == b:
            print(""YES"")
            return
        if a == x or b == y:
            print(""NO"")
            return
        a = a % n + 1
        b = (b - 2 + n) % n + 1

solve()
","
def solve():
    n, a, x, b, y = map(int, input().split())

    while True:
        if a == b:
            print(""YES"")
            return
        if a == x or b == y:
            print(""NO"")
            return
        a = (a % n) + 1
        b = (b - 2) % n + 1

solve()
","
def solve():
    n, a, x, b, y = map(int, input().split())
    
    while True:
        if a == b:
            print(""YES"")
            return
        if a == x or b == y:
            print(""NO"")
            return
        a = a % n + 1
        b = b - 1 if b > 1 else n

solve()
","
def solve():
    n, a, x, b, y = map(int, input().split())
    
    while True:
        if a == b:
            print(""YES"")
            break
        if a == x or b == y:
            print(""NO"")
            break
        a = (a % n) + 1
        b = b - 1 if b > 1 else n

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/149","
QUESTION:
Unlucky year in Berland is such a year that its number n can be represented as n = x^{a} + y^{b}, where a and b are non-negative integer numbers. 

For example, if x = 2 and y = 3 then the years 4 and 17 are unlucky (4 = 2^0 + 3^1, 17 = 2^3 + 3^2 = 2^4 + 3^0) and year 18 isn't unlucky as there is no such representation for it.

Such interval of years that there are no unlucky years in it is called The Golden Age.

You should write a program which will find maximum length of The Golden Age which starts no earlier than the year l and ends no later than the year r. If all years in the interval [l, r] are unlucky then the answer is 0.


-----Input-----

The first line contains four integer numbers x, y, l and r (2 ≤ x, y ≤ 10^18, 1 ≤ l ≤ r ≤ 10^18).


-----Output-----

Print the maximum length of The Golden Age within the interval [l, r].

If all years in the interval [l, r] are unlucky then print 0.


-----Examples-----
Input
2 3 1 10

Output
1

Input
3 5 10 22

Output
8

Input
2 3 3 5

Output
0



-----Note-----

In the first example the unlucky years are 2, 3, 4, 5, 7, 9 and 10. So maximum length of The Golden Age is achived in the intervals [1, 1], [6, 6] and [8, 8].

In the second example the longest Golden Age is the interval [15, 22].
Use user-input-Based format and function signature solve()","
def solve():
    x, y, l, r = map(int, input().split())
    nums = set()
    for i in range(64):
        for j in range(64):
            num = x**i + y**j
            if num >= l and num <= r:
                nums.add(num)
    nums = sorted(list(nums))
    intervals = []
    prev = l - 1
    for num in nums:
        if num - prev - 1 > 0:
            intervals.append(num - prev - 1)
        prev = num
    intervals.append(r - prev)
    print(max(intervals))

solve()
","
def solve():
    x, y, l, r = map(int, input().split())
    
    unlucky_years = set()
    a = 0
    while x ** a <= r:
        b = 0
        while x ** a + y ** b <= r:
            unlucky_years.add(x ** a + y ** b)
            b += 1
        a += 1
    
    years = sorted(list(unlucky_years))
    years.insert(0, l-1)
    years.append(r+1)
    
    max_gap = 0
    for i in range(1, len(years)):
        max_gap = max(max_gap, years[i] - years[i-1] - 1)
    
    print(max_gap)

solve()
","
def solve():
    x, y, l, r = map(int, input().split())

    lucky_years = set()
    for i in range(64):
        for j in range(64):
            year = x**i + y**j
            if year >= l and year <= r:
                lucky_years.add(year)

    lucky_years = sorted(list(lucky_years))
    intervals = []
    prev = l - 1
    for year in lucky_years:
        if year - prev - 1 > 0:
            intervals.append(year - prev - 1)
        prev = year

    if r - prev > 0:
        intervals.append(r - prev)

    max_gap = max(intervals) if intervals else r - l + 1
    print(max_gap)

solve()
","
def solve():
    x, y, l, r = map(int, input().split())
    
    def find_unlucky_years(x, y, l, r):
        unlucky_years = set()
        for a in range(50):
            for b in range(50):
                year = pow(x, a) + pow(y, b)
                if year >= l and year <= r:
                    unlucky_years.add(year)
        return unlucky_years
    
    unlucky_years = find_unlucky_years(x, y, l, r)
    
    intervals = sorted(list(unlucky_years))
    intervals.append(r+1)
    
    max_gap = 0
    for i in range(len(intervals)-1):
        gap = intervals[i+1] - intervals[i] - 1
        max_gap = max(max_gap, gap)
        
    print(max_gap)

solve()
  ","100.0","80.0","86.66666666666667","66.66666666666666","","","",""
"APPS/150","
QUESTION:
Mr. Funt now lives in a country with a very specific tax laws. The total income of mr. Funt during this year is equal to n (n ≥ 2) burles and the amount of tax he has to pay is calculated as the maximum divisor of n (not equal to n, of course). For example, if n = 6 then Funt has to pay 3 burles, while for n = 25 he needs to pay 5 and if n = 2 he pays only 1 burle.

As mr. Funt is a very opportunistic person he wants to cheat a bit. In particular, he wants to split the initial n in several parts n_1 + n_2 + ... + n_{k} = n (here k is arbitrary, even k = 1 is allowed) and pay the taxes for each part separately. He can't make some part equal to 1 because it will reveal him. So, the condition n_{i} ≥ 2 should hold for all i from 1 to k.

Ostap Bender wonders, how many money Funt has to pay (i.e. minimal) if he chooses and optimal way to split n in parts.


-----Input-----

The first line of the input contains a single integer n (2 ≤ n ≤ 2·10^9) — the total year income of mr. Funt.


-----Output-----

Print one integer — minimum possible number of burles that mr. Funt has to pay as a tax.


-----Examples-----
Input
4

Output
2

Input
27

Output
3
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    if n % 2 == 0:
        print(2)
    else:
        for i in range(3, int(n**0.5) + 1, 2):
            if n % i == 0:
                print(n // i)
                return
        print(1)

solve()","
from math import sqrt

def solve():
    n = int(input())
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            print(n // i)
            return
    print(1)

solve()
","
def solve():
    n = int(input())
    if n % 2 == 0:
        print(2)
    else:
        for i in range(3, int(n**0.5) + 1, 2):
            if n % i == 0:
                print(i)
                break
        else:
            print(n)

solve()","
from math import sqrt

def solve():
    n = int(input())
    x = n
    ans = n
    for i in range(2, int(sqrt(n)) + 1):
        if x % i == 0:
            while x % i == 0:
                x //= i
            ans = min(ans, i)
    if x > 1:
        ans = min(ans, x)
    print(ans)

solve()
","73.33333333333333","60.0","33.33333333333333","33.33333333333333","","","",""
"APPS/151","
QUESTION:
Beroffice text editor has a wide range of features that help working with text. One of the features is an automatic search for typos and suggestions of how to fix them.

Beroffice works only with small English letters (i.e. with 26 letters from a to z). Beroffice thinks that a word is typed with a typo if there are three or more consonants in a row in the word. The only exception is that if the block of consonants has all letters the same, then this block (even if its length is greater than three) is not considered a typo. Formally, a word is typed with a typo if there is a block of not less that three consonants in a row, and there are at least two different letters in this block.

For example:

  the following words have typos: ""hellno"", ""hackcerrs"" and ""backtothefutttture"";  the following words don't have typos: ""helllllooooo"", ""tobeornottobe"" and ""oooooo"". 

When Beroffice editor finds a word with a typo, it inserts as little as possible number of spaces in this word (dividing it into several words) in such a way that each of the resulting words is typed without any typos.

Implement this feature of Beroffice editor. Consider the following letters as the only vowels: 'a', 'e', 'i', 'o' and 'u'. All the other letters are consonants in this problem.


-----Input-----

The only line contains a non-empty word consisting of small English letters. The length of the word is between 1 and 3000 letters.


-----Output-----

Print the given word without any changes if there are no typos.

If there is at least one typo in the word, insert the minimum number of spaces into the word so that each of the resulting words doesn't have any typos. If there are multiple solutions, print any of them.


-----Examples-----
Input
hellno

Output
hell no 

Input
abacaba

Output
abacaba 

Input
asdfasdf

Output
asd fasd f
Use user-input-Based format and function signature solve()","
def solve():
    word = input().strip()
    vowels = {'a', 'e', 'i', 'o', 'u'}
    consonants = set('bcdfghjklmnpqrstvwxyz')
    
    typo_found = False
    result = ''
    current_word = ''
    
    for letter in word:
        if letter in consonants:
            current_word += letter
        else:
            if len(current_word) >= 3 and len(set(current_word)) >= 2:
                typo_found = True
                result += current_word + ' '
            else:
                result += current_word
            current_word = ''
        result += letter
    
    if len(current_word) >= 3 and len(set(current_word)) >= 2:
        typo_found = True
        result += current_word + ' '
    else:
        result += current_word
    
    if typo_found:
        print(result)
    else:
        print(word)

solve()
","
def solve():
    import sys
    word = input().strip()
    vowels = ['a', 'e', 'i', 'o', 'u']

    def has_typo(word):
        consecutive_consonants = 0
        prev_char = ''
        for char in word:
            if char not in vowels:
                consecutive_consonants += 1
                if char != prev_char:
                    if consecutive_consonants >= 3:
                        return True
            else:
                consecutive_consonants = 0
            prev_char = char
        return False

    if not has_typo(word):
        print(word)
    else:
        solution = ''
        consecutive_consonants = 0
        for char in word:
            if char not in vowels:
                consecutive_consonants += 1
                if consecutive_consonants >= 3:
                    solution += ' '
            else:
                consecutive_consonants = 0
            solution += char
        print(solution)

solve()
  ","
def solve():
    word = input()
    vowels = ['a', 'e', 'i', 'o', 'u']
    typos = []
    
    consec_consonants = 0
    last_consonant = ''
    for letter in word:
        if letter not in vowels:
            if letter == last_consonant:
                consec_consonants += 1
            else:
                consec_consonants = 1
                last_consonant = letter
        else:
            consec_consonants = 0
        
        if consec_consonants >= 3 and len(set(word[:word.index(letter) + 1])) > 1:
            typos.append(word.index(letter))
    
    if not typos:
        print(word)
    else:
        typo_idx = typos[0]
        corrected_word = word[:typo_idx] + ' ' + word[typo_idx:]
        print(corrected_word)

solve()","
def solve():
    word = input()
    vowels = set('aeiou')
    result = ''
    consecutive_consonants = 0
    for char in word:
        if char in vowels:
            result += char
            consecutive_consonants = 0
        else:
            consecutive_consonants += 1
            if consecutive_consonants >= 3:
                if result and result[-1] != ' ':
                    result += ' '
                if consecutive_consonants == 3:
                    result += char
                else:
                    result = result[:-1] + ' ' + char
                consecutive_consonants = 1
            else:
                result += char
    print(result)

solve()
","20.0","40.0","20.0","100.0","","","",""
"APPS/152","
QUESTION:
Anton is playing a very interesting computer game, but now he is stuck at one of the levels. To pass to the next level he has to prepare n potions.

Anton has a special kettle, that can prepare one potions in x seconds. Also, he knows spells of two types that can faster the process of preparing potions.  Spells of this type speed up the preparation time of one potion. There are m spells of this type, the i-th of them costs b_{i} manapoints and changes the preparation time of each potion to a_{i} instead of x.  Spells of this type immediately prepare some number of potions. There are k such spells, the i-th of them costs d_{i} manapoints and instantly create c_{i} potions. 

Anton can use no more than one spell of the first type and no more than one spell of the second type, and the total number of manapoints spent should not exceed s. Consider that all spells are used instantly and right before Anton starts to prepare potions.

Anton wants to get to the next level as fast as possible, so he is interested in the minimum number of time he needs to spent in order to prepare at least n potions.


-----Input-----

The first line of the input contains three integers n, m, k (1 ≤ n ≤ 2·10^9, 1 ≤ m, k ≤ 2·10^5) — the number of potions, Anton has to make, the number of spells of the first type and the number of spells of the second type.

The second line of the input contains two integers x and s (2 ≤ x ≤ 2·10^9, 1 ≤ s ≤ 2·10^9) — the initial number of seconds required to prepare one potion and the number of manapoints Anton can use.

The third line contains m integers a_{i} (1 ≤ a_{i} < x) — the number of seconds it will take to prepare one potion if the i-th spell of the first type is used.

The fourth line contains m integers b_{i} (1 ≤ b_{i} ≤ 2·10^9) — the number of manapoints to use the i-th spell of the first type.

There are k integers c_{i} (1 ≤ c_{i} ≤ n) in the fifth line — the number of potions that will be immediately created if the i-th spell of the second type is used. It's guaranteed that c_{i} are not decreasing, i.e. c_{i} ≤ c_{j} if i < j.

The sixth line contains k integers d_{i} (1 ≤ d_{i} ≤ 2·10^9) — the number of manapoints required to use the i-th spell of the second type. It's guaranteed that d_{i} are not decreasing, i.e. d_{i} ≤ d_{j} if i < j.


-----Output-----

Print one integer — the minimum time one has to spent in order to prepare n potions.


-----Examples-----
Input
20 3 2
10 99
2 4 3
20 10 40
4 15
10 80

Output
20

Input
20 3 2
10 99
2 4 3
200 100 400
4 15
100 800

Output
200



-----Note-----

In the first sample, the optimum answer is to use the second spell of the first type that costs 10 manapoints. Thus, the preparation time of each potion changes to 4 seconds. Also, Anton should use the second spell of the second type to instantly prepare 15 potions spending 80 manapoints. The total number of manapoints used is 10 + 80 = 90, and the preparation time is 4·5 = 20 seconds (15 potions were prepared instantly, and the remaining 5 will take 4 seconds each).

In the second sample, Anton can't use any of the spells, so he just prepares 20 potions, spending 10 seconds on each of them and the answer is 20·10 = 200.
Use user-input-Based format and function signature solve()","
def solve():
    n, m, k = map(int, input().split())
    x, s = map(int, input().split())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))
    c = list(map(int, input().split()))
    d = list(map(int, input().split())

    min_time = n * x
    for i in range(m):
        if b[i] <= s:
            min_time = min(min_time, max(0, n - sum(c[:j+1])) * a[i])
    
    for j in range(k):
        if d[j] <= s:
            remaining_potions = max(0, n - c[j])
            min_time = min(min_time, remaining_potions * x)
    
    print(min_time)

solve()
","
def solve():
    n, m, k = map(int, input().split())
    x, s = map(int, input().split())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))
    c = list(map(int, input().split()))
    d = list(map(int, input().split())

    min_time = n * x  # Worst-case scenario without using spells

    for i in range(m):
        if b[i] <= s:
            min_time = min(min_time, max(0, n - sum(c[:j] for j in range(k+1) if d[j] <= s-b[i])) * a[i)

    for j in range(k):
        if d[j] <= s:
            min_time = min(min_time, max(0, n - c[j]) * x)

    print(min_time)

solve()
","
def solve():
    import sys
    input = sys.stdin.readline

    n, m, k = map(int, input().split())
    x, s = map(int, input().split())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))
    c = list(map(int, input().split()))
    d = list(map(int, input().split()))

    min_time = n * x

    for i in range(m):
        if b[i] <= s:
            potions_needed = n - c[-1]
            manapoints_available = s - b[i]
            spell_time = potions_needed * a[i]
            remaining_time = max(0, spell_time - manapoints_available * x)
            min_time = min(min_time, remaining_time)

    for i in range(k):
        if d[i] <= s:
            potions_needed = max(0, n - c[i])
            manapoints_available = s - d[i]
            spell_time = potions_needed * x
            min_time = min(min_time, spell_time)

    print(min_time)

solve()","
def solve():
    n, m, k = map(int, input().split())
    x, s = map(int, input().split())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))
    c = list(map(int, input().split()))
    d = list(map(int, input().split())
    
    min_time = n*x # Initial time without using any spells
    
    for i in range(m):
        if b[i] <= s:
            min_time = min(min_time, max(0, n - sum(c[:j+1])) * a[i])
    
    for j in range(k):
        if d[j] <= s:
            remaining_potions = max(0, n - c[j])
            min_time = min(min_time, remaining_potions * x)
    
    print(min_time)
  
solve()","0.0","0.0","53.333333333333336","0.0","","","",""
"APPS/153","
QUESTION:
Polycarp takes part in a math show. He is given n tasks, each consists of k subtasks, numbered 1 through k. It takes him t_{j} minutes to solve the j-th subtask of any task. Thus, time required to solve a subtask depends only on its index, but not on the task itself. Polycarp can solve subtasks in any order.

By solving subtask of arbitrary problem he earns one point. Thus, the number of points for task is equal to the number of solved subtasks in it. Moreover, if Polycarp completely solves the task (solves all k of its subtasks), he recieves one extra point. Thus, total number of points he recieves for the complete solution of the task is k + 1.

Polycarp has M minutes of time. What is the maximum number of points he can earn?


-----Input-----

The first line contains three integer numbers n, k and M (1 ≤ n ≤ 45, 1 ≤ k ≤ 45, 0 ≤ M ≤ 2·10^9).

The second line contains k integer numbers, values t_{j} (1 ≤ t_{j} ≤ 1000000), where t_{j} is the time in minutes required to solve j-th subtask of any task.


-----Output-----

Print the maximum amount of points Polycarp can earn in M minutes.


-----Examples-----
Input
3 4 11
1 2 3 4

Output
6

Input
5 5 10
1 2 4 8 16

Output
7



-----Note-----

In the first example Polycarp can complete the first task and spend 1 + 2 + 3 + 4 = 10 minutes. He also has the time to solve one subtask of the second task in one minute.

In the second example Polycarp can solve the first subtask of all five tasks and spend 5·1 = 5 minutes. Also he can solve the second subtasks of two tasks and spend 2·2 = 4 minutes. Thus, he earns 5 + 2 = 7 points in total.
Use user-input-Based format and function signature solve()","
def solve():
    n, k, M = map(int, input().split())
    t = list(map(int, input().split()))
    
    t.sort()
    points = 0
    for i in range(k+1):
        time_left = M
        solved_subtasks = i
        for j in range(i):
            time_left -= t[j]
            if time_left < 0:
                break
            solved_subtasks += 1
        points = max(points, min(solved_subtasks, (n*k)))
    
    print(points)

solve()
","
def solve():
    n, k, M = map(int, input().split())
    t = list(map(int, input().split()))

    t.sort()

    result = 0
    for i in range(k + 1):
        total_time = sum(t[:i]) * (n - i) + i
        if total_time <= M:
            result = max(result, (n - i) * k + i)

    print(result)

solve()
","
def solve():
    n, k, M = map(int, input().split())
    t = list(map(int, input().split()))

    t.sort()

    total_points = 0

    for i in range(k + 1):
        time_left = M
        points = 0

        for j in range(n):
            num_solved = min(i, k)
            time_required = sum(t[:num_solved])

            if time_required > time_left:
                break

            time_left -= time_required
            points += num_solved

        total_points = max(total_points, points)

    print(total_points)

solve()
","
def solve():
    n, k, m = map(int, input().split())
    times = list(map(int, input().split()))
    
    times.sort()
    max_points = 0
    
    for i in range(k + 1):
        total_time = 0
        points = 0
        for j in range(k):
            if j < i:
                total_time += times[j]
                if total_time > m:
                    break
                points += 1
            else:
                break
        extra_points = min((m - total_time) // times[i], n - points)
        max_points = max(max_points, points + extra_points)
    
    print(max_points)


solve()","6.666666666666667","0.0","26.666666666666668","0.0","","","",""
"APPS/154","
QUESTION:
Recall that a binary search tree is a rooted binary tree, whose nodes each store a key and each have at most two distinguished subtrees, left and right. The key in each node must be greater than any key stored in the left subtree, and less than any key stored in the right subtree.

The depth of a vertex is the number of edges on the simple path from the vertex to the root. In particular, the depth of the root is $0$.

Let's call a binary search tree perfectly balanced if there doesn't exist a binary search tree with the same number of vertices that has a strictly smaller sum of depths of its vertices.

Let's call a binary search tree with integer keys striped if both of the following conditions are satisfied for every vertex $v$:   If $v$ has a left subtree whose root is $u$, then the parity of the key of $v$ is different from the parity of the key of $u$.  If $v$ has a right subtree whose root is $w$, then the parity of the key of $v$ is the same as the parity of the key of $w$. 

You are given a single integer $n$. Find the number of perfectly balanced striped binary search trees with $n$ vertices that have distinct integer keys between $1$ and $n$, inclusive. Output this number modulo $998\,244\,353$.


-----Input-----

The only line contains a single integer $n$ ($1 \le n \le 10^6$), denoting the required number of vertices.


-----Output-----

Output the number of perfectly balanced striped binary search trees with $n$ vertices and distinct integer keys between $1$ and $n$, inclusive, modulo $998\,244\,353$.


-----Examples-----
Input
4

Output
1

Input
3

Output
0



-----Note-----

In the first example, this is the only tree that satisfies the conditions: $\left. \begin{array}{l}{\text{perfectly balanced}} \\{\text{striped}} \\{\text{binary search tree}} \end{array} \right.$

In the second example, here are various trees that don't satisfy some condition: [Image]
Use user-input-Based format and function signature solve()","
def solve(n: int) -> int:
    MOD = 998244353
    
    def count_trees(vertices, parity):
        if vertices == 0:
            return 1
        if vertices == 1:
            return 1 if parity == 0 else 0
        
        result = 0
        for left_vertices in range(vertices):
            right_vertices = vertices - 1 - left_vertices
            left_parity = 1 - parity
            right_parity = parity if right_vertices % 2 == 0 else 1 - parity
            
            result += count_trees(left_vertices, left_parity) * count_trees(right_vertices, right_parity)
            result %= MOD
        
        return result
    
    return count_trees(n, 0)

# Example usage:
n = int(input())
print(solve(n))

solve()","
def solve(n: int) -> int:
    MOD = 998244353
    power = pow(2, n, MOD - 1)
    ans = pow(power, (MOD - 2), MOD)
    return ans

# Example usage
n = int(input())
result = solve(n)
print(result)
 
solve()","
def solve():
    MOD = 998244353

    n = int(input())

    inv_fact = [0] * (n + 1)
    inv_fact[1] = 1
    for i in range(2, n + 1):
        inv_fact[i] = (-(MOD // i) * inv_fact[MOD % i]) % MOD

    result = 1
    for i in range(1, n + 1):
        result = (result * (2 * n - i + 1) * inv_fact[i]) % MOD

    print(result)

solve()
","
def solve(n: int) -> int:
    mod = 998244353

    def calculate(num):
        curr = 1
        for i in range(1, num+1):
            curr = (curr * i) % mod
        return curr

    def count_trees(k):
        ans = 0
        for i in range(k, n+1, 2):
            left = i - k
            right = n - i
            ans = (ans + (calculate(n-1) * pow((calculate(left) * calculate(right)) % mod, mod-2, mod)) % mod
        return ans

    if n % 2 == 0:
        return count_trees(n//2)
    else:
        return 0

solve()","0.0","0.0","0.0","0.0","","","",""
"APPS/155","
QUESTION:
You might have heard about the next game in Lara Croft series coming out this year. You also might have watched its trailer. Though you definitely missed the main idea about its plot, so let me lift the veil of secrecy.

Lara is going to explore yet another dangerous dungeon. Game designers decided to use good old 2D environment. The dungeon can be represented as a rectangle matrix of n rows and m columns. Cell (x, y) is the cell in the x-th row in the y-th column. Lara can move between the neighbouring by side cells in all four directions.

Moreover, she has even chosen the path for herself to avoid all the traps. She enters the dungeon in cell (1, 1), that is top left corner of the matrix. Then she goes down all the way to cell (n, 1) — the bottom left corner. Then she starts moving in the snake fashion — all the way to the right, one cell up, then to the left to the cell in 2-nd column, one cell up. She moves until she runs out of non-visited cells. n and m given are such that she always end up in cell (1, 2).

Lara has already moved to a neighbouring cell k times. Can you determine her current position?


-----Input-----

The only line contains three integers n, m and k (2 ≤ n, m ≤ 10^9, n is always even, 0 ≤ k < n·m). Note that k doesn't fit into 32-bit integer type!


-----Output-----

Print the cell (the row and the column where the cell is situated) where Lara ends up after she moves k times.


-----Examples-----
Input
4 3 0

Output
1 1

Input
4 3 11

Output
1 2

Input
4 3 7

Output
3 2



-----Note-----

Here is her path on matrix 4 by 3: [Image]
Use user-input-Based format and function signature solve()","
def solve():
    n, m, k = map(int, input().split())
    if k < n:
        print(1, 1)
    else:
        row = 1 + (k - n) // (m - 1)
        col = 2 if row % 2 == 0 else 1 + (k - n) % (m - 1)
        print(row, col)

solve()","
def solve():
    n, m, k = map(int, input().split())
    if k < n:
        print(1, k + 1)
    else:
        x = min(n - 1, k // (m - 1) + 1)
        y = (k - (x - 1) * (m - 1)) if x % 2 == 1 else (m - 1 - (k - (x - 1) * (m - 1)))
        print(x, y)

solve()","
def solve():
    n, m, k = map(int, input().split())
    row = (k // (m - 1)) if (k // (m - 1)) % 2 == 0 else n - (k // (m - 1))
    col = 1 + (k % (m - 1)) if row % 2 == 1 else m - (k % (m - 1))
    print(row, col)

solve()
","
def solve():
    n, m, k = map(int, input().split())
    if k < n:
        print(1, 1+k)
    else:
        row = 1 + (k - n) // (m-1)
        column = 2 if row % 2 == 0 else m - (k - n) % (m-1)
        print(row, column)

solve()
","6.666666666666667","6.666666666666667","6.666666666666667","6.666666666666667","","","",""
"APPS/156","
QUESTION:
Today, Osama gave Fadi an integer $X$, and Fadi was wondering about the minimum possible value of $max(a, b)$ such that $LCM(a, b)$ equals $X$. Both $a$ and $b$ should be positive integers.

$LCM(a, b)$ is the smallest positive integer that is divisible by both $a$ and $b$. For example, $LCM(6, 8) = 24$, $LCM(4, 12) = 12$, $LCM(2, 3) = 6$.

Of course, Fadi immediately knew the answer. Can you be just like Fadi and find any such pair?


-----Input-----

The first and only line contains an integer $X$ ($1 \le X \le 10^{12}$).


-----Output-----

Print two positive integers, $a$ and $b$, such that the value of $max(a, b)$ is minimum possible and $LCM(a, b)$ equals $X$. If there are several possible such pairs, you can print any.


-----Examples-----
Input
2

Output
1 2

Input
6

Output
2 3

Input
4

Output
1 4

Input
1

Output
1 1
Use user-input-Based format and function signature solve()","
from math import gcd

def solve():
    X = int(input())
    
    a = 1
    b = X
    
    for i in range(2, int(X**0.5) + 1):
        if X % i == 0:
            a = i
            b = X // i
            break
    
    print(a, b)

solve()
","
from math import gcd

def solve():
    X = int(input())
    a = 1
    b = X
    for i in range(2, int(X**0.5) + 1):
        if X % i == 0:
            a = i
            b = X // i
            break
    print(a, b)

solve()
","
from math import gcd

def solve():
    X = int(input())
    
    a = 1
    while X % a != 0:
        a += 1
    
    b = X // a
    print(a, b)

solve()
","
from math import isqrt

def solve():
    X = int(input())
    
    for i in range(1, isqrt(X) + 1):
        if X % i == 0:
            a = i
            b = X // i
            print(a, b)
            break

solve()
","33.33333333333333","33.33333333333333","40.0","40.0","","","",""
"APPS/157","
QUESTION:
Nikolay has a lemons, b apples and c pears. He decided to cook a compote. According to the recipe the fruits should be in the ratio 1: 2: 4. It means that for each lemon in the compote should be exactly 2 apples and exactly 4 pears. You can't crumble up, break up or cut these fruits into pieces. These fruits — lemons, apples and pears — should be put in the compote as whole fruits.

Your task is to determine the maximum total number of lemons, apples and pears from which Nikolay can cook the compote. It is possible that Nikolay can't use any fruits, in this case print 0. 


-----Input-----

The first line contains the positive integer a (1 ≤ a ≤ 1000) — the number of lemons Nikolay has. 

The second line contains the positive integer b (1 ≤ b ≤ 1000) — the number of apples Nikolay has. 

The third line contains the positive integer c (1 ≤ c ≤ 1000) — the number of pears Nikolay has.


-----Output-----

Print the maximum total number of lemons, apples and pears from which Nikolay can cook the compote.


-----Examples-----
Input
2
5
7

Output
7

Input
4
7
13

Output
21

Input
2
3
2

Output
0



-----Note-----

In the first example Nikolay can use 1 lemon, 2 apples and 4 pears, so the answer is 1 + 2 + 4 = 7.

In the second example Nikolay can use 3 lemons, 6 apples and 12 pears, so the answer is 3 + 6 + 12 = 21.

In the third example Nikolay don't have enough pears to cook any compote, so the answer is 0.
Use user-input-Based format and function signature solve()","
def solve():
    a = int(input())
    b = int(input())
    c = int(input())
    
    max_lemons = min(a, b // 2, c // 4)
    
    total_fruits = max_lemons + 2 * max_lemons + 4 * max_lemons
    
    print(total_fruits)

solve()
","
def solve():
    a = int(input())
    b = int(input())
    c = int(input())
    
    max_lemons = min(a, b // 2, c // 4)
    
    return max_lemons * (1 + 2 + 4)

solve()
","
def solve():
    a = int(input())
    b = int(input())
    c = int(input())

    max_lemons = min(a, b // 2, c // 4)
    
    total_fruits = max_lemons + 2*max_lemons + 4*max_lemons
    
    print(total_fruits)

solve()
","
def solve():
    a = int(input())
    b = int(input())
    c = int(input())
    
    total_lemons = min(a, b//2, c//4)
    total_apples = total_lemons * 2
    total_pears = total_lemons * 4
    
    total_fruits = total_lemons + total_apples + total_pears
    
    print(total_fruits)

solve()
","100.0","0.0","100.0","100.0","","","",""
"APPS/158","
QUESTION:
Berland annual chess tournament is coming!

Organizers have gathered 2·n chess players who should be divided into two teams with n people each. The first team is sponsored by BerOil and the second team is sponsored by BerMobile. Obviously, organizers should guarantee the win for the team of BerOil.

Thus, organizers should divide all 2·n players into two teams with n people each in such a way that the first team always wins.

Every chess player has its rating r_{i}. It is known that chess player with the greater rating always wins the player with the lower rating. If their ratings are equal then any of the players can win.

After teams assignment there will come a drawing to form n pairs of opponents: in each pair there is a player from the first team and a player from the second team. Every chess player should be in exactly one pair. Every pair plays once. The drawing is totally random.

Is it possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing?


-----Input-----

The first line contains one integer n (1 ≤ n ≤ 100).

The second line contains 2·n integers a_1, a_2, ... a_2n (1 ≤ a_{i} ≤ 1000).


-----Output-----

If it's possible to divide all 2·n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing, then print ""YES"". Otherwise print ""NO"".


-----Examples-----
Input
2
1 3 2 4

Output
YES

Input
1
3 3

Output
NO
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    ratings = list(map(int, input().split()))
    ratings.sort()
    
    team1 = ratings[:n]
    team2 = ratings[n:]
    
    if max(team1) < min(team2):
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    ratings = list(map(int, input().split()))
    ratings.sort()
    
    team1 = ratings[:n]
    team2 = ratings[n:]
    
    for i in range(n):
        if team1[i] >= team2[i]:
            return ""NO""
    
    return ""YES""

solve()
","
def solve():
    import sys

    n = int(sys.stdin.readline())
    ratings = list(map(int, sys.stdin.readline().split()))

    ratings.sort()

    for i in range(n):
        if ratings[i] >= ratings[i + n]:
            return ""NO""

    return ""YES""

solve()","
from itertools import combinations

def solve():
    n = int(input())
    ratings = list(map(int, input().split()))
    
    ratings.sort()
    
    n_players = 2 * n
    first_team = ratings[:n]
    second_team = ratings[n:]
    
    pairs = list(combinations(range(n_players), n))
    for pair in pairs:
        first_team_wins = True
        for i in pair:
            if ratings[i] in first_team:
                first_team_wins = False
                break
        if first_team_wins:
            print(""YES"")
            return
    
    print(""NO"")

solve()","100.0","0.0","0.0","100.0","","","",""
"APPS/159","
QUESTION:
You are given an array of n elements, you must make it a co-prime array in as few moves as possible.

In each move you can insert any positive integral number you want not greater than 10^9 in any place in the array.

An array is co-prime if any two adjacent numbers of it are co-prime.

In the number theory, two integers a and b are said to be co-prime if the only positive integer that divides both of them is 1.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 1000) — the number of elements in the given array.

The second line contains n integers a_{i} (1 ≤ a_{i} ≤ 10^9) — the elements of the array a.


-----Output-----

Print integer k on the first line — the least number of elements needed to add to the array a to make it co-prime.

The second line should contain n + k integers a_{j} — the elements of the array a after adding k elements to it. Note that the new array should be co-prime, so any two adjacent values should be co-prime. Also the new array should be got from the original array a by adding k elements to it.

If there are multiple answers you can print any one of them.


-----Example-----
Input
3
2 7 28

Output
1
2 7 9 28
Use user-input-Based format and function signature solve()","
from math import gcd

def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    k = 0
    new_array = [a[0]]
    
    for i in range(1, n):
        if gcd(new_array[-1], a[i]) != 1:
            k += 1
            new_array.append(1)
        new_array.append(a[i])
    
    print(k)
    print(' '.join(map(str, new_array)))

solve()
","
from math import gcd

def solve():
    n = int(input())
    a = list(map(int, input().split()))

    k = 0
    new_array = [a[0]]
    
    for i in range(1, n):
        while gcd(new_array[-1], a[i]) != 1:
            k += 1
            new_array.append(1)
        
        new_array.append(a[i])
    
    print(k)
    print(' '.join(map(str, new_array)))

solve()","
from math import gcd

def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    k = 0
    new_arr = [a[0]]
    
    for i in range(1, n):
        if gcd(new_arr[-1], a[i]) != 1:
            k += 1
            new_arr.append(1)
        new_arr.append(a[i])
    
    print(k)
    print(*new_arr)
  
solve()","
from math import gcd

def solve():
    n = int(input())
    a = list(map(int, input().split()))

    k = 0
    modified_array = [a[0]]

    for i in range(1, n):
        if gcd(a[i-1], a[i]) != 1:
            k += 1
        modified_array.append(a[i-1])
        modified_array.append(1)
    
    modified_array.append(a[-1])

    print(k)
    print("" "".join(map(str, modified_array)))

solve()
","100.0","100.0","100.0","0.0","","","",""
"APPS/160","
QUESTION:
We have a sequence of N integers: A_1, A_2, \cdots, A_N.
You can perform the following operation between 0 and K times (inclusive):
 - Choose two integers i and j such that i \neq j, each between 1 and N (inclusive). Add 1 to A_i and -1 to A_j, possibly producing a negative element.
Compute the maximum possible positive integer that divides every element of A after the operations. Here a positive integer x divides an integer y if and only if there exists an integer z such that y = xz.

-----Constraints-----
 - 2 \leq N \leq 500
 - 1 \leq A_i \leq 10^6
 - 0 \leq K \leq 10^9
 - All values in input are integers.

-----Input-----
Input is given from Standard Input in the following format:
N K
A_1 A_2 \cdots A_{N-1} A_{N}

-----Output-----
Print the maximum possible positive integer that divides every element of A after the operations.

-----Sample Input-----
2 3
8 20

-----Sample Output-----
7

7 will divide every element of A if, for example, we perform the following operation:
 - Choose i = 2, j = 1. A becomes (7, 21).
We cannot reach the situation where 8 or greater integer divides every element of A.
Use user-input-Based format and function signature solve()","
def solve():
    import math

    N, K = map(int, input().split())
    A = list(map(int, input().split()))

    gcd_val = A[0]
    for i in range(1, N):
        gcd_val = math.gcd(gcd_val, A[i])

    if K >= gcd_val and (K - gcd_val) % 2 == 0:
        print(gcd_val)
    else:
        print(math.gcd(gcd_val - K, gcd_val))

solve()","
def solve():
    import math

    N, K = map(int, input().split())
    A = list(map(int, input().split()))

    gcd_A = A[0]
    for i in range(1, N):
        gcd_A = math.gcd(gcd_A, A[i])

    max_gcd = 1
    for i in range(N):
        max_gcd = math.gcd(max_gcd, gcd_A - A[i])

    print(max_gcd)

solve()","
def solve():
    n, k = map(int, input().split())
    a = list(map(int, input().split()))
    gcd_res = a[0]
    for num in a[1:]:
        while num != 0:
            gcd_res, num = num, gcd_res % num
    return gcd_res

solve()","
def solve():
    import math

    N, K = map(int, input().split())
    A = list(map(int, input().split()))

    gcd_A = A[0]
    for i in range(1, N):
        gcd_A = math.gcd(gcd_A, A[i])

    max_gcd = 1
    for i in range(N):
        max_gcd = math.gcd(max_gcd, A[i] - gcd_A)

    print(max_gcd)

solve()","6.666666666666667","6.666666666666667","0.0","6.666666666666667","","","",""
"APPS/161","
QUESTION:
Cat Furrier Transform is a popular algorithm among cat programmers to create longcats. As one of the greatest cat programmers ever exist, Neko wants to utilize this algorithm to create the perfect longcat.

Assume that we have a cat with a number $x$. A perfect longcat is a cat with a number equal $2^m - 1$ for some non-negative integer $m$. For example, the numbers $0$, $1$, $3$, $7$, $15$ and so on are suitable for the perfect longcats.

In the Cat Furrier Transform, the following operations can be performed on $x$:  (Operation A): you select any non-negative integer $n$ and replace $x$ with $x \oplus (2^n - 1)$, with $\oplus$ being a bitwise XOR operator. (Operation B): replace $x$ with $x + 1$. 

The first applied operation must be of type A, the second of type B, the third of type A again, and so on. Formally, if we number operations from one in the order they are executed, then odd-numbered operations must be of type A and the even-numbered operations must be of type B.

Neko wants to produce perfect longcats at industrial scale, thus for each cat Neko only wants to perform at most $40$ operations. Can you help Neko writing a transformation plan?

Note that it is not required to minimize the number of operations. You just need to use no more than $40$ operations.


-----Input-----

The only line contains a single integer $x$ ($1 \le x \le 10^6$).


-----Output-----

The first line should contain a single integer $t$ ($0 \le t \le 40$) — the number of operations to apply.

Then for each odd-numbered operation print the corresponding number $n_i$ in it. That is, print $\lceil \frac{t}{2} \rceil$ integers $n_i$ ($0 \le n_i \le 30$), denoting the replacement $x$ with $x \oplus (2^{n_i} - 1)$ in the corresponding step.

If there are multiple possible answers, you can print any of them. It is possible to show, that there is at least one answer in the constraints of this problem.


-----Examples-----
Input
39

Output
4
5 3 
Input
1

Output
0

Input
7

Output
0



-----Note-----

In the first test, one of the transforms might be as follows: $39 \to 56 \to 57 \to 62 \to 63$. Or more precisely: Pick $n = 5$. $x$ is transformed into $39 \oplus 31$, or $56$.  Increase $x$ by $1$, changing its value to $57$.  Pick $n = 3$. $x$ is transformed into $57 \oplus 7$, or $62$.  Increase $x$ by $1$, changing its value to $63 = 2^6 - 1$. 

In the second and third test, the number already satisfies the goal requirement.
Use user-input-Based format and function signature solve()","
def solve():
    x = int(input())
    operations = []
    
    if x % 2 == 1:
        operations.append(0)
    
    t = len(operations)
    print(t)
    for i in range(t):
        print(operations[i], end=' ')

# Call the function to execute
solve()
","
def solve():
    x = int(input())

    operations = []
    
    t = 0
    while x % 2 == 1:
        x >>= 1
        t += 1

    print(t)
    print(*[(t-i)//2 for i in range(t) if (t-i) % 2 != 0])

solve()","
def solve():
    x = int(input())
    operations = []
    
    if x == 1:
        print(0)
    else:
        t = 0
        for i in range(30, -1, -1):
            if (x >> i) & 1:
                t += 1
                if t % 2 == 1:
                    operations.append(i)
                x ^= (1 << (i + 1)) - 1
                x += 1
        
        print(len(operations))
        print(*operations)

solve()","
def solve():
    x = int(input())
    operations = []
    t = 0
    
    while x % 2 == 0:
        x //= 2
        t += 1
    
    while x > 0:
        n = 0
        while (1 << n) - 1 <= x:
            n += 1
        n -= 1
        x ^= (1 << n) - 1
        t += 1
        operations.append(n)
        x += 1
        t += 1
        
    print(t)
    for i in range(len(operations)):
        if i % 2 == 0:
            print(operations[i], end=' ')


solve()
","0.0","0.0","20.0","0","","","",""
"APPS/162","
QUESTION:
Luba thinks about watering her garden. The garden can be represented as a segment of length k. Luba has got n buckets, the i-th bucket allows her to water some continuous subsegment of garden of length exactly a_{i} each hour. Luba can't water any parts of the garden that were already watered, also she can't water the ground outside the garden.

Luba has to choose one of the buckets in order to water the garden as fast as possible (as mentioned above, each hour she will water some continuous subsegment of length a_{i} if she chooses the i-th bucket). Help her to determine the minimum number of hours she has to spend watering the garden. It is guaranteed that Luba can always choose a bucket so it is possible water the garden.

See the examples for better understanding.


-----Input-----

The first line of input contains two integer numbers n and k (1 ≤ n, k ≤ 100) — the number of buckets and the length of the garden, respectively.

The second line of input contains n integer numbers a_{i} (1 ≤ a_{i} ≤ 100) — the length of the segment that can be watered by the i-th bucket in one hour.

It is guaranteed that there is at least one bucket such that it is possible to water the garden in integer number of hours using only this bucket.


-----Output-----

Print one integer number — the minimum number of hours required to water the garden.


-----Examples-----
Input
3 6
2 3 5

Output
2

Input
6 7
1 2 3 4 5 6

Output
7



-----Note-----

In the first test the best option is to choose the bucket that allows to water the segment of length 3. We can't choose the bucket that allows to water the segment of length 5 because then we can't water the whole garden.

In the second test we can choose only the bucket that allows us to water the segment of length 1.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    buckets = list(map(int, input().split()))
    
    min_hours = k
    for bucket in buckets:
        if k % bucket == 0:
            min_hours = min(min_hours, k // bucket)
    
    print(min_hours)

solve()
","
def solve():
    n, k = map(int, input().split())
    buckets = list(map(int, input().split()))

    min_hours = k
    for bucket in buckets:
        if k % bucket == 0:
            min_hours = min(min_hours, k // bucket)

    print(min_hours)

solve()
","
def solve():
    n, k = map(int, input().split())
    buckets = list(map(int, input().split()))
    
    min_hours = k
    for bucket in buckets:
        if k % bucket == 0:
            min_hours = min(min_hours, k // bucket)
    
    print(min_hours)

solve()
","
def solve():
    n, k = map(int, input().split())
    buckets = list(map(int, input().split()))

    min_hours = float('inf')
    for bucket in buckets:
        if k % bucket == 0:
            min_hours = min(min_hours, k // bucket)

    print(min_hours)

# Example usage
solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/163","
QUESTION:
On the way to Rio de Janeiro Ostap kills time playing with a grasshopper he took with him in a special box. Ostap builds a line of length n such that some cells of this line are empty and some contain obstacles. Then, he places his grasshopper to one of the empty cells and a small insect in another empty cell. The grasshopper wants to eat the insect.

Ostap knows that grasshopper is able to jump to any empty cell that is exactly k cells away from the current (to the left or to the right). Note that it doesn't matter whether intermediate cells are empty or not as the grasshopper makes a jump over them. For example, if k = 1 the grasshopper can jump to a neighboring cell only, and if k = 2 the grasshopper can jump over a single cell.

Your goal is to determine whether there is a sequence of jumps such that grasshopper will get from his initial position to the cell with an insect.


-----Input-----

The first line of the input contains two integers n and k (2 ≤ n ≤ 100, 1 ≤ k ≤ n - 1) — the number of cells in the line and the length of one grasshopper's jump.

The second line contains a string of length n consisting of characters '.', '#', 'G' and 'T'. Character '.' means that the corresponding cell is empty, character '#' means that the corresponding cell contains an obstacle and grasshopper can't jump there. Character 'G' means that the grasshopper starts at this position and, finally, 'T' means that the target insect is located at this cell. It's guaranteed that characters 'G' and 'T' appear in this line exactly once.


-----Output-----

If there exists a sequence of jumps (each jump of length k), such that the grasshopper can get from his initial position to the cell with the insect, print ""YES"" (without quotes) in the only line of the input. Otherwise, print ""NO"" (without quotes).


-----Examples-----
Input
5 2
#G#T#

Output
YES

Input
6 1
T....G

Output
YES

Input
7 3
T..#..G

Output
NO

Input
6 2
..GT..

Output
NO



-----Note-----

In the first sample, the grasshopper can make one jump to the right in order to get from cell 2 to cell 4.

In the second sample, the grasshopper is only able to jump to neighboring cells but the way to the insect is free — he can get there by jumping left 5 times.

In the third sample, the grasshopper can't make a single jump.

In the fourth sample, the grasshopper can only jump to the cells with odd indices, thus he won't be able to reach the insect.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    line = input().strip()

    grasshopper_pos = line.index('G')
    insect_pos = line.index('T')

    if (insect_pos - grasshopper_pos) % k == 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n, k = map(int, input().split())
    line = input().strip()
    
    grasshopper_index = line.index('G')
    insect_index = line.index('T')
    
    if abs(grasshopper_index - insect_index) % k == 0:
        if (insect_index - grasshopper_index) * (k // abs(k)) > 0:
            print(""YES"")
        else:
            print(""NO"")
    else:
        print(""NO"")

solve()
","
def solve():
    n, k = map(int, input().split())
    line = input().strip()

    grasshopper_idx = line.index('G')
    insect_idx = line.index('T')

    if abs(grasshopper_idx - insect_idx) % k == 0:
        jump = 0
        while grasshopper_idx != insect_idx:
            jump += k
            if grasshopper_idx < insect_idx:
                grasshopper_idx += k
            else:
                grasshopper_idx -= k

            if line[grasshopper_idx] == '#':
                print(""NO"")
                return

        print(""YES"")
    else:
        print(""NO"")


# Call the function to test it
solve()
","
def solve():
    n, k = map(int, input().split())
    line = list(input().strip())
    
    grasshopper_pos = line.index('G')
    insect_pos = line.index('T')
    
    if (insect_pos - grasshopper_pos) % k == 0:
        if (insect_pos - grasshopper_pos) * (grasshopper_pos < insect_pos) > 0:
            print(""YES"")
        else:
            print(""NO"")
    else:
        print(""NO"")

solve()
","80.0","66.66666666666666","100.0","66.66666666666666","","","",""
"APPS/164","
QUESTION:
It's a beautiful April day and Wallace is playing football with his friends. But his friends do not know that Wallace actually stayed home with Gromit and sent them his robotic self instead. Robo-Wallace has several advantages over the other guys. For example, he can hit the ball directly to the specified point. And yet, the notion of a giveaway is foreign to him. The combination of these features makes the Robo-Wallace the perfect footballer — as soon as the ball gets to him, he can just aim and hit the goal. He followed this tactics in the first half of the match, but he hit the goal rarely. The opposing team has a very good goalkeeper who catches most of the balls that fly directly into the goal. But Robo-Wallace is a quick thinker, he realized that he can cheat the goalkeeper. After all, they are playing in a football box with solid walls. Robo-Wallace can kick the ball to the other side, then the goalkeeper will not try to catch the ball. Then, if the ball bounces off the wall and flies into the goal, the goal will at last be scored.

Your task is to help Robo-Wallace to detect a spot on the wall of the football box, to which the robot should kick the ball, so that the ball bounces once and only once off this wall and goes straight to the goal. In the first half of the match Robo-Wallace got a ball in the head and was severely hit. As a result, some of the schemes have been damaged. Because of the damage, Robo-Wallace can only aim to his right wall (Robo-Wallace is standing with his face to the opposing team's goal).

The football box is rectangular. Let's introduce a two-dimensional coordinate system so that point (0, 0) lies in the lower left corner of the field, if you look at the box above. Robo-Wallace is playing for the team, whose goal is to the right. It is an improvised football field, so the gate of Robo-Wallace's rivals may be not in the middle of the left wall. [Image] 

In the given coordinate system you are given:   y_1, y_2 — the y-coordinates of the side pillars of the goalposts of robo-Wallace's opponents;  y_{w} — the y-coordinate of the wall to which Robo-Wallace is aiming;  x_{b}, y_{b} — the coordinates of the ball's position when it is hit;  r — the radius of the ball. 

A goal is scored when the center of the ball crosses the OY axis in the given coordinate system between (0, y_1) and (0, y_2). The ball moves along a straight line. The ball's hit on the wall is perfectly elastic (the ball does not shrink from the hit), the angle of incidence equals the angle of reflection. If the ball bounces off the wall not to the goal, that is, if it hits the other wall or the goal post, then the opposing team catches the ball and Robo-Wallace starts looking for miscalculation and gets dysfunctional. Such an outcome, if possible, should be avoided. We assume that the ball touches an object, if the distance from the center of the ball to the object is no greater than the ball radius r.


-----Input-----

The first and the single line contains integers y_1, y_2, y_{w}, x_{b}, y_{b}, r (1 ≤ y_1, y_2, y_{w}, x_{b}, y_{b} ≤ 10^6; y_1 < y_2 < y_{w}; y_{b} + r < y_{w}; 2·r < y_2 - y_1).

It is guaranteed that the ball is positioned correctly in the field, doesn't cross any wall, doesn't touch the wall that Robo-Wallace is aiming at. The goal posts can't be located in the field corners.


-----Output-----

If Robo-Wallace can't score a goal in the described manner, print ""-1"" (without the quotes). Otherwise, print a single number x_{w} — the abscissa of his point of aiming. 

If there are multiple points of aiming, print the abscissa of any of them. When checking the correctness of the answer, all comparisons are made with the permissible absolute error, equal to 10^{ - 8}. 

It is recommended to print as many characters after the decimal point as possible.


-----Examples-----
Input
4 10 13 10 3 1

Output
4.3750000000

Input
1 4 6 2 2 1

Output
-1

Input
3 10 15 17 9 2

Output
11.3333333333



-----Note-----

Note that in the first and third samples other correct values of abscissa x_{w} are also possible.
Use user-input-Based format and function signature solve()","
def solve():
    y1, y2, yw, xb, yb, r = map(int, input().split())
    
    if yb - r <= y1 or yb + r >= y2:
        print(""-1"")
    else:
        xw = xb + (xb * (yw - yb - r)) / (2 * (yb - r))
        print(""{:.10f}"".format(xw))

solve()
","
def solve():
    y1, y2, yw, xb, yb, r = map(int, input().split())
    
    if yb + r >= yw:
        print(""-1"")
    else:
        vy = yb + r
        vx = xb + (xb * (yw - vy) - xb * yb) / (yw - yb)
        print(""{:.10f}"".format(vx))

solve()","
def solve():
    y1, y2, yw, xb, yb, r = map(int, input().split())
    
    if yb + r >= yw:
        print(""-1"")
        return
    
    d1 = yw - y2 - r
    d2 = y1 - yw + r
    
    xw = xb + (xb * d1) / (2 * yw - yb - r) - (xb * d2) / (yb + r + r)
    print(""{:.10f}"".format(xw))

solve()
  ","
from math import sqrt

def solve():
    y1, y2, yw, xb, yb, r = map(int, input().split())

    def get_reflected_x(x_ball, y_ball, x_wall):
        return 2*x_wall - x_ball

    def can_score_goal(x_wall):
        x_hit = get_reflected_x(xb, yb, x_wall)
        if x_hit < 0 or x_hit > x_wall:
            return False
        y_hit = yw - r - abs((x_wall - x_hit) * (yw - yb) / (xb - x_hit)) 
        return y1 + r < y_hit < y2 - r

    left, right = 0, xb
    for _ in range(100):  
        mid = (left + right) / 2
        if can_score_goal(mid):
            right = mid
        else:
            left = mid
    return f""{mid:.10f}""

print(solve())

solve()","33.33333333333333","0.0","0.0","0.0","","","",""
"APPS/165","
QUESTION:
Vasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation! 

Every day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.

Vasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.

According to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.


-----Input-----

The only line contains three integers b, d and s (0 ≤ b, d, s ≤ 10^18,  b + d + s ≥ 1) — the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium. 


-----Output-----

Print single integer — the minimum possible number of meals which Vasiliy could have missed during his vacation. 


-----Examples-----
Input
3 2 1

Output
1


Input
1 0 0

Output
0


Input
1 1 1

Output
0


Input
1000000000000000000 0 1000000000000000000

Output
999999999999999999





-----Note-----

In the first sample, Vasiliy could have missed one supper, for example, in case he have arrived before breakfast, have been in the sanatorium for two days (including the day of arrival) and then have left after breakfast on the third day. 

In the second sample, Vasiliy could have arrived before breakfast, have had it, and immediately have left the sanatorium, not missing any meal.

In the third sample, Vasiliy could have been in the sanatorium for one day, not missing any meal.
Use user-input-Based format and function signature solve()","
def solve():
    b, d, s = map(int, input().split())
    max_meals = max(b, d, s)
    total_meals = b + d + s
    missed_meals = max(max_meals - 1, 0)
    if max_meals == 1:
        print(0)
    else:
        print(max(missed_meals - (total_meals - max_meals), 0))

solve()
","
def solve():
    b, d, s = map(int, input().split())
    max_meals = max(b, d, s)
    missed_meals = max(max_meals - b - 1, 0) + max(max_meals - d - 1, 0) + max(max_meals - s - 1, 0)
    print(missed_meals)

solve()","
def solve():
    b, d, s = map(int, input().split())
    max_meals = max(b, d, s)
    total_meals = b + d + s
    missed_meals = max(max_meals - 1 - total_meals + 1, 0)
    print(missed_meals)

solve()
","
def solve():
    b, d, s = map(int, input().split())
    max_meals = max(b, d, s)
    total_meals = b + d + s
    if max_meals == 1:
        print(0)
    else:
        print(max(max_meals - 1 - total_meals + 1, 0))

solve()
","80.0","100.0","80.0","80.0","","","",""
"APPS/166","
QUESTION:
There is a matrix A of size x × y filled with integers. For every $i \in [ 1 . . x ]$, $j \in [ 1 . . y ]$ A_{i}, j = y(i - 1) + j. Obviously, every integer from [1..xy] occurs exactly once in this matrix. 

You have traversed some path in this matrix. Your path can be described as a sequence of visited cells a_1, a_2, ..., a_{n} denoting that you started in the cell containing the number a_1, then moved to the cell with the number a_2, and so on.

From the cell located in i-th line and j-th column (we denote this cell as (i, j)) you can move into one of the following cells: (i + 1, j) — only if i < x;  (i, j + 1) — only if j < y;  (i - 1, j) — only if i > 1;  (i, j - 1) — only if j > 1.

Notice that making a move requires you to go to an adjacent cell. It is not allowed to stay in the same cell. You don't know x and y exactly, but you have to find any possible values for these numbers such that you could start in the cell containing the integer a_1, then move to the cell containing a_2 (in one step), then move to the cell containing a_3 (also in one step) and so on. Can you choose x and y so that they don't contradict with your sequence of moves?


-----Input-----

The first line contains one integer number n (1 ≤ n ≤ 200000) — the number of cells you visited on your path (if some cell is visited twice, then it's listed twice).

The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — the integers in the cells on your path.


-----Output-----

If all possible values of x and y such that 1 ≤ x, y ≤ 10^9 contradict with the information about your path, print NO.

Otherwise, print YES in the first line, and in the second line print the values x and y such that your path was possible with such number of lines and columns in the matrix. Remember that they must be positive integers not exceeding 10^9.


-----Examples-----
Input
8
1 2 3 6 9 8 5 2

Output
YES
3 3

Input
6
1 2 1 2 5 3

Output
NO

Input
2
1 10

Output
YES
4 9



-----Note-----

The matrix and the path on it in the first test looks like this: [Image] 

Also there exist multiple correct answers for both the first and the third examples.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    path = list(map(int, input().split()))
    
    max_val = max(path)
    factors = []
    for i in range(1, int(max_val ** 0.5) + 1):
        if max_val % i == 0:
            factors.append(i)
            factors.append(max_val // i)
    
    for x in factors:
        y = max_val // x
        matrix = [[0 for _ in range(y)] for _ in range(x)]
        idx = 0
        for i in range(x):
            for j in range(y):
                matrix[i][j] = idx + 1
                idx += 1
        
        current_pos = (0, 0)
        for num in path:
            found = False
            for i in range(x):
                for j in range(y):
                    if matrix[i][j] == num:
                        found = True
                        if abs(i - current_pos[0]) + abs(j - current_pos[1]) != 1:
                            print(""NO"")
                            return
                        current_pos = (i, j)
                        break
                if found:
                    break
        
        print(""YES"")
        print(x, y)
        return
    
    print(""NO"")

solve()","
python
def solve():
    n = int(input())
    path = list(map(int, input().split()))
    
    max_num = max(path)
    x = 1
    y = max_num
    while x * y < max_num:
        x += 1
        y = max_num // x

    if all(num in path for num in range(1, x*y+1)):
        print('YES')
        print(x, y)
    else:
        print('NO')
  

solve()","
def solve():
    n = int(input())
    cells = list(map(int, input().split()))

    min_cell = min(cells)
    x = int(n ** 0.5)
    while x >= 1:
        if min_cell % x == 0:
            y = min_cell // x
            break
        x -= 1

    for i in range(1, n):
        diff = abs(cells[i] - cells[i-1])
        if (diff != y) and (diff != 1):
            print(""NO"")
            return

    print(""YES"")
    print(x, y)

solve()","
def solve():
    n = int(input())
    path = list(map(int, input().split()))
    
    max_num = max(path)
    factors = []
    
    for i in range(1, int(max_num**0.5) + 1):
        if max_num % i == 0:
            factors.append(i)
            if i != max_num // i:
                factors.append(max_num // i)
    
    for x in factors:
        y = max_num // x
        matrix = [[0 for _ in range(y)] for _ in range(x)]
        
        pos = 0
        for i in range(x):
            for j in range(y):
                matrix[i][j] = pos + 1
                if pos < n and matrix[i][j] == path[pos]:
                    pos += 1
        
        if pos == n:
            print(""YES"")
            print(x, y)
            return
    
    print(""NO"")

solve()
","46.15384615384615","0.0","40.0","46.15384615384615","","","",""
"APPS/167","
QUESTION:
You are given two strings a and b. You have to remove the minimum possible number of consecutive (standing one after another) characters from string b in such a way that it becomes a subsequence of string a. It can happen that you will not need to remove any characters at all, or maybe you will have to remove all of the characters from b and make it empty.

Subsequence of string s is any such string that can be obtained by erasing zero or more characters (not necessarily consecutive) from string s.


-----Input-----

The first line contains string a, and the second line — string b. Both of these strings are nonempty and consist of lowercase letters of English alphabet. The length of each string is no bigger than 10^5 characters.


-----Output-----

On the first line output a subsequence of string a, obtained from b by erasing the minimum number of consecutive characters.

If the answer consists of zero characters, output «-» (a minus sign).


-----Examples-----
Input
hi
bob

Output
-

Input
abca
accepted

Output
ac

Input
abacaba
abcdcba

Output
abcba



-----Note-----

In the first example strings a and b don't share any symbols, so the longest string that you can get is empty.

In the second example ac is a subsequence of a, and at the same time you can obtain it by erasing consecutive symbols cepted from string b.
Use user-input-Based format and function signature solve()","
def solve():
    import sys
    a = sys.stdin.readline().strip()
    b = sys.stdin.readline().strip()
    
    i, j = 0, 0
    result = """"
    
    while i < len(a) and j < len(b):
        if a[i] == b[j]:
            result += a[i]
            j += 1
        i += 1
    
    if len(result) == 0:
        print(""-"")
    else:
        print(result)

solve()
","
def solve():
    a = input().strip()
    b = input().strip()
    
    i, j = 0, 0
    res = """"
    
    while i < len(a) and j < len(b):
        if a[i] == b[j]:
            res += a[i]
            j += 1
        i += 1
    
    if j == 0:
        print(""-"")
    else:
        print(res)

if __name__ == ""__main__"":
    solve()
","
def solve():
    import sys
    a = input().strip()
    b = input().strip()
    
    i, j = len(a)-1, len(b)-1
    while i >= 0 and j >= 0:
        if a[i] == b[j]:
            j -= 1
        i -= 1
    
    if j == -1:
        print(b)
    else:
        print(""-"")

solve()
","
def solve():
    a = input().strip()
    b = input().strip()
    
    i, j = 0, 0
    res = []
    
    while i < len(a) and j < len(b):
        if a[i] == b[j]:
            res.append(a[i])
            j += 1
        i += 1
    
    if j == len(b):
        print(''.join(res))
    else:
        print('-')

solve()","66.66666666666666","66.66666666666666","53.333333333333336","53.333333333333336","","","",""
"APPS/168","
QUESTION:
Vasya has a pile, that consists of some number of stones. $n$ times he either took one stone from the pile or added one stone to the pile. The pile was non-empty before each operation of taking one stone from the pile.

You are given $n$ operations which Vasya has made. Find the minimal possible number of stones that can be in the pile after making these operations.


-----Input-----

The first line contains one positive integer $n$ — the number of operations, that have been made by Vasya ($1 \leq n \leq 100$).

The next line contains the string $s$, consisting of $n$ symbols, equal to ""-"" (without quotes) or ""+"" (without quotes). If Vasya took the stone on $i$-th operation, $s_i$ is equal to ""-"" (without quotes), if added, $s_i$ is equal to ""+"" (without quotes).


-----Output-----

Print one integer — the minimal possible number of stones that can be in the pile after these $n$ operations.


-----Examples-----
Input
3
---

Output
0
Input
4
++++

Output
4
Input
2
-+

Output
1
Input
5
++-++

Output
3


-----Note-----

In the first test, if Vasya had $3$ stones in the pile at the beginning, after making operations the number of stones will be equal to $0$. It is impossible to have less number of piles, so the answer is $0$. Please notice, that the number of stones at the beginning can't be less, than $3$, because in this case, Vasya won't be able to take a stone on some operation (the pile will be empty).

In the second test, if Vasya had $0$ stones in the pile at the beginning, after making operations the number of stones will be equal to $4$. It is impossible to have less number of piles because after making $4$ operations the number of stones in the pile increases on $4$ stones. So, the answer is $4$.

In the third test, if Vasya had $1$ stone in the pile at the beginning, after making operations the number of stones will be equal to $1$. It can be proved, that it is impossible to have less number of stones after making the operations.

In the fourth test, if Vasya had $0$ stones in the pile at the beginning, after making operations the number of stones will be equal to $3$.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    s = input()
    
    stones = 0
    for operation in s:
        if operation == '+':
            stones += 1
        else:
            if stones > 0:
                stones -= 1
    
    print(stones)

solve()","
def solve():
    n = int(input())
    s = input().strip()
    
    count = 0
    for op in s:
        if op == ""+"":
            count += 1
        else:
            count = max(0, count - 1)
    
    print(count)

solve()
","
def solve():
    n = int(input())
    s = input()
    
    balance = 0

    for operation in s:
        if operation == '-':
            if balance > 0:
                balance -= 1
        else:
            balance += 1

    print(balance)

solve()
","
def solve():
    n = int(input())
    s = input()

    min_stones = 0
    stones = 0

    for op in s:
        if op == ""+"":
            stones += 1
        else:
            if stones > 0:
                stones -= 1
            else:
                min_stones += 1

    print(min_stones + stones)

solve()
","100.0","100.0","100.0","33.33333333333333","","","",""
"APPS/169","
QUESTION:
Kolya Gerasimov loves kefir very much. He lives in year 1984 and knows all the details of buying this delicious drink. One day, as you probably know, he found himself in year 2084, and buying kefir there is much more complicated.

Kolya is hungry, so he went to the nearest milk shop. In 2084 you may buy kefir in a plastic liter bottle, that costs a rubles, or in glass liter bottle, that costs b rubles. Also, you may return empty glass bottle and get c (c < b) rubles back, but you cannot return plastic bottles.

Kolya has n rubles and he is really hungry, so he wants to drink as much kefir as possible. There were no plastic bottles in his 1984, so Kolya doesn't know how to act optimally and asks for your help.


-----Input-----

First line of the input contains a single integer n (1 ≤ n ≤ 10^18) — the number of rubles Kolya has at the beginning.

Then follow three lines containing integers a, b and c (1 ≤ a ≤ 10^18, 1 ≤ c < b ≤ 10^18) — the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.


-----Output-----

Print the only integer — maximum number of liters of kefir, that Kolya can drink.


-----Examples-----
Input
10
11
9
8

Output
2

Input
10
5
6
1

Output
2



-----Note-----

In the first sample, Kolya can buy one glass bottle, then return it and buy one more glass bottle. Thus he will drink 2 liters of kefir.

In the second sample, Kolya can buy two plastic bottle and get two liters of kefir, or he can buy one liter glass bottle, then return it and buy one plastic bottle. In both cases he will drink two liters of kefir.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = int(input())
    b = int(input())
    c = int(input())
    
    max_liters = n // min(a, b)
    remaining_money = n - max_liters * min(a, b)
    
    if b - c < a:
        max_liters += remaining_money // (b - c)
    
    print(max_liters)

solve()
","
def solve():
    n = int(input())
    a = int(input())
    b = int(input())
    c = int(input())
    
    if a <= c + b:
        print(n // a)
    else:
        total_bottles = n // b
        remaining_money = n % b
        extra_bottles = remaining_money // (b - c)
        
        total_kefir = total_bottles + extra_bottles
        print(total_kefir)

# Call the function to execute
solve()
","
def solve():
    n = int(input())
    a = int(input())
    b = int(input())
    c = int(input())
    
    if n >= b:
        num_glass_bottles = (n - c) // (b - c)
        remaining_money = n - (b * num_glass_bottles)
        num_plastic_bottles = remaining_money // a
        total_liters = num_glass_bottles + num_plastic_bottles
    else:
        total_liters = n // a
        
    print(total_liters)

solve()","
from math import floor

def solve():
    n = int(input())
    a = int(input())
    b = int(input())
    c = int(input())

    num_plastic_bottles = n // a
    num_glass_bottles = (n - c) // (b - c)

    if num_plastic_bottles >= 2:
        max_liters = num_plastic_bottles * 2
    else:
        max_liters = 0

    for i in range(num_glass_bottles + 1):
        rem_rubles = n - (i * (b - c))
        plastic_bottles = rem_rubles // a
        liters = i + plastic_bottles * 2
        max_liters = max(max_liters, liters)

    print(max_liters)

solve()
","66.66666666666666","53.333333333333336","20.0","14.285714285714285","","","",""
"APPS/170","
QUESTION:
Two bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a ""war""-like card game. 

The rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. 

You have to calculate how many fights will happen and who will win the game, or state that game won't end.


-----Input-----

First line contains a single integer n (2 ≤ n ≤ 10), the number of cards.

Second line contains integer k_1 (1 ≤ k_1 ≤ n - 1), the number of the first soldier's cards. Then follow k_1 integers that are the values on the first soldier's cards, from top to bottom of his stack.

Third line contains integer k_2 (k_1 + k_2 = n), the number of the second soldier's cards. Then follow k_2 integers that are the values on the second soldier's cards, from top to bottom of his stack.

All card values are different.


-----Output-----

If somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.

If the game won't end and will continue forever output  - 1.


-----Examples-----
Input
4
2 1 3
2 4 2

Output
6 2
Input
3
1 2
2 1 3

Output
-1


-----Note-----

First sample:  [Image] 

Second sample:  [Image]
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    stack1 = list(map(int, input().split()[1:]))
    stack2 = list(map(int, input().split()[1:]))
    
    fights = 0
    seen = set()
    
    while stack1 and stack2:
        key = (tuple(stack1), tuple(stack2))
        if key in seen:
            print(-1)
            return
        seen.add(key)
        
        card1 = stack1.pop(0)
        card2 = stack2.pop(0)
        
        if card1 > card2:
            stack1.extend([card2, card1])
        else:
            stack2.extend([card1, card2])
        
        fights += 1
    
    if stack1:
        print(fights, 1)
    else:
        print(fights, 2)

solve()","
def solve():
    n = int(input())
    first_stack = list(map(int, input().split()[1:]))
    second_stack = list(map(int, input().split()[1:]))
    
    fights = 0
    visited_states = set()
    
    while first_stack and second_stack:
        state = (tuple(first_stack), tuple(second_stack))
        
        if state in visited_states:
            print(-1)
            return
        
        visited_states.add(state)
        
        f1 = first_stack.pop(0)
        f2 = second_stack.pop(0)
        
        if f1 > f2:
            first_stack.extend([f2, f1])
        else:
            second_stack.extend([f1, f2])
        
        fights += 1
    
    winner = 1 if first_stack else 2
    print(fights, winner)

solve()
  ","
def solve():
    n = int(input())
    first_cards = list(map(int, input().split()))[1:]
    second_cards = list(map(int, input().split()))[1:]

    fights = 0
    game_over = False

    played_cards = set()
    while first_cards and second_cards:
        if tuple(first_cards + second_cards) in played_cards:
            print(-1)
            return

        played_cards.add(tuple(first_cards + second_cards))

        fights += 1
        first_card = first_cards.pop(0)
        second_card = second_cards.pop(0)

        if first_card > second_card:
            first_cards.extend([second_card, first_card])
        else:
            second_cards.extend([first_card, second_card])

        if len(played_cards) >= n * 2:
            print(-1)
            return

    if first_cards:
        print(fights, 1)
    else:
        print(fights, 2)
  
solve()","
def solve():
    n = int(input())
    soldier1_cards = list(map(int, input().split()[1:])[::-1]
    soldier2_cards = list(map(int, input().split()[1:])[::-1]
    
    fights = 0
    while soldier1_cards and soldier2_cards:
        fights += 1
        card1 = soldier1_cards.pop()
        card2 = soldier2_cards.pop()
        
        if card1 > card2:
            soldier1_cards = [card2, card1] + soldier1_cards
        else:
            soldier2_cards = [card1, card2] + soldier2_cards
        
        if fights > 1000:
            return -1
    
    if not soldier1_cards:
        return f""{fights} 2""
    else:
        return f""{fights} 1""

solve()","100.0","100.0","93.33333333333333","0.0","","","",""
"APPS/171","
QUESTION:
You have probably registered on Internet sites many times. And each time you should enter your invented password. Usually the registration form automatically checks the password's crypt resistance. If the user's password isn't complex enough, a message is displayed. Today your task is to implement such an automatic check.

Web-developers of the company Q assume that a password is complex enough, if it meets all of the following conditions:  the password length is at least 5 characters;  the password contains at least one large English letter;  the password contains at least one small English letter;  the password contains at least one digit. 

You are given a password. Please implement the automatic check of its complexity for company Q.


-----Input-----

The first line contains a non-empty sequence of characters (at most 100 characters). Each character is either a large English letter, or a small English letter, or a digit, or one of characters: ""!"", ""?"", ""."", "","", ""_"".


-----Output-----

If the password is complex enough, print message ""Correct"" (without the quotes), otherwise print message ""Too weak"" (without the quotes).


-----Examples-----
Input
abacaba

Output
Too weak

Input
X12345

Output
Too weak

Input
CONTEST_is_STARTED!!11

Output
Correct
Use user-input-Based format and function signature solve()","
def solve():
    import re
    password = input().strip()
    
    if len(password) < 5:
        print(""Too weak"")
        return
    
    if not re.search(r'[A-Z]', password):
        print(""Too weak"")
        return
    
    if not re.search(r'[a-z]', password):
        print(""Too weak"")
        return
    
    if not re.search(r'\d', password):
        print(""Too weak"")
        return
    
    print(""Correct"")

solve()","
def solve():
    import re
    password = input()
    if len(password) < 5 or not re.findall(r'[A-Z]', password) or not re.findall(r'[a-z]', password) or not re.findall(r'\d', password):
        print(""Too weak"")
    else:
        print(""Correct"")
  
solve()","
def solve():
    password = input()
    has_upper = any(char.isupper() for char in password)
    has_lower = any(char.islower() for char in password)
    has_digit = any(char.isdigit() for char in password)

    if len(password) >= 5 and has_upper and has_lower and has_digit:
        print(""Correct"")
    else:
        print(""Too weak"")

if __name__ == ""__main__"":
    solve()
","
def solve():
    password = input().strip()
    
    if len(password) >= 5 and any(char.isupper() for char in password) and any(char.islower() for char in password) and any(char.isdigit() for char in password):
        print(""Correct"")
    else:
        print(""Too weak"")

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/172","
QUESTION:
In Berland each high school student is characterized by academic performance — integer value between 1 and 5.

In high school 0xFF there are two groups of pupils: the group A and the group B. Each group consists of exactly n students. An academic performance of each student is known — integer value between 1 and 5.

The school director wants to redistribute students between groups so that each of the two groups has the same number of students whose academic performance is equal to 1, the same number of students whose academic performance is 2 and so on. In other words, the purpose of the school director is to change the composition of groups, so that for each value of academic performance the numbers of students in both groups are equal.

To achieve this, there is a plan to produce a series of exchanges of students between groups. During the single exchange the director selects one student from the class A and one student of class B. After that, they both change their groups.

Print the least number of exchanges, in order to achieve the desired equal numbers of students for each academic performance.


-----Input-----

The first line of the input contains integer number n (1 ≤ n ≤ 100) — number of students in both groups.

The second line contains sequence of integer numbers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 5), where a_{i} is academic performance of the i-th student of the group A.

The third line contains sequence of integer numbers b_1, b_2, ..., b_{n} (1 ≤ b_{i} ≤ 5), where b_{i} is academic performance of the i-th student of the group B.


-----Output-----

Print the required minimum number of exchanges or -1, if the desired distribution of students can not be obtained.


-----Examples-----
Input
4
5 4 4 4
5 5 4 5

Output
1

Input
6
1 1 1 1 1 1
5 5 5 5 5 5

Output
3

Input
1
5
3

Output
-1

Input
9
3 2 5 5 2 3 3 3 2
4 1 4 1 1 2 4 4 1

Output
4
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))
    
    count_a = [0] * 6
    count_b = [0] * 6
    
    for i in range(n):
        count_a[a[i]] += 1
        count_b[b[i]] += 1
    
    if count_a != count_b:
        print(-1)
        return
    
    exchanges = 0
    for i in range(1, 6):
        exchanges += abs(count_a[i] - n)
    
    print(exchanges // 2)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))

    count_a = [0] * 6
    count_b = [0] * 6

    for i in range(n):
        count_a[a[i]] += 1
        count_b[b[i]] += 1

    exchanges = 0
    for i in range(1, 6):
        if (count_a[i] + count_b[i]) % 2 != 0:
            print(-1)
            return

        exchanges += abs(count_a[i] - count_b[i]) // 2

    print(exchanges // 2)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))

    cnt_a = [0] * 6
    cnt_b = [0] * 6

    for i in range(n):
        cnt_a[a[i]] += 1
        cnt_b[b[i]] += 1

    if cnt_a != cnt_b:
        print(-1)
        return

    exchanges = 0
    for i in range(1, 6):
        diff = cnt_a[i] - n // 2
        if diff > 0:
            exchanges += diff

    print(exchanges // 2)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    b = list(map(int, input().split()))

    count_a = [0] * 6
    count_b = [0] * 6

    for i in range(n):
        count_a[a[i]] += 1
        count_b[b[i]] += 1

    for i in range(1, 6):
        if (count_a[i] + count_b[i]) % 2 != 0:
            print(-1)
            return

    total_exchanges = 0
    for i in range(1, 6):
        if count_a[i] > count_b[i]:
            total_exchanges += (count_a[i] - count_b[i]) / 2
    print(int(total_exchanges))

solve()
","20.0","100.0","40.0","100.0","","","",""
"APPS/173","
QUESTION:
Imagine a city with n horizontal streets crossing m vertical streets, forming an (n - 1) × (m - 1) grid. In order to increase the traffic flow, mayor of the city has decided to make each street one way. This means in each horizontal street, the traffic moves only from west to east or only from east to west. Also, traffic moves only from north to south or only from south to north in each vertical street. It is possible to enter a horizontal street from a vertical street, or vice versa, at their intersection.

 [Image] 

The mayor has received some street direction patterns. Your task is to check whether it is possible to reach any junction from any other junction in the proposed street direction pattern.


-----Input-----

The first line of input contains two integers n and m, (2 ≤ n, m ≤ 20), denoting the number of horizontal streets and the number of vertical streets.

The second line contains a string of length n, made of characters '<' and '>', denoting direction of each horizontal street. If the i-th character is equal to '<', the street is directed from east to west otherwise, the street is directed from west to east. Streets are listed in order from north to south.

The third line contains a string of length m, made of characters '^' and 'v', denoting direction of each vertical street. If the i-th character is equal to '^', the street is directed from south to north, otherwise the street is directed from north to south. Streets are listed in order from west to east.


-----Output-----

If the given pattern meets the mayor's criteria, print a single line containing ""YES"", otherwise print a single line containing ""NO"".


-----Examples-----
Input
3 3
><>
v^v

Output
NO

Input
4 6
<><>
v^v^v^

Output
YES



-----Note-----

The figure above shows street directions in the second sample test case.
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    horizontal_directions = input()
    vertical_directions = input()

    for i in range(n):
        for j in range(m):
            if (horizontal_directions[i] == '<' and vertical_directions[j] == 'v') or (horizontal_directions[i] == '>' and vertical_directions[j] == '^'):
                print(""NO"")
                return

    print(""YES"")

solve()
","
def solve():
    n, m = map(int, input().split())
    horizontal_streets = input()
    vertical_streets = input()

    for i in range(n):
        if horizontal_streets[i] == '<' and vertical_streets[0] == 'v' or horizontal_streets[i] == '>' and vertical_streets[-1] == 'v':
            print(""NO"")
            return
    
    for j in range(m):
        if vertical_streets[j] == '^' and horizontal_streets[0] == '>' or vertical_streets[j] == 'v' and horizontal_streets[-1] == '>':
            print(""NO"")
            return
    
    print(""YES"")

solve()
  ","
def solve():
    n, m = map(int, input().split())
    horizontal_directions = input()
    vertical_directions = input()

    for i in range(n-1):
        for j in range(m-1):
            if (horizontal_directions[i] == '>' and vertical_directions[j] == 'v') or (horizontal_directions[i] == '<' and vertical_directions[j] == '^'):
                print(""NO"")
                return
    print(""YES"")

solve()","
def solve():
    n, m = map(int, input().split())
    horizontal_streets = input()
    vertical_streets = input()

    junctions = set()
    for i in range(n):
        for j in range(m):
            junctions.add((i, j))
            junctions.add((i+1, j))
            junctions.add((i, j+1))
            junctions.add((i+1, j+1))

    for i in range(n-1):
        for j in range(m-1):
            if (horizontal_streets[i] == '>' and (i, j) in junctions and (i+1, j) in junctions) or (horizontal_streets[i] == '<' and (i+1, j) in junctions and (i, j) in junctions):
                return ""NO""

            if (vertical_streets[j] == 'v' and (i, j) in junctions and (i, j+1) in junctions) or (vertical_streets[j] == '^' and (i, j+1) in junctions and (i, j) in junctions):
                return ""NO""

    return ""YES""

solve()","46.666666666666664","33.33333333333333","53.333333333333336","0.0","","","",""
"APPS/174","
QUESTION:
Implication is a function of two logical arguments, its value is false if and only if the value of the first argument is true and the value of the second argument is false. 

Implication is written by using character '$\rightarrow$', and the arguments and the result of the implication are written as '0' (false) and '1' (true). According to the definition of the implication: 

$0 \rightarrow 0 = 1$ 

$0 \rightarrow 1 = 1$

$1 \rightarrow 0 = 0$ 

$1 \rightarrow 1 = 1$

When a logical expression contains multiple implications, then when there are no brackets, it will be calculated from left to fight. For example,

$0 \rightarrow 0 \rightarrow 0 =(0 \rightarrow 0) \rightarrow 0 = 1 \rightarrow 0 = 0$. 

When there are brackets, we first calculate the expression in brackets. For example,

$0 \rightarrow(0 \rightarrow 0) = 0 \rightarrow 1 = 1$.

For the given logical expression $a_{1} \rightarrow a_{2} \rightarrow a_{3} \rightarrow \cdots \cdots a_{n}$ determine if it is possible to place there brackets so that the value of a logical expression is false. If it is possible, your task is to find such an arrangement of brackets.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 100 000) — the number of arguments in a logical expression.

The second line contains n numbers a_1, a_2, ..., a_{n} ($a_{i} \in \{0,1 \}$), which means the values of arguments in the expression in the order they occur.


-----Output-----

Print ""NO"" (without the quotes), if it is impossible to place brackets in the expression so that its value was equal to 0.

Otherwise, print ""YES"" in the first line and the logical expression with the required arrangement of brackets in the second line.

The expression should only contain characters '0', '1', '-' (character with ASCII code 45), '>' (character with ASCII code 62), '(' and ')'. Characters '-' and '>' can occur in an expression only paired like that: (""->"") and represent implication. The total number of logical arguments (i.e. digits '0' and '1') in the expression must be equal to n. The order in which the digits follow in the expression from left to right must coincide with a_1, a_2, ..., a_{n}.

The expression should be correct. More formally, a correct expression is determined as follows:  Expressions ""0"", ""1"" (without the quotes) are correct.  If v_1, v_2 are correct, then v_1->v_2 is a correct expression.  If v is a correct expression, then (v) is a correct expression. 

The total number of characters in the resulting expression mustn't exceed 10^6.

If there are multiple possible answers, you are allowed to print any of them.


-----Examples-----
Input
4
0 1 1 0

Output
YES
(((0)->1)->(1->0))

Input
2
1 1

Output
NO

Input
1
0

Output
YES
0
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    arguments = list(map(int, input().split()))
    
    if 0 in arguments and 1 in arguments:
        print(""YES"")
        print(""((("" + ""->("".join(map(str, arguments)) + ""))"" * (n-1) + "")"")
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    arguments = list(map(int, input().split()))
    
    if 0 in arguments and arguments[-1] == 1:
        print(""YES"")
        print('(' * (arguments.count(0) - 1) + '0' + '->' * (n - 1) + '(' * (arguments.count(0) - 1) + '1' + '->' + '0' + ')' * (arguments.count(0) - 1))
    else:
        print(""NO"")

solve()
","
def solve():
    import sys
    n = int(sys.stdin.readline())
    arguments = list(map(int, sys.stdin.readline().split()))
    
    if 0 in arguments[1:]:
        print(""YES"")
        print('(' * (n - 2) + str(arguments[0]) + ""->"" + solve_impl(arguments[1:]) + "")"" * (n - 2))
    else:
        print(""NO"")
    
def solve_impl(args):
    if len(args) == 1:
        return str(args[0])
    else:
        return ""("" + str(args[0]) + ""->"" + solve_impl(args[1:]) + "")""

solve()
","
def solve():
    n = int(input())
    arguments = list(map(int, input().split()))

    if 0 in arguments:
        print(""YES"")
        expression = [""("" + str(arguments[0])]
        for i in range(1, n):
            expression.append(""->"" + str(arguments[i]))
        expression.append("")"" * (n-1))
        print("""".join(expression))
    else:
        print(""NO"")

solve()
","26.666666666666668","26.666666666666668","40.0","20.0","","","",""
"APPS/175","
QUESTION:
You have two variables a and b. Consider the following sequence of actions performed with these variables: If a = 0 or b = 0, end the process. Otherwise, go to step 2; If a ≥ 2·b, then set the value of a to a - 2·b, and repeat step 1. Otherwise, go to step 3; If b ≥ 2·a, then set the value of b to b - 2·a, and repeat step 1. Otherwise, end the process.

Initially the values of a and b are positive integers, and so the process will be finite.

You have to determine the values of a and b after the process ends.


-----Input-----

The only line of the input contains two integers n and m (1 ≤ n, m ≤ 10^18). n is the initial value of variable a, and m is the initial value of variable b.


-----Output-----

Print two integers — the values of a and b after the end of the process.


-----Examples-----
Input
12 5

Output
0 1

Input
31 12

Output
7 12



-----Note-----

Explanations to the samples: a = 12, b = 5 $\rightarrow$ a = 2, b = 5 $\rightarrow$ a = 2, b = 1 $\rightarrow$ a = 0, b = 1; a = 31, b = 12 $\rightarrow$ a = 7, b = 12.
Use user-input-Based format and function signature solve()","
def solve():
    a, b = map(int, input().split())
    
    while a != 0 and b != 0:
        if a >= 2 * b:
            a -= 2 * b
        elif b >= 2 * a:
            b -= 2 * a
        else:
            break
    
    print(a, b)

solve()","
def solve():
    a, b = map(int, input().split())
    
    while a != 0 and b != 0:
        if a >= 2 * b:
            a -= 2 * b
        elif b >= 2 * a:
            b -= 2 * a
        else:
            break
            
    print(a, b)

solve()","
def solve():
    a, b = map(int, input().split())
    while a != 0 and b != 0:
        if a >= 2 * b:
            a -= 2 * b
        elif b >= 2 * a:
            b -= 2 * a
        else:
            break
    print(a, b)

solve()
","
def solve():
    import sys
    n, m = map(int, sys.stdin.readline().split())
    
    while n != 0 and m != 0:
        if n >= 2 * m:
            n -= 2 * m
        elif m >= 2 * n:
            m -= 2 * n
        else:
            break
    
    print(n, m)

solve()","100.0","100.0","100.0","100.0","","","",""
"APPS/176","
QUESTION:
Find the number of k-divisible numbers on the segment [a, b]. In other words you need to find the number of such integer values x that a ≤ x ≤ b and x is divisible by k.


-----Input-----

The only line contains three space-separated integers k, a and b (1 ≤ k ≤ 10^18; - 10^18 ≤ a ≤ b ≤ 10^18).


-----Output-----

Print the required number.


-----Examples-----
Input
1 1 10

Output
10

Input
2 -4 4

Output
5
Use user-input-Based format and function signature solve()","
def solve():
    k, a, b = map(int, input().split())
    count = (b // k) - ((a - 1) // k)
    print(count)

solve()
","
def solve():
    k, a, b = map(int, input().split())
    count = (b//k) - ((a-1)//k)
    return count
  
solve()","
def solve():
    k, a, b = map(int, input().split())
    count = (b // k) - ((a - 1) // k)
    print(count)

solve()
","
def solve():
    k, a, b = map(int, input().split())
    count = (b // k) - ((a - 1) // k)
    print(count)

solve()
","100.0","0.0","100.0","100.0","","","",""
"APPS/177","
QUESTION:
Let's write all the positive integer numbers one after another from $1$ without any delimiters (i.e. as a single string). It will be the infinite sequence starting with 123456789101112131415161718192021222324252627282930313233343536...

Your task is to print the $k$-th digit of this sequence.


-----Input-----

The first and only line contains integer $k$ ($1 \le k \le 10000$) — the position to process ($1$-based index).


-----Output-----

Print the $k$-th digit of the resulting infinite sequence.


-----Examples-----
Input
7

Output
7

Input
21

Output
5
Use user-input-Based format and function signature solve()","
def solve():
    k = int(input())
    num = 1
    while k > len(str(num)):
        k -= len(str(num))
        num += 1
    print(str(num)[k-1])

solve()
","
def solve():
    k = int(input())
    num = 1

    while k > len(str(num)):
        k -= len(str(num))
        num += 1

    print(str(num)[k-1])

solve()","
def solve():
    k = int(input())
    
    def find_digit(k):
        num = 1
        while k > 0:
            num_str = str(num)
            if k > len(num_str):
                k -= len(num_str)
                num += 1
            else:
                return int(num_str[k-1])
    
    print(find_digit(k))

solve()
","
def solve():
    k = int(input())
    if k < 10:
        print(k)
    else:
        k -= 1
        start, length, size = 1, 1, 9
        while k >= length * size:
            k -= length * size
            start += size
            length += 1
            size *= 10
        num = start + k // length
        digit_idx = k % length
        print(str(num)[digit_idx])

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/178","
QUESTION:
A telephone number is a sequence of exactly $11$ digits such that its first digit is 8.

Vasya and Petya are playing a game. Initially they have a string $s$ of length $n$ ($n$ is odd) consisting of digits. Vasya makes the first move, then players alternate turns. In one move the player must choose a character and erase it from the current string. For example, if the current string 1121, after the player's move it may be 112, 111 or 121. The game ends when the length of string $s$ becomes 11. If the resulting string is a telephone number, Vasya wins, otherwise Petya wins.

You have to determine if Vasya has a winning strategy (that is, if Vasya can win the game no matter which characters Petya chooses during his moves).


-----Input-----

The first line contains one integer $n$ ($13 \le n < 10^5$, $n$ is odd) — the length of string $s$.

The second line contains the string $s$ ($|s| = n$) consisting only of decimal digits.


-----Output-----

If Vasya has a strategy that guarantees him victory, print YES.

Otherwise print NO.


-----Examples-----
Input
13
8380011223344

Output
YES

Input
15
807345619350641

Output
NO



-----Note-----

In the first example Vasya needs to erase the second character. Then Petya cannot erase a character from the remaining string 880011223344 so that it does not become a telephone number.

In the second example after Vasya's turn Petya can erase one character character 8. The resulting string can't be a telephone number, because there is no digit 8 at all.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    s = input().strip()
    
    count_eights = s.count('8')
    remaining_moves = (n - 11) // 2
    
    if count_eights > remaining_moves:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    s = input().strip()

    # Check if there are at least 3 occurrences of '8' and '1' in the remaining string after each player's move
    count_8 = s.count('8')
    count_1 = s.count('1')
    
    if count_8 >= 3 and count_1 >= 3:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    s = input().strip()
    
    count_8 = s.count('8')
    pos_first_8 = s.find('8')
    
    if n < 13 or count_8 < (n - 11) // 2 or pos_first_8 > (n - 11) // 2:
        print('NO')
    else:
        print('YES')

solve()
","
def solve():
    n = int(input())
    s = input().strip()
    cnt_8 = s.count('8')
    
    if cnt_8 > n // 2:
        print(""YES"")
    else:
        print(""NO"")

solve()
","53.333333333333336","40.0","80.0","60.0","","","",""
"APPS/179","
QUESTION:
Andrey thinks he is truly a successful developer, but in reality he didn't know about the binary search algorithm until recently. After reading some literature Andrey understood that this algorithm allows to quickly find a certain number $x$ in an array. For an array $a$ indexed from zero, and an integer $x$ the pseudocode of the algorithm is as follows:

BinarySearch(a, x)
  left = 0
  right = a.size()
  while left < right
    middle = (left + right) / 2
    if a[middle] <= x then
      left = middle + 1
    else
      right = middle
  
  if left > 0 and a[left - 1] == x then
    return true
  else
    return false

Note that the elements of the array are indexed from zero, and the division is done in integers (rounding down).

Andrey read that the algorithm only works if the array is sorted. However, he found this statement untrue, because there certainly exist unsorted arrays for which the algorithm find $x$!

Andrey wants to write a letter to the book authors, but before doing that he must consider the permutations of size $n$ such that the algorithm finds $x$ in them. A permutation of size $n$ is an array consisting of $n$ distinct integers between $1$ and $n$ in arbitrary order.

Help Andrey and find the number of permutations of size $n$ which contain $x$ at position $pos$ and for which the given implementation of the binary search algorithm finds $x$ (returns true). As the result may be extremely large, print the remainder of its division by $10^9+7$.


-----Input-----

The only line of input contains integers $n$, $x$ and $pos$ ($1 \le x \le n \le 1000$, $0 \le pos \le n - 1$) — the required length of the permutation, the number to search, and the required position of that number, respectively.


-----Output-----

Print a single number — the remainder of the division of the number of valid permutations by $10^9+7$.


-----Examples-----
Input
4 1 2

Output
6

Input
123 42 24

Output
824071958



-----Note-----

All possible permutations in the first test case: $(2, 3, 1, 4)$, $(2, 4, 1, 3)$, $(3, 2, 1, 4)$, $(3, 4, 1, 2)$, $(4, 2, 1, 3)$, $(4, 3, 1, 2)$.
Use user-input-Based format and function signature solve()","
def solve():
    MOD = 10**9 + 7

    n, x, pos = map(int, input().split())

    def factorial(n):
        result = 1
        for i in range(1, n + 1):
            result = (result * i) % MOD
        return result

    def power(base, exp):
        result = 1
        while exp > 0:
            if exp % 2 == 1:
                result = (result * base) % MOD
            base = (base * base) % MOD
            exp //= 2
        return result

    def nCr(n, r):
        numerator = factorial(n)
        denominator = (factorial(r) * factorial(n - r)) % MOD
        return (numerator * power(denominator, MOD - 2)) % MOD

    left = 0
    right = n
    less = x - 1
    more = n - x

    total_permutations = factorial(n - 1)
    less_permutations = 0
    more_permutations = 0

    while left < right:
        middle = (left + right) // 2
        if middle == pos:
            left = middle + 1
        elif middle < pos:
            less_permutations += 1
            left = middle + 1
        else:
            more_permutations += 1
            right = middle

    result = (total_permutations * nCr(less, less_permutations) * nCr(more, more_permutations)) % MOD
    print(result)

solve()
","
def solve():
    MOD = 10 ** 9 + 7
    n, x, pos = map(int, input().split())
    left, right = 0, n
    count_x = 1
    count_not_x = n - 1

    while left < right:
        middle = (left + right) // 2
        if middle == pos:
            left = middle + 1
        elif middle < pos:
            count_not_x -= 1
            count_x *= (right - middle - 1)
            count_x %= MOD
            left = middle + 1
        else:
            count_not_x -= 1
            count_x *= (middle - left)
            count_x %= MOD
            right = middle

    for i in range(count_not_x):
        count_x *= (n - 1 - i)
        count_x %= MOD

    return count_x

solve()
","
MOD = 10**9 + 7

def solve():
    n, x, pos = map(int, input().split())

    def factorial(n):
        if n == 0 or n == 1:
            return 1
        return (n * factorial(n - 1)) % MOD

    def power(base, exp):
        if exp == 0:
            return 1
        if exp % 2 == 0:
            return power((base * base) % MOD, exp // 2)
        return (base * power(base, exp - 1)) % MOD

    def inverse(num):
        return power(num, MOD - 2)

    left = 0
    right = n
    less = x - 1
    more = n - x

    count_less = 0
    count_more = 0

    while left < right:
        middle = (left + right) // 2
        if middle == pos:
            left = middle + 1
            continue
        if middle < pos:
            count_less += 1
            left = middle + 1
        else:
            count_more += 1
            right = middle

    remaining_less = less - count_less
    remaining_more = more - count_more
    
    if remaining_less < 0 or remaining_more < 0:
        print(0)
        return

    result = (factorial(less) * inverse(factorial(remaining_less))) % MOD
    result = (result * factorial(more) * inverse(factorial(remaining_more))) % MOD
    result = (result * factorial(n - 1 - less - more)) % MOD

    print(result)

solve()
","
from math import comb

def solve():
    n, x, pos = map(int, input().split())
    mod = 10**9 + 7
    left = x - 1
    right = n - x
    total_permutations = comb(n - 1, left) * comb(n - 1 - left, right) % mod
    smaller = sum(1 for i in range(left) if i < pos)
    larger = sum(1 for i in range(right) if i < n - pos - 1)
    valid_permutations = total_permutations * comb(left, smaller) * comb(right, larger) % mod
    print(valid_permutations)

solve()
","13.333333333333334","0.0","53.333333333333336","13.333333333333334","","","",""
"APPS/180","
QUESTION:
Andrey received a postcard from Irina. It contained only the words ""Hello, Andrey!"", and a strange string consisting of lowercase Latin letters, snowflakes and candy canes. Andrey thought that this string is an encrypted message, and decided to decrypt it.

Andrey noticed that snowflakes and candy canes always stand after the letters, so he supposed that the message was encrypted as follows. Candy cane means that the letter before it can be removed, or can be left. A snowflake means that the letter before it can be removed, left, or repeated several times.

For example, consider the following string:  [Image] 

This string can encode the message «happynewyear». For this, candy canes and snowflakes should be used as follows:   candy cane 1: remove the letter w,  snowflake 1: repeat the letter p twice,  candy cane 2: leave the letter n,  snowflake 2: remove the letter w,  snowflake 3: leave the letter e. 

 [Image] 

Please note that the same string can encode different messages. For example, the string above can encode «hayewyar», «happpppynewwwwwyear», and other messages.

Andrey knows that messages from Irina usually have a length of $k$ letters. Help him to find out if a given string can encode a message of $k$ letters, and if so, give an example of such a message.


-----Input-----

The first line contains the string received in the postcard. The string consists only of lowercase Latin letters, as well as the characters «*» and «?», meaning snowflake and candy cone, respectively. These characters can only appear immediately after the letter. The length of the string does not exceed $200$.

The second line contains an integer number $k$ ($1 \leq k \leq 200$), the required message length.


-----Output-----

Print any message of length $k$ that the given string can encode, or «Impossible» if such a message does not exist.


-----Examples-----
Input
hw?ap*yn?eww*ye*ar
12

Output
happynewyear

Input
ab?a
2

Output
aa
Input
ab?a
3

Output
aba
Input
ababb
5

Output
ababb
Input
ab?a
1

Output
Impossible
Use user-input-Based format and function signature solve()","
def solve():
    s = input().strip()
    k = int(input().strip())
    
    def decrypt(s):
        decrypted = ''
        for i in range(len(s)):
            if s[i] == '*':
                decrypted = decrypted[:-1]
            elif s[i] == '?':
                decrypted += decrypted[-1]
            else:
                decrypted += s[i]
        return decrypted
    
    decrypted_message = decrypt(s)
    
    if len(decrypted_message) == k:
        print(decrypted_message)
    else:
        print(""Impossible"")

solve()
","
def solve():
    import itertools

    def decrypt_string(postcard_str, k):
        def possible_messages(postcard_str):
            res = []
            for c in postcard_str:
                if c.isalpha():
                    res.append([c])
                elif c == '?':
                    res[-1].append(1)
                elif c == '*':
                    res[-1].append('*')
            return ["""".join(p[0] for p in prod) for prod in itertools.product(*res)]

        messages = possible_messages(postcard_str)
        for message in messages:
            if len(message) == k:
                return message
        return ""Impossible""

    postcard_str = input()
    k = int(input())
    result = decrypt_string(postcard_str, k)
    print(result)

solve()
","
def solve():
    s = input()
    k = int(input())
    
    def decrypt_string(s):
        decrypted = """"
        
        for i in range(len(s)):
            if s[i] == '*':
                decrypted = decrypted[:-1]
            elif s[i] == '?':
                decrypted += decrypted[-1] if decrypted else ''
            else:
                decrypted += s[i]
            
        return decrypted
    
    decrypted_message = decrypt_string(s)
    
    if len(decrypted_message) == k:
        print(decrypted_message)
    else:
        print(""Impossible"")

if __name__ == ""__main__"":
    solve()
","
def solve():
    s = input().strip()
    k = int(input().strip())
    
    message = []
    curr_len = 0
    for char in s:
        if char.isalpha():
            message.append(char)
            curr_len += 1
        elif char == '?':
            if curr_len < k:
                message.append(message[-1])
                curr_len += 1
        elif char == '*':
            if curr_len < k and message[-1] not in message:
                message.append(message[-1])
                curr_len += 1
    
    if len(message) == k:
        print(''.join(message))
    else:
        print('Impossible')

solve()","53.333333333333336","33.33333333333333","53.333333333333336","53.333333333333336","","","",""
"APPS/181","
QUESTION:
Vasya started working in a machine vision company of IT City. Vasya's team creates software and hardware for identification of people by their face.

One of the project's know-how is a camera rotating around its optical axis on shooting. People see an eye-catching gadget — a rotating camera — come up to it to see it better, look into it. And the camera takes their photo at that time. What could be better for high quality identification?

But not everything is so simple. The pictures from camera appear rotated too (on clockwise camera rotation frame the content becomes rotated counter-clockwise). But the identification algorithm can work only with faces that are just slightly deviated from vertical.

Vasya was entrusted to correct the situation — to rotate a captured image so that image would be minimally deviated from vertical. Requirements were severe. Firstly, the picture should be rotated only on angle divisible by 90 degrees to not lose a bit of information about the image. Secondly, the frames from the camera are so huge and FPS is so big that adequate rotation speed is provided by hardware FPGA solution only. And this solution can rotate only by 90 degrees clockwise. Of course, one can apply 90 degrees turn several times but for the sake of performance the number of turns should be minimized.

Help Vasya implement the program that by the given rotation angle of the camera can determine the minimum number of 90 degrees clockwise turns necessary to get a picture in which up direction deviation from vertical is minimum.

The next figure contains frames taken from an unrotated camera, then from rotated 90 degrees clockwise, then from rotated 90 degrees counter-clockwise. Arrows show direction to ""true up"". [Image] 

The next figure shows 90 degrees clockwise turn by FPGA hardware. [Image] 


-----Input-----

The only line of the input contains one integer x ( - 10^18 ≤ x ≤ 10^18) — camera angle in degrees. Positive value denotes clockwise camera rotation, negative — counter-clockwise.


-----Output-----

Output one integer — the minimum required number of 90 degrees clockwise turns.


-----Examples-----
Input
60

Output
1

Input
-60

Output
3



-----Note-----

When the camera is rotated 60 degrees counter-clockwise (the second example), an image from it is rotated 60 degrees clockwise. One 90 degrees clockwise turn of the image result in 150 degrees clockwise total rotation and deviation from ""true up"" for one turn is 150 degrees. Two 90 degrees clockwise turns of the image result in 240 degrees clockwise total rotation and deviation from ""true up"" for two turns is 120 degrees because 240 degrees clockwise equal to 120 degrees counter-clockwise. Three 90 degrees clockwise turns of the image result in 330 degrees clockwise total rotation and deviation from ""true up"" for three turns is 30 degrees because 330 degrees clockwise equal to 30 degrees counter-clockwise.

From 60, 150, 120 and 30 degrees deviations the smallest is 30, and it it achieved in three 90 degrees clockwise turns.
Use user-input-Based format and function signature solve()","
def solve():
    x = int(input())
    if x < 0:
        x = abs(x) % 360
        turns = (360 - x) // 90
    else:
        x = x % 360
        turns = x // 90
    print(turns)

solve()
","
def solve():
    x = int(input())
    if x >= 0:
        return x // 90
    return (abs(x) + 89) // 90 % 4

solve()
","
def solve():
    import math
    
    x = int(input())
    
    if x < 0:
        x = abs(x) % 360
    else:
        x = 360 - (x % 360)
    
    turns = x // 90
    
    if turns == 0:
        turns = 4
    
    print(turns)


solve()","
def solve():
    x = int(input())
    x %= 360
    turns = x // 90
    if x % 90 > 45:
        turns += 1
    return turns

solve()
","66.66666666666666","0.0","6.666666666666667","0.0","","","",""
"APPS/182","
QUESTION:
Carl is a beginner magician. He has a blue, b violet and c orange magic spheres. In one move he can transform two spheres of the same color into one sphere of any other color. To make a spell that has never been seen before, he needs at least x blue, y violet and z orange spheres. Can he get them (possible, in multiple actions)?


-----Input-----

The first line of the input contains three integers a, b and c (0 ≤ a, b, c ≤ 1 000 000) — the number of blue, violet and orange spheres that are in the magician's disposal.

The second line of the input contains three integers, x, y and z (0 ≤ x, y, z ≤ 1 000 000) — the number of blue, violet and orange spheres that he needs to get.


-----Output-----

If the wizard is able to obtain the required numbers of spheres, print ""Yes"". Otherwise, print ""No"".


-----Examples-----
Input
4 4 0
2 1 2

Output
Yes

Input
5 6 1
2 7 2

Output
No

Input
3 3 3
2 2 2

Output
Yes



-----Note-----

In the first sample the wizard has 4 blue and 4 violet spheres. In his first action he can turn two blue spheres into one violet one. After that he will have 2 blue and 5 violet spheres. Then he turns 4 violet spheres into 2 orange spheres and he ends up with 2 blue, 1 violet and 2 orange spheres, which is exactly what he needs.
Use user-input-Based format and function signature solve()","
def solve():
    a, b, c = map(int, input().split())
    x, y, z = map(int, input().split())
    
    # Calculate the total number of spheres needed for each color
    total_blue = x - a
    total_violet = y - b
    total_orange = z - c
    
    # Check if the wizard can obtain the required numbers of spheres
    if total_blue <= 0 and total_violet <= 0 and total_orange <= 0:
        print(""Yes"")
    elif total_blue + total_violet <= 0 and total_orange >= abs(total_blue + total_violet):
        print(""Yes"")
    else:
        print(""No"")

solve()
","
def solve():
    a, b, c = map(int, input().split())
    x, y, z = map(int, input().split())
    
    if (a + b + c >= x + y + z) and (a >= x or (a + b) >= (x + y) or (a + b + c) >= (x + y + z)):
        print(""Yes"")
    else:
        print(""No"")

solve()
","
def solve():
    a, b, c = map(int, input().split())
    x, y, z = map(int, input().split())
    
    diff_b = max(0, x - a)
    diff_v = max(0, y - b)
    diff_o = max(0, z - c)
    
    if a + b + c >= x + y + z and diff_b + diff_v + diff_o <= a + b + c - x - y - z:
        print(""Yes"")
    else:
        print(""No"")

solve()
","
def solve():
    a, b, c = map(int, input().split())
    x, y, z = map(int, input().split())

    diff_b = max(0, x - a)
    diff_v = max(0, y - b)
    diff_o = max(0, z - c)

    b -= min(b, diff_b)
    v = b + c
    v -= min(v, diff_v)
    o = v
    o -= min(o, diff_o)

    if a + b + c >= x + y + z:
        print(""Yes"")
    else:
        print(""No"")

solve()
","66.66666666666666","66.66666666666666","86.66666666666667","66.66666666666666","","","",""
"APPS/183","
QUESTION:
Amr doesn't like Maths as he finds it really boring, so he usually sleeps in Maths lectures. But one day the teacher suspected that Amr is sleeping and asked him a question to make sure he wasn't.

First he gave Amr two positive integers n and k. Then he asked Amr, how many integer numbers x > 0 exist such that:  Decimal representation of x (without leading zeroes) consists of exactly n digits;  There exists some integer y > 0 such that:   $y \operatorname{mod} k = 0$;  decimal representation of y is a suffix of decimal representation of x.  

As the answer to this question may be pretty huge the teacher asked Amr to output only its remainder modulo a number m.

Can you help Amr escape this embarrassing situation?


-----Input-----

Input consists of three integers n, k, m (1 ≤ n ≤ 1000, 1 ≤ k ≤ 100, 1 ≤ m ≤ 10^9).


-----Output-----

Print the required number modulo m.


-----Examples-----
Input
1 2 1000

Output
4
Input
2 2 1000

Output
45
Input
5 3 1103

Output
590


-----Note-----

A suffix of a string S is a non-empty string that can be obtained by removing some number (possibly, zero) of first characters from S.
Use user-input-Based format and function signature solve()","
def solve():
    n, k, m = map(int, input().split())
    dp = [[0] * k for _ in range(k)]
    for i in range(k):
        dp[i][i % k] = 1
    for _ in range(n - 1):
        new_dp = [[0] * k for _ in range(k)]
        for i in range(k):
            for j in range(k):
                for d in range(10):
                    new_dp[(i * 10 + d) % k][(j * 10 + d) % k] += dp[i][j]
        dp = new_dp
    res = sum(dp[i][0] for i in range(k)) % m
    print(res)

solve()
","
def solve():
    n, k, m = map(int, input().split())

    def count_suffix_numbers(n, k):
        if n == 1:
            return k

        count = 0
        for i in range(1, 10):
            if (i * k) % 10 == i:
                count += 1

        return count + (9 * (n - 1))

    result = count_suffix_numbers(n, k) % m
    print(result)

solve()
","
def solve():
    n, k, m = map(int, input().split())

    def count_suffixes(n, k):
        res = 0
        for i in range(1, n + 1):
            count = 10 ** i - 1
            if count % k == 0:
                res += 1
        return res

    total_suffixes = count_suffixes(n, k)
    print(total_suffixes % m)

solve()
","
def solve():
    n, k, m = map(int, input().split())
    dp = [0] * k
    dp[0] = 1
    sum_dp = 1

    for _ in range(n-1):
        new_dp = [sum_dp] + [0] * (k-1)
        for rem in range(1, k):
            new_dp[rem] = sum_dp
            next_rem = (10 * rem) % k
            new_dp[rem] -= dp[next_rem]
        dp, sum_dp = new_dp, sum(new_dp) % m

    print(sum_dp)

solve()
","0.0","0.0","0.0","0.0","","","",""
"APPS/184","
QUESTION:
You are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.

The coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.

Ambidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.

Please find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.


-----Input-----

The only line contains three integers l, r and a (0 ≤ l, r, a ≤ 100) — the number of left-handers, the number of right-handers and the number of ambidexters at the training. 


-----Output-----

Print a single even integer — the maximum number of players in the team. It is possible that the team can only have zero number of players.


-----Examples-----
Input
1 4 2

Output
6

Input
5 5 5

Output
14

Input
0 2 0

Output
0



-----Note-----

In the first example you can form a team of 6 players. You should take the only left-hander and two ambidexters to play with left hand, and three right-handers to play with right hand. The only person left can't be taken into the team.

In the second example you can form a team of 14 people. You have to take all five left-handers, all five right-handers, two ambidexters to play with left hand and two ambidexters to play with right hand.
Use user-input-Based format and function signature solve()","
def solve():
    l, r, a = map(int, input().split())
    if l > r:
        l, r = r, l
    if r - l > a:
        print((l + a) * 2)
    else:
        print((r + a - (r - l)) // 2 * 4)

solve()
","
def solve():
    l, r, a = map(int, input().split())
    max_team_size = 2 * min(l, r, (l + r + a) // 2) + (a if l != r else min(a, 1))
    print(max_team_size)

solve()
  ","
def solve():
    l, r, a = map(int, input().split())
    max_team_size = min(l, r) * 2 + a * 2
    if l > r:
        l -= min(l, r)
        max_team_size += min(l // 2, a) * 2
    elif r > l:
        r -= min(l, r)
        max_team_size += min(r // 2, a) * 2
    print(max_team_size // 2 * 2)

solve()
","
def solve():
    l, r, a = map(int, input().split())
    max_players = 2 * (min(l, r, (l + r + a) // 2) + a)
    print(max_players)

solve()
","66.66666666666666","13.333333333333334","13.333333333333334","53.333333333333336","","","",""
"APPS/185","
QUESTION:
Finished her homework, Nastya decided to play computer games. Passing levels one by one, Nastya eventually faced a problem. Her mission is to leave a room, where a lot of monsters live, as quickly as possible.

There are $n$ manholes in the room which are situated on one line, but, unfortunately, all the manholes are closed, and there is one stone on every manhole. There is exactly one coin under every manhole, and to win the game Nastya should pick all the coins. Initially Nastya stands near the $k$-th manhole from the left. She is thinking what to do.

In one turn, Nastya can do one of the following:   if there is at least one stone on the manhole Nastya stands near, throw exactly one stone from it onto any other manhole (yes, Nastya is strong).  go to a neighboring manhole;  if there are no stones on the manhole Nastya stays near, she can open it and pick the coin from it. After it she must close the manhole immediately (it doesn't require additional moves). 

 [Image] The figure shows the intermediate state of the game. At the current position Nastya can throw the stone to any other manhole or move left or right to the neighboring manholes. If she were near the leftmost manhole, she could open it (since there are no stones on it). 

Nastya can leave the room when she picks all the coins. Monsters are everywhere, so you need to compute the minimum number of moves Nastya has to make to pick all the coins.

Note one time more that Nastya can open a manhole only when there are no stones onto it.


-----Input-----

The first and only line contains two integers $n$ and $k$, separated by space ($2 \leq n \leq 5000$, $1 \leq k \leq n$) — the number of manholes and the index of manhole from the left, near which Nastya stays initially. Initially there is exactly one stone near each of the $n$ manholes. 


-----Output-----

Print a single integer — minimum number of moves which lead Nastya to pick all the coins.


-----Examples-----
Input
2 2

Output
6

Input
4 2

Output
13

Input
5 1

Output
15



-----Note-----

Let's consider the example where $n = 2$, $k = 2$. Nastya should play as follows:

  At first she throws the stone from the second manhole to the first. Now there are two stones on the first manhole.  Then she opens the second manhole and pick the coin from it.  Then she goes to the first manhole, throws two stones by two moves to the second manhole and then opens the manhole and picks the coin from it. 

So, $6$ moves are required to win.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    if k <= n // 2:
        print(3 * n - 1)
    else:
        print(3 * n)

solve()","
def solve():
    n, k = map(int, input().split())
    if k <= n // 2:
        moves = n + (k - 1) + (n - 1) + 1
    else:
        moves = n + (n - k) + (n - 1) + 1
    print(moves)

solve()
"," python
def solve():
    n, k = map(int, input().split())
    if k > n // 2:
        k = n - k + 1
    moves = 3 * n
    moves += min(k - 1, n - k)
    moves += n - 1
    moves += n
    print(moves)

solve()
","
def solve():
    n, k = map(int, input().split())

    total_moves = n * 3 + min(k-1, n-k) + n + n
    print(total_moves)

solve()
","13.333333333333334","0.0","0.0","0.0","","","",""
"APPS/186","
QUESTION:
Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.

The students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.


-----Input-----

The first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.


-----Output-----

Print a single integer, denoting the minimum possible height of the tallest tower.


-----Examples-----
Input
1 3

Output
9

Input
3 2

Output
8

Input
5 0

Output
10



-----Note-----

In the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.

In the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    max_height = 0
    for i in range(1, 1000001):
        if i % 2 == 0 and i // 2 <= n and i // 2 > 0:
            max_height = max(max_height, i * 3 // 2)
        if i % 3 == 0 and i // 3 <= m and i // 3 > 0:
            max_height = max(max_height, i * 2 // 3)
    print(max_height)

solve()
","
def solve():
    n, m = map(int, input().split())
    
    max_height = 0
    for i in range(1000001):
        if i % 2 == 0 and i // 2 <= n and i // 2 > 0:
            two_blocks = i // 2
            three_blocks = min(m, (n - two_blocks) * 2)
            tallest = two_blocks * 2 + three_blocks * 3
            max_height = max(max_height, tallest)
    
    print(max_height)

solve()","
def solve():
    n, m = map(int, input().split())
    tallest_height = min(2*n, 3*m)
    if n > m:
        tallest_height = max(tallest_height, (n-m)*3 + m*3)
    else:
        tallest_height = max(tallest_height, (m-n)*2 + n*3)
    print(tallest_height)

solve()
","
def solve():
    n, m = map(int, input().split())
    tallest_height = min(n*2, m*3)
    for x in range(1, min(n, m)+1):
        tallest_height = max(tallest_height, min((n-x)*2, (m-x)*3))
    print(tallest_height)

solve()","0.0","6.666666666666667","0.0","0.0","","","",""
"APPS/187","
QUESTION:
Petya and Vasya decided to play a game. They have n cards (n is an even number). A single integer is written on each card.

Before the game Petya will choose an integer and after that Vasya will choose another integer (different from the number that Petya chose). During the game each player takes all the cards with number he chose. For example, if Petya chose number 5 before the game he will take all cards on which 5 is written and if Vasya chose number 10 before the game he will take all cards on which 10 is written.

The game is considered fair if Petya and Vasya can take all n cards, and the number of cards each player gets is the same.

Determine whether Petya and Vasya can choose integer numbers before the game so that the game is fair. 


-----Input-----

The first line contains a single integer n (2 ≤ n ≤ 100) — number of cards. It is guaranteed that n is an even number.

The following n lines contain a sequence of integers a_1, a_2, ..., a_{n} (one integer per line, 1 ≤ a_{i} ≤ 100) — numbers written on the n cards.


-----Output-----

If it is impossible for Petya and Vasya to choose numbers in such a way that the game will be fair, print ""NO"" (without quotes) in the first line. In this case you should not print anything more.

In the other case print ""YES"" (without quotes) in the first line. In the second line print two distinct integers — number that Petya should choose and the number that Vasya should choose to make the game fair. If there are several solutions, print any of them.


-----Examples-----
Input
4
11
27
27
11

Output
YES
11 27

Input
2
6
6

Output
NO

Input
6
10
20
30
20
10
20

Output
NO

Input
6
1
1
2
2
3
3

Output
NO



-----Note-----

In the first example the game will be fair if, for example, Petya chooses number 11, and Vasya chooses number 27. Then the will take all cards — Petya will take cards 1 and 4, and Vasya will take cards 2 and 3. Thus, each of them will take exactly two cards.

In the second example fair game is impossible because the numbers written on the cards are equal, but the numbers that Petya and Vasya should choose should be distinct.

In the third example it is impossible to take all cards. Petya and Vasya can take at most five cards — for example, Petya can choose number 10 and Vasya can choose number 20. But for the game to be fair it is necessary to take 6 cards.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    cards = [int(input()) for _ in range(n)]
    
    card_count = {}
    for card in cards:
        if card in card_count:
            card_count[card] += 1
        else:
            card_count[card] = 1
    
    distinct_cards = list(set(cards))
    
    if len(distinct_cards) == 1:
        print(""NO"")
    else:
        print(""YES"")
        print(distinct_cards[0], distinct_cards[1])

solve()","
def solve():
    n = int(input())
    cards = [int(input()) for _ in range(n)]

    card_count = {}
    for card in cards:
        if card in card_count:
            card_count[card] += 1
        else:
            card_count[card] = 1

    unique_cards = list(set(cards))

    valid_pairs = []
    for i in range(len(unique_cards)):
        for j in range(i + 1, len(unique_cards)):
            if card_count[unique_cards[i]] == card_count[unique_cards[j]]:
                valid_pairs.append((unique_cards[i], unique_cards[j]))

    if len(valid_pairs) == 0:
        print(""NO"")
    else:
        print(""YES"")
        print(valid_pairs[0][0], valid_pairs[0][1])

solve()","
def solve():
    n = int(input())
    cards = [int(input()) for _ in range(n)]
    
    card_count = {}
    for card in cards:
        if card in card_count:
            card_count[card] += 1
        else:
            card_count[card] = 1
    
    fair = False
    for card, count in card_count.items():
        if count == n // 2:
            fair = True
            break
    
    if fair:
        print(""YES"")
        for card, count in card_count.items():
            if count == n // 2:
                print(card, end=' ')
                for other_card, other_count in card_count.items():
                    if other_card != card and other_count == n // 2:
                        print(other_card)
                        break
                break
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    cards = []
    for _ in range(n):
        cards.append(int(input()))

    card_count = {}
    for card in cards:
        if card in card_count:
            card_count[card] += 1
        else:
            card_count[card] = 1

    if len(card_count) != 2:
        print(""NO"")
    else:
        counts = list(card_count.values())
        if counts[0] != counts[1]:
            print(""NO"")
        else:
            print(""YES"")
            petya_number = list(card_count.keys())[0]
            vasya_number = list(card_count.keys())[1]
            print(petya_number, vasya_number)

solve()
","66.66666666666666","73.33333333333333","86.66666666666667","93.33333333333333","","","",""
"APPS/188","
QUESTION:
Daenerys Targaryen has an army consisting of k groups of soldiers, the i-th group contains a_{i} soldiers. She wants to bring her army to the other side of the sea to get the Iron Throne. She has recently bought an airplane to carry her army through the sea. The airplane has n rows, each of them has 8 seats. We call two seats neighbor, if they are in the same row and in seats {1, 2}, {3, 4}, {4, 5}, {5, 6} or {7, 8}.

 [Image] A row in the airplane 

Daenerys Targaryen wants to place her army in the plane so that there are no two soldiers from different groups sitting on neighboring seats.

Your task is to determine if there is a possible arranging of her army in the airplane such that the condition above is satisfied.


-----Input-----

The first line contains two integers n and k (1 ≤ n ≤ 10000, 1 ≤ k ≤ 100) — the number of rows and the number of groups of soldiers, respectively.

The second line contains k integers a_1, a_2, a_3, ..., a_{k} (1 ≤ a_{i} ≤ 10000), where a_{i} denotes the number of soldiers in the i-th group.

It is guaranteed that a_1 + a_2 + ... + a_{k} ≤ 8·n.


-----Output-----

If we can place the soldiers in the airplane print ""YES"" (without quotes). Otherwise print ""NO"" (without quotes).

You can choose the case (lower or upper) for each letter arbitrary.


-----Examples-----
Input
2 2
5 8

Output
YES

Input
1 2
7 1

Output
NO

Input
1 2
4 4

Output
YES

Input
1 4
2 2 1 2

Output
YES



-----Note-----

In the first sample, Daenerys can place the soldiers like in the figure below:

 [Image] 

In the second sample, there is no way to place the soldiers in the plane since the second group soldier will always have a seat neighboring to someone from the first group.

In the third example Daenerys can place the first group on seats (1, 2, 7, 8), and the second group an all the remaining seats.

In the fourth example she can place the first two groups on seats (1, 2) and (7, 8), the third group on seats (3), and the fourth group on seats (5, 6).
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    groups = list(map(int, input().split()))
    
    total_seats = n * 8
    total_soldiers = sum(groups)
    
    if total_soldiers > total_seats:
        print(""NO"")
    else:
        count = 0
        for group in groups:
            count += group // 2
        if count >= n:
            print(""YES"")
        else:
            print(""NO"")

solve()","
def solve():
    n, k = map(int, input().split())
    groups = list(map(int, input().split()))

    total_seats = n * 8
    remaining = sum(groups)
    
    max_allowed = min(8 * n, remaining)
    
    if max_allowed >= 8 * (n - 1):
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n, k = map(int, input().split())
    groups = list(map(int, input().split()))
    
    row_count = 0
    for group in groups:
        row_count += group // 4
    
    if row_count >= n:
        print(""YES"")
    else:
        print(""NO"")
  
solve()","
def solve():
    n, k = map(int, input().split())
    groups = list(map(int, input().split()))
    
    total_seats = n * 8
    
    soldiers_left = sum(groups)
    
    min_seats_required = (soldiers_left + 1) // 2
    
    if min_seats_required <= total_seats and min_seats_required <= 8 * n:
        print(""YES"")
    else:
        print(""NO"")

solve()
","60.0","46.666666666666664","53.333333333333336","60.0","","","",""
"APPS/189","
QUESTION:
Salem gave you $n$ sticks with integer positive lengths $a_1, a_2, \ldots, a_n$.

For every stick, you can change its length to any other positive integer length (that is, either shrink or stretch it). The cost of changing the stick's length from $a$ to $b$ is $|a - b|$, where $|x|$ means the absolute value of $x$.

A stick length $a_i$ is called almost good for some integer $t$ if $|a_i - t| \le 1$.

Salem asks you to change the lengths of some sticks (possibly all or none), such that all sticks' lengths are almost good for some positive integer $t$ and the total cost of changing is minimum possible. The value of $t$ is not fixed in advance and you can choose it as any positive integer. 

As an answer, print the value of $t$ and the minimum cost. If there are multiple optimal choices for $t$, print any of them.


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 1000$) — the number of sticks.

The second line contains $n$ integers $a_i$ ($1 \le a_i \le 100$) — the lengths of the sticks.


-----Output-----

Print the value of $t$ and the minimum possible cost. If there are multiple optimal choices for $t$, print any of them.


-----Examples-----
Input
3
10 1 4

Output
3 7

Input
5
1 1 2 2 3

Output
2 0



-----Note-----

In the first example, we can change $1$ into $2$ and $10$ into $4$ with cost $|1 - 2| + |10 - 4| = 1 + 6 = 7$ and the resulting lengths $[2, 4, 4]$ are almost good for $t = 3$.

In the second example, the sticks lengths are already almost good for $t = 2$, so we don't have to do anything.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    sticks = list(map(int, input().split()))
    
    total_sum = sum(sticks)
    t = (total_sum + n - 1) // n
    cost = sum(abs(a - t) for a in sticks)
    
    print(t, cost)

solve()","
def solve():
    import math

    def find_best_t(sticks):
        min_cost = math.inf
        best_t = 0

        for t in range(1, 101):
            cost = sum([abs(a - t) for a in sticks])
            if cost < min_cost:
                min_cost = cost
                best_t = t

        return best_t, min_cost

    n = int(input())
    sticks = list(map(int, input().split()))

    t, cost = find_best_t(sticks)

    print(t, cost)

solve()
","
def solve():
    n = int(input())
    lengths = list(map(int, input().split()))
    
    total_sum = sum(lengths)
    t = total_sum // n
    if total_sum % n != 0:
        t += 1
    
    total_cost = sum([abs(a - t) for a in lengths])
    
    print(t, total_cost)

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    total_sum = sum(a)
    t = (total_sum + n - 1) // n
    cost = sum(abs(x - t) for x in a)
    
    print(t, cost)

solve()
","6.666666666666667","6.666666666666667","6.666666666666667","6.666666666666667","","","",""
"APPS/190","
QUESTION:
Карта звёздного неба представляет собой прямоугольное поле, состоящее из n строк по m символов в каждой строке. Каждый символ — это либо «.» (означает пустой участок неба), либо «*» (означает то, что в этом месте на небе есть звезда). 

Новое издание карты звёздного неба будет напечатано на квадратных листах, поэтому требуется найти минимально возможную сторону квадрата, в который могут поместиться все звезды. Границы искомого квадрата должны быть параллельны сторонам заданного прямоугольного поля.


-----Входные данные-----

В первой строке входных данных записаны два числа n и m (1 ≤ n, m ≤ 1000) — количество строк и столбцов на карте звездного неба.

В следующих n строках задано по m символов. Каждый символ — это либо «.» (пустой участок неба), либо «*» (звезда).

Гарантируется, что на небе есть хотя бы одна звезда.


-----Выходные данные-----

Выведите одно число — минимально возможную сторону квадрата, которым можно накрыть все звезды.


-----Примеры-----
Входные данные
4 4
....
..*.
...*
..**

Выходные данные
3

Входные данные
1 3
*.*

Выходные данные
3

Входные данные
2 1
.
*

Выходные данные
1



-----Примечание-----

Один из возможных ответов на первый тестовый пример:

 [Image] 

Один из возможных ответов на второй тестовый пример (обратите внимание, что покрывающий квадрат выходит за пределы карты звездного неба):

 [Image] 

Ответ на третий тестовый пример:

 [Image]
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    stars = []
    for _ in range(n):
        row = input()
        stars.extend([i for i, c in enumerate(row) if c == '*'])
    
    min_side = max(max(stars) - min(stars) + 1, max(len(stars) // n, len(stars) // m))
    print(min_side)

if __name__ == ""__main__"":
    solve()
","
def solve():
    n, m = map(int, input().split())
    stars = []
    for _ in range(n):
        row = input()
        stars.extend([i for i, s in enumerate(row) if s == '*'])
    min_side = max(max(stars) - min(stars) + 1, max(stars) - min(stars) + 1)
    print(min_side)

solve()
","
def solve():
    n, m = map(int, input().split())
    stars = []
    for _ in range(n):
        stars.extend(input())
    
    min_side = max(n, m)
    for i in range(n):
        for j in range(m):
            if stars[i*m + j] == '*':
                min_side = min(min_side, max(i+1, n-i, j+1, m-j))
    
    print(min_side)

if __name__ == ""__main__"":
    solve()
","
def solve():
    import math
    
    n, m = map(int, input().split())
    grid = [input() for _ in range(n)]

    stars = []
    for i in range(n):
        for j in range(m):
            if grid[i][j] == '*':
                stars.append((i, j))

    min_side = max(max(i for i, _ in stars) - min(i for i, _ in stars),
                   max(j for _, j in stars) - min(j for _, j in stars)) + 1
    
    return min_side

solve()","86.66666666666667","80.0","46.666666666666664","0.0","","","",""
"APPS/191","
QUESTION:
A girl named Sonya is studying in the scientific lyceum of the Kingdom of Kremland. The teacher of computer science (Sonya's favorite subject!) invented a task for her.

Given an array $a$ of length $n$, consisting only of the numbers $0$ and $1$, and the number $k$. Exactly $k$ times the following happens:   Two numbers $i$ and $j$ are chosen equiprobable such that ($1 \leq i < j \leq n$).  The numbers in the $i$ and $j$ positions are swapped. 

Sonya's task is to find the probability that after all the operations are completed, the $a$ array will be sorted in non-decreasing order. She turned to you for help. Help Sonya solve this problem.

It can be shown that the desired probability is either $0$ or it can be represented as $\dfrac{P}{Q}$, where $P$ and $Q$ are coprime integers and $Q \not\equiv 0~\pmod {10^9+7}$.


-----Input-----

The first line contains two integers $n$ and $k$ ($2 \leq n \leq 100, 1 \leq k \leq 10^9$) — the length of the array $a$ and the number of operations.

The second line contains $n$ integers $a_1, a_2, \ldots, a_n$ ($0 \le a_i \le 1$) — the description of the array $a$.


-----Output-----

If the desired probability is $0$, print $0$, otherwise print the value $P \cdot Q^{-1}$ $\pmod {10^9+7}$, where $P$ and $Q$ are defined above.


-----Examples-----
Input
3 2
0 1 0

Output
333333336
Input
5 1
1 1 1 0 0

Output
0
Input
6 4
1 0 0 1 1 0

Output
968493834


-----Note-----

In the first example, all possible variants of the final array $a$, after applying exactly two operations: $(0, 1, 0)$, $(0, 0, 1)$, $(1, 0, 0)$, $(1, 0, 0)$, $(0, 1, 0)$, $(0, 0, 1)$, $(0, 0, 1)$, $(1, 0, 0)$, $(0, 1, 0)$. Therefore, the answer is $\dfrac{3}{9}=\dfrac{1}{3}$.

In the second example, the array will not be sorted in non-decreasing order after one operation, therefore the answer is $0$.
Use user-input-Based format and function signature solve()","
from math import gcd

def solve():
    n, k = map(int, input().split())
    a = list(map(int, input().split()))

    total_swaps = n * (n - 1) // 2
    sorted_count = 0

    for i in range(n):
        for j in range(i + 1, n):
            if a[i] > a[j]:
                sorted_count += 1

    if k == 1 and sorted_count == 0:
        print(0)
    else:
        mod = 10**9 + 7
        inv_total_swaps = pow(total_swaps, mod - 2, mod)
        result = (sorted_count * k * inv_total_swaps) % mod
        print(result)

solve()
","
def solve():
    MOD = 10**9 + 7

    def power(a, b):
        if b == 0:
            return 1
        if b % 2 == 0:
            return power(a * a % MOD, b // 2)
        return a * power(a, b - 1) % MOD

    n, k = map(int, input().split())
    a = list(map(int, input().split()))

    fact = [1]
    for i in range(1, n + 1):
        fact.append(fact[-1] * i % MOD)
    inv_fact = [power(fact[-1], MOD - 2)]
    for i in range(n, 0, -1):
        inv_fact.append(inv_fact[-1] * i % MOD)
    inv_fact.reverse()

    n_inv = inv_fact[n]

    s = sum(a)
    if s == 0 or s == n:
        print(0)
        return

    ans = 0
    for i in range(n):
        for j in range(i + 1, n):
            p = fact[k] * inv_fact[k - 2] % MOD
            p = p * inv_fact[2] % MOD
            if a[i] == 0 and a[j] == 1:
                q = (fact[k - 1] * inv_fact[k - 2] % MOD) * (fact[n - k] * inv_fact[n - k - 1] % MOD)
                q = q * n_inv % MOD
                ans = (ans + p * q % MOD) % MOD
            elif a[i] == 1 and a[j] == 0:
                q = (fact[k - 1] * inv_fact[k - 2] % MOD) * (fact[n - k] * inv_fact[n - k - 1] % MOD)
                q = q * n_inv % MOD
                ans = (ans + p * q % MOD) % MOD

    print(ans)


# Example input handling
n, k = map(int, input().split())
a = list(map(int, input().split()))
solve()
","
from math import gcd

def solve():
    n, k = map(int, input().split())
    a = list(map(int, input().split()))
    
    if n == 2:
        print(1)
    elif k % 2 != 0:
        print(0)
    else:
        inv_mod = pow(2, 10**9+5, 10**9+7)
        fact = [1]
        for i in range(1, n+1):
            fact.append((fact[-1] * i) % (10**9+7))
        inv_fact = [0] * (n+1)
        inv_fact[n] = pow(fact[n], -1, 10**9+7)
        for i in range(n, 0, -1):
            inv_fact[i-1] = (inv_fact[i] * i) % (10**9+7)
        
        def binom(a, b):
            return (fact[a] * inv_fact[b] * inv_fact[a-b]) % (10**9+7)
        
        sum1, sum2 = 0, 0
        for i in range(n):
            for j in range(i+1, n):
                if a[i] > a[j]:
                    sum1 = (sum1 + 1) % (10**9+7)
                else:
                    sum2 = (sum2 + 1) % (10**9+7)
        
        res = (sum1 * binom(k, 2) + sum2 * binom(k, 2)) % (10**9+7)
        res = (res * pow(binom(n+n - status, n), -1, 10**9+7)) % (10**9+7)
        print(res)

solve()
","
from fractions import Fraction

def solve():
    n, k = map(int, input().split())
    a = list(map(int, input().split()))

    total = 0
    cnt_ones = sum(a)
    cnt_zeros = n - cnt_ones

    for i in range(n):
        for j in range(i + 1, n):
            if a[i] > a[j]:
                total += 1

    if k == 1 and total == 0:
        print(0)
    else:
        mod_num = 10**9 + 7
        inv_k = pow(k, mod_num - 2, mod_num)
        P = Fraction(total, n * (n - 1) // 2)
        result = (P.numerator * inv_k) % mod_num
        print(result)

solve()
","13.333333333333334","0.0","13.333333333333334","13.333333333333334","","","",""
"APPS/192","
QUESTION:
Memory is now interested in the de-evolution of objects, specifically triangles. He starts with an equilateral triangle of side length x, and he wishes to perform operations to obtain an equilateral triangle of side length y.

In a single second, he can modify the length of a single side of the current triangle such that it remains a non-degenerate triangle (triangle of positive area). At any moment of time, the length of each side should be integer.

What is the minimum number of seconds required for Memory to obtain the equilateral triangle of side length y?


-----Input-----

The first and only line contains two integers x and y (3 ≤ y < x ≤ 100 000) — the starting and ending equilateral triangle side lengths respectively.


-----Output-----

Print a single integer — the minimum number of seconds required for Memory to obtain the equilateral triangle of side length y if he starts with the equilateral triangle of side length x.


-----Examples-----
Input
6 3

Output
4

Input
8 5

Output
3

Input
22 4

Output
6



-----Note-----

In the first sample test, Memory starts with an equilateral triangle of side length 6 and wants one of side length 3. Denote a triangle with sides a, b, and c as (a, b, c). Then, Memory can do $(6,6,6) \rightarrow(6,6,3) \rightarrow(6,4,3) \rightarrow(3,4,3) \rightarrow(3,3,3)$.

In the second sample test, Memory can do $(8,8,8) \rightarrow(8,8,5) \rightarrow(8,5,5) \rightarrow(5,5,5)$.

In the third sample test, Memory can do: $(22,22,22) \rightarrow(7,22,22) \rightarrow(7,22,16) \rightarrow(7,10,16) \rightarrow(7,10,4) \rightarrow$

$(7,4,4) \rightarrow(4,4,4)$.
Use user-input-Based format and function signature solve()","
def solve():
    x, y = map(int, input().split())
    count = 0
    while x != y:
        if x > y:
            x = (x + 2) // 3
        else:
            x = (x + 1) // 3
        count += 1
    print(count)

solve()
","
def solve():
    x, y = map(int, input().split())
    diff = x - y
    if diff % 3 == 0:
        return diff // 3
    return diff // 3 + 1

solve()
","
def solve():
    x, y = map(int, input().split())
    if x % y == 0:
        print(3*((x//y) - 1))
    else:
        print(3*(x//y))

if __name__ == ""__main__"":
    solve()
","
def solve():
    x, y = map(int, input().split())
    diff = x - y
    if diff % 3 != 0:
        return diff // 3 + 1
    else:
        return diff // 3


solve()
","0.0","0.0","40.0","0.0","","","",""
"APPS/193","
QUESTION:
The determinant of a matrix 2 × 2 is defined as follows:$\operatorname{det} \left(\begin{array}{ll}{a} & {b} \\{c} & {d} \end{array} \right) = a d - b c$

A matrix is called degenerate if its determinant is equal to zero. 

The norm ||A|| of a matrix A is defined as a maximum of absolute values of its elements.

You are given a matrix $A = \left(\begin{array}{ll}{a} & {b} \\{c} & {d} \end{array} \right)$. Consider any degenerate matrix B such that norm ||A - B|| is minimum possible. Determine ||A - B||.


-----Input-----

The first line contains two integers a and b (|a|, |b| ≤ 10^9), the elements of the first row of matrix A. 

The second line contains two integers c and d (|c|, |d| ≤ 10^9) the elements of the second row of matrix A.


-----Output-----

Output a single real number, the minimum possible value of ||A - B||. Your answer is considered to be correct if its absolute or relative error does not exceed 10^{ - 9}.


-----Examples-----
Input
1 2
3 4

Output
0.2000000000

Input
1 0
0 1

Output
0.5000000000



-----Note-----

In the first sample matrix B is $\left(\begin{array}{ll}{1.2} & {1.8} \\{2.8} & {4.2} \end{array} \right)$

In the second sample matrix B is $\left(\begin{array}{ll}{0.5} & {0.5} \\{0.5} & {0.5} \end{array} \right)$
Use user-input-Based format and function signature solve()","
import numpy as np

def solve():
    a, b = map(int, input().split())
    c, d = map(int, input().split())
    
    A = np.array([[a, b], [c, d]])
    det_A = np.linalg.det(A)
    
    if det_A == 0:
        norm_A = max(abs(a), abs(b), abs(c), abs(d))
        min_norm_B = norm_A / 2
    else:
        min_norm_B = 0.5
    
    print(""{:.10f}"".format(min_norm_B))

solve()
","
import numpy as np

def solve():
    a, b = map(int, input().split())
    c, d = map(int, input().split())
    
    A = np.array([[a, b], [c, d]])
    det_A = np.linalg.det(A)
    
    if det_A != 0:
        B = A + (det_A/(a*d - b*c))*np.array([[d, -b], [-c, a]])
    else:
        norm_A = max(abs(a), abs(b), abs(c), abs(d))
        B = np.full((2, 2), norm_A/2)
    
    norm_diff = np.max(np.abs(A - B))
    
    print(""{:.10f}"".format(norm_diff))

solve()
  ","
import numpy as np

def solve():
    a, b = map(int, input().split())
    c, d = map(int, input().split())

    A = np.array([[a, b], [c, d]])
    det_A = np.linalg.det(A)
    norm_A = np.max(np.abs(A))

    B = np.array([[a + 0.2, b - 0.2], [c - 0.2, d + 0.2]])
    
    norm_diff_AB = np.max(np.abs(A - B))

    return norm_diff_AB

solve()","
import numpy as np

def solve():
    a, b = map(int, input().split())
    c, d = map(int, input().split())
    
    A = np.array([[a, b], [c, d]])
    det_A = np.linalg.det(A)
    norm_A = max(map(abs, A.flatten()))
    
    if det_A != 0:
        B = (det_A + norm_A) / (norm_A ** 2) * A
    else:
        B = np.copy(A)
    
    norm_diff = np.max(np.abs(A - B))
    
    print(""{:.10f}"".format(norm_diff))

solve()
","13.333333333333334","6.666666666666667","0.0","13.333333333333334","","","",""
"APPS/194","
QUESTION:
In a small restaurant there are a tables for one person and b tables for two persons. 

It it known that n groups of people come today, each consisting of one or two people. 

If a group consist of one person, it is seated at a vacant one-seater table. If there are none of them, it is seated at a vacant two-seater table. If there are none of them, it is seated at a two-seater table occupied by single person. If there are still none of them, the restaurant denies service to this group.

If a group consist of two people, it is seated at a vacant two-seater table. If there are none of them, the restaurant denies service to this group.

You are given a chronological order of groups coming. You are to determine the total number of people the restaurant denies service to.


-----Input-----

The first line contains three integers n, a and b (1 ≤ n ≤ 2·10^5, 1 ≤ a, b ≤ 2·10^5) — the number of groups coming to the restaurant, the number of one-seater and the number of two-seater tables.

The second line contains a sequence of integers t_1, t_2, ..., t_{n} (1 ≤ t_{i} ≤ 2) — the description of clients in chronological order. If t_{i} is equal to one, then the i-th group consists of one person, otherwise the i-th group consists of two people.


-----Output-----

Print the total number of people the restaurant denies service to.


-----Examples-----
Input
4 1 2
1 2 1 1

Output
0

Input
4 1 1
1 1 2 1

Output
2



-----Note-----

In the first example the first group consists of one person, it is seated at a vacant one-seater table. The next group occupies a whole two-seater table. The third group consists of one person, it occupies one place at the remaining two-seater table. The fourth group consists of one person, he is seated at the remaining seat at the two-seater table. Thus, all clients are served.

In the second example the first group consists of one person, it is seated at the vacant one-seater table. The next group consists of one person, it occupies one place at the two-seater table. It's impossible to seat the next group of two people, so the restaurant denies service to them. The fourth group consists of one person, he is seated at the remaining seat at the two-seater table. Thus, the restaurant denies service to 2 clients.
Use user-input-Based format and function signature solve()","
def solve():
    n, a, b = map(int, input().split())
    clients = list(map(int, input().split()))
    
    denied = 0
    one_seaters = a
    two_seaters = b
    
    for client in clients:
        if client == 1:
            if one_seaters > 0:
                one_seaters -= 1
            elif two_seaters > 0:
                two_seaters -= 1
            else:
                denied += 1
        else:
            if two_seaters > 0:
                two_seaters -= 1
            else:
                denied += 2 if one_seaters > 0 else 2
    
    return denied

solve()","
def solve():
    n, a, b = map(int, input().split())
    groups = list(map(int, input().split()))
    
    deny_count = 0
    one_seaters = a
    two_seaters = b
    for group in groups:
        if group == 1:
            if one_seaters > 0:
                one_seaters -= 1
            elif two_seaters > 0:
                two_seaters -= 1
            else:
                deny_count += 1
        else:
            if two_seaters > 0:
                two_seaters -= 1
            else:
                deny_count += 2
                
    print(deny_count)

solve()
","
def solve():
    n, a, b = map(int, input().split())
    t = list(map(int, input().split()))

    one_seaters = a
    two_seaters = b
    denied = 0

    for i in t:
        if i == 1:
            if one_seaters > 0:
                one_seaters -= 1
            elif two_seaters > 0:
                two_seaters -= 1
            else:
                denied += 1
        else:
            if two_seaters > 0:
                two_seaters -= 1
            else:
                denied += 2

    return denied
  
solve()","
def solve():
    n, a, b = map(int, input().split())
    t = list(map(int, input().split()))

    denied = 0
    one_seater = a
    two_seater = b

    for group in t:
        if group == 1:
            if one_seater > 0:
                one_seater -= 1
            elif two_seater > 0:
                two_seater -= 1
            else:
                denied += 1
        else:
            if two_seater > 0:
                two_seater -= 1
            else:
                denied += 2

    return denied

solve()","0.0","86.66666666666667","0.0","0.0","","","",""
"APPS/195","
QUESTION:
Each student eagerly awaits the day he would pass the exams successfully. Thus, Vasya was ready to celebrate, but, alas, he didn't pass it. However, many of Vasya's fellow students from the same group were more successful and celebrated after the exam.

Some of them celebrated in the BugDonalds restaurant, some of them — in the BeaverKing restaurant, the most successful ones were fast enough to celebrate in both of restaurants. Students which didn't pass the exam didn't celebrate in any of those restaurants and elected to stay home to prepare for their reexamination. However, this quickly bored Vasya and he started checking celebration photos on the Kilogramm. He found out that, in total, BugDonalds was visited by $A$ students, BeaverKing — by $B$ students and $C$ students visited both restaurants. Vasya also knows that there are $N$ students in his group.

Based on this info, Vasya wants to determine either if his data contradicts itself or, if it doesn't, how many students in his group didn't pass the exam. Can you help him so he won't waste his valuable preparation time?


-----Input-----

The first line contains four integers — $A$, $B$, $C$ and $N$ ($0 \leq A, B, C, N \leq 100$).


-----Output-----

If a distribution of $N$ students exists in which $A$ students visited BugDonalds, $B$ — BeaverKing, $C$ — both of the restaurants and at least one student is left home (it is known that Vasya didn't pass the exam and stayed at home), output one integer — amount of students (including Vasya) who did not pass the exam. 

If such a distribution does not exist and Vasya made a mistake while determining the numbers $A$, $B$, $C$ or $N$ (as in samples 2 and 3), output $-1$.


-----Examples-----
Input
10 10 5 20

Output
5
Input
2 2 0 4

Output
-1
Input
2 2 2 1

Output
-1


-----Note-----

The first sample describes following situation: $5$ only visited BugDonalds, $5$ students only visited BeaverKing, $5$ visited both of them and $5$ students (including Vasya) didn't pass the exam.

In the second sample $2$ students only visited BugDonalds and $2$ only visited BeaverKing, but that means all $4$ students in group passed the exam which contradicts the fact that Vasya didn't pass meaning that this situation is impossible.

The third sample describes a situation where $2$ students visited BugDonalds but the group has only $1$ which makes it clearly impossible.
Use user-input-Based format and function signature solve()","
def solve():
    A, B, C, N = map(int, input().split())
    
    if A + B - C >= N or A < C or B < C:
        print(-1)
    else:
        print(N - A - B + C)

solve()
","
def solve():
    A, B, C, N = map(int, input().split())
    
    if A + B - C > N or C > min(A, B):
        print(-1)
    else:
        print(N - (A + B - C))

solve()","
def solve():
    A, B, C, N = map(int, input().split())
    
    if A + B - C > N or N - A < 0 or N - B < 0 or N - A - B + C < 1:
        print(-1)
    else:
        print(N - A - B + C)

solve()","
def solve():
    A, B, C, N = map(int, input().split())

    if A >= N or B >= N or C >= N:
        print(-1)
    else:
        result = A + B - C - N
        if result < 1:
            print(-1)
        else:
            print(result)

solve()
","100.0","86.66666666666667","86.66666666666667","40.0","","","",""
"APPS/196","
QUESTION:
Nastya received a gift on New Year — a magic wardrobe. It is magic because in the end of each month the number of dresses in it doubles (i.e. the number of dresses becomes twice as large as it is in the beginning of the month).

Unfortunately, right after the doubling the wardrobe eats one of the dresses (if any) with the 50% probability. It happens every month except the last one in the year. 

Nastya owns x dresses now, so she became interested in the expected number of dresses she will have in one year. Nastya lives in Byteland, so the year lasts for k + 1 months.

Nastya is really busy, so she wants you to solve this problem. You are the programmer, after all. Also, you should find the answer modulo 10^9 + 7, because it is easy to see that it is always integer.


-----Input-----

The only line contains two integers x and k (0 ≤ x, k ≤ 10^18), where x is the initial number of dresses and k + 1 is the number of months in a year in Byteland.


-----Output-----

In the only line print a single integer — the expected number of dresses Nastya will own one year later modulo 10^9 + 7.


-----Examples-----
Input
2 0

Output
4

Input
2 1

Output
7

Input
3 2

Output
21



-----Note-----

In the first example a year consists on only one month, so the wardrobe does not eat dresses at all.

In the second example after the first month there are 3 dresses with 50% probability and 4 dresses with 50% probability. Thus, in the end of the year there are 6 dresses with 50% probability and 8 dresses with 50% probability. This way the answer for this test is (6 + 8) / 2 = 7.
Use user-input-Based format and function signature solve()","
def solve():
    MOD = 10**9 + 7
    x, k = map(int, input().split())
    
    if k == 0:
        print((2*x) % MOD)
    else:
        ans = (pow(2, k, MOD) * x) % MOD
        ans = (ans + pow(2, k-1, MOD) * (2*x)) % MOD
        print(ans)

solve()
","
def solve():
    MOD = 10**9 + 7
    x, k = map(int, input().split())
    
    dp = [[0, 0] for _ in range(k + 1)]
    dp[0][0] = x
    dp[0][1] = 0

    for i in range(1, k + 1):
        dp[i][0] = (dp[i-1][0] + dp[i-1][1]) % MOD
        dp[i][1] = (dp[i-1][0] // 2) % MOD

    result = (dp[k][0] + dp[k][1]) % MOD
    print(result)

solve()
","
def solve():
    MOD = 10**9 + 7
    x, k = map(int, input().split())
    if k == 0:
        print((2*x) % MOD)
    else:
        ans = (2**k * x + (2**k - 1) * x) % MOD
        print(ans)

solve()
","
def solve():
    x, k = map(int, input().split())
    MOD = 10**9 + 7
    ans = 0
    
    if k == 0:
        print((2*x) % MOD)
    else:
        mul = pow(2, k, MOD)
        sum_last_month = 0
        
        for i in range(k+1):
            cur_x = x * mul // pow(2, i)
            sum_last_month += cur_x
        
        ans = sum_last_month % MOD
        print(ans)

solve()
","20.0","8.333333333333332","33.33333333333333","33.33333333333333","","","",""
"APPS/197","
QUESTION:
An online contest will soon be held on ForceCoders, a large competitive programming platform. The authors have prepared $n$ problems; and since the platform is very popular, $998244351$ coder from all over the world is going to solve them.

For each problem, the authors estimated the number of people who would solve it: for the $i$-th problem, the number of accepted solutions will be between $l_i$ and $r_i$, inclusive.

The creator of ForceCoders uses different criteria to determine if the contest is good or bad. One of these criteria is the number of inversions in the problem order. An inversion is a pair of problems $(x, y)$ such that $x$ is located earlier in the contest ($x < y$), but the number of accepted solutions for $y$ is strictly greater.

Obviously, both the creator of ForceCoders and the authors of the contest want the contest to be good. Now they want to calculate the probability that there will be no inversions in the problem order, assuming that for each problem $i$, any integral number of accepted solutions for it (between $l_i$ and $r_i$) is equally probable, and all these numbers are independent.


-----Input-----

The first line contains one integer $n$ ($2 \le n \le 50$) — the number of problems in the contest.

Then $n$ lines follow, the $i$-th line contains two integers $l_i$ and $r_i$ ($0 \le l_i \le r_i \le 998244351$) — the minimum and maximum number of accepted solutions for the $i$-th problem, respectively.


-----Output-----

The probability that there will be no inversions in the contest can be expressed as an irreducible fraction $\frac{x}{y}$, where $y$ is coprime with $998244353$. Print one integer — the value of $xy^{-1}$, taken modulo $998244353$, where $y^{-1}$ is an integer such that $yy^{-1} \equiv 1$ $(mod$ $998244353)$.


-----Examples-----
Input
3
1 2
1 2
1 2

Output
499122177

Input
2
42 1337
13 420

Output
578894053

Input
2
1 1
0 0

Output
1

Input
2
1 1
1 1

Output
1



-----Note-----

The real answer in the first test is $\frac{1}{2}$.
Use user-input-Based format and function signature solve()","
from math import gcd

def solve():
    n = int(input())
    problems = []
    for _ in range(n):
        l, r = map(int, input().split())
        problems.append((l, r))

    mod = 998244353

    def mod_inv(x):
        return pow(x, mod - 2, mod)

    def ncr(n, r):
        res = 1
        for i in range(r):
            res = (res * (n - i) * mod_inv(i + 1)) % mod
        return res

    total_ways = 1
    good_ways = 1

    for i in range(1, n):
        total_ways = (total_ways * (problems[i][1] - problems[i][0] + 1)) % mod
        good_ways = (good_ways * ncr(problems[i][1] - problems[i][0] + 1, problems[i - 1][1] - problems[i][0])) % mod

    return (good_ways * mod_inv(total_ways)) % mod


solve()","
def solve():
    MOD = 998244353
    
    n = int(input())
    problems = []
    for _ in range(n):
        l, r = map(int, input().split())
        problems.append((l, r))
    
    total_cases = 1
    good_cases = 1
    for i in range(n):
        range_diff = problems[i][1] - problems[i][0] + 1
        total_cases = (total_cases * range_diff) % MOD
        good_cases = (good_cases * (i + 1)) % MOD
    
    inv_good_cases = pow(good_cases, MOD-2, MOD)
    
    result = (total_cases * inv_good_cases) % MOD
    print(result)

solve()
","
def solve():
    MOD = 998244353

    n = int(input())
    problems = []
    for _ in range(n):
        l, r = map(int, input().split())
        problems.append((l, r))

    total_count = r0 = 1
    for l, r in problems:
        total_count = total_count * (r - l + 1) % MOD
        r0 = r0 * (r - l + 1) * (r - l + 2) % MOD

    ans = total_count
    for i in range(n):
        l, r = problems[i]
        inv = 1
        for j in range(n):
            if i == j:
                continue
            a, b = problems[j]
            inv = (inv * max(0, b - max(l, 0)) % MOD)

        ans = (ans - inv) % MOD

    return (ans * pow(r0, MOD - 2, MOD)) % MOD

solve()","
from math import gcd

def solve():
    MOD = 998244353
    
    n = int(input())
    problems = []
    for _ in range(n):
        l, r = map(int, input().split())
        problems.append((l, r))

    ans = 1
    total = (problems[-1][1] - problems[-1][0] + 1) % MOD
    for i in range(n - 2, -1, -1):
        l, r = problems[i]
        total = (total * (problems[i + 1][1] - problems[i + 1][0] + 1)) % MOD
        if r < problems[i + 1][0]:
            ans = 0
        else:
            num_inversions = max(0, problems[i + 1][0] - l) * (r - l + 1)
            num_inversions += max(0, r - problems[i + 1][1]) * (r - l + 1)
            num_inversions += max(0, problems[i + 1][1] - l + 1) * max(0, r - problems[i + 1][0] + 1)
            ans = (ans * (total - num_inversions) % MOD)
    
    g = gcd(ans, total)
    ans = (ans // g) * pow(total // g, MOD - 2, MOD) % MOD
    
    return ans


solve()","0.0","6.666666666666667","0.0","0.0","","","",""
"APPS/198","
QUESTION:
Pasha has a wooden stick of some positive integer length n. He wants to perform exactly three cuts to get four parts of the stick. Each part must have some positive integer length and the sum of these lengths will obviously be n. 

Pasha likes rectangles but hates squares, so he wonders, how many ways are there to split a stick into four parts so that it's possible to form a rectangle using these parts, but is impossible to form a square.

Your task is to help Pasha and count the number of such ways. Two ways to cut the stick are considered distinct if there exists some integer x, such that the number of parts of length x in the first way differ from the number of parts of length x in the second way.


-----Input-----

The first line of the input contains a positive integer n (1 ≤ n ≤ 2·10^9) — the length of Pasha's stick.


-----Output-----

The output should contain a single integer — the number of ways to split Pasha's stick into four parts of positive integer length so that it's possible to make a rectangle by connecting the ends of these parts, but is impossible to form a square. 


-----Examples-----
Input
6

Output
1

Input
20

Output
4



-----Note-----

There is only one way to divide the stick in the first sample {1, 1, 2, 2}.

Four ways to divide the stick in the second sample are {1, 1, 9, 9}, {2, 2, 8, 8}, {3, 3, 7, 7} and {4, 4, 6, 6}. Note that {5, 5, 5, 5} doesn't work.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    count = 0
    for i in range(1, n//2 + 1):
        if n % i == 0 and n // i != i:
            count += 1
    print(count)

solve()
","
def solve():
    n = int(input())
    count = 0
    for i in range(1, n//2 + 1):
        if n % i == 0 and n // i != i:
            count += 1
    print(count)

solve()
","
def solve():
    n = int(input())
    count = 0
    for i in range(1, n//2 + 1):
        if n % i == 0 and n // i != i:
            count += 1
    print(count)

solve()
","
def solve():
    n = int(input())
    count = 0
    for i in range(1, n // 2 + 1):
        if n % i == 0 and n/i != i and n/i - i > 1:
            count += 1
    print(count)

solve()
","12.5","12.5","12.5","37.5","","","",""
"APPS/199","
QUESTION:
The Fair Nut likes kvass very much. On his birthday parents presented him $n$ kegs of kvass. There are $v_i$ liters of kvass in the $i$-th keg. Each keg has a lever. You can pour your glass by exactly $1$ liter pulling this lever. The Fair Nut likes this drink very much, so he wants to pour his glass by $s$ liters of kvass. But he wants to do it, so kvass level in the least keg is as much as possible.

Help him find out how much kvass can be in the least keg or define it's not possible to pour his glass by $s$ liters of kvass.


-----Input-----

The first line contains two integers $n$ and $s$ ($1 \le n \le 10^3$, $1 \le s \le 10^{12}$) — the number of kegs and glass volume.

The second line contains $n$ integers $v_1, v_2, \ldots, v_n$ ($1 \le v_i \le 10^9$) — the volume of $i$-th keg.


-----Output-----

If the Fair Nut cannot pour his glass by $s$ liters of kvass, print $-1$. Otherwise, print a single integer — how much kvass in the least keg can be.


-----Examples-----
Input
3 3
4 3 5

Output
3

Input
3 4
5 3 4

Output
2

Input
3 7
1 2 3

Output
-1



-----Note-----

In the first example, the answer is $3$, the Fair Nut can take $1$ liter from the first keg and $2$ liters from the third keg. There are $3$ liters of kvass in each keg.

In the second example, the answer is $2$, the Fair Nut can take $3$ liters from the first keg and $1$ liter from the second keg.

In the third example, the Fair Nut can't pour his cup by $7$ liters, so the answer is $-1$.
Use user-input-Based format and function signature solve()","
def solve():
    n, s = map(int, input().split())
    v = list(map(int, input().split()))
    
    total_kvass = sum(v)
    min_kvass_keg = min(v)
    
    if total_kvass < s:
        print(-1)
    else:
        min_possible_kvass = max(0, (total_kvass - s) // n)
        print(min(min_kvass_keg, min_possible_kvass))

solve()
","
def solve():
    n, s = map(int, input().split())
    volumes = list(map(int, input().split()))
    
    min_volume = min(volumes)
    
    total_kg_needed = sum(max(0, min_volume - volume) for volume in volumes)
    
    if total_kg_needed > s:
        print(-1)
    else:
        print(min_volume)

solve()
","
def solve():
    n, s = map(int, input().split())
    kegs = list(map(int, input().split()))
    total_kvass = sum(kegs)
    min_kvass = min(kegs)
    
    if total_kvass < s:
        return -1
    else:
        min_keg_amount = max((total_kvass - s) // (n - 1), min_kvass)
        return min_keg_amount

solve()","
def solve():
    n, s = map(int, input().split())
    volumes = list(map(int, input().split()))
    
    total_volume = sum(volumes)
    min_volume_keg = min(volumes)
    
    if total_volume < s:
        return -1
    
    min_kg_needed = s - (n - 1) * min_volume_keg
    if min_kg_needed > min_volume_keg:
        return min_volume_keg
    else:
        return min_kg_needed

solve()
","100.0","53.333333333333336","0.0","0.0","","","",""
"APPS/200","
QUESTION:
The 9-th grade student Gabriel noticed a caterpillar on a tree when walking around in a forest after the classes. The caterpillar was on the height h_1 cm from the ground. On the height h_2 cm (h_2 > h_1) on the same tree hung an apple and the caterpillar was crawling to the apple.

Gabriel is interested when the caterpillar gets the apple. He noted that the caterpillar goes up by a cm per hour by day and slips down by b cm per hour by night.

In how many days Gabriel should return to the forest to see the caterpillar get the apple. You can consider that the day starts at 10 am and finishes at 10 pm. Gabriel's classes finish at 2 pm. You can consider that Gabriel noticed the caterpillar just after the classes at 2 pm.

Note that the forest is magic so the caterpillar can slip down under the ground and then lift to the apple.


-----Input-----

The first line contains two integers h_1, h_2 (1 ≤ h_1 < h_2 ≤ 10^5) — the heights of the position of the caterpillar and the apple in centimeters.

The second line contains two integers a, b (1 ≤ a, b ≤ 10^5) — the distance the caterpillar goes up by day and slips down by night, in centimeters per hour.


-----Output-----

Print the only integer k — the number of days Gabriel should wait to return to the forest and see the caterpillar getting the apple.

If the caterpillar can't get the apple print the only integer  - 1.


-----Examples-----
Input
10 30
2 1

Output
1

Input
10 13
1 1

Output
0

Input
10 19
1 2

Output
-1

Input
1 50
5 4

Output
1



-----Note-----

In the first example at 10 pm of the first day the caterpillar gets the height 26. At 10 am of the next day it slips down to the height 14. And finally at 6 pm of the same day the caterpillar gets the apple.

Note that in the last example the caterpillar was slipping down under the ground and getting the apple on the next day.
Use user-input-Based format and function signature solve()","
def solve():
    h1, h2 = map(int, input().split())
    a, b = map(int, input().split())
    
    if a <= b:
        print(-1)
    else:
        days = (h2 - h1 - 1) // (a - b) + 1
        print(days)

solve()
","
def solve():
    h1, h2 = map(int, input().split())
    a, b = map(int, input().split())
    
    if a <= b:
        print(-1)
        return
    
    h1 += (a * 8) # Caterpillar climbs during the day
    if h1 >= h2:
        print(0)
        return
    
    climb_per_day = a - b
    days = (h2 - h1 + climb_per_day - 1) // climb_per_day
    
    print(days)

solve()","
def solve():
    h1, h2 = map(int, input().split())
    a, b = map(int, input().split())
    
    if a * 12 >= h2 - h1:
        print(0)
    elif a <= b:
        print(-1)
    else:
        print((h2 - h1 - a * 12 - 1) // (a - b) + 1)

solve()
  ","
def solve():
    h1, h2 = map(int, input().split())
    a, b = map(int, input().split())
    
    if a <= b:
        print(-1)
    else:
        days = (h2 - h1 + (a - b) - 1) // (a - b)
        print(days)

solve()
","26.666666666666668","33.33333333333333","33.33333333333333","26.666666666666668","","","",""
"APPS/201","
QUESTION:
A sweet little monster Om Nom loves candies very much. One day he found himself in a rather tricky situation that required him to think a bit in order to enjoy candies the most. Would you succeed with the same task if you were on his place? [Image] 

One day, when he came to his friend Evan, Om Nom didn't find him at home but he found two bags with candies. The first was full of blue candies and the second bag was full of red candies. Om Nom knows that each red candy weighs W_{r} grams and each blue candy weighs W_{b} grams. Eating a single red candy gives Om Nom H_{r} joy units and eating a single blue candy gives Om Nom H_{b} joy units.

Candies are the most important thing in the world, but on the other hand overeating is not good. Om Nom knows if he eats more than C grams of candies, he will get sick. Om Nom thinks that it isn't proper to leave candy leftovers, so he can only eat a whole candy. Om Nom is a great mathematician and he quickly determined how many candies of what type he should eat in order to get the maximum number of joy units. Can you repeat his achievement? You can assume that each bag contains more candies that Om Nom can eat.


-----Input-----

The single line contains five integers C, H_{r}, H_{b}, W_{r}, W_{b} (1 ≤ C, H_{r}, H_{b}, W_{r}, W_{b} ≤ 10^9).


-----Output-----

Print a single integer — the maximum number of joy units that Om Nom can get.


-----Examples-----
Input
10 3 5 2 3

Output
16



-----Note-----

In the sample test Om Nom can eat two candies of each type and thus get 16 joy units.
Use user-input-Based format and function signature solve()","
def solve():
    C, Hr, Hb, Wr, Wb = map(int, input().split())
    
    max_joy = 0
    for num_red in range(C // Wr + 1):
        num_blue = min((C - num_red * Wr) // Wb, (C - num_red * Wr) // Wb + 1)
        joy = num_red * Hr + num_blue * Hb
        max_joy = max(max_joy, joy)
    
    print(max_joy)

solve()
","
def solve():
    C, H_r, H_b, W_r, W_b = map(int, input().split())
    
    max_joy = 0
    for i in range(C // W_r + 1): # iterate over the number of red candies
        red_candies = i
        blue_candies = min((C - red_candies * W_r) // W_b, C // W_b) # calculate number of blue candies
        joy = red_candies * H_r + blue_candies * H_b
        max_joy = max(max_joy, joy)
    
    print(max_joy)

solve()
","
def solve():
    C, Hr, Hb, Wr, Wb = map(int, input().split())
    max_joy = 0
    
    for i in range(0, C//Wr+1):
        red_candies = i
        blue_candies = min((C - i*Wr)//Wb, Hr//Wr)
        joy = red_candies*Hr + blue_candies*Hb
        
        max_joy = max(max_joy, joy)
        
    print(max_joy)

solve()
","
def solve():
    C, H_r, H_b, W_r, W_b = map(int, input().split())
    
    max_joy = 0
    for i in range(C//W_r + 1):
        j = (C - i*W_r) // W_b
        max_joy = max(max_joy, i*H_r + j*H_b)
    
    print(max_joy)

solve()","100.0","100.0","10.0","100.0","","","",""
"APPS/202","
QUESTION:
Professor GukiZ makes a new robot. The robot are in the point with coordinates (x_1, y_1) and should go to the point (x_2, y_2). In a single step the robot can change any of its coordinates (maybe both of them) by one (decrease or increase). So the robot can move in one of the 8 directions. Find the minimal number of steps the robot should make to get the finish position.


-----Input-----

The first line contains two integers x_1, y_1 ( - 10^9 ≤ x_1, y_1 ≤ 10^9) — the start position of the robot.

The second line contains two integers x_2, y_2 ( - 10^9 ≤ x_2, y_2 ≤ 10^9) — the finish position of the robot.


-----Output-----

Print the only integer d — the minimal number of steps to get the finish position.


-----Examples-----
Input
0 0
4 5

Output
5

Input
3 4
6 1

Output
3



-----Note-----

In the first example robot should increase both of its coordinates by one four times, so it will be in position (4, 4). After that robot should simply increase its y coordinate and get the finish position.

In the second example robot should simultaneously increase x coordinate and decrease y coordinate by one three times.
Use user-input-Based format and function signature solve()","
def solve():
    x1, y1 = map(int, input().split())
    x2, y2 = map(int, input().split())
    
    dx = abs(x2 - x1)
    dy = abs(y2 - y1)
    
    return max(dx, dy)

solve()
","
def solve():
    x1, y1 = map(int, input().split())
    x2, y2 = map(int, input().split())
    dx = abs(x2 - x1)
    dy = abs(y2 - y1)
    return max(dx, dy)

# Run the function
print(solve())
  
solve()","
def solve():
    x1, y1 = map(int, input().split())
    x2, y2 = map(int, input().split())
    dx = abs(x2 - x1)
    dy = abs(y2 - y1)
    return max(dx, dy)

solve()","
def solve():
    import math

    x1, y1 = map(int, input().split())
    x2, y2 = map(int, input().split())

    dx = abs(x2 - x1)
    dy = abs(y2 - y1)

    return dx + dy - min(dx, dy) + math.ceil(max(dx, dy)/2)

solve()","0.0","0.0","0.0","0.0","","","",""
"APPS/203","
QUESTION:
There are n employees in Alternative Cake Manufacturing (ACM). They are now voting on some very important question and the leading world media are trying to predict the outcome of the vote.

Each of the employees belongs to one of two fractions: depublicans or remocrats, and these two fractions have opposite opinions on what should be the outcome of the vote. The voting procedure is rather complicated:   Each of n employees makes a statement. They make statements one by one starting from employees 1 and finishing with employee n. If at the moment when it's time for the i-th employee to make a statement he no longer has the right to vote, he just skips his turn (and no longer takes part in this voting).  When employee makes a statement, he can do nothing or declare that one of the other employees no longer has a right to vote. It's allowed to deny from voting people who already made the statement or people who are only waiting to do so. If someone is denied from voting he no longer participates in the voting till the very end.  When all employees are done with their statements, the procedure repeats: again, each employees starting from 1 and finishing with n who are still eligible to vote make their statements.  The process repeats until there is only one employee eligible to vote remaining and he determines the outcome of the whole voting. Of course, he votes for the decision suitable for his fraction. 

You know the order employees are going to vote and that they behave optimal (and they also know the order and who belongs to which fraction). Predict the outcome of the vote.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 200 000) — the number of employees. 

The next line contains n characters. The i-th character is 'D' if the i-th employee is from depublicans fraction or 'R' if he is from remocrats.


-----Output-----

Print 'D' if the outcome of the vote will be suitable for depublicans and 'R' if remocrats will win.


-----Examples-----
Input
5
DDRRR

Output
D

Input
6
DDRRRR

Output
R



-----Note-----

Consider one of the voting scenarios for the first sample:   Employee 1 denies employee 5 to vote.  Employee 2 denies employee 3 to vote.  Employee 3 has no right to vote and skips his turn (he was denied by employee 2).  Employee 4 denies employee 2 to vote.  Employee 5 has no right to vote and skips his turn (he was denied by employee 1).  Employee 1 denies employee 4.  Only employee 1 now has the right to vote so the voting ends with the victory of depublicans.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    fractions = input()

    depublicans = []
    remocrats = []

    for i in range(n):
        if fractions[i] == 'D':
            depublicans.append(i)
        else:
            remocrats.append(i)

    while depublicans and remocrats:
        next_round = []
        for i in range(n):
            if i in depublicans:
                if remocrats:
                    next_round.append(remocrats.pop(0))
            elif i in remocrats:
                if depublicans:
                    next_round.append(depublicans.pop(0))
        for i in next_round:
            if i in depublicans:
                depublicans.remove(i)
            else:
                remocrats.remove(i)

    if depublicans:
        return 'D'
    else:
        return 'R'

solve()","
def solve():
    n = int(input())
    fractions = input().strip()

    depublicans = fractions.count('D')
    remocrats = fractions.count('R')

    while depublicans > 0 and remocrats > 0:
        for i in range(n):
            if fractions[i] == 'D':
                for j in range(i + 1, n):
                    if fractions[j] == 'R':
                        fractions = fractions[:j] + fractions[j+1:]
                        remocrats -= 1
                        break
            elif fractions[i] == 'R':
                for j in range(i + 1, n):
                    if fractions[j] == 'D':
                        fractions = fractions[:j] + fractions[j+1:]
                        depublicans -= 1
                        break

    if depublicans > 0:
        print('D')
    else:
        print('R')

solve()
","
def solve():
    n = int(input())
    employees = input()
    
    while 'D' in employees and 'R' in employees:
        i = 0
        while i < len(employees):
            if employees[i] == 'D':
                j = i + 1
                while j < len(employees) and employees[j] != 'R':
                    j += 1
                if j < len(employees) and employees[j] == 'R':
                    employees = employees[:j] + employees[j+1:]
                else:
                    break
            elif employees[i] == 'R':
                j = i + 1
                while j < len(employees) and employees[j] != 'D':
                    j += 1
                if j < len(employees) and employees[j] == 'D':
                    employees = employees[:j] + employees[j+1:]
                else:
                    break
            i += 1
    
    return employees[0]

solve()","
def solve():
    import sys

    n = int(input())
    fractions = input().rstrip()

    depublicans = []
    remocrats = []

    for i in range(n):
        if fractions[i] == 'D':
            depublicans.append(i)
        else:
            remocrats.append(i)

    while len(depublicans) > 0 and len(remocrats) > 0:
        next_depublican = depublicans.pop(0)
        next_remocrat = remocrats.pop(0)

        if next_depublican < next_remocrat:
            depublicans.append(next_depublican + n)
        else:
            remocrats.append(next_remocrat + n)

    if len(depublicans) > 0:
        print('D')
    else:
        print('R')

solve()
","0.0","20.0","0.0","100.0","","","",""
"APPS/204","
QUESTION:
Monocarp has decided to buy a new TV set and hang it on the wall in his flat. The wall has enough free space so Monocarp can buy a TV set with screen width not greater than $a$ and screen height not greater than $b$. Monocarp is also used to TV sets with a certain aspect ratio: formally, if the width of the screen is $w$, and the height of the screen is $h$, then the following condition should be met: $\frac{w}{h} = \frac{x}{y}$.

There are many different TV sets in the shop. Monocarp is sure that for any pair of positive integers $w$ and $h$ there is a TV set with screen width $w$ and height $h$ in the shop.

Monocarp isn't ready to choose the exact TV set he is going to buy. Firstly he wants to determine the optimal screen resolution. He has decided to try all possible variants of screen size. But he must count the number of pairs of positive integers $w$ and $h$, beforehand, such that $(w \le a)$, $(h \le b)$ and $(\frac{w}{h} = \frac{x}{y})$.

In other words, Monocarp wants to determine the number of TV sets having aspect ratio $\frac{x}{y}$, screen width not exceeding $a$, and screen height not exceeding $b$. Two TV sets are considered different if they have different screen width or different screen height.


-----Input-----

The first line contains four integers $a$, $b$, $x$, $y$ ($1 \le a, b, x, y \le 10^{18}$) — the constraints on the screen width and height, and on the aspect ratio.


-----Output-----

Print one integer — the number of different variants to choose TV screen width and screen height so that they meet the aforementioned constraints.


-----Examples-----
Input
17 15 5 3

Output
3

Input
14 16 7 22

Output
0

Input
4 2 6 4

Output
1

Input
1000000000000000000 1000000000000000000 999999866000004473 999999822000007597

Output
1000000063



-----Note-----

In the first example, there are $3$ possible variants: $(5, 3)$, $(10, 6)$, $(15, 9)$.

In the second example, there is no TV set meeting the constraints.

In the third example, there is only one variant: $(3, 2)$.
Use user-input-Based format and function signature solve()","
def solve():
    a, b, x, y = map(int, input().split())
    
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a
    
    g = gcd(x, y)
    x //= g
    y //= g
    
    res = min(a // x, b // y)
    print(res)

solve()
","
def solve():
    a, b, x, y = map(int, input().split())
    
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a
    
    common_divisor = gcd(x, y)
    x //= common_divisor
    y //= common_divisor
    
    ratio = min(a // x, b // y)
    
    print(ratio)

solve()","
def solve():
    a, b, x, y = map(int, input().split())
    def gcd(a, b):
        while b:
            a, b = b, a % b
        return a
    g = gcd(x, y)
    x //= g
    y //= g
    print(min(a // x, b // y))

solve()
","
def solve():
    a, b, x, y = map(int, input().split())
    
    def gcd(a, b):
        if b == 0:
            return a
        return gcd(b, a % b)
    
    gcd_val = gcd(x, y)
    x //= gcd_val
    y //= gcd_val
    
    min_ratio = min(a // x, b // y)
    
    print(min_ratio)

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/205","
QUESTION:
The number ""zero"" is called ""love"" (or ""l'oeuf"" to be precise, literally means ""egg"" in French), for example when denoting the zero score in a game of tennis. 

Aki is fond of numbers, especially those with trailing zeros. For example, the number $9200$ has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.

However, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.

Given two integers $n$ and $b$ (in decimal notation), your task is to calculate the number of trailing zero digits in the $b$-ary (in the base/radix of $b$) representation of $n\,!$ (factorial of $n$). 


-----Input-----

The only line of the input contains two integers $n$ and $b$ ($1 \le n \le 10^{18}$, $2 \le b \le 10^{12}$).


-----Output-----

Print an only integer — the number of trailing zero digits in the $b$-ary representation of $n!$


-----Examples-----
Input
6 9

Output
1

Input
38 11

Output
3

Input
5 2

Output
3

Input
5 10

Output
1



-----Note-----

In the first example, $6!_{(10)} = 720_{(10)} = 880_{(9)}$.

In the third and fourth example, $5!_{(10)} = 120_{(10)} = 1111000_{(2)}$.

The representation of the number $x$ in the $b$-ary base is $d_1, d_2, \ldots, d_k$ if $x = d_1 b^{k - 1} + d_2 b^{k - 2} + \ldots + d_k b^0$, where $d_i$ are integers and $0 \le d_i \le b - 1$. For example, the number $720$ from the first example is represented as $880_{(9)}$ since $720 = 8 \cdot 9^2 + 8 \cdot 9 + 0 \cdot 1$.

You can read more about bases here.
Use user-input-Based format and function signature solve()","
def solve():
    n, b = map(int, input().split())
    
    def count_trailing_zeros(n, b):
        count = 0
        while n > 0:
            n //= b
            count += n
        return count
    
    def factorial(n):
        if n == 0:
            return 1
        return n * factorial(n-1)
    
    fact = factorial(n)
    return count_trailing_zeros(fact, b)

solve()","
def solve():
    n, b = map(int, input().split())
    
    def count_trailing_zeros(num, base):
        zeros_count = 0
        while num % base == 0:
            zeros_count += 1
            num //= base
        return zeros_count
    
    def factorial(num):
        if num == 0:
            return 1
        return num * factorial(num - 1)
    
    fact = factorial(n)
    
    zeros = 0
    while fact % b == 0:
        zeros += 1
        fact //= b
    
    print(zeros)

# Call the function to run
solve()
  ","
def solve():
    import sys

    def trailing_zeros(n, b):
        zeros = sys.maxsize
        while b > 1:
            count = 0
            temp = b
            while n >= temp:
                count += n // temp
                temp *= b
            zeros = min(zeros, count)
            b -= 1
        return zeros

    n, b = map(int, input().split())
    print(trailing_zeros(n, b))

solve()
","
def solve():
    import math
    
    n, b = map(int, input().split())
    
    def count_trailing_zeros_in_factorial_in_base(n, b):
        ans = math.inf
        for i in range(2, int(b ** 0.5) + 1):
            if b % i == 0:
                count = 0
                while b % i == 0:
                    count += 1
                    b //= i
                p = 0
                tmp = n
                while tmp:
                    p += tmp // i
                    tmp //= i
                ans = min(ans, p // count)
        if b > 1:
            p = 0
            tmp = n
            while tmp:
                p += tmp // b
                tmp //= b
            ans = min(ans, p)
        return ans
    
    print(count_trailing_zeros_in_factorial_in_base(n, b))

solve()
","0.0","73.33333333333333","50.0","100.0","","","",""
"APPS/206","
QUESTION:
A frog is initially at position $0$ on the number line. The frog has two positive integers $a$ and $b$. From a position $k$, it can either jump to position $k+a$ or $k-b$.

Let $f(x)$ be the number of distinct integers the frog can reach if it never jumps on an integer outside the interval $[0, x]$. The frog doesn't need to visit all these integers in one trip, that is, an integer is counted if the frog can somehow reach it if it starts from $0$.

Given an integer $m$, find $\sum_{i=0}^{m} f(i)$. That is, find the sum of all $f(i)$ for $i$ from $0$ to $m$.


-----Input-----

The first line contains three integers $m, a, b$ ($1 \leq m \leq 10^9, 1 \leq a,b \leq 10^5$).


-----Output-----

Print a single integer, the desired sum.


-----Examples-----
Input
7 5 3

Output
19

Input
1000000000 1 2019

Output
500000001500000001

Input
100 100000 1

Output
101

Input
6 4 5

Output
10



-----Note-----

In the first example, we must find $f(0)+f(1)+\ldots+f(7)$. We have $f(0) = 1, f(1) = 1, f(2) = 1, f(3) = 1, f(4) = 1, f(5) = 3, f(6) = 3, f(7) = 8$. The sum of these values is $19$.

In the second example, we have $f(i) = i+1$, so we want to find $\sum_{i=0}^{10^9} i+1$.

In the third example, the frog can't make any jumps in any case.
Use user-input-Based format and function signature solve()","
def solve():
    m, a, b = map(int, input().split())
    if a > b:
        a, b = b, a
    if a == 1:
        return m * (m + 1) // 2
    if a == b:
        return m + 1
    ans = 0
    for i in range(m + 1):
        if i < b or (i - b) % a == 0:
            ans += 1
    return ans

solve()
","
def solve():
    m, a, b = map(int, input().split())

    if a > b:
        a, b = b, a

    if a == 1:
        return (m * (m + 1)) // 2

    jump = set()
    stack = [0]

    while stack:
        k = stack.pop()
        if k > m:
            continue
        jump.add(k)
        if k + a not in jump:
            stack.append(k + a)
        if k - b not in jump:
            stack.append(k - b)

    return sum(1 for i in range(m+1) if i in jump)

solve()
","
python
def solve():
    m, a, b = map(int, input().split())
    if a > b:
        a, b = b, a
    if a == 1:
        print((m+1)*(m+1))
        return

    ans = 1
    for i in range(1, min(b, m)+1):
        f = min(i - (i//a)*a, i%b)
        ans += f + 1
    if b <= m:
        for i in range(b+1, m+1):
            f = min(i - (i//a)*a, i%b, b)
            ans += f + 1
    print(ans)


solve()","
def solve():
    m, a, b = map(int, input().split())
    
    def f(x):
        if x == 0:
            return 1
        reachable = set()
        reachable.add(0)
        for k in range(1, x+1):
            if any(k - b in reachable or k - a in reachable for a in range(1, a+1) for b in range(1, b+1)):
                reachable.add(k)
        return len(reachable)
    
    total = 0
    for i in range(m+1):
        total += f(i)
    
    print(total)

solve()
","0.0","0.0","0.0","0.0","","","",""
"APPS/207","
QUESTION:
Where do odds begin, and where do they end? Where does hope emerge, and will they ever break?

Given an integer sequence a_1, a_2, ..., a_{n} of length n. Decide whether it is possible to divide it into an odd number of non-empty subsegments, the each of which has an odd length and begins and ends with odd numbers.

A subsegment is a contiguous slice of the whole sequence. For example, {3, 4, 5} and {1} are subsegments of sequence {1, 2, 3, 4, 5, 6}, while {1, 2, 4} and {7} are not.


-----Input-----

The first line of input contains a non-negative integer n (1 ≤ n ≤ 100) — the length of the sequence.

The second line contains n space-separated non-negative integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 100) — the elements of the sequence.


-----Output-----

Output ""Yes"" if it's possible to fulfill the requirements, and ""No"" otherwise.

You can output each letter in any case (upper or lower).


-----Examples-----
Input
3
1 3 5

Output
Yes

Input
5
1 0 1 5 1

Output
Yes

Input
3
4 3 1

Output
No

Input
4
3 9 9 3

Output
No



-----Note-----

In the first example, divide the sequence into 1 subsegment: {1, 3, 5} and the requirements will be met.

In the second example, divide the sequence into 3 subsegments: {1, 0, 1}, {5}, {1}.

In the third example, one of the subsegments must start with 4 which is an even number, thus the requirements cannot be met.

In the fourth example, the sequence can be divided into 2 subsegments: {3, 9, 9}, {3}, but this is not a valid solution because 2 is an even number.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    if n % 2 == 0 or a[0] % 2 == 0 or a[-1] % 2 == 0:
        print(""No"")
    else:
        print(""Yes"")

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    if a[0] % 2 == 0 or a[-1] % 2 == 0 or n % 2 == 0:
        print(""No"")
    else:
        print(""Yes"")

solve()","
def solve():
    n = int(input())
    nums = list(map(int, input().split()))

    if n % 2 == 0:
        print(""No"")
    else:
        if nums[0] % 2 != 0 and nums[-1] % 2 != 0:
            print(""Yes"")
        else:
            print(""No"")

solve()
","
def solve():
    n = int(input())
    sequence = list(map(int, input().split()))

    if n % 2 == 0:
        print(""No"")
    else:
        start_odd = sequence[0] % 2 == 1
        end_odd = sequence[-1] % 2 == 1
        if start_odd and end_odd:
            print(""Yes"")
        else:
            print(""No"")

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/208","
QUESTION:
Pashmak has fallen in love with an attractive girl called Parmida since one year ago...

Today, Pashmak set up a meeting with his partner in a romantic garden. Unfortunately, Pashmak has forgotten where the garden is. But he remembers that the garden looks like a square with sides parallel to the coordinate axes. He also remembers that there is exactly one tree on each vertex of the square. Now, Pashmak knows the position of only two of the trees. Help him to find the position of two remaining ones.


-----Input-----

The first line contains four space-separated x_1, y_1, x_2, y_2 ( - 100 ≤ x_1, y_1, x_2, y_2 ≤ 100) integers, where x_1 and y_1 are coordinates of the first tree and x_2 and y_2 are coordinates of the second tree. It's guaranteed that the given points are distinct.


-----Output-----

If there is no solution to the problem, print -1. Otherwise print four space-separated integers x_3, y_3, x_4, y_4 that correspond to the coordinates of the two other trees. If there are several solutions you can output any of them. 

Note that x_3, y_3, x_4, y_4 must be in the range ( - 1000 ≤ x_3, y_3, x_4, y_4 ≤ 1000).


-----Examples-----
Input
0 0 0 1

Output
1 0 1 1

Input
0 0 1 1

Output
0 1 1 0

Input
0 0 1 2

Output
-1
Use user-input-Based format and function signature solve()","
def solve():
    x1, y1, x2, y2 = map(int, input().split())
    
    if x1 == x2:
        d = abs(y1 - y2)
        print(x1 + d, y1, x2 + d, y2)
    elif y1 == y2:
        d = abs(x1 - x2)
        print(x1, y1 + d, x2, y2 + d)
    elif abs(x1 - x2) == abs(y1 - y2):
        print(x1, y2, x2, y1)
    else:
        print(-1)

solve()
","
def solve():
    x1, y1, x2, y2 = map(int, input().split())
    if x1 == x2:
        d = abs(y2 - y1)
        x3, y3, x4, y4 = x1 + d, y1, x2 + d, y2
    elif y1 == y2:
        d = abs(x2 - x1)
        x3, y3, x4, y4 = x1, y1 + d, x2, y2 + d
    elif abs(x2 - x1) == abs(y2 - y1):
        x3, y3, x4, y4 = x1, y2, x2, y1
    else:
        print(-1)
        return
    print(x3, y3, x4, y4)

solve()
","
def solve():
    x1, y1, x2, y2 = map(int, input().split())

    if x1 != x2 and y1 != y2 and abs(x1 - x2) != abs(y1 - y2):
        print(""-1"")
    else:
        if x1 == x2:
            dx = abs(y1 - y2)
            print(x1 + dx, y1, x2 + dx, y2)
        elif y1 == y2:
            dy = abs(x1 - x2)
            print(x1, y1 + dy, x2, y2 + dy)
        else:
            print(x1, y2, x2, y1)

solve()
  ","
def solve():
    x1, y1, x2, y2 = map(int, input().split())
    
    if x1 == x2:
        d = abs(y2 - y1)
        print(x1+d, y1, x2+d, y2)
    elif y1 == y2:
        d = abs(x2 - x1)
        print(x1, y1+d, x2, y2+d)
    elif abs(x2 - x1) == abs(y2 - y1):
        print(x1, y2, x2, y1)
    else:
        print(-1)

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/209","
QUESTION:
Jzzhu has invented a kind of sequences, they meet the following property:$f_{1} = x ; f_{2} = y ; \forall i(i \geq 2), f_{i} = f_{i - 1} + f_{i + 1}$

You are given x and y, please calculate f_{n} modulo 1000000007 (10^9 + 7).


-----Input-----

The first line contains two integers x and y (|x|, |y| ≤ 10^9). The second line contains a single integer n (1 ≤ n ≤ 2·10^9).


-----Output-----

Output a single integer representing f_{n} modulo 1000000007 (10^9 + 7).


-----Examples-----
Input
2 3
3

Output
1

Input
0 -1
2

Output
1000000006



-----Note-----

In the first sample, f_2 = f_1 + f_3, 3 = 2 + f_3, f_3 = 1.

In the second sample, f_2 =  - 1;  - 1 modulo (10^9 + 7) equals (10^9 + 6).
Use user-input-Based format and function signature solve()","
def solve():
    x, y = map(int, input().split())
    n = int(input())
    
    mod = 1000000007
    
    if n == 1:
        print(x % mod)
    elif n == 2:
        print(y % mod)
    else:
        a, b = x, y
        for i in range(3, n+1):
            a, b = b, (a + b) % mod
        print(b)

solve()
","
def solve():
    x, y = map(int, input().split())
    n = int(input())
    
    modulo = 1000000007
    
    if n == 1:
        return x % modulo
    elif n == 2:
        return y % modulo
    
    a, b = x, y
    
    for i in range(2, n):
        a, b = b, (a + b) % modulo
    
    return b

solve()
","
def solve():
    x, y = map(int, input().split())
    n = int(input())
    MOD = 1000000007

    def fast_power(a, b, m):
        result = 1
        while b > 0:
            if b % 2 == 1:
                result = (result * a) % m
            a = (a * a) % m
            b //= 2
        return result

    def matrix_power(matrix, power, m):
        n = len(matrix)
        result_matrix = [[int(i == j) for j in range(n)] for i in range(n)]

        while power > 0:
            if power % 2 == 1:
                result_matrix = multiply_matrices(result_matrix, matrix, m)
            matrix = multiply_matrices(matrix, matrix, m)
            power //= 2

        return result_matrix

    def multiply_matrices(a, b, m):
        n = len(a)
        result = [[0 for _ in range(n)] for _ in range(n)]
        for i in range(n):
            for j in range(n):
                for k in range(n):
                    result[i][j] = (result[i][j] + a[i][k] * b[k][j]) % m
        return result

    transformation_matrix = [[0, 1], [1, 1]]
    initial_vector = [[y % MOD], [(x * -1) % MOD]]
    powered_matrix = matrix_power(transformation_matrix, n - 2, MOD)
    result_vector = multiply_matrices(powered_matrix, initial_vector, MOD)
    
    return result_vector[0][0]


solve()
","
def solve():
    x, y = map(int, input().split())
    n = int(input())

    mod = 1000000007

    if n == 1:
        print(x % mod)
    elif n == 2:
        print(y % mod)
    else:
        f = [x, y]
        for i in range(2, n):
            f.append((f[-2] + f[-1]) % mod)
        print(f[-1])

solve()
","60.0","0.0","0.0","60.0","","","",""
"APPS/210","
QUESTION:
One spring day on his way to university Lesha found an array A. Lesha likes to split arrays into several parts. This time Lesha decided to split the array A into several, possibly one, new arrays so that the sum of elements in each of the new arrays is not zero. One more condition is that if we place the new arrays one after another they will form the old array A.

Lesha is tired now so he asked you to split the array. Help Lesha!


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 100) — the number of elements in the array A.

The next line contains n integers a_1, a_2, ..., a_{n} ( - 10^3 ≤ a_{i} ≤ 10^3) — the elements of the array A.


-----Output-----

If it is not possible to split the array A and satisfy all the constraints, print single line containing ""NO"" (without quotes).

Otherwise in the first line print ""YES"" (without quotes). In the next line print single integer k — the number of new arrays. In each of the next k lines print two integers l_{i} and r_{i} which denote the subarray A[l_{i}... r_{i}] of the initial array A being the i-th new array. Integers l_{i}, r_{i} should satisfy the following conditions:  l_1 = 1  r_{k} = n  r_{i} + 1 = l_{i} + 1 for each 1 ≤ i < k. 

If there are multiple answers, print any of them.


-----Examples-----
Input
3
1 2 -3

Output
YES
2
1 2
3 3

Input
8
9 -12 3 4 -4 -10 7 3

Output
YES
2
1 2
3 8

Input
1
0

Output
NO

Input
4
1 2 3 -5

Output
YES
4
1 1
2 2
3 3
4 4
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    if sum(a) != 0:
        print(""YES"")
        print(1)
        print(1, n)
    else:
        for i in range(n):
            if a[i] != 0:
                print(""YES"")
                print(2)
                print(1, i+1)
                print(i+2, n)
                return
        print(""NO"")

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    if sum(a) != 0:
        print(""YES"")
        print(1)
        print(1, n)
    else:
        for i in range(1, n-1):
            if a[i] != 0:
                print(""YES"")
                print(2)
                print(1, i+1)
                print(i+2, n)
                return
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    if sum(a) != 0:
        print(""YES"")
        print(1)
        print(1, n)
    else:
        for i in range(1, n):
            if sum(a[:i]) != 0:
                print(""YES"")
                print(2)
                print(1, i)
                print(i+1, n)
                return
        print(""NO"")

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    if sum(a) != 0:
        print(""YES"")
        print(1)
        print(1, n)
    else:
        if a.count(0) == n:
            print(""NO"")
        else:
            print(""YES"")
            print(2)
            print(1, a.index(0) + 1)
            print(a.index(0) + 2, n)

solve()","60.0","53.333333333333336","60.0","53.333333333333336","","","",""
"APPS/211","
QUESTION:
Manao is taking part in a quiz. The quiz consists of n consecutive questions. A correct answer gives one point to the player. The game also has a counter of consecutive correct answers. When the player answers a question correctly, the number on this counter increases by 1. If the player answers a question incorrectly, the counter is reset, that is, the number on it reduces to 0. If after an answer the counter reaches the number k, then it is reset, and the player's score is doubled. Note that in this case, first 1 point is added to the player's score, and then the total score is doubled. At the beginning of the game, both the player's score and the counter of consecutive correct answers are set to zero.

Manao remembers that he has answered exactly m questions correctly. But he does not remember the order in which the questions came. He's trying to figure out what his minimum score may be. Help him and compute the remainder of the corresponding number after division by 1000000009 (10^9 + 9).


-----Input-----

The single line contains three space-separated integers n, m and k (2 ≤ k ≤ n ≤ 10^9; 0 ≤ m ≤ n).


-----Output-----

Print a single integer — the remainder from division of Manao's minimum possible score in the quiz by 1000000009 (10^9 + 9).


-----Examples-----
Input
5 3 2

Output
3

Input
5 4 2

Output
6



-----Note-----

Sample 1. Manao answered 3 questions out of 5, and his score would double for each two consecutive correct answers. If Manao had answered the first, third and fifth questions, he would have scored as much as 3 points.

Sample 2. Now Manao answered 4 questions. The minimum possible score is obtained when the only wrong answer is to the question 4.

Also note that you are asked to minimize the score and not the remainder of the score modulo 1000000009. For example, if Manao could obtain either 2000000000 or 2000000020 points, the answer is 2000000000 mod 1000000009, even though 2000000020 mod 1000000009 is a smaller number.
Use user-input-Based format and function signature solve()","
def solve():
    n, m, k = map(int, input().split())
    remaining_questions = n - m
    min_score = min(m, remaining_questions // (k - 1) * k + remaining_questions % (k - 1))
    print(min_score % 1000000009)

solve()
","
def solve():
    n, m, k = map(int, input().split())
    max_double_sets = (n - k) // (k - 1)
    remaining_questions = n - m
    if remaining_questions <= max_double_sets * (k - 1):
        print(m)
    else:
        remaining_doubles = max_double_sets + (remaining_questions - max_double_sets * (k - 1) + k - 2) // (k - 1)
        score = ((pow(2, remaining_doubles, 1000000009) * m) % 1000000009)
        print(score)

solve()
","
def solve():
    mod = 1000000009
    n, m, k = map(int, input().split())
    maxConsecutive = n // k
    remainingCorrect = m - maxConsecutive
    minimumScore = (k * remainingCorrect) + max(0, (remainingCorrect // (k - 1)) * k)
    print(minimumScore % mod)

solve()
","
def solve():
    n, m, k = map(int, input().split())
    ans = m
    if n >= k:
        x = min(m, n//k)
        ans -= x * (k-1) * x // 2
        m -= x
        if m > 0:
            ans -= m
    print(ans % 1000000009)

solve()
","26.666666666666668","33.33333333333333","6.666666666666667","13.333333333333334","","","",""
"APPS/212","
QUESTION:
You are given a non-negative integer n, its decimal representation consists of at most 100 digits and doesn't contain leading zeroes.

Your task is to determine if it is possible in this case to remove some of the digits (possibly not remove any digit at all) so that the result contains at least one digit, forms a non-negative integer, doesn't have leading zeroes and is divisible by 8. After the removing, it is forbidden to rearrange the digits.

If a solution exists, you should print it.


-----Input-----

The single line of the input contains a non-negative integer n. The representation of number n doesn't contain any leading zeroes and its length doesn't exceed 100 digits. 


-----Output-----

Print ""NO"" (without quotes), if there is no such way to remove some digits from number n. 

Otherwise, print ""YES"" in the first line and the resulting number after removing digits from number n in the second line. The printed number must be divisible by 8.

If there are multiple possible answers, you may print any of them.


-----Examples-----
Input
3454

Output
YES
344

Input
10

Output
YES
0

Input
111111

Output
NO
Use user-input-Based format and function signature solve()","
def solve():
    n = input().strip()
    
    if len(n) <= 2:
        if int(n) % 8 == 0:
            print(""YES"")
            print(n)
        elif int(n[::-1]) % 8 == 0:
            print(""YES"")
            print(n[::-1])
        else:
            print(""NO"")
    else:
        for i in range(len(n)):
            for j in range(i+1, len(n)):
                for k in range(j+1, len(n)):
                    num = int(n[:i] + n[j] + n[k])
                    if num % 8 == 0:
                        print(""YES"")
                        print(num)
                        return
        print(""NO"")

solve()
","
def solve():
    n = input().strip()
    
    if len(n) <= 2:
        if int(n) % 8 == 0:
            print(""YES"")
            print(n)
        elif int(n[::-1]) % 8 == 0:
            print(""YES"")
            print(n[::-1])
        else:
            print(""NO"")
    else:
        for i in range(len(n)):
            for j in range(i+1, len(n)):
                for k in range(j+1, len(n)):
                    num = int(n[:i] + n[j] + n[k])
                    if num % 8 == 0:
                        print(""YES"")
                        print(num)
                        return
        print(""NO"")

solve()
","
def solve():
    n = input().strip()
    if len(n) <= 2:
        if int(n) % 8 == 0:
            print(""YES"")
            print(n)
        else:
            print(""NO"")
    else:
        for i in range(len(n)):
            for j in range(i+1, len(n)):
                for k in range(j+1, len(n)):
                    num = int(n[:i] + n[i+1:j] + n[j+1:k] + n[k+1:])
                    if num % 8 == 0:
                        print(""YES"")
                        print(num)
                        return
        print(""NO"")
        
solve()
","
def solve():
    n = input()
    for i in range(0, 1000, 8):
        if len(set(str(i)) <= set(n) <= str(i)):
            print(""YES"")
            print(str(i))
            return
    print(""NO"")

solve()","53.333333333333336","53.333333333333336","46.666666666666664","0.0","","","",""
"APPS/213","
QUESTION:
In a building where Polycarp lives there are equal number of flats on each floor. Unfortunately, Polycarp don't remember how many flats are on each floor, but he remembers that the flats are numbered from 1 from lower to upper floors. That is, the first several flats are on the first floor, the next several flats are on the second and so on. Polycarp don't remember the total number of flats in the building, so you can consider the building to be infinitely high (i.e. there are infinitely many floors). Note that the floors are numbered from 1.

Polycarp remembers on which floors several flats are located. It is guaranteed that this information is not self-contradictory. It means that there exists a building with equal number of flats on each floor so that the flats from Polycarp's memory have the floors Polycarp remembers.

Given this information, is it possible to restore the exact floor for flat n? 


-----Input-----

The first line contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 100), where n is the number of the flat you need to restore floor for, and m is the number of flats in Polycarp's memory.

m lines follow, describing the Polycarp's memory: each of these lines contains a pair of integers k_{i}, f_{i} (1 ≤ k_{i} ≤ 100, 1 ≤ f_{i} ≤ 100), which means that the flat k_{i} is on the f_{i}-th floor. All values k_{i} are distinct.

It is guaranteed that the given information is not self-contradictory.


-----Output-----

Print the number of the floor in which the n-th flat is located, if it is possible to determine it in a unique way. Print -1 if it is not possible to uniquely restore this floor.


-----Examples-----
Input
10 3
6 2
2 1
7 3

Output
4

Input
8 4
3 1
6 2
5 2
2 1

Output
-1



-----Note-----

In the first example the 6-th flat is on the 2-nd floor, while the 7-th flat is on the 3-rd, so, the 6-th flat is the last on its floor and there are 3 flats on each floor. Thus, the 10-th flat is on the 4-th floor.

In the second example there can be 3 or 4 flats on each floor, so we can't restore the floor for the 8-th flat.
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    flats = {}
    for _ in range(m):
        k, f = map(int, input().split())
        flats[k] = f

    possible_floors = set()
    for k, f in flats.items():
        possible_floors.add((k - 1) // f)

    if len(possible_floors) == 1:
        floor = list(possible_floors)[0]
        print((n - 1) // floor + 1)
    else:
        print(-1)

solve()
","
def solve():
    n, m = map(int, input().split())
    flats = {}
    
    for _ in range(m):
        k, f = map(int, input().split())
        flats[k] = f
        
    floors = set(flats.values())
    
    possible_floors = []
    for floor in floors:
        possible = True
        for key, value in flats.items():
            if (key - 1) // ((n - 1) // (value - 1)) != (n - 1) // (value - 1):
                possible = False
                break
        if possible:
            possible_floors.append(floor)
    
    if len(possible_floors) == 1:
        print(possible_floors[0])
    else:
        print(-1)
  
solve()","
def solve():
    n, m = map(int, input().split())
    memories = [tuple(map(int, input().split())) for _ in range(m)]
    
    possible_floors = set()
    
    for k, f in memories:
        possible_floors.add((k-1) // f)
    
    if len(possible_floors) == 1:
        print(next(iter(possible_floors)) + 1)
    else:
        print(-1)

solve()
","
def solve():
    n, m = map(int, input().split())
    memory = {}
    
    for _ in range(m):
        k, f = map(int, input().split())
        memory[k] = f
    
    floors = set(memory.values())
    
    possible_floors = set()
    for f in floors:
        remaining_flats = [k for k, v in memory.items() if v == f]
        possible_floor = (n - 1) // len(remaining_flats) + 1
        
        if all((n - 1) // possible_floor == (k - 1) // possible_floor for k in remaining_flats):
            possible_floors.add(possible_floor)
    
    if len(possible_floors) == 1:
        print(possible_floors.pop())
    else:
        print(-1)
  
solve()","20.0","6.666666666666667","33.33333333333333","40.0","","","",""
"APPS/214","
QUESTION:
Bishwock is a chess figure that consists of three squares resembling an ""L-bar"". This figure can be rotated by 90, 180 and 270 degrees so it can have four possible states:

 

XX   XX   .X   X.

X.   .X   XX   XX

 

Bishwocks don't attack any squares and can even occupy on the adjacent squares as long as they don't occupy the same square. 

Vasya has a board with $2\times n$ squares onto which he wants to put some bishwocks. To his dismay, several squares on this board are already occupied by pawns and Vasya can't put bishwocks there. However, pawns also don't attack bishwocks and they can occupy adjacent squares peacefully.

Knowing the positions of pawns on the board, help Vasya to determine the maximum amount of bishwocks he can put onto the board so that they wouldn't occupy the same squares and wouldn't occupy squares with pawns.


-----Input-----

The input contains two nonempty strings that describe Vasya's board. Those strings contain only symbols ""0"" (zero) that denote the empty squares and symbols ""X"" (uppercase English letter) that denote the squares occupied by pawns. Strings are nonempty and are of the same length that does not exceed $100$.


-----Output-----

Output a single integer — the maximum amount of bishwocks that can be placed onto the given board.


-----Examples-----
Input
00
00

Output
1
Input
00X00X0XXX0
0XXX0X00X00

Output
4
Input
0X0X0
0X0X0

Output
0
Input
0XXX0
00000

Output
2
Use user-input-Based format and function signature solve()","
def solve():
    board1 = input().strip()
    board2 = input().strip()
    
    n = len(board1)
    bishwocks = 0
    
    for i in range(n):
        if board1[i] == '0' and board2[i] == '0':
            bishwocks += 1
        elif i < n-1 and board1[i] == '0' and board1[i+1] == '0':
            i += 1
    
    return bishwocks

solve()","
def solve():
    board1 = input().rstrip()
    board2 = input().rstrip()
    n = len(board1)
    
    bishwocks = 0
    
    for i in range(n):
        if i == n - 1:
            if board1[i] == ""0"" and board2[i] == ""0"":
                bishwocks += 1
        else:
            if board1[i] == ""0"" and board2[i] == ""0"" and board1[i+1] == ""0"" and board2[i+1] == ""0"":
                bishwocks += 1
                i += 1
    
    return bishwocks

solve()","
def solve():
    board1 = input()
    board2 = input()
    
    n = len(board1)
    max_bishwocks = 0
    
    for i in range(n-1):
        if board1[i] == '0' and board2[i] == '0' and board1[i+1] == '0' and board2[i+1] == '0':
            max_bishwocks += 1
    
    return max_bishwocks

solve()","
def solve():
    import itertools

    def bishwock_positions():
        return [[(0, 1), (0, 2)], [(1, 0), (2, 0)], [(1, 0), (2, 0)], [(0, 1), (0, 2)]]

    def is_valid(x, y, board):
        n = len(board[0])
        m = len(board)
        return 0 <= x < n and 0 <= y < m and board[y][x] == '0'

    def place_bishwock(x, y, board, is_place=True):
        positions = bishwock_positions()
        for position in positions:
            valid = True
            for dx, dy in position:
                if not is_valid(x + dx, y + dy, board):
                    valid = False
                    break
            if valid and is_place:
                for dx, dy in position:
                    board[y + dy] = board[y + dy][:x + dx] + 'X' + board[y + dy][x + dx + 1:]
        return valid

    def count_bishwocks(board):
        n = len(board[0])
        m = len(board)
        bishwock_count = 0
        for x, y in itertools.product(range(n), range(m)):
            if place_bishwock(x, y, board):
                bishwock_count += 1
        return bishwock_count

    board = []
    while True:
        try:
            line = input()
            board.append(line)
        except EOFError:
            break

    print(count_bishwocks(board))

solve()
    ","0.0","0.0","0.0","46.666666666666664","","","",""
"APPS/215","
QUESTION:
Polycarp loves lowercase letters and dislikes uppercase ones. Once he got a string s consisting only of lowercase and uppercase Latin letters.

Let A be a set of positions in the string. Let's call it pretty if following conditions are met:  letters on positions from A in the string are all distinct and lowercase;  there are no uppercase letters in the string which are situated between positions from A (i.e. there is no such j that s[j] is an uppercase letter, and a_1 < j < a_2 for some a_1 and a_2 from A). 

Write a program that will determine the maximum number of elements in a pretty set of positions.


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 200) — length of string s.

The second line contains a string s consisting of lowercase and uppercase Latin letters.


-----Output-----

Print maximum number of elements in pretty set of positions for string s.


-----Examples-----
Input
11
aaaaBaabAbA

Output
2

Input
12
zACaAbbaazzC

Output
3

Input
3
ABC

Output
0



-----Note-----

In the first example the desired positions might be 6 and 8 or 7 and 8. Positions 6 and 7 contain letters 'a', position 8 contains letter 'b'. The pair of positions 1 and 8 is not suitable because there is an uppercase letter 'B' between these position.

In the second example desired positions can be 7, 8 and 11. There are other ways to choose pretty set consisting of three elements.

In the third example the given string s does not contain any lowercase letters, so the answer is 0.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    s = input()
    
    max_pretty_set = 0
    for i in range(n):
        for j in range(i, n):
            pretty_set = set()
            valid = True
            for k in range(i, j+1):
                if s[k].isupper():
                    valid = False
                    break
                pretty_set.add(s[k])
            if valid:
                max_pretty_set = max(max_pretty_set, len(pretty_set))
    
    print(max_pretty_set)

solve()
","
def solve():
    import string

    n = int(input())
    s = input()

    max_pretty_set = 0

    for i in range(n):
        for j in range(i, n):
            pretty_set = set()
            has_uppercase = False

            for k in range(i, j+1):
                if s[k] in string.ascii_uppercase:
                    has_uppercase = True
                    break
                pretty_set.add(s[k])

            if not has_uppercase:
                max_pretty_set = max(max_pretty_set, len(pretty_set))

    print(max_pretty_set)

solve()
","
def solve():
    n = int(input())
    s = input()
    
    max_elements = 0
    
    for i in range(len(s)):
        for j in range(i+1, len(s)+1):
            subset = set(s[i:j])
            if all(letter.islower() for letter in subset) and all(letter.islower() or letter.isupper() for letter in s[:i] + s[j:]):
                max_elements = max(max_elements, len(subset))
    
    print(max_elements)

solve()
","
def solve():
    n = int(input())
    s = input()
    
    pretty_set = 0
    for i in range(n):
        lowercase_letters = set()
        max_pretty_set = 0
        for j in range(i, n):
            if s[j].islower():
                if s[j] not in lowercase_letters:
                    lowercase_letters.add(s[j])
                    max_pretty_set = max(max_pretty_set, len(lowercase_letters))
                else:
                    break
            else:
                break
        pretty_set = max(pretty_set, max_pretty_set)
    
    print(pretty_set)

solve()
","100.0","100.0","100.0","80.0","","","",""
"APPS/216","
QUESTION:
You are given a sequence a consisting of n integers. You may partition this sequence into two sequences b and c in such a way that every element belongs exactly to one of these sequences. 

Let B be the sum of elements belonging to b, and C be the sum of elements belonging to c (if some of these sequences is empty, then its sum is 0). What is the maximum possible value of B - C?


-----Input-----

The first line contains one integer n (1 ≤ n ≤ 100) — the number of elements in a.

The second line contains n integers a_1, a_2, ..., a_{n} ( - 100 ≤ a_{i} ≤ 100) — the elements of sequence a.


-----Output-----

Print the maximum possible value of B - C, where B is the sum of elements of sequence b, and C is the sum of elements of sequence c.


-----Examples-----
Input
3
1 -2 0

Output
3

Input
6
16 23 16 15 42 8

Output
120



-----Note-----

In the first example we may choose b = {1, 0}, c = { - 2}. Then B = 1, C =  - 2, B - C = 3.

In the second example we choose b = {16, 23, 16, 15, 42, 8}, c = {} (an empty sequence). Then B = 120, C = 0, B - C = 120.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    a.sort(reverse=True)
    
    b = sum(a[i] for i in range(n) if i % 2 == 0)
    c = sum(a[i] for i in range(n) if i % 2 == 1)
    
    print(b - c)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    # Sort the input sequence a
    a.sort(reverse=True)
    
    # Initialize sum of b and c
    b = c = 0
    
    # Iterate through the sorted sequence and distribute elements to b and c alternatively
    for i in range(n):
        if i % 2 == 0:
            b += a[i]
        else:
            c += a[i]
    
    # Print the maximum possible value of B - C
    print(b - c)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    a.sort(reverse=True)
    
    max_sum = 0
    prefix_sum = 0
    
    for i in range(n):
        prefix_sum += a[i]
        max_sum = max(max_sum, prefix_sum)
    
    print(max_sum)

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    a.sort()

    if a[0] >= 0 or a[-1] <= 0:
        return sum(a)

    for i in range(n):
        if a[i] >= 0:
            return sum(a[i:]) - sum(a[:i])

# Call the function to execute
solve()
","6.666666666666667","6.666666666666667","6.666666666666667","0.0","","","",""
"APPS/217","
QUESTION:
A bus moves along the coordinate line Ox from the point x = 0 to the point x = a. After starting from the point x = 0, it reaches the point x = a, immediately turns back and then moves to the point x = 0. After returning to the point x = 0 it immediately goes back to the point x = a and so on. Thus, the bus moves from x = 0 to x = a and back. Moving from the point x = 0 to x = a or from the point x = a to x = 0 is called a bus journey. In total, the bus must make k journeys.

The petrol tank of the bus can hold b liters of gasoline. To pass a single unit of distance the bus needs to spend exactly one liter of gasoline. The bus starts its first journey with a full petrol tank.

There is a gas station in point x = f. This point is between points x = 0 and x = a. There are no other gas stations on the bus route. While passing by a gas station in either direction the bus can stop and completely refuel its tank. Thus, after stopping to refuel the tank will contain b liters of gasoline.

What is the minimum number of times the bus needs to refuel at the point x = f to make k journeys? The first journey starts in the point x = 0.


-----Input-----

The first line contains four integers a, b, f, k (0 < f < a ≤ 10^6, 1 ≤ b ≤ 10^9, 1 ≤ k ≤ 10^4) — the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.


-----Output-----

Print the minimum number of times the bus needs to refuel to make k journeys. If it is impossible for the bus to make k journeys, print -1.


-----Examples-----
Input
6 9 2 4

Output
4

Input
6 10 2 4

Output
2

Input
6 5 4 3

Output
-1



-----Note-----

In the first example the bus needs to refuel during each journey.

In the second example the bus can pass 10 units of distance without refueling. So the bus makes the whole first journey, passes 4 units of the distance of the second journey and arrives at the point with the gas station. Then it can refuel its tank, finish the second journey and pass 2 units of distance from the third journey. In this case, it will again arrive at the point with the gas station. Further, he can refill the tank up to 10 liters to finish the third journey and ride all the way of the fourth journey. At the end of the journey the tank will be empty. 

In the third example the bus can not make all 3 journeys because if it refuels during the second journey, the tanks will contain only 5 liters of gasoline, but the bus needs to pass 8 units of distance until next refueling.
Use user-input-Based format and function signature solve()","
def solve():
    a, b, f, k = map(int, input().split())
    
    if b < f or b < a - f:
        print(-1)
        return
    
    refuels = 0
    for i in range(k):
        if i % 2 == 0:
            if b < (a - f) * (k - i) + f * (k - i - 1):
                refuels += 1
                b = b + b
        else:
            if b < f * (k - i) + (a - f) * (k - i - 1):
                refuels += 1
                b = b + b
    
    print(refuels)

solve()
","
def solve():
    a, b, f, k = map(int, input().split())
    
    total_journey_distance = a * k
    total_refills = 0
    
    if b < f or b < a - f:
        print(-1)
        return
    
    for i in range(k):
        if i == 0:
            remaining_distance = a - f
        elif i % 2 == 1:
            remaining_distance = 2 * f
        else:
            remaining_distance = 2 * (a - f)
        
        if remaining_distance > b:
            total_refills += 1
            b = b - remaining_distance + f
            if b < 0:
                print(-1)
                return
    
    print(total_refills)

solve()
","
def solve():
    a, b, f, k = map(int, input().split())
    
    total_distance = a * 2
    fuel_needed_each_distance = 1
    refuel_distance = f
    refuel_counter = 0
    
    if b < f or b < a - f:
        print(-1)
        return

    for i in range(k):
        if i % 2 == 0:
            if b < a - f:
                b = b - (a - f) + f
                refuel_counter += 1
            b -= a
            if b < 0:
                print(-1)
                return
        else:
            if b < f:
                b = b - f + a
                refuel_counter += 1
            b -= a
            if b < 0:
                print(-1)
                return

    print(refuel_counter)

solve()
","
def solve():
    a, b, f, k = map(int, input().split())
    
    total_journey = k * 2
    distance = [f, a - f] * k
    min_refuel = 0

    for i in range(total_journey):
        if i % 2 == 0:  # Going to 'a'
            if distance[i] > b:
                min_refuel += 1
                distance[i] = a - f
            b -= distance[i]
            if b < 0:
                print(-1)
                return -1
        else:  # Going back to '0'
            if distance[i] > b:
                min_refuel += 1
                distance[i] = f
            b -= distance[i]
            if b < 0:
                print(-1)
                return -1

    print(min_refuel)

solve()
","26.666666666666668","26.666666666666668","40.0","40.0","","","",""
"APPS/218","
QUESTION:
You are given the string s of length n and the numbers p, q. Split the string s to pieces of length p and q.

For example, the string ""Hello"" for p = 2, q = 3 can be split to the two strings ""Hel"" and ""lo"" or to the two strings ""He"" and ""llo"".

Note it is allowed to split the string s to the strings only of length p or to the strings only of length q (see the second sample test).


-----Input-----

The first line contains three positive integers n, p, q (1 ≤ p, q ≤ n ≤ 100).

The second line contains the string s consists of lowercase and uppercase latin letters and digits.


-----Output-----

If it's impossible to split the string s to the strings of length p and q print the only number ""-1"".

Otherwise in the first line print integer k — the number of strings in partition of s.

Each of the next k lines should contain the strings in partition. Each string should be of the length p or q. The string should be in order of their appearing in string s — from left to right.

If there are several solutions print any of them.


-----Examples-----
Input
5 2 3
Hello

Output
2
He
llo

Input
10 9 5
Codeforces

Output
2
Codef
orces

Input
6 4 5
Privet

Output
-1

Input
8 1 1
abacabac

Output
8
a
b
a
c
a
b
a
c
Use user-input-Based format and function signature solve()","
def solve():
    n, p, q = map(int, input().split())
    s = input().strip()
    
    for i in range(n // p + 1):
        remaining = n - i * p
        if remaining % q == 0:
            j = remaining // q
            print(i + j)
            idx = 0
            for _ in range(i):
                print(s[idx:idx+p])
                idx += p
            for _ in range(j):
                print(s[idx:idx+q])
                idx += q
            return
    print(-1)

solve()
","
def solve():
    n, p, q = map(int, input().split())
    s = input()
    
    for i in range(n // p + 1):
        remaining_len = n - i * p
        if remaining_len % q == 0:
            j = remaining_len // q
            print(i + j)
            start_idx = 0
            for _ in range(i):
                print(s[start_idx:start_idx + p])
                start_idx += p
            for _ in range(j):
                print(s[start_idx:start_idx + q])
                start_idx += q
            break
    else:
        print(-1)

solve()
","
def solve():
    n, p, q = map(int, input().split())
    s = input().strip()
    
    for i in range(n//p + 1):
        remaining = s[i*p:]
        if len(remaining) % q == 0:
            j = len(remaining) // q
            print(i + j)
            for k in range(i):
                print(remaining[:p])
                remaining = remaining[p:]
            for k in range(j):
                print(remaining[:q])
                remaining = remaining[q:]
            return
    print(-1)

solve()
","
def solve():
    n, p, q = map(int, input().split())
    s = input()
    
    for i in range(n // p + 1):
        rem = n - i * p
        if rem % q == 0:
            j = rem // q
            print(i + j)
            idx = 0
            for _ in range(i):
                print(s[idx:idx+p])
                idx += p
            for _ in range(j):
                print(s[idx:idx+q])
                idx += q
            return
    print(-1)

solve()","100.0","100.0","66.66666666666666","100.0","","","",""
"APPS/219","
QUESTION:
A sportsman starts from point x_{start} = 0 and runs to point with coordinate x_{finish} = m (on a straight line). Also, the sportsman can jump — to jump, he should first take a run of length of not less than s meters (in this case for these s meters his path should have no obstacles), and after that he can jump over a length of not more than d meters. Running and jumping is permitted only in the direction from left to right. He can start andfinish a jump only at the points with integer coordinates in which there are no obstacles. To overcome some obstacle, it is necessary to land at a point which is strictly to the right of this obstacle.

On the way of an athlete are n obstacles at coordinates x_1, x_2, ..., x_{n}. He cannot go over the obstacles, he can only jump over them. Your task is to determine whether the athlete will be able to get to the finish point.


-----Input-----

The first line of the input containsd four integers n, m, s and d (1 ≤ n ≤ 200 000, 2 ≤ m ≤ 10^9, 1 ≤ s, d ≤ 10^9) — the number of obstacles on the runner's way, the coordinate of the finishing point, the length of running before the jump and the maximum length of the jump, correspondingly.

The second line contains a sequence of n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ m - 1) — the coordinates of the obstacles. It is guaranteed that the starting and finishing point have no obstacles, also no point can have more than one obstacle, The coordinates of the obstacles are given in an arbitrary order.


-----Output-----

If the runner cannot reach the finishing point, print in the first line of the output ""IMPOSSIBLE"" (without the quotes).

If the athlete can get from start to finish, print any way to do this in the following format:  print a line of form ""RUN X>"" (where ""X"" should be a positive integer), if the athlete should run for ""X"" more meters;  print a line of form ""JUMP Y"" (where ""Y"" should be a positive integer), if the sportsman starts a jump and should remain in air for ""Y"" more meters. 

All commands ""RUN"" and ""JUMP"" should strictly alternate, starting with ""RUN"", besides, they should be printed chronologically. It is not allowed to jump over the finishing point but it is allowed to land there after a jump. The athlete should stop as soon as he reaches finish.


-----Examples-----
Input
3 10 1 3
3 4 7

Output
RUN 2
JUMP 3
RUN 1
JUMP 2
RUN 2

Input
2 9 2 3
6 4

Output
IMPOSSIBLE
Use user-input-Based format and function signature solve()","
def solve():
    n, m, s, d = map(int, input().split())
    obstacles = list(map(int, input().split()))
    
    obstacles.sort()
    
    current_pos = 0
    for obstacle in obstacles:
        if obstacle - current_pos <= s:
            print(""IMPOSSIBLE"")
            return
        print(f""RUN {obstacle - current_pos - 1}"")
        print(f""JUMP {min(d, obstacle - current_pos - 1)}"")
        current_pos = obstacle + 1
    
    if m - current_pos > s:
        print(f""RUN {m - current_pos}"")
    
solve()
","
from typing import List

def solve(n: int, m: int, s: int, d: int, obstacles: List[int]) -> None:
    def jump(start, end, d):
        return ""JUMP "" + str(min(end - start, d))

    def run(start, end):
        return ""RUN "" + str(end - start)

    obstacles.sort()
    start = 0
    end = 0
    for obstacle in obstacles:
        if obstacle - end <= s:
            print(""IMPOSSIBLE"")
            return
        print(run(start, obstacle))
        print(jump(obstacle, obstacle, d))
        start = obstacle
        end = obstacle

    if m - end <= s:
        print(""IMPOSSIBLE"")
        return

    print(run(start, m))

# Example usage
solve(3, 10, 1, 3, [3, 4, 7])
solve(2, 9, 2, 3, [6, 4])

solve()","
from typing import List

def solve(n: int, m: int, s: int, d: int, obstacles: List[int]) -> None:
    curr_pos = 0

    for obs in sorted(obstacles):
        run_dist = obs - curr_pos - 1
        jump_dist = min(obs - curr_pos - s, d)

        if run_dist < 0:
            print(""IMPOSSIBLE"")
            return
        
        if run_dist > 0:
            print(f""RUN {run_dist}"")
        if jump_dist > 0:
            print(f""JUMP {jump_dist}"")

        curr_pos = obs

    run_dist = m - curr_pos - 1
    if run_dist < 0:
        print(""IMPOSSIBLE"")
        return
    
    if run_dist > 0:
        print(f""RUN {run_dist}"")

# Example usage
solve(3, 10, 1, 3, [3, 4, 7])
solve(2, 9, 2, 3, [6, 4])

solve()","
def solve():
    n, m, s, d = map(int, input().split())
    obstacles = sorted(map(int, input().split()))
    
    jump_start = 0

    for obstacle in obstacles:
        if obstacle - jump_start <= s:
            print(""IMPOSSIBLE"")
            return
        run_dist = obstacle - jump_start - 1
        jump_dist = min(d, obstacle - jump_start - s - 1)
        
        print(f""RUN {run_dist}"")
        print(f""JUMP {jump_dist}"")
        
        jump_start = obstacle + 1
    
    if m - jump_start > s:
        run_dist = m - jump_start
        print(f""RUN {run_dist}"")

if __name__ == ""__main__"":
    solve()
","13.333333333333334","0.0","0.0","13.333333333333334","","","",""
"APPS/220","
QUESTION:
Two positive integers a and b have a sum of s and a bitwise XOR of x. How many possible values are there for the ordered pair (a, b)?


-----Input-----

The first line of the input contains two integers s and x (2 ≤ s ≤ 10^12, 0 ≤ x ≤ 10^12), the sum and bitwise xor of the pair of positive integers, respectively.


-----Output-----

Print a single integer, the number of solutions to the given conditions. If no solutions exist, print 0.


-----Examples-----
Input
9 5

Output
4

Input
3 3

Output
2

Input
5 2

Output
0



-----Note-----

In the first sample, we have the following solutions: (2, 7), (3, 6), (6, 3), (7, 2).

In the second sample, the only solutions are (1, 2) and (2, 1).
Use user-input-Based format and function signature solve()","
def solve():
    s, x = map(int, input().split())
    if (s - x) % 2 != 0 or s < x:
        print(0)
    else:
        a = (s - x) // 2
        b = s - a
        if a ^ b == x:
            print(2)
        else:
            print(1)

solve()
","
def solve():
    s, x = map(int, input().split())
    if (s - x) % 2 != 0 or s < x:
        print(0)
        return
    a = (s - x) // 2
    b = s - a
    count = 1
    for i in range(40):
        bit = 1 << i
        if a & bit and x & bit:
            count = 0
            break
        if not (a & bit) and not (x & bit):
            if (s & bit):
                count *= 2
    print(count)

solve()
  ","
def solve():
    s, x = map(int, input().split())
    if (s - x) % 2 != 0 or s < x:
        print(0)
        return
    ab = (s - x) // 2
    a = 0
    b = 0
    for i in range(40):
        if (x >> i) & 1:
            if not (ab >> i) & 1:
                a |= 1 << i
    b = a ^ x
    if a + b == s:
        print(2)
    else:
        print(0)

solve()
","
def solve():
    s, x = map(int, input().split())
    if (s - x) % 2 != 0 or s < x:
        print(0)
    else:
        a = (s - x) // 2
        b = s - a
        if a ^ b == x:
            print(2)
        else:
            print(1)

solve()
","20.0","20.0","20.0","20.0","","","",""
"APPS/221","
QUESTION:
Long story short, shashlik is Miroslav's favorite food. Shashlik is prepared on several skewers simultaneously. There are two states for each skewer: initial and turned over.

This time Miroslav laid out $n$ skewers parallel to each other, and enumerated them with consecutive integers from $1$ to $n$ in order from left to right. For better cooking, he puts them quite close to each other, so when he turns skewer number $i$, it leads to turning $k$ closest skewers from each side of the skewer $i$, that is, skewers number $i - k$, $i - k + 1$, ..., $i - 1$, $i + 1$, ..., $i + k - 1$, $i + k$ (if they exist). 

For example, let $n = 6$ and $k = 1$. When Miroslav turns skewer number $3$, then skewers with numbers $2$, $3$, and $4$ will come up turned over. If after that he turns skewer number $1$, then skewers number $1$, $3$, and $4$ will be turned over, while skewer number $2$ will be in the initial position (because it is turned again).

As we said before, the art of cooking requires perfect timing, so Miroslav wants to turn over all $n$ skewers with the minimal possible number of actions. For example, for the above example $n = 6$ and $k = 1$, two turnings are sufficient: he can turn over skewers number $2$ and $5$.

Help Miroslav turn over all $n$ skewers.


-----Input-----

The first line contains two integers $n$ and $k$ ($1 \leq n \leq 1000$, $0 \leq k \leq 1000$) — the number of skewers and the number of skewers from each side that are turned in one step.


-----Output-----

The first line should contain integer $l$ — the minimum number of actions needed by Miroslav to turn over all $n$ skewers. After than print $l$ integers from $1$ to $n$ denoting the number of the skewer that is to be turned over at the corresponding step.


-----Examples-----
Input
7 2

Output
2
1 6 

Input
5 1

Output
2
1 4 



-----Note-----

In the first example the first operation turns over skewers $1$, $2$ and $3$, the second operation turns over skewers $4$, $5$, $6$ and $7$.

In the second example it is also correct to turn over skewers $2$ and $5$, but turning skewers $2$ and $4$, or $1$ and $5$ are incorrect solutions because the skewer $3$ is in the initial state after these operations.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    actions = []
    
    if k == 0:
        print(1)
        print(n // 2 + 1)
    else:
        turns = (n + 2*k - 1) // (2*k)
        print(turns)
        
        for i in range(1, turns+1):
            action = min(n, i*k + 1)
            actions.append(action)
        
        print(*actions)

solve()","
def solve():
    n, k = map(int, input().split())
    actions = []
    
    if k == 0:
        actions.append(n)
    else:
        num_actions = (n + 2 * k - 1) // (2 * k)
        
        for i in range(1, num_actions + 1):
            action = min(i * 2 * k, n)
            actions.append(action)
    
    print(len(actions))
    print(' '.join(map(str, actions)))

solve()","
def solve():
    n, k = map(int, input().split())
    if k == 0:
        print(1)
        print(n//2 + 1)
    else:
        if n % (2*k + 1) == 0:
            print(n//(2*k + 1))
            for i in range(k+1, n+1, 2*k + 1):
                print(i, end=' ')
        elif n % (2*k + 1) <= k:
            print(n//(2*k + 1) + 1)
            for i in range(k+1, n, 2*k + 1):
                print(i, end=' ')
            print(n)
        else:
            print(n//(2*k + 1) + 1)
            for i in range(k+1, n-k+1, 2*k + 1):
                print(i, end=' ')
            print(n)

solve()","
def solve():
    n, k = map(int, input().split())
    l = -(-(n * 2) // (2 * k + 1))  # Calculate the minimum number of actions needed
    print(l)
    
    step = 0
    for i in range(k + 1, n + 1, 2 * k + 1):
        step += 1
        print(i, end=' ')

# Entry point
solve()
","33.33333333333333","33.33333333333333","40.0","0.0","","","",""
"APPS/222","
QUESTION:
You are given a positive integer $n$, written without leading zeroes (for example, the number 04 is incorrect). 

In one operation you can delete any digit of the given integer so that the result remains a positive integer without leading zeros.

Determine the minimum number of operations that you need to consistently apply to the given integer $n$ to make from it the square of some positive integer or report that it is impossible.

An integer $x$ is the square of some positive integer if and only if $x=y^2$ for some positive integer $y$.


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 2 \cdot 10^{9}$). The number is given without leading zeroes.


-----Output-----

If it is impossible to make the square of some positive integer from $n$, print -1. In the other case, print the minimal number of operations required to do it.


-----Examples-----
Input
8314

Output
2

Input
625

Output
0

Input
333

Output
-1



-----Note-----

In the first example we should delete from $8314$ the digits $3$ and $4$. After that $8314$ become equals to $81$, which is the square of the integer $9$.

In the second example the given $625$ is the square of the integer $25$, so you should not delete anything. 

In the third example it is impossible to make the square from $333$, so the answer is -1.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    n_str = str(n)
    
    if int(n_str) ** 0.5 == int(n_str) ** 0.5 // 1:
        return 0
    
    for i in range(len(n_str)):
        new_n_str = n_str[:i] + n_str[i+1:]
        if int(new_n_str) ** 0.5 == int(new_n_str) ** 0.5 // 1:
            return len(n_str) - len(new_n_str)
    
    return -1

solve()","
def solve():
    n = int(input())
    
    def is_square(k):
        sqrt_k = int(k ** 0.5)
        return sqrt_k ** 2 == k

    if is_square(n):
        print(0)
    else:
        n_str = str(n)
        min_ops = float('inf')
        for i in range(len(n_str)):
            m = n_str[:i] + n_str[i+1:]
            if m[0] != '0' and is_square(int(m)):
                min_ops = min(min_ops, len(n_str) - len(m))
        if min_ops == float('inf'):
            print(-1)
        else:
            print(min_ops)

solve()
  ","
def solve():
    import math

    n = int(input())
    n_str = str(n)
    n_len = len(n_str)

    def square_possible(n):
        sqrt_n = int(math.sqrt(n))
        return sqrt_n * sqrt_n == n

    min_operations = float('inf')
    for bitmask in range(1, 1 << n_len):
        deleted = []
        for i in range(n_len):
            if bitmask & (1 << i):
                deleted.append(i)

        m_str = ''.join([n_str[i] for i in range(n_len) if i not in deleted])
        if m_str[0] != '0' and square_possible(int(m_str)):
            min_operations = min(min_operations, n_len - len(m_str))

    return min_operations if min_operations != float('inf') else -1

# Example usage:
print(solve())

solve()","
def solve():
    import math

    n = int(input())
    num_str = str(n)
    num_length = len(num_str)

    if num_length == 1:
        if n == 1 or n == 4 or n == 9:
            print(0)
        else:
            print(-1)
    else:
        possible_squares = [i**2 for i in range(1, int(math.sqrt(n))+1)]
        min_operations = num_length

        for sqr in possible_squares:
            sqr_str = str(sqr)
            i, j = 0, 0
            
            while i < num_length and j < len(sqr_str):
                if num_str[i] == sqr_str[j]:
                    i += 1
                j += 1
            
            min_operations = min(min_operations, num_length - i + len(sqr_str) - j)
        
        if min_operations == num_length:
            print(-1)
        else:
            print(min_operations)

solve()
","0.0","53.333333333333336","0.0","60.0","","","",""
"APPS/223","
QUESTION:
Let's define a function $f(p)$ on a permutation $p$ as follows. Let $g_i$ be the greatest common divisor (GCD) of elements $p_1$, $p_2$, ..., $p_i$ (in other words, it is the GCD of the prefix of length $i$). Then $f(p)$ is the number of distinct elements among $g_1$, $g_2$, ..., $g_n$.

Let $f_{max}(n)$ be the maximum value of $f(p)$ among all permutations $p$ of integers $1$, $2$, ..., $n$.

Given an integers $n$, count the number of permutations $p$ of integers $1$, $2$, ..., $n$, such that $f(p)$ is equal to $f_{max}(n)$. Since the answer may be large, print the remainder of its division by $1000\,000\,007 = 10^9 + 7$.


-----Input-----

The only line contains the integer $n$ ($2 \le n \le 10^6$) — the length of the permutations.


-----Output-----

The only line should contain your answer modulo $10^9+7$.


-----Examples-----
Input
2

Output
1
Input
3

Output
4
Input
6

Output
120


-----Note-----

Consider the second example: these are the permutations of length $3$:  $[1,2,3]$, $f(p)=1$.  $[1,3,2]$, $f(p)=1$.  $[2,1,3]$, $f(p)=2$.  $[2,3,1]$, $f(p)=2$.  $[3,1,2]$, $f(p)=2$.  $[3,2,1]$, $f(p)=2$. 

The maximum value $f_{max}(3) = 2$, and there are $4$ permutations $p$ such that $f(p)=2$.
Use user-input-Based format and function signature solve()","
from math import gcd

def solve():
    n = int(input())
    MOD = 10**9 + 7

    def factorial(n):
        result = 1
        for i in range(1, n+1):
            result = (result * i) % MOD
        return result

    def count_permutations(n):
        result = 1
        for i in range(2, n+1):
            result = (result * i) % MOD
        return result

    def f_max(n):
        result = 1
        for i in range(2, n+1):
            result = (result * i) % MOD
        return result

    print((count_permutations(n) - f_max(n)) % MOD)

solve()
","
from math import gcd

def solve():
    mod = 10**9 + 7
    n = int(input())
    
    def count_permutations(n):
        fact = [1]
        for i in range(1, n+1):
            fact.append((fact[-1] * i) % mod)
        
        inv_fact = [pow(fact[-1], mod-2, mod)]
        for i in range(n, 0, -1):
            inv_fact.append((inv_fact[-1] * i) % mod)
        inv_fact.reverse()
        
        def binomial(n, k):
            return (fact[n] * inv_fact[k] * inv_fact[n-k]) % mod
        
        ans = 0
        for k in range(1, n+1):
            if n % k == 0:
                ans += pow(k, n//k-1, mod) * inv_fact[n//k-1]
                ans %= mod
        return (ans * inv_fact[n]) % mod
    
    result = count_permutations(n)
    print(result)

solve()
","
import math

def solve():
    MOD = 10**9 + 7

    def gcd(a, b):
        if b == 0:
            return a
        return gcd(b, a % b)

    def f_max(n):
        return n // math.gcd(n, f_max(n//math.gcd(n))) if n > 1 else 1

    def count_permutations(n):
        res = 1
        for i in range(2, n + 1):
            res = (res * i) % MOD
        return res

    n = int(input())
    fmax = f_max(n)
    answer = (count_permutations(n) - count_permutations(n-1) + MOD) % MOD
    print(answer)

solve()
","
from math import gcd

def solve():
    mod = 10**9 + 7
    n = int(input().strip())
    result = 1
    for i in range(2, n+1):
        result = (result * i) % mod
    print(result)

solve()
","0.0","6.666666666666667","13.333333333333334","0.0","","","",""
"APPS/224","
QUESTION:
One day, the Grasshopper was jumping on the lawn and found a piece of paper with a string. Grasshopper became interested what is the minimum jump ability he should have in order to be able to reach the far end of the string, jumping only on vowels of the English alphabet. Jump ability is the maximum possible length of his jump. 

Formally, consider that at the begginning the Grasshopper is located directly in front of the leftmost character of the string. His goal is to reach the position right after the rightmost character of the string. In one jump the Grasshopper could jump to the right any distance from 1 to the value of his jump ability. [Image] The picture corresponds to the first example. 

The following letters are vowels: 'A', 'E', 'I', 'O', 'U' and 'Y'.


-----Input-----

The first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100. 


-----Output-----

Print single integer a — the minimum jump ability of the Grasshopper (in the number of symbols) that is needed to overcome the given string, jumping only on vowels.


-----Examples-----
Input
ABABBBACFEYUKOTT

Output
4
Input
AAA

Output
1
Use user-input-Based format and function signature solve()","
def solve():
    s = input().strip()
    vowels = set('AEIOUY')
    max_jump = 0
    current_jump = 0
    
    for char in s:
        if char in vowels:
            current_jump += 1
            max_jump = max(max_jump, current_jump)
        else:
            current_jump = 0
    
    print(max_jump)

solve()
","
def solve():
    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']
    s = input().strip()
    max_jump = 0
    jump = 0
    for char in s:
        if char in vowels:
            jump += 1
            max_jump = max(max_jump, jump)
        else:
            jump = 0
    print(max_jump)

solve()
","
def solve():
    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']
    
    s = input().strip()
    
    max_jump = 1
    current_jump = 1
    for char in s:
        if char in vowels:
            current_jump = 1
        else:
            current_jump += 1
        max_jump = max(max_jump, current_jump)
    
    print(max_jump)

# Call the function to solve the problem
solve()
","
def solve():
    s = input().strip()
    vowels = set('AEIOUY')
    max_jump = 1

    for i in range(len(s)):
        if s[i] in vowels:
            dist = 1
            while i + dist < len(s) and s[i + dist] not in vowels:
                dist += 1
            max_jump = max(max_jump, dist)

    print(max_jump)

solve()","6.666666666666667","6.666666666666667","100.0","66.66666666666666","","","",""
"APPS/225","
QUESTION:
Dawid has four bags of candies. The $i$-th of them contains $a_i$ candies. Also, Dawid has two friends. He wants to give each bag to one of his two friends. Is it possible to distribute the bags in such a way that each friend receives the same amount of candies in total?

Note, that you can't keep bags for yourself or throw them away, each bag should be given to one of the friends.


-----Input-----

The only line contains four integers $a_1$, $a_2$, $a_3$ and $a_4$ ($1 \leq a_i \leq 100$) — the numbers of candies in each bag.


-----Output-----

Output YES if it's possible to give the bags to Dawid's friends so that both friends receive the same amount of candies, or NO otherwise. Each character can be printed in any case (either uppercase or lowercase).


-----Examples-----
Input
1 7 11 5

Output
YES

Input
7 3 2 5

Output
NO



-----Note-----

In the first sample test, Dawid can give the first and the third bag to the first friend, and the second and the fourth bag to the second friend. This way, each friend will receive $12$ candies.

In the second sample test, it's impossible to distribute the bags.
Use user-input-Based format and function signature solve()","
def solve():
    from itertools import product

    a = list(map(int, input().split()))

    for p in product([0, 1], repeat=4):
        sum1 = sum(a[i] for i in range(4) if p[i] == 0)
        sum2 = sum(a[i] for i in range(4) if p[i] == 1)
        if sum1 == sum2:
            print(""YES"")
            return

    print(""NO"")

solve()
","
def solve():
    candies = list(map(int, input().split()))
    total_candies = sum(candies)
    
    for i in range(1 << 4):
        set1_candies = 0
        for j in range(4):
            if i & (1 << j):
                set1_candies += candies[j]
        
        set2_candies = total_candies - set1_candies
        
        if set1_candies == set2_candies:
            print(""YES"")
            return
    
    print(""NO"")

solve()
","
def solve():
    a = list(map(int, input().split()))
    total_candies = sum(a)
    for i in range(1 << 4):
        sum_first_friend = 0
        for j in range(4):
            if i & (1 << j):
                sum_first_friend += a[j]
        if sum_first_friend * 2 == total_candies:
            print(""YES"")
            return
    print(""NO"")

solve()","
def solve():
    a = list(map(int, input().split()))
    total = sum(a)
    for i in range(1 << 4):
        cur_sum = 0
        for j in range(4):
            if i & (1 << j):
                cur_sum += a[j]
        if 2 * cur_sum == total:
            print(""YES"")
            return
    print(""NO"")

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/226","
QUESTION:
You may have heard of the pie rule before. It states that if two people wish to fairly share a slice of pie, one person should cut the slice in half, and the other person should choose who gets which slice. Alice and Bob have many slices of pie, and rather than cutting the slices in half, each individual slice will be eaten by just one person.

The way Alice and Bob decide who eats each slice is as follows. First, the order in which the pies are to be handed out is decided. There is a special token called the ""decider"" token, initially held by Bob. Until all the pie is handed out, whoever has the decider token will give the next slice of pie to one of the participants, and the decider token to the other participant. They continue until no slices of pie are left.

All of the slices are of excellent quality, so each participant obviously wants to maximize the total amount of pie they get to eat. Assuming both players make their decisions optimally, how much pie will each participant receive?


-----Input-----

Input will begin with an integer N (1 ≤ N ≤ 50), the number of slices of pie. 

Following this is a line with N integers indicating the sizes of the slices (each between 1 and 100000, inclusive), in the order in which they must be handed out.


-----Output-----

Print two integers. First, the sum of the sizes of slices eaten by Alice, then the sum of the sizes of the slices eaten by Bob, assuming both players make their decisions optimally.


-----Examples-----
Input
3
141 592 653

Output
653 733

Input
5
10 21 10 21 10

Output
31 41



-----Note-----

In the first example, Bob takes the size 141 slice for himself and gives the decider token to Alice. Then Alice gives the size 592 slice to Bob and keeps the decider token for herself, so that she can then give the size 653 slice to herself.
Use user-input-Based format and function signature solve()","
def solve():
    N = int(input())
    slices = list(map(int, input().split()))

    alice_total = 0
    bob_total = 0

    for i in range(N):
        if i % 2 == 0:
            if slices[0] > slices[-1]:
                alice_total += slices[0]
                slices.pop(0)
            else:
                alice_total += slices[-1]
                slices.pop()
        else:
            if slices[0] > slices[-1]:
                bob_total += slices[0]
                slices.pop(0)
            else:
                bob_total += slices[-1]
                slices.pop()

    print(alice_total, bob_total)

solve()
","
def solve():
    N = int(input())
    pie_sizes = list(map(int, input().split()))

    alice = 0
    bob = 0

    for i in range(N):
        if i % 2 == 0:
            if pie_sizes[0] > pie_sizes[-1]:
                alice += pie_sizes[0]
                del pie_sizes[0]
            else:
                alice += pie_sizes[-1]
                del pie_sizes[-1]
        else:
            if pie_sizes[0] > pie_sizes[-1]:
                bob += pie_sizes[0]
                del pie_sizes[0]
            else:
                bob += pie_sizes[-1]
                del pie_sizes[-1]

    print(alice, bob)

solve()
","
from typing import List

def solve() -> None:
    def find_optimal_pie_split(N: int, slices: List[int]) -> tuple:
        alice_pie = 0
        bob_pie = 0

        for i in range(N):
            if i % 2 == 0:  # Bob's turn
                if slices[0] > slices[-1]:  # Bob selects the larger slice
                    bob_pie += slices[0]
                    slices.pop(0)
                else:
                    bob_pie += slices[-1]
                    slices.pop(-1)
            else:  # Alice's turn
                if slices[0] > slices[-1]:  # Alice selects the larger slice
                    alice_pie += slices[0]
                    slices.pop(0)
                else:
                    alice_pie += slices[-1]
                    slices.pop(-1)
        
        return alice_pie, bob_pie

    N = int(input())
    slices = list(map(int, input().split()))

    alice_pie, bob_pie = find_optimal_pie_split(N, slices)
    print(alice_pie, bob_pie)

solve()
","
def solve():
    N = int(input())
    slices = list(map(int, input().split()))

    alice_total = 0
    bob_total = 0

    for i in range(N):
        if i % 2 == 0:
            if slices[0] > slices[-1]:
                alice_total += slices[0]
                slices.pop(0)
            else:
                alice_total += slices[-1]
                slices.pop()

        else:
            if slices[0] > slices[-1]:
                bob_total += slices[0]
                slices.pop(0)
            else:
                bob_total += slices[-1]
                slices.pop()

    return alice_total, bob_total

solve()","6.666666666666667","6.666666666666667","33.33333333333333","0.0","","","",""
"APPS/227","
QUESTION:
You've got a positive integer sequence a_1, a_2, ..., a_{n}. All numbers in the sequence are distinct. Let's fix the set of variables b_1, b_2, ..., b_{m}. Initially each variable b_{i} (1 ≤ i ≤ m) contains the value of zero. Consider the following sequence, consisting of n operations.

The first operation is assigning the value of a_1 to some variable b_{x} (1 ≤ x ≤ m). Each of the following n - 1 operations is assigning to some variable b_{y} the value that is equal to the sum of values that are stored in the variables b_{i} and b_{j} (1 ≤ i, j, y ≤ m). At that, the value that is assigned on the t-th operation, must equal a_{t}. For each operation numbers y, i, j are chosen anew.

Your task is to find the minimum number of variables m, such that those variables can help you perform the described sequence of operations.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 23). The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 ≤ a_{k} ≤ 10^9).

It is guaranteed that all numbers in the sequence are distinct.


-----Output-----

In a single line print a single number — the minimum number of variables m, such that those variables can help you perform the described sequence of operations.

If you cannot perform the sequence of operations at any m, print -1.


-----Examples-----
Input
5
1 2 3 6 8

Output
2

Input
3
3 6 5

Output
-1

Input
6
2 4 8 6 10 18

Output
3



-----Note-----

In the first sample, you can use two variables b_1 and b_2 to perform the following sequence of operations.  b_1 := 1;  b_2 := b_1 + b_1;  b_1 := b_1 + b_2;  b_1 := b_1 + b_1;  b_1 := b_1 + b_2.
Use user-input-Based format and function signature solve()","
def solve():
    import itertools

    n = int(input())
    a = list(map(int, input().split()))

    for m in range(1, n + 1):
        for perm in itertools.permutations(range(m), 2):
            b = [0] * m
            b[perm[0]] = a[0]
            for i in range(1, n):
                found = False
                for j in range(m):
                    for k in range(m):
                        if b[j] + b[k] == a[i]:
                            b.append(a[i])
                            found = True
                            break
                    if found:
                        break
                if not found:
                    break
            if len(b) == n:
                print(m)
                return
    print(-1)

solve()","
def solve():
    pass

solve()","
def solve():
    import itertools
    
    n = int(input())
    a = list(map(int, input().split()))
    
    for m in range(1, 24):
        variables = [0] * m
        for perm in itertools.permutations(range(m), 2):
            temp = variables[perm[0]] + variables[perm[1]]
            if temp in a:
                variables.append(temp)
                if len(variables) == n:
                    print(m)
                    return
    print(-1)

solve()
 ","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    max_val = max(a)
    sequence = [0]
    m = 1

    while max_val not in sequence:
        m += 1
        new_sequence = set()
        for i in range(len(sequence)):
            for j in range(i, len(sequence)):
                new_sequence.add(sequence[i] + sequence[j])
        sequence = list(new_sequence)
    
    if len(sequence) != m:
        print(-1)
    else:
        print(m)

solve()
","0.0","0.0","6.666666666666667","0","","","",""
"APPS/228","
QUESTION:
Alice and Bob are playing a game with $n$ piles of stones. It is guaranteed that $n$ is an even number. The $i$-th pile has $a_i$ stones.

Alice and Bob will play a game alternating turns with Alice going first.

On a player's turn, they must choose exactly $\frac{n}{2}$ nonempty piles and independently remove a positive number of stones from each of the chosen piles. They can remove a different number of stones from the piles in a single turn. The first player unable to make a move loses (when there are less than $\frac{n}{2}$ nonempty piles).

Given the starting configuration, determine who will win the game.


-----Input-----

The first line contains one integer $n$ ($2 \leq n \leq 50$) — the number of piles. It is guaranteed that $n$ is an even number.

The second line contains $n$ integers $a_1, a_2, \ldots, a_n$ ($1 \leq a_i \leq 50$) — the number of stones in the piles.


-----Output-----

Print a single string ""Alice"" if Alice wins; otherwise, print ""Bob"" (without double quotes).


-----Examples-----
Input
2
8 8

Output
Bob

Input
4
3 1 4 1

Output
Alice



-----Note-----

In the first example, each player can only remove stones from one pile ($\frac{2}{2}=1$). Alice loses, since Bob can copy whatever Alice does on the other pile, so Alice will run out of moves first.

In the second example, Alice can remove $2$ stones from the first pile and $3$ stones from the third pile on her first move to guarantee a win.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    piles = list(map(int, input().split()))
    
    total_stones = sum(piles)
    max_stones = max(piles)
    
    if max_stones > total_stones - max_stones:
        print(""Alice"")
    else:
        print(""Bob"")

solve()","
def solve():
    n = int(input())
    stones = list(map(int, input().split()))
    
    total_stones = sum(stones)
    
    if total_stones == n:
        print(""Bob"")
    else:
        print(""Alice"")

solve()
","
def solve():
    n = int(input())
    piles = list(map(int, input().split()))
    
    total_stones = sum(piles)
    
    if max(piles) > total_stones / 2:
        print(""Alice"")
    else:
        print(""Bob"")

solve()","
def solve():
    n = int(input())
    piles = list(map(int, input().split()))
    
    total_stones = sum(piles)
    min_winning_stones = min(piles) * (n // 2)
    
    if total_stones - min_winning_stones > min_winning_stones:
        print(""Alice"")
    else:
        print(""Bob"")

solve()","46.666666666666664","53.333333333333336","46.666666666666664","60.0","","","",""
"APPS/229","
QUESTION:
Today, hedgehog Filya went to school for the very first time! Teacher gave him a homework which Filya was unable to complete without your help.

Filya is given an array of non-negative integers a_1, a_2, ..., a_{n}. First, he pick an integer x and then he adds x to some elements of the array (no more than once), subtract x from some other elements (also, no more than once) and do no change other elements. He wants all elements of the array to be equal.

Now he wonders if it's possible to pick such integer x and change some elements of the array using this x in order to make all elements equal.


-----Input-----

The first line of the input contains an integer n (1 ≤ n ≤ 100 000) — the number of integers in the Filya's array. The second line contains n integers a_1, a_2, ..., a_{n} (0 ≤ a_{i} ≤ 10^9) — elements of the array.


-----Output-----

If it's impossible to make all elements of the array equal using the process given in the problem statement, then print ""NO"" (without quotes) in the only line of the output. Otherwise print ""YES"" (without quotes).


-----Examples-----
Input
5
1 3 3 2 1

Output
YES

Input
5
1 2 3 4 5

Output
NO



-----Note-----

In the first sample Filya should select x = 1, then add it to the first and the last elements of the array and subtract from the second and the third elements.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    total_sum = sum(a)
    if total_sum % n == 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    arr = list(map(int, input().split()))
    
    max_val = max(arr)
    min_val = min(arr)
    dif_max = max_val - min_val
    
    for x in [0, dif_max]:
        mod_arr = [num if (num - min_val) % x == 0 else num + 1 for num in arr]
        
        if len(set(mod_arr)) <= 1:
            print(""YES"")
            return
    
    print(""NO"")

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))
    
    total_sum = sum(a)
    if total_sum % n == 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    total_sum = sum(a)
    if total_sum % n == 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","66.66666666666666","0.0","66.66666666666666","66.66666666666666","","","",""
"APPS/230","
QUESTION:
Given is a string S of length N.
Find the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping.
More formally, find the maximum positive integer len such that there exist integers l_1 and l_2 ( 1 \leq l_1, l_2 \leq N - len + 1 ) that satisfy the following:
 - l_1 + len \leq l_2
 - S[l_1+i] = S[l_2+i] (i = 0, 1, ..., len - 1)
If there is no such integer len, print 0.

-----Constraints-----
 - 2 \leq N \leq 5 \times 10^3
 - |S| = N
 - S consists of lowercase English letters.

-----Input-----
Input is given from Standard Input in the following format:
N
S

-----Output-----
Print the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping. If there is no such non-empty string, print 0 instead.

-----Sample Input-----
5
ababa

-----Sample Output-----
2

The strings satisfying the conditions are: a, b, ab, and ba. The maximum length among them is 2, which is the answer.
Note that aba occurs twice in S as contiguous substrings, but there is no pair of integers l_1 and l_2 mentioned in the statement such that l_1 + len \leq l_2.
Use user-input-Based format and function signature solve()","
def solve():
    N = int(input())
    S = input().strip()
    
    max_len = 0
    for i in range(1, N):
        for j in range(i+1, N):
            if j - i <= max_len:
                continue
            if S[i:] == S[j:j+i]:
                max_len = j - i
    
    print(max_len)

solve()
","
def solve():
    N = int(input())
    S = input().strip()
    max_len = 0
    
    for i in range(1, N):
        for j in range(N - i):
            if S[j:j+i] == S[j+i:j+2*i]:
                max_len = max(max_len, i)
    
    print(max_len)

solve()
  ","
def solve():
    N = int(input())
    S = input().strip()

    max_len = 0

    for l1 in range(N):
        for l2 in range(l1 + 1, N):
            if S[l1:l1 + l2 - l1] == S[l2:l2 + l2 - l1] and l2 - l1 > max_len:
                max_len = l2 - l1

    print(max_len)

solve()
","
def solve():
    N = int(input())
    S = input().strip()
    ans = 0
    for i in range(N):
        for j in range(i+1, N):
            if j - i <= ans:
                continue
            k = 0
            while j+k < N and S[i+k] == S[j+k]:
                k += 1
            ans = max(ans, k)
    print(ans)

solve()
","6.666666666666667","46.666666666666664","46.666666666666664","70.0","","","",""
"APPS/231","
QUESTION:
The main street of Berland is a straight line with n houses built along it (n is an even number). The houses are located at both sides of the street. The houses with odd numbers are at one side of the street and are numbered from 1 to n - 1 in the order from the beginning of the street to the end (in the picture: from left to right). The houses with even numbers are at the other side of the street and are numbered from 2 to n in the order from the end of the street to its beginning (in the picture: from right to left). The corresponding houses with even and odd numbers are strictly opposite each other, that is, house 1 is opposite house n, house 3 is opposite house n - 2, house 5 is opposite house n - 4 and so on. [Image] 

Vasya needs to get to house number a as quickly as possible. He starts driving from the beginning of the street and drives his car to house a. To get from the beginning of the street to houses number 1 and n, he spends exactly 1 second. He also spends exactly one second to drive the distance between two neighbouring houses. Vasya can park at any side of the road, so the distance between the beginning of the street at the houses that stand opposite one another should be considered the same.

Your task is: find the minimum time Vasya needs to reach house a.


-----Input-----

The first line of the input contains two integers, n and a (1 ≤ a ≤ n ≤ 100 000) — the number of houses on the street and the number of the house that Vasya needs to reach, correspondingly. It is guaranteed that number n is even.


-----Output-----

Print a single integer — the minimum time Vasya needs to get from the beginning of the street to house a.


-----Examples-----
Input
4 2

Output
2

Input
8 5

Output
3



-----Note-----

In the first sample there are only four houses on the street, two houses at each side. House 2 will be the last at Vasya's right.

The second sample corresponds to picture with n = 8. House 5 is the one before last at Vasya's left.
Use user-input-Based format and function signature solve()","
def solve():
    n, a = map(int, input().split())
    if a <= n // 2:
        print(2 * a - 1)
    else:
        print(2 * (n // 2 - a + 1))

solve()","
def solve():
    n, a = map(int, input().split())
    if a <= n // 2:
        print(1 + (a - 1) * 2)
    else:
        print(1 + (n - a) * 2)

solve()","
def solve():
    n, a = map(int, input().split())
    if a <= n // 2:
        print(2*a - 1)
    else:
        print(2*(n//2 - a + 1))

solve()","
def solve():
    n, a = map(int, input().split())
    if a <= n // 2:
        print(a + 1)
    else:
        print(n - a + 1)

solve()","26.666666666666668","53.333333333333336","26.666666666666668","26.666666666666668","","","",""
"APPS/232","
QUESTION:
There is unrest in the Galactic Senate. Several thousand solar systems have declared their intentions to leave the Republic. Master Heidi needs to select the Jedi Knights who will go on peacekeeping missions throughout the galaxy. It is well-known that the success of any peacekeeping mission depends on the colors of the lightsabers of the Jedi who will go on that mission. 

Heidi has n Jedi Knights standing in front of her, each one with a lightsaber of one of m possible colors. She knows that for the mission to be the most effective, she needs to select some contiguous interval of knights such that there are exactly k_1 knights with lightsabers of the first color, k_2 knights with lightsabers of the second color, ..., k_{m} knights with lightsabers of the m-th color. Help her find out if this is possible.


-----Input-----

The first line of the input contains n (1 ≤ n ≤ 100) and m (1 ≤ m ≤ n). The second line contains n integers in the range {1, 2, ..., m} representing colors of the lightsabers of the subsequent Jedi Knights. The third line contains m integers k_1, k_2, ..., k_{m} (with $1 \leq \sum_{i = 1}^{m} k_{i} \leq n$) – the desired counts of lightsabers of each color from 1 to m.


-----Output-----

Output YES if an interval with prescribed color counts exists, or output NO if there is none.


-----Example-----
Input
5 2
1 1 2 2 1
1 2

Output
YES
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    colors = list(map(int, input().split()))
    desired_counts = list(map(int, input().split()))

    color_counts = [0] * (m + 1)
    prefix_sum = [0] * (n + 1)
    prefix_sum[0] = 0

    for i in range(1, n + 1):
        prefix_sum[i] = prefix_sum[i - 1] + colors[i - 1]

    for i in range(1, n + 1):
        for j in range(i, n + 1):
            color_counts = [0] * (m + 1)
            for k in range(i, j + 1):
                color_counts[colors[k - 1]] += 1
            valid = True
            for k in range(1, m + 1):
                if color_counts[k] != desired_counts[k - 1]:
                    valid = False
                    break
            if valid:
                return ""YES""
    
    return ""NO""

# Input example
print(solve())

solve()","
def solve():
    n, m = map(int, input().split())
    colors = list(map(int, input().split()))
    desired_counts = list(map(int, input().split()))

    color_freq = {}
    for color in colors:
        color_freq[color] = color_freq.get(color, 0) + 1

    for i in range(n):
        count = {color: 0 for color in range(1, m+1)}
        found = 0
        for j in range(i, n):
            count[colors[j]] += 1
            if count == {color: desired_counts[color-1] for color in range(1, m+1)}:
                found = 1
                break
        if found:
            print(""YES"")
            return
    print(""NO"")

solve()
","
from collections import Counter

def solve():
    n, m = map(int, input().split())
    colors = list(map(int, input().split()))
    desired_counts = list(map(int, input().split()))

    total_counts = sum(desired_counts)
    current_counts = Counter()
    interval_start = 0

    for idx, color in enumerate(colors):
        current_counts[color] += 1

        while sum(current_counts.values()) > total_counts:
            current_counts[colors[interval_start]] -= 1
            if current_counts[colors[interval_start]] == 0:
                del current_counts[colors[interval_start]]
            interval_start += 1

        if current_counts == Counter({color: count for color, count in enumerate(desired_counts, start=1)}):
            print(""YES"")
            return

    print(""NO"")
  
solve()","
from itertools import accumulate

def solve():
    n, m = map(int, input().split())
    colors = list(map(int, input().split()))
    desired_counts = list(map(int, input().split()))

    cum_colors = [0] + list(accumulate(colors))
    desired_cum_counts = [0] + list(accumulate(desired_counts))

    color_counts = [cum_colors.count(i) for i in range(1, m+1)]

    if all(color_counts[i] >= desired_counts[i] for i in range(m)):
        print(""YES"")
    else:
        print(""NO"")

solve()
","0.0","100.0","100.0","53.333333333333336","","","",""
"APPS/233","
QUESTION:
Mishka is a little polar bear. As known, little bears loves spending their free time playing dice for chocolates. Once in a wonderful sunny morning, walking around blocks of ice, Mishka met her friend Chris, and they started playing the game.

Rules of the game are very simple: at first number of rounds n is defined. In every round each of the players throws a cubical dice with distinct numbers from 1 to 6 written on its faces. Player, whose value after throwing the dice is greater, wins the round. In case if player dice values are equal, no one of them is a winner.

In average, player, who won most of the rounds, is the winner of the game. In case if two players won the same number of rounds, the result of the game is draw.

Mishka is still very little and can't count wins and losses, so she asked you to watch their game and determine its result. Please help her!


-----Input-----

The first line of the input contains single integer n n (1 ≤ n ≤ 100) — the number of game rounds.

The next n lines contains rounds description. i-th of them contains pair of integers m_{i} and c_{i} (1 ≤ m_{i},  c_{i} ≤ 6) — values on dice upper face after Mishka's and Chris' throws in i-th round respectively.


-----Output-----

If Mishka is the winner of the game, print ""Mishka"" (without quotes) in the only line.

If Chris is the winner of the game, print ""Chris"" (without quotes) in the only line.

If the result of the game is draw, print ""Friendship is magic!^^"" (without quotes) in the only line.


-----Examples-----
Input
3
3 5
2 1
4 2

Output
Mishka
Input
2
6 1
1 6

Output
Friendship is magic!^^
Input
3
1 5
3 3
2 2

Output
Chris


-----Note-----

In the first sample case Mishka loses the first round, but wins second and third rounds and thus she is the winner of the game.

In the second sample case Mishka wins the first round, Chris wins the second round, and the game ends with draw with score 1:1.

In the third sample case Chris wins the first round, but there is no winner of the next two rounds. The winner of the game is Chris.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    mishka_wins = 0
    chris_wins = 0
    
    for _ in range(n):
        m, c = map(int, input().split())
        if m > c:
            mishka_wins += 1
        elif c > m:
            chris_wins += 1
    
    if mishka_wins > chris_wins:
        print(""Mishka"")
    elif chris_wins > mishka_wins:
        print(""Chris"")
    else:
        print(""Friendship is magic!^^"")

solve()","
def solve():
    n = int(input())
    mishka = 0
    chris = 0
    for _ in range(n):
        m, c = map(int, input().split())
        if m > c:
            mishka += 1
        elif c > m:
            chris += 1

    if mishka > chris:
        print(""Mishka"")
    elif chris > mishka:
        print(""Chris"")
    else:
        print(""Friendship is magic!^^"")

solve()","
def solve():
    n = int(input())
    mishka_score = 0
    chris_score = 0
    
    for _ in range(n):
        m, c = map(int, input().split())
        if m > c:
            mishka_score += 1
        elif c > m:
            chris_score += 1
    
    if mishka_score > chris_score:
        print(""Mishka"")
    elif chris_score > mishka_score:
        print(""Chris"")
    else:
        print(""Friendship is magic!^^"")

solve()","
def solve():
    rounds = int(input())
    m_total = 0
    c_total = 0

    for _ in range(rounds):
        m, c = map(int, input().split())
        if m > c:
            m_total += 1
        elif c > m:
            c_total += 1

    if m_total > c_total:
        print(""Mishka"")
    elif c_total > m_total:
        print(""Chris"")
    else:
        print(""Friendship is magic!^^"")

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/234","
QUESTION:
One day Alex decided to remember childhood when computers were not too powerful and lots of people played only default games. Alex enjoyed playing Minesweeper that time. He imagined that he saved world from bombs planted by terrorists, but he rarely won.

Alex has grown up since then, so he easily wins the most difficult levels. This quickly bored him, and he thought: what if the computer gave him invalid fields in the childhood and Alex could not win because of it?

He needs your help to check it.

A Minesweeper field is a rectangle $n \times m$, where each cell is either empty, or contains a digit from $1$ to $8$, or a bomb. The field is valid if for each cell:   if there is a digit $k$ in the cell, then exactly $k$ neighboring cells have bombs.  if the cell is empty, then all neighboring cells have no bombs. 

Two cells are neighbors if they have a common side or a corner (i. e. a cell has at most $8$ neighboring cells).


-----Input-----

The first line contains two integers $n$ and $m$ ($1 \le n, m \le 100$) — the sizes of the field.

The next $n$ lines contain the description of the field. Each line contains $m$ characters, each of them is ""."" (if this cell is empty), ""*"" (if there is bomb in this cell), or a digit from $1$ to $8$, inclusive.


-----Output-----

Print ""YES"", if the field is valid and ""NO"" otherwise.

You can choose the case (lower or upper) for each letter arbitrarily.


-----Examples-----
Input
3 3
111
1*1
111

Output
YES
Input
2 4
*.*.
1211

Output
NO


-----Note-----

In the second example the answer is ""NO"" because, if the positions of the bombs are preserved, the first line of the field should be *2*1.

You can read more about Minesweeper in Wikipedia's article.
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    field = [input() for _ in range(n)]

    def is_valid(i, j):
        if field[i][j] == '.':
            for x in range(-1, 2):
                for y in range(-1, 2):
                    if 0 <= i+x < n and 0 <= j+y < m and field[i+x][j+y] == '*':
                        return False
            return True
        else:
            bombs = sum(1 for x in range(-1, 2) for y in range(-1, 2) if 0 <= i+x < n and 0 <= j+y < m and field[i+x][j+y] == '*')
            return bombs == int(field[i][j])

    for i in range(n):
        for j in range(m):
            if not is_valid(i, j):
                print(""NO"")
                return
    print(""YES"")

solve()
","
def solve():
    n, m = map(int, input().split())
    field = [input() for _ in range(n)]
    
    for i in range(n):
        for j in range(m):
            if field[i][j] != '*':
                bomb_count = sum(field[i+di][j+dj] == '*' for di in range(-1, 2) for dj in range(-1, 2) if 0 <= i+di < n and 0 <= j+dj < m)
                if int(field[i][j]) != bomb_count:
                    print(""NO"")
                    return
    print(""YES"")
  
solve()","
def solve():
    n, m = map(int, input().split())
    field = [input() for _ in range(n)]

    dx = [-1, -1, -1, 0, 0, 1, 1, 1]
    dy = [-1, 0, 1, -1, 1, -1, 0, 1]

    def is_valid(x, y):
        if field[x][y] == '*':
            return True
        bombs = 0
        empty = 0
        for i in range(8):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < n and 0 <= ny < m:
                if field[nx][ny] == '*':
                    bombs += 1
                if field[nx][ny] == '.':
                    empty += 1
        if field[x][y].isdigit():
            return int(field[x][y]) == bombs
        return empty == 8 - bombs

    for i in range(n):
        for j in range(m):
            if not is_valid(i, j):
                print(""NO"")
                return
    print(""YES"")
  
solve()","
def solve():
    n, m = map(int, input().split())
    field = [list(input()) for _ in range(n)]
    
    def count_bombs(i, j):
        bombs = 0
        for r in range(max(0, i-1), min(n, i+2)):
            for c in range(max(0, j-1), min(m, j+2)):
                if field[r][c] == ""*"":
                    bombs += 1
        return bombs - (field[i][j] == ""*"")
    
    for i in range(n):
        for j in range(m):
            if field[i][j] != ""."":
                if int(field[i][j]) != count_bombs(i, j):
                    print(""NO"")
                    return
    print(""YES"")

solve()
  ","20.0","53.333333333333336","66.66666666666666","20.0","","","",""
"APPS/235","
QUESTION:
After passing a test, Vasya got himself a box of $n$ candies. He decided to eat an equal amount of candies each morning until there are no more candies. However, Petya also noticed the box and decided to get some candies for himself.

This means the process of eating candies is the following: in the beginning Vasya chooses a single integer $k$, same for all days. After that, in the morning he eats $k$ candies from the box (if there are less than $k$ candies in the box, he eats them all), then in the evening Petya eats $10\%$ of the candies remaining in the box. If there are still candies left in the box, the process repeats — next day Vasya eats $k$ candies again, and Petya — $10\%$ of the candies left in a box, and so on.

If the amount of candies in the box is not divisible by $10$, Petya rounds the amount he takes from the box down. For example, if there were $97$ candies in the box, Petya would eat only $9$ of them. In particular, if there are less than $10$ candies in a box, Petya won't eat any at all.

Your task is to find out the minimal amount of $k$ that can be chosen by Vasya so that he would eat at least half of the $n$ candies he initially got. Note that the number $k$ must be integer.


-----Input-----

The first line contains a single integer $n$ ($1 \leq n \leq 10^{18}$) — the initial amount of candies in the box.


-----Output-----

Output a single integer — the minimal amount of $k$ that would allow Vasya to eat at least half of candies he got.


-----Example-----
Input
68

Output
3



-----Note-----

In the sample, the amount of candies, with $k=3$, would change in the following way (Vasya eats first):

$68 \to 65 \to 59 \to 56 \to 51 \to 48 \to 44 \to 41 \\ \to 37 \to 34 \to 31 \to 28 \to 26 \to 23 \to 21 \to 18 \to 17 \to 14 \\ \to 13 \to 10 \to 9 \to 6 \to 6 \to 3 \to 3 \to 0$.

In total, Vasya would eat $39$ candies, while Petya — $29$.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    candies_eaten = 0
    k = 1
    while candies_eaten < n // 2:
        candies_left = n
        while candies_left > 0:
            candies_left -= k
            candies_eaten += k
            if candies_left < 10:
                break
            candies_petya_eats = candies_left // 10
            candies_left -= candies_petya_eats
        k += 1
    return k - 1

solve()","
def solve():
    n = int(input())
    
    def check(k):
        remaining_candies = n
        vasya_eaten = 0
        petya_eaten = 0
        while remaining_candies > 0:
            vasya_eaten += k
            remaining_candies -= k
            petya_eaten += int(remaining_candies // 10)
            remaining_candies -= int(remaining_candies // 10)
        return vasya_eaten >= n / 2

    left, right = 1, n
    while left < right:
        mid = (left + right) // 2
        if check(mid):
            right = mid
        else:
            left = mid + 1
    return left


solve()","
def solve():
    n = int(input())
    candies_left = n
    candies_eaten_vasya = 0
    candies_eaten_petya = 0

    k = 1
    while candies_eaten_vasya < n // 2:
        candies_left = n
        candies_eaten_vasya = 0
        while candies_left > 0:
            to_eat = min(k, candies_left)
            candies_eaten_vasya += to_eat
            candies_left -= to_eat

            if candies_left >= 10:
                candies_eaten_petya += candies_left // 10
                candies_left -= candies_left // 10
            else:
                break

        k += 1

    return k - 1

solve()","
def solve():
    n = int(input())
    
    def can_eat_more_than_half(k):
        candies_left = n
        vasya_eaten = 0
        petya_eaten = 0
        
        while candies_left > 0:
            vasya_eaten += min(k, candies_left)
            candies_left -= min(k, candies_left)
            petya_eaten += candies_left // 10
            candies_left -= candies_left // 10
        
        return vasya_eaten >= n // 2
    
    left, right = 1, n
    ans = n
    
    while left <= right:
        mid = (left + right) // 2
        if can_eat_more_than_half(mid):
            ans = mid
            right = mid - 1
        else:
            left = mid + 1
    
    return ans

solve()","0.0","0.0","0.0","0.0","","","",""
"APPS/236","
QUESTION:
A necklace can be described as a string of links ('-') and pearls ('o'), with the last link or pearl connected to the first one. $0$ 

You can remove a link or a pearl and insert it between two other existing links or pearls (or between a link and a pearl) on the necklace. This process can be repeated as many times as you like, but you can't throw away any parts.

Can you make the number of links between every two adjacent pearls equal? Two pearls are considered to be adjacent if there is no other pearl between them.

Note that the final necklace should remain as one circular part of the same length as the initial necklace.


-----Input-----

The only line of input contains a string $s$ ($3 \leq |s| \leq 100$), representing the necklace, where a dash '-' represents a link and the lowercase English letter 'o' represents a pearl.


-----Output-----

Print ""YES"" if the links and pearls can be rejoined such that the number of links between adjacent pearls is equal. Otherwise print ""NO"".

You can print each letter in any case (upper or lower).


-----Examples-----
Input
-o-o--
Output
YES
Input
-o---

Output
YES
Input
-o---o-

Output
NO
Input
ooo

Output
YES
Use user-input-Based format and function signature solve()","
def solve():
    s = input().strip()
    pearls = s.count('o')
    links = s.count('-')
    
    if pearls == 0:
        print(""YES"")
    elif links % pearls == 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    s = input().strip()
    
    num_links = s.count('-')
    num_pearls = s.count('o')
    
    if num_pearls == 0:
        print(""YES"")
    elif num_links % num_pearls == 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    s = input().strip()
    links = s.count('-')
    pearls = s.count('o')
    
    if pearls == 0:
        return ""YES""
    
    if links % pearls == 0:
        return ""YES""
    else:
        return ""NO""

solve()","
def solve():
    s = input().strip()
    
    link_count = s.count('-')
    pearl_count = s.count('o')
    
    if pearl_count == 0:
        return ""YES""
    
    if link_count % pearl_count == 0:
        return ""YES""
        
    return ""NO""
    
solve()
","100.0","100.0","0.0","0.0","","","",""
"APPS/237","
QUESTION:
n hobbits are planning to spend the night at Frodo's house. Frodo has n beds standing in a row and m pillows (n ≤ m). Each hobbit needs a bed and at least one pillow to sleep, however, everyone wants as many pillows as possible. Of course, it's not always possible to share pillows equally, but any hobbit gets hurt if he has at least two pillows less than some of his neighbors have. 

Frodo will sleep on the k-th bed in the row. What is the maximum number of pillows he can have so that every hobbit has at least one pillow, every pillow is given to some hobbit and no one is hurt?


-----Input-----

The only line contain three integers n, m and k (1 ≤ n ≤ m ≤ 10^9, 1 ≤ k ≤ n) — the number of hobbits, the number of pillows and the number of Frodo's bed.


-----Output-----

Print single integer — the maximum number of pillows Frodo can have so that no one is hurt.


-----Examples-----
Input
4 6 2

Output
2

Input
3 10 3

Output
4

Input
3 6 1

Output
3



-----Note-----

In the first example Frodo can have at most two pillows. In this case, he can give two pillows to the hobbit on the first bed, and one pillow to each of the hobbits on the third and the fourth beds.

In the second example Frodo can take at most four pillows, giving three pillows to each of the others.

In the third example Frodo can take three pillows, giving two pillows to the hobbit in the middle and one pillow to the hobbit on the third bed.
Use user-input-Based format and function signature solve()","
def solve():
    n, m, k = map(int, input().split())
    if n == 1:
        print(min(m - 1, k))
    else:
        print(min(m // n, k) * n + min(m % n, k - 1))

solve()","
def solve():
    n, m, k = map(int, input().split())
    remaining_pillows = m - n
    max_pillows = min(remaining_pillows, n - 1)
    print(max(1, max_pillows - (n - k)))

solve()","
def solve():
    n, m, k = map(int, input().split())
    if n == 1:
        print(min(m-1, k))
    else:
        left = k - 1
        right = n - k
        neighbors = min(left, right)
        remaining_pillows = m - n
        max_pillows = min(remaining_pillows + neighbors, m - 1)
        print(max_pillows)

solve()
","
def solve():
    n, m, k = map(int, input().split())
    
    if n == 1:
        print(m - 1)
    else:
        min_pillows = min(m // n, k)
        remaining_pillows = m - min_pillows
        share_pillows = remaining_pillows // (n - 1)
        
        if min_pillows >= share_pillows:
            print(min_pillows)
        else:
            remaining_pillows -= (n - 1) * min_pillows
            print(min_pillows - (remaining_pillows // 2))

solve()
","6.666666666666667","46.666666666666664","6.666666666666667","40.0","","","",""
"APPS/238","
QUESTION:
You are given an array $a_1, a_2, \dots , a_n$ and two integers $m$ and $k$.

You can choose some subarray $a_l, a_{l+1}, \dots, a_{r-1}, a_r$. 

The cost of subarray $a_l, a_{l+1}, \dots, a_{r-1}, a_r$ is equal to $\sum\limits_{i=l}^{r} a_i - k \lceil \frac{r - l + 1}{m} \rceil$, where $\lceil x \rceil$ is the least integer greater than or equal to $x$. 

The cost of empty subarray is equal to zero.

For example, if $m = 3$, $k = 10$ and $a = [2, -4, 15, -3, 4, 8, 3]$, then the cost of some subarrays are:  $a_3 \dots a_3: 15 - k \lceil \frac{1}{3} \rceil = 15 - 10 = 5$;  $a_3 \dots a_4: (15 - 3) - k \lceil \frac{2}{3} \rceil = 12 - 10 = 2$;  $a_3 \dots a_5: (15 - 3 + 4) - k \lceil \frac{3}{3} \rceil = 16 - 10 = 6$;  $a_3 \dots a_6: (15 - 3 + 4 + 8) - k \lceil \frac{4}{3} \rceil = 24 - 20 = 4$;  $a_3 \dots a_7: (15 - 3 + 4 + 8 + 3) - k \lceil \frac{5}{3} \rceil = 27 - 20 = 7$. 

Your task is to find the maximum cost of some subarray (possibly empty) of array $a$.


-----Input-----

The first line contains three integers $n$, $m$, and $k$ ($1 \le n \le 3 \cdot 10^5, 1 \le m \le 10, 1 \le k \le 10^9$).

The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($-10^9 \le a_i \le 10^9$).


-----Output-----

Print the maximum cost of some subarray of array $a$.


-----Examples-----
Input
7 3 10
2 -4 15 -3 4 8 3

Output
7

Input
5 2 1000
-13 -4 -9 -20 -11

Output
0
Use user-input-Based format and function signature solve()","
from math import ceil

def solve():
    n, m, k = map(int, input().split())
    a = list(map(int, input().split()))
    
    max_cost = 0
    prefix_sum = [0]
    for num in a:
        prefix_sum.append(prefix_sum[-1] + num)
    
    for i in range(1, n+1):
        for j in range(i, min(i+m*(n-i+1), n+1, i+m)):
            cost = prefix_sum[j] - prefix_sum[i-1] - k * ceil((j-i+1) / m)
            max_cost = max(max_cost, cost)
    
    print(max_cost)

solve()
","
from math import ceil

def solve():
    n, m, k = map(int, input().split())
    a = list(map(int, input().split()))

    max_cost = 0
    current_sum = 0
    current_max = 0

    for i in range(n):
        current_sum += a[i]
        current_max = max(current_max + a[i], current_sum - k * ceil((i + 1) / m))
        max_cost = max(max_cost, current_max)

    print(max_cost)

solve()
","
import math

def solve():
    n, m, k = map(int, input().split())
    a = list(map(int, input().split()))

    max_cost = 0
    prefix_sum = [0]
    for i in range(n):
        prefix_sum.append(prefix_sum[-1] + a[i])

    for l in range(n+1):
        for r in range(l, n+1):
            cost = prefix_sum[r] - prefix_sum[l] - k*math.ceil((r - l) / m)
            max_cost = max(max_cost, cost)

    print(max_cost)

solve()
","
def solve():
    import math
    
    n, m, k = map(int, input().split())
    a = list(map(int, input().split()))
    
    max_cost = 0
    current_sum = 0
    prefix_sums = [0]
    
    for num in a:
        current_sum += num
        prefix_sums.append(current_sum)
    
    for i in range(1, n+1):
        for j in range(i, min(i+m*(n-i+1), n+1, i+m)):
            cost = prefix_sums[j] - prefix_sums[i-1] - k*math.ceil((j-i+1)/m)
            max_cost = max(max_cost, cost)
    
    print(max_cost)

solve()","86.66666666666667","6.666666666666667","100.0","86.66666666666667","","","",""
"APPS/239","
QUESTION:
You are given a rectangular grid of lattice points from (0, 0) to (n, m) inclusive. You have to choose exactly 4 different points to build a polyline possibly with self-intersections and self-touching. This polyline should be as long as possible.

A polyline defined by points p_1, p_2, p_3, p_4 consists of the line segments p_1 p_2, p_2 p_3, p_3 p_4, and its length is the sum of the lengths of the individual line segments.


-----Input-----

The only line of the input contains two integers n and m (0 ≤ n, m ≤ 1000). It is guaranteed that grid contains at least 4 different points.


-----Output-----

Print 4 lines with two integers per line separated by space — coordinates of points p_1, p_2, p_3, p_4 in order which represent the longest possible polyline.

Judge program compares your answer and jury's answer with 10^{ - 6} precision.


-----Examples-----
Input
1 1

Output
1 1
0 0
1 0
0 1

Input
0 10

Output
0 1
0 10
0 0
0 9
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    print(f""{n} {m}"")
    print(f""0 0"")
    print(f""{n} 0"")
    print(f""0 {m}"")

solve()
","
from itertools import permutations

def solve():
    n, m = map(int, input().split())
    points = [(i, j) for i in range(n+1) for j in range(m+1)]
    max_length = 0
    polyline = None
    
    for p1, p2, p3, p4 in permutations(points, 4):
        length = abs(p1[0] - p2[0]) + abs(p2[0] - p3[0]) + abs(p3[0] - p4[0]) + abs(p1[1] - p2[1]) + abs(p2[1] - p3[1]) + abs(p3[1] - p4[1])
        if length > max_length:
            max_length = length
            polyline = (p1, p2, p3, p4)
    
    for point in polyline:
        print(point[0], point[1])
  
solve()","
from itertools import product

def solve():
    n, m = map(int, input().split())
    points = list(product(range(n+1), range(m+1))
    max_len = 0
    result = []
    
    for p1, p2, p3, p4 in product(points, repeat=4):
        if len(set([p1, p2, p3, p4])) == 4:
            length = abs(p1[0] - p2[0]) + abs(p2[0] - p3[0]) + abs(p3[0] - p4[0]) + abs(p4[0] - p1[0]) + abs(p1[1] - p2[1]) + abs(p2[1] - p3[1]) + abs(p3[1] - p4[1]) + abs(p4[1] - p1[1])
            if length > max_len:
                max_len = length
                result = [p1, p2, p3, p4]
    
    for p in result:
        print('{} {}'.format(p[0], p[1]))
  
solve()","
def solve():
    n, m = map(int, input().split())
    print(f""{n} {m}"")
    print(f""0 0"")
    print(f""{n} 0"")
    print(f""0 {m}"")

solve()
","20.0","16.666666666666664","0.0","20.0","","","",""
"APPS/240","
QUESTION:
Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k — the number of digits in n. 

Magically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).

Vasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).


-----Input-----

The first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.

The second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. 

It is guaranteed that the input data is correct, and the answer always exists.


-----Output-----

Print the smalles integer n which Vasya could pass to Kate.


-----Examples-----
Input
003512
021

Output
30021

Input
199966633300
63

Output
3036366999
Use user-input-Based format and function signature solve()","
def solve():
    from collections import Counter
    
    s = input().strip()
    sub = input().strip()
    
    count_s = Counter(s)
    count_sub = Counter(sub)
    
    for digit in count_sub:
        count_s[digit] -= count_sub[digit]
    
    result = """"
    leading_zero = True
    
    for digit in sorted(count_s.keys()):
        if leading_zero and digit == '0' and count_s[digit] > 0:
            result += '0' * count_s[digit]
        elif leading_zero and digit != '0' and count_s[digit] > 0:
            result += digit * count_s[digit]
            leading_zero = False
        else:
            result += digit * count_s[digit]
    
    return result


solve()","
def solve():
    s = input()
    sub = input()
    
    count = [0]*10
    for digit in s:
        count[int(digit)] += 1
    
    for digit in sub:
        count[int(digit)] -= 1
    
    if sub[0] != '0':
        count[int(sub[0])] += 1
        for i in range(1, 10):
            if count[i] > 0:
                smallest_digit = i
                break
    else:
        smallest_digit = 1
        for i in range(1, 10):
            if count[i] > 0:
                smallest_digit = i
                break
    
    result = str(smallest_digit) + sub
    for i in range(10):
        result += str(i) * count[i]
    
    print(result)

solve()
","
def solve():
    # Import necessary libraries
    import collections

    # Read input
    received_str = input().strip()
    remembered_substr = input().strip()

    # Find location of remembered substring
    indices = [i for i, s in enumerate(received_str) if s == remembered_substr[0]]

    # Find all possible substrings and sort them based on length and value
    possible_nums = []
    for index in indices:
        num = received_str[index:index+len(remembered_substr)]
        if num == remembered_substr:
            possible_nums.append(received_str[:index] + received_str[index+len(remembered_substr):])
            
    possible_nums.sort(key=lambda x: (len(x), x))

    print('0' * received_str.count('0') + possible_nums[0])

# Call the function to run
solve()
","
def solve():
    import itertools
    s = input()
    t = input()
    
    def restore_number(s, t):
        n = len(s) - len(t)
        for perm in itertools.permutations(t):
            match = ''.join(perm)
            if n == 0:
                if match <= s:
                    return match
            else:
                if match < s:
                    return '1' + '0' * n + match
        return '1' + '0' * n + ''.join(t)

    result = restore_number(s, t)
    return result


solve()","0.0","0.0","0.0","0.0","","","",""
"APPS/241","
QUESTION:
Not so long ago company R2 bought company R1 and consequently, all its developments in the field of multicore processors. Now the R2 laboratory is testing one of the R1 processors.

The testing goes in n steps, at each step the processor gets some instructions, and then its temperature is measured. The head engineer in R2 is keeping a report record on the work of the processor: he writes down the minimum and the maximum measured temperature in his notebook. His assistant had to write down all temperatures into his notebook, but (for unknown reasons) he recorded only m.

The next day, the engineer's assistant filed in a report with all the m temperatures. However, the chief engineer doubts that the assistant wrote down everything correctly (naturally, the chief engineer doesn't doubt his notes). So he asked you to help him. Given numbers n, m, min, max and the list of m temperatures determine whether you can upgrade the set of m temperatures to the set of n temperatures (that is add n - m temperatures), so that the minimum temperature was min and the maximum one was max.


-----Input-----

The first line contains four integers n, m, min, max (1 ≤ m < n ≤ 100; 1 ≤ min < max ≤ 100). The second line contains m space-separated integers t_{i} (1 ≤ t_{i} ≤ 100) — the temperatures reported by the assistant.

Note, that the reported temperatures, and the temperatures you want to add can contain equal temperatures.


-----Output-----

If the data is consistent, print 'Correct' (without the quotes). Otherwise, print 'Incorrect' (without the quotes).


-----Examples-----
Input
2 1 1 2
1

Output
Correct

Input
3 1 1 3
2

Output
Correct

Input
2 1 1 3
2

Output
Incorrect



-----Note-----

In the first test sample one of the possible initial configurations of temperatures is [1, 2].

In the second test sample one of the possible initial configurations of temperatures is [2, 1, 3].

In the third test sample it is impossible to add one temperature to obtain the minimum equal to 1 and the maximum equal to 3.
Use user-input-Based format and function signature solve()","
def solve():
    n, m, min_temp, max_temp = map(int, input().split())
    reported_temps = list(map(int, input().split()))

    min_reported = min(reported_temps)
    max_reported = max(reported_temps)

    if min_temp >= min_reported and max_temp <= max_reported:
        print('Correct')
    else:
        print('Incorrect')

solve()
","
def solve():
    n, m, min_temp, max_temp = map(int, input().split())
    temperatures = list(map(int, input().split()))

    min_temp_occurs = min_temp in temperatures
    max_temp_occurs = max_temp in temperatures

    if min_temp_occurs and max_temp_occurs:
        print('Correct')
    elif min_temp > min(temperatures) and max_temp < max(temperatures):
        print('Correct')
    elif min_temp_occurs and max_temp < max(temperatures) and n > m:
        print('Correct')
    elif max_temp_occurs and min_temp > min(temperatures) and n > m:
        print('Correct')
    else:
        print('Incorrect')

solve()
","
def solve():
    n, m, min_temp, max_temp = map(int, input().split())
    reported_temps = list(map(int, input().split()))

    min_reported = min(reported_temps)
    max_reported = max(reported_temps)

    if min_temp >= min_reported and max_temp <= max_reported:
        print('Correct')
    else:
        print('Incorrect')

solve()
","
def solve():
    n, m, min_temp, max_temp = map(int, input().split())
    reported_temps = list(map(int, input().split()))

    min_reported = min(reported_temps)
    max_reported = max(reported_temps)

    if min_temp >= min_reported and max_temp <= max_reported:
        print('Correct')
    else:
        print('Incorrect')

if __name__ == ""__main__"":
    solve()
","46.666666666666664","46.666666666666664","46.666666666666664","46.666666666666664","","","",""
"APPS/242","
QUESTION:
Mr. Santa asks all the great programmers of the world to solve a trivial problem. He gives them an integer m and asks for the number of positive integers n, such that the factorial of n ends with exactly m zeroes. Are you among those great programmers who can solve this problem?


-----Input-----

The only line of input contains an integer m (1 ≤ m ≤ 100 000) — the required number of trailing zeroes in factorial.


-----Output-----

First print k — the number of values of n such that the factorial of n ends with m zeroes. Then print these k integers in increasing order.


-----Examples-----
Input
1

Output
5
5 6 7 8 9 
Input
5

Output
0


-----Note-----

The factorial of n is equal to the product of all integers from 1 to n inclusive, that is n! = 1·2·3·...·n.

In the first sample, 5! = 120, 6! = 720, 7! = 5040, 8! = 40320 and 9! = 362880.
Use user-input-Based format and function signature solve()","
from math import factorial

def solve():
    m = int(input())
    n = 1
    count = 0
    while True:
        if factorial(n) % (10 ** m) == 0:
            count += 1
        elif factorial(n) % (10 ** m) != 0:
            break
        n += 1
    print(count)
    for i in range(1, count+1):
        print(n-i, end=' ')

solve()","
from math import factorial

def solve():
    m = int(input().strip())
    count = 0
    n = 5

    while n <= m:
        count += m // n
        n *= 5

    values = []
    for i in range(5, m + 1):
        if factorial(i) % (10 ** m) == 0:
            values.append(i)
    
    print(len(values))
    print(*values)

solve()
","
from math import factorial

def solve():
    m = int(input())
    n = 5
    count = 0
    result = []

    while factorial(n) % (10 ** m) == 0:
        count += 1
        result.append(n)
        n += 5

    print(count)
    print(' '.join(str(num) for num in result))

solve()
","
from math import factorial

def solve():
    m = int(input())
    k = 0
    n_values = []
    current_n = 5
    while True:
        f = factorial(current_n)
        count = 0
        while f % 10 == 0:
            count += 1
            f //= 10
        if count == m:
            k += 1
            n_values.append(current_n)
        elif count > m:
            break
        current_n += 5
    print(k)
    print(*n_values)

solve()","6.666666666666667","6.666666666666667","7.142857142857142","6.666666666666667","","","",""
"APPS/243","
QUESTION:
Chouti was tired of the tedious homework, so he opened up an old programming problem he created years ago.

You are given a connected undirected graph with $n$ vertices and $m$ weighted edges. There are $k$ special vertices: $x_1, x_2, \ldots, x_k$.

Let's define the cost of the path as the maximum weight of the edges in it. And the distance between two vertexes as the minimum cost of the paths connecting them.

For each special vertex, find another special vertex which is farthest from it (in terms of the previous paragraph, i.e. the corresponding distance is maximum possible) and output the distance between them.

The original constraints are really small so he thought the problem was boring. Now, he raises the constraints and hopes you can solve it for him.


-----Input-----

The first line contains three integers $n$, $m$ and $k$ ($2 \leq k \leq n \leq 10^5$, $n-1 \leq m \leq 10^5$) — the number of vertices, the number of edges and the number of special vertices.

The second line contains $k$ distinct integers $x_1, x_2, \ldots, x_k$ ($1 \leq x_i \leq n$).

Each of the following $m$ lines contains three integers $u$, $v$ and $w$ ($1 \leq u,v \leq n, 1 \leq w \leq 10^9$), denoting there is an edge between $u$ and $v$ of weight $w$. The given graph is undirected, so an edge $(u, v)$ can be used in the both directions.

The graph may have multiple edges and self-loops.

It is guaranteed, that the graph is connected.


-----Output-----

The first and only line should contain $k$ integers. The $i$-th integer is the distance between $x_i$ and the farthest special vertex from it.


-----Examples-----
Input
2 3 2
2 1
1 2 3
1 2 2
2 2 1

Output
2 2 

Input
4 5 3
1 2 3
1 2 5
4 2 1
2 3 2
1 4 4
1 3 3

Output
3 3 3 



-----Note-----

In the first example, the distance between vertex $1$ and $2$ equals to $2$ because one can walk through the edge of weight $2$ connecting them. So the distance to the farthest node for both $1$ and $2$ equals to $2$.

In the second example, one can find that distance between $1$ and $2$, distance between $1$ and $3$ are both $3$ and the distance between $2$ and $3$ is $2$.

The graph may have multiple edges between and self-loops, as in the first example.
Use user-input-Based format and function signature solve()","
def solve():
    import sys
    from collections import defaultdict
    from heapq import heappop, heappush

    def dijkstra(graph, start):
        distances = {vertex: float('inf') for vertex in graph}
        distances[start] = 0
        pq = [(0, start)]

        while pq:
            current_distance, current_vertex = heappop(pq)

            if current_distance > distances[current_vertex]:
                continue

            for neighbor, weight in graph[current_vertex].items():
                distance = current_distance + weight

                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heappush(pq, (distance, neighbor))

        return distances

    n, m, k = map(int, input().split())
    special_vertices = list(map(int, input().split()))

    graph = defaultdict(dict)
    for _ in range(m):
        u, v, w = map(int, input().split())
        graph[u][v] = w
        graph[v][u] = w

    max_distances = [0] * k
    for i in range(k):
        distances = dijkstra(graph, special_vertices[i])
        max_distance = 0
        for j in range(k):
            if j != i:
                max_distance = max(max_distance, distances[special_vertices[j]])
        max_distances[i] = max_distance

    print(*max_distances)

solve()
","
def solve():
    import sys
    input = sys.stdin.readline

    n, m, k = map(int, input().split())
    special_vertices = set(map(int, input().split()))

    graph = [[] for _ in range(n+1)]
    for _ in range(m):
        u, v, w = map(int, input().split())
        graph[u].append((v, w))
        graph[v].append((u, w))

    max_dist = [0] * (n+1)

    def dfs(node, parent, dist):
        max_dist[node] = max(max_dist[node], dist)
        for neighbor, weight in graph[node]:
            if neighbor != parent:
                dfs(neighbor, node, max(dist, weight))

    for special_vertex in special_vertices:
        dfs(special_vertex, -1, 0)

    distances = [max_dist[v] for v in special_vertices]
    print(' '.join(map(str, distances)))

solve()
","
from collections import defaultdict
import heapq

def solve():
    n, m, k = map(int, input().split())
    special_vertices = list(map(int, input().split()))
    
    graph = defaultdict(list)
    for _ in range(m):
        u, v, w = map(int, input().split())
        graph[u].append((v, w))
        graph[v].append((u, w))
    
    def dijkstra(start):
        distances = [float('inf')] * (n + 1)
        distances[start] = 0
        pq = [(0, start)]
        
        while pq:
            dist, node = heapq.heappop(pq)
            if dist > distances[node]:
                continue
            for neighbor, weight in graph[node]:
                if dist + weight < distances[neighbor]:
                    distances[neighbor] = dist + weight
                    heapq.heappush(pq, (dist + weight, neighbor))
        
        return distances
    
    all_distances = [dijkstra(x) for x in special_vertices]
    
    max_distances = []
    for i in range(k):
        max_dist = 0
        for j in range(k):
            if i != j:
                max_dist = max(max_dist, all_distances[i][special_vertices[j]])
        max_distances.append(max_dist)
    
    print(' '.join(map(str, max_distances)))

solve()
","
def solve():
    import heapq

    def dijkstra(graph, start):
        distances = {vertex: float('infinity') for vertex in graph}
        distances[start] = 0
        pq = [(0, start)]
        
        while pq:
            current_distance, current_vertex = heapq.heappop(pq)
            
            if current_distance > distances[current_vertex]:
                continue
                
            for neighbor, weight in graph[current_vertex].items():
                distance = current_distance + weight
                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(pq, (distance, neighbor))
        
        return distances

    n, m, k = map(int, input().split())
    special_vertices = list(map(int, input().split()))
    
    graph = {i: {} for i in range(1, n+1)}
    
    for _ in range(m):
        u, v, w = map(int, input().split())
        graph[u][v] = w
        graph[v][u] = w

    all_distances = {vertex: dijkstra(graph, vertex) for vertex in special_vertices}
    
    max_distances = [max(all_distances[vertex].values()) for vertex in special_vertices]
    print(*max_distances)

solve()
","73.33333333333333","66.66666666666666","73.33333333333333","13.333333333333334","","","",""
"APPS/244","
QUESTION:
Bomboslav likes to look out of the window in his room and watch lads outside playing famous shell game. The game is played by two persons: operator and player. Operator takes three similar opaque shells and places a ball beneath one of them. Then he shuffles the shells by swapping some pairs and the player has to guess the current position of the ball.

Bomboslav noticed that guys are not very inventive, so the operator always swaps the left shell with the middle one during odd moves (first, third, fifth, etc.) and always swaps the middle shell with the right one during even moves (second, fourth, etc.).

Let's number shells from 0 to 2 from left to right. Thus the left shell is assigned number 0, the middle shell is 1 and the right shell is 2. Bomboslav has missed the moment when the ball was placed beneath the shell, but he knows that exactly n movements were made by the operator and the ball was under shell x at the end. Now he wonders, what was the initial position of the ball?


-----Input-----

The first line of the input contains an integer n (1 ≤ n ≤ 2·10^9) — the number of movements made by the operator.

The second line contains a single integer x (0 ≤ x ≤ 2) — the index of the shell where the ball was found after n movements.


-----Output-----

Print one integer from 0 to 2 — the index of the shell where the ball was initially placed.


-----Examples-----
Input
4
2

Output
1

Input
1
1

Output
0



-----Note-----

In the first sample, the ball was initially placed beneath the middle shell and the operator completed four movements.  During the first move operator swapped the left shell and the middle shell. The ball is now under the left shell.  During the second move operator swapped the middle shell and the right one. The ball is still under the left shell.  During the third move operator swapped the left shell and the middle shell again. The ball is again in the middle.  Finally, the operators swapped the middle shell and the right shell. The ball is now beneath the right shell.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    x = int(input())
    
    if n % 2 == 0:
        print(x)
    else:
        if x == 0:
            print(1)
        elif x == 1:
            print(0)
        else:
            print(2)

solve()","
def solve():
    n = int(input())
    x = int(input())

    if n % 2 == 0:
        return x
    else:
        if x == 0:
            return 1
        elif x == 1:
            return 0
        else:
            return 2

solve()","
def solve():
    n = int(input())
    x = int(input())
    
    if n % 2 == 0:
        return x
    else:
        if x == 0:
            return 1
        elif x == 1:
            return 0
        else:
            return 2

solve()","
def solve():
    n = int(input())
    x = int(input())
    
    if n % 2 == 1:
        if x == 0:
            return 1
        elif x == 1:
            return 0
        else:
            return 2
    else:
        return x

solve()","13.333333333333334","0.0","0.0","0.0","","","",""
"APPS/245","
QUESTION:
You are given n rectangles. The corners of rectangles have integer coordinates and their edges are parallel to the Ox and Oy axes. The rectangles may touch each other, but they do not overlap (that is, there are no points that belong to the interior of more than one rectangle). 

Your task is to determine if the rectangles form a square. In other words, determine if the set of points inside or on the border of at least one rectangle is precisely equal to the set of points inside or on the border of some square.


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 5). Next n lines contain four integers each, describing a single rectangle: x_1, y_1, x_2, y_2 (0 ≤ x_1 < x_2 ≤ 31400, 0 ≤ y_1 < y_2 ≤ 31400) — x_1 and x_2 are x-coordinates of the left and right edges of the rectangle, and y_1 and y_2 are y-coordinates of the bottom and top edges of the rectangle. 

No two rectangles overlap (that is, there are no points that belong to the interior of more than one rectangle).


-----Output-----

In a single line print ""YES"", if the given rectangles form a square, or ""NO"" otherwise.


-----Examples-----
Input
5
0 0 2 3
0 3 3 5
2 0 5 2
3 2 5 5
2 2 3 3

Output
YES

Input
4
0 0 2 3
0 3 3 5
2 0 5 2
3 2 5 5

Output
NO
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    rectangles = []
    for _ in range(n):
        x1, y1, x2, y2 = map(int, input().split())
        rectangles.append((x1, y1, x2, y2))

    min_x = min(rectangles, key=lambda x: x[0])[0]
    max_x = max(rectangles, key=lambda x: x[2])[2]
    min_y = min(rectangles, key=lambda x: x[1])[1]
    max_y = max(rectangles, key=lambda x: x[3])[3]

    total_area = (max_x - min_x) * (max_y - min_y)
    rectangles_area = sum((x2 - x1) * (y2 - y1) for x1, y1, x2, y2 in rectangles)

    if total_area == rectangles_area and max_x - min_x == max_y - min_y:
        print(""YES"")
    else:
        print(""NO"")

solve()","
def solve():
    n = int(input())
    rects = []
    for _ in range(n):
        x1, y1, x2, y2 = map(int, input().split())
        rects.append((x1, y1, x2, y2))

    x_coords = {x for x1, _, x2, _ in rects for x in [x1, x2]}
    y_coords = {y for _, y1, _, y2 in rects for y in [y1, y2}

    if len(x_coords) == 2 and len(y_coords) == 2:
        side_length = max(max(x_coords) - min(x_coords), max(y_coords) - min(y_coords))
        if all(max(coord) - min(coord) == side_length for coord in [x_coords, y_coords]):
            print(""YES"")
            return

    print(""NO"")

solve()
","
from typing import List, Tuple

def solve() -> str:
    n = int(input())
    rectangles = [tuple(map(int, input().split())) for _ in range(n)]
    
    points = set()
    for x1, y1, x2, y2 in rectangles:
        for x in range(x1, x2):
            for y in range(y1, y2):
                points.add((x, y))
    
    min_x = min(x for x, _ in points)
    max_x = max(x for x, _ in points)
    min_y = min(y for _, y in points)
    max_y = max(y for _, y in points)
    
    if len(points) == (max_x - min_x + 1) * (max_y - min_y + 1) and (max_x - min_x) == (max_y - min_y):
        return ""YES""
    else:
        return ""NO""


solve()","
def solve():
    n = int(input())
    rectangles = []
    
    for _ in range(n):
        x1, y1, x2, y2 = map(int, input().split())
        rectangles.append((x1, y1, x2, y2))
    
    x_values = set()
    y_values = set()

    for rect in rectangles:
        x_values.add(rect[0])
        x_values.add(rect[2])
        y_values.add(rect[1])
        y_values.add(rect[3])

    if len(x_values) == 2 and len(y_values) == 2:
        side_length = max(max(x_values) - min(x_values), max(y_values) - min(y_values))
        if (max(x_values) - min(x_values)) == (max(y_values) - min(y_values)) == side_length:
            print(""YES"")
        else:
            print(""NO"")
    else:
        print(""NO"")

solve()
","100.0","0.0","0.0","46.666666666666664","","","",""
"APPS/246","
QUESTION:
Ivan likes to learn different things about numbers, but he is especially interested in really big numbers. Ivan thinks that a positive integer number x is really big if the difference between x and the sum of its digits (in decimal representation) is not less than s. To prove that these numbers may have different special properties, he wants to know how rare (or not rare) they are — in fact, he needs to calculate the quantity of really big numbers that are not greater than n.

Ivan tried to do the calculations himself, but soon realized that it's too difficult for him. So he asked you to help him in calculations.


-----Input-----

The first (and the only) line contains two integers n and s (1 ≤ n, s ≤ 10^18).


-----Output-----

Print one integer — the quantity of really big numbers that are not greater than n.


-----Examples-----
Input
12 1

Output
3

Input
25 20

Output
0

Input
10 9

Output
1



-----Note-----

In the first example numbers 10, 11 and 12 are really big.

In the second example there are no really big numbers that are not greater than 25 (in fact, the first really big number is 30: 30 - 3 ≥ 20).

In the third example 10 is the only really big number (10 - 1 ≥ 9).
Use user-input-Based format and function signature solve()","
def solve():
    n, s = map(int, input().split())
    
    def sum_of_digits(num):
        return sum(int(digit) for digit in str(num))
    
    count = 0
    for x in range(1, n+1):
        if x - sum_of_digits(x) >= s:
            count += 1
    
    print(count)

solve()
","
def solve():
    n, s = map(int, input().split())
    
    def digit_sum(num):
        sum_digits = 0
        while num:
            sum_digits += num % 10
            num //= 10
        return sum_digits
    
    count = 0
    for x in range(1, n+1):
        if x - digit_sum(x) >= s:
            count += 1
    
    print(count)

solve()
 ","
def solve():
    n, s = map(int, input().split())
    def sum_of_digits(x):
        return sum(int(d) for d in str(x))

    count = 0
    for x in range(1, n+1):
        if x - sum_of_digits(x) >= s:
            count += 1

    print(count)

solve()
","
def solve():
    n, s = map(int, input().split())
    
    def sum_of_digits(num):
        return sum(int(digit) for digit in str(num))
    
    count = 0
    for x in range(1, n + 1):
        if x - sum_of_digits(x) >= s:
            count += 1
    
    print(count)

solve()
","100.0","100.0","100.0","100.0","","","",""
"APPS/247","
QUESTION:
You are given n points on Cartesian plane. Every point is a lattice point (i. e. both of its coordinates are integers), and all points are distinct.

You may draw two straight lines (not necessarily distinct). Is it possible to do this in such a way that every point lies on at least one of these lines?


-----Input-----

The first line contains one integer n (1 ≤ n ≤ 10^5) — the number of points you are given.

Then n lines follow, each line containing two integers x_{i} and y_{i} (|x_{i}|, |y_{i}| ≤ 10^9)— coordinates of i-th point. All n points are distinct.


-----Output-----

If it is possible to draw two straight lines in such a way that each of given points belongs to at least one of these lines, print YES. Otherwise, print NO.


-----Examples-----
Input
5
0 0
0 1
1 1
1 -1
2 2

Output
YES

Input
5
0 0
1 0
2 1
1 1
2 3

Output
NO



-----Note-----

In the first example it is possible to draw two lines, the one containing the points 1, 3 and 5, and another one containing two remaining points. [Image]
Use user-input-Based format and function signature solve()","
def solve():
    from collections import defaultdict
    
    n = int(input())
    points = [tuple(map(int, input().split())) for _ in range(n)]
    
    lines = defaultdict(list)
    for i in range(n):
        for j in range(i+1, n):
            a, b = points[i]
            c, d = points[j]
            slope = None
            if a == c:
                slope = float('inf')
            else:
                slope = (d - b) / (c - a)
            lines[slope].append((i, j))
    
    for line in lines.values():
        if len(line) >= n // 2:
            print(""YES"")
            return
    
    print(""NO"")

solve()","
def solve():
    n = int(input())
    points = [list(map(int, input().split())) for _ in range(n)]

    unique_slopes = set()
    for i in range(n):
        x1, y1 = points[i]
        for j in range(i+1, n):
            x2, y2 = points[j]
            if x1 == x2:
                slope = float('inf')
            else:
                slope = (y2 - y1) / (x2 - x1)
            unique_slopes.add(slope)

    if len(unique_slopes) <= 2:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
from collections import defaultdict

def solve():
    n = int(input())
    points = []
    for _ in range(n):
        x, y = map(int, input().split())
        points.append((x, y))

    num_lines_through_point = defaultdict(int)
    for i in range(n):
        for j in range(i+1, n):
            x1, y1 = points[i]
            x2, y2 = points[j]
            a = x2 - x1
            b = y2 - y1
            gcd = abs(math.gcd(a, b))
            a //= gcd
            b //= gcd
            num_lines_through_point[(a, b)] += 1

    for val in num_lines_through_point.values():
        if val >= n - 1:
            return ""YES""
    
    return ""NO""
  
solve()","
def solve():
    from collections import defaultdict

    n = int(input())
    points = [tuple(map(int, input().split())) for _ in range(n)]

    slopes = defaultdict(set)
    for i in range(n):
        x1, y1 = points[i]
        for j in range(i+1, n):
            x2, y2 = points[j]
            if x2 - x1 == 0:
                slope = float('inf')
            else:
                slope = (y2 - y1) / (x2 - x1)
            slopes[slope].add(i)
            slopes[slope].add(j)

    for slope_set in slopes.values():
        if len(slope_set) == n:
            print(""YES"")
            return

    print(""NO"")

solve()","60.0","60.0","0.0","53.333333333333336","","","",""
"APPS/248","
QUESTION:
Memory and his friend Lexa are competing to get higher score in one popular computer game. Memory starts with score a and Lexa starts with score b. In a single turn, both Memory and Lexa get some integer in the range [ - k;k] (i.e. one integer among  - k,  - k + 1,  - k + 2, ...,  - 2,  - 1, 0, 1, 2, ..., k - 1, k) and add them to their current scores. The game has exactly t turns. Memory and Lexa, however, are not good at this game, so they both always get a random integer at their turn.

Memory wonders how many possible games exist such that he ends with a strictly higher score than Lexa. Two games are considered to be different if in at least one turn at least one player gets different score. There are (2k + 1)^2t games in total. Since the answer can be very large, you should print it modulo 10^9 + 7. Please solve this problem for Memory.


-----Input-----

The first and only line of input contains the four integers a, b, k, and t (1 ≤ a, b ≤ 100, 1 ≤ k ≤ 1000, 1 ≤ t ≤ 100) — the amount Memory and Lexa start with, the number k, and the number of turns respectively.


-----Output-----

Print the number of possible games satisfying the conditions modulo 1 000 000 007 (10^9 + 7) in one line.


-----Examples-----
Input
1 2 2 1

Output
6

Input
1 1 1 2

Output
31

Input
2 12 3 1

Output
0



-----Note-----

In the first sample test, Memory starts with 1 and Lexa starts with 2. If Lexa picks  - 2, Memory can pick 0, 1, or 2 to win. If Lexa picks  - 1, Memory can pick 1 or 2 to win. If Lexa picks 0, Memory can pick 2 to win. If Lexa picks 1 or 2, Memory cannot win. Thus, there are 3 + 2 + 1 = 6 possible games in which Memory wins.
Use user-input-Based format and function signature solve()","
def solve():
    MOD = 10**9 + 7
    a, b, k, t = map(int, input().split())
    
    dp = [[0] * (2*k*t + 1) for _ in range(t + 1)]
    dp[0][k*t] = 1
    
    for i in range(1, t + 1):
        for j in range(2*k*t + 1):
            dp[i][j] = (dp[i-1][j-1] + dp[i-1][j] + dp[i-1][j+1]) % MOD
    
    ans = 0
    for i in range(2*k*t + 1):
        for j in range(i + 1, 2*k*t + 1):
            if abs(i - k*t) + abs(j - k*t) <= t:
                ans = (ans + dp[t][i] * dp[t][j]) % MOD
    
    print(ans)

solve()
","
def solve(a, b, k, t):
    MOD = 1000000007
    dp = [[0] * (2 * k * t + 4) for _ in range(t + 1)]
    dp[0][k * t + a - b] = 1

    for i in range(1, t + 1):
        for j in range(2, 2 * k * t + 1):
            dp[i][j] = (dp[i][j - 1] + dp[i - 1][j + 1] - dp[i - 1][j - 2 * k - 1]) % MOD

    ans = 0
    for j in range(k * t + 1, 2 * k * t + 1):
        ans = (ans + dp[t][j]) % MOD

    return ans

# Example usage:
input_values = [1, 2, 2, 1]
print(solve(*input_values))

solve()","
def solve(a, b, k, t):
    MOD = 1000000007
    dp = [[0] * (2*k*t + 1) for _ in range(t+1)]
    dp[0][k*t] = 1

    for i in range(1, t+1):
        for j in range(2*k*t + 1):
            dp[i][j] += dp[i-1][j]
            if j + 1 <= 2*k*t:
                dp[i][j] += dp[i-1][j+1]
            if j - 1 >= 0:
                dp[i][j] += dp[i-1][j-1]
            dp[i][j] %= MOD

    ans = 0
    for j in range(2*k*t + 1):
        for jj in range(j, 2*k*t + 1):
            if abs(jj - j) >= abs(b - a):
                ans = (ans + dp[t][j] * dp[t][jj]) % MOD

    return ans

# Sample Input
print(solve(1, 2, 2, 1))
print(solve(1, 1, 1, 2))
print(solve(2, 12, 3, 1))

solve()","
def solve():
    a, b, k, t = map(int, input().split())
    MOD = 10**9 + 7
    dp = [[0] * (2 * k * t + 1) for _ in range(t + 1)]
    dp[0][k * t] = 1

    for i in range(1, t + 1):
        for j in range(2 * k * t + 1):
            dp[i][j] = dp[i - 1][j]
            if j - 1 >= 0:
                dp[i][j] += dp[i - 1][j - 1]
            if j + 1 <= 2 * k * t:
                dp[i][j] += dp[i - 1][j + 1]

            dp[i][j] %= MOD

    ans = 0
    for j in range(2 * k * t + 1):
        pos = j - k * t
        ans += dp[t][j] * max(0, min(a + k * t - 1 - pos, k * t - pos) - max(b - pos, 0) + 1)
        ans %= MOD

    print(ans)

solve()
","0.0","0.0","0.0","13.333333333333334","","","",""
"APPS/249","
QUESTION:
Valery is a PE teacher at a school in Berland. Soon the students are going to take a test in long jumps, and Valery has lost his favorite ruler! 

However, there is no reason for disappointment, as Valery has found another ruler, its length is l centimeters. The ruler already has n marks, with which he can make measurements. We assume that the marks are numbered from 1 to n in the order they appear from the beginning of the ruler to its end. The first point coincides with the beginning of the ruler and represents the origin. The last mark coincides with the end of the ruler, at distance l from the origin. This ruler can be repesented by an increasing sequence a_1, a_2, ..., a_{n}, where a_{i} denotes the distance of the i-th mark from the origin (a_1 = 0, a_{n} = l).

Valery believes that with a ruler he can measure the distance of d centimeters, if there is a pair of integers i and j (1 ≤ i ≤ j ≤ n), such that the distance between the i-th and the j-th mark is exactly equal to d (in other words, a_{j} - a_{i} = d). 

Under the rules, the girls should be able to jump at least x centimeters, and the boys should be able to jump at least y (x < y) centimeters. To test the children's abilities, Valery needs a ruler to measure each of the distances x and y. 

Your task is to determine what is the minimum number of additional marks you need to add on the ruler so that they can be used to measure the distances x and y. Valery can add the marks at any integer non-negative distance from the origin not exceeding the length of the ruler.


-----Input-----

The first line contains four positive space-separated integers n, l, x, y (2 ≤ n ≤ 10^5, 2 ≤ l ≤ 10^9, 1 ≤ x < y ≤ l) — the number of marks, the length of the ruler and the jump norms for girls and boys, correspondingly.

The second line contains a sequence of n integers a_1, a_2, ..., a_{n} (0 = a_1 < a_2 < ... < a_{n} = l), where a_{i} shows the distance from the i-th mark to the origin.


-----Output-----

In the first line print a single non-negative integer v — the minimum number of marks that you need to add on the ruler.

In the second line print v space-separated integers p_1, p_2, ..., p_{v} (0 ≤ p_{i} ≤ l). Number p_{i} means that the i-th mark should be at the distance of p_{i} centimeters from the origin. Print the marks in any order. If there are multiple solutions, print any of them.


-----Examples-----
Input
3 250 185 230
0 185 250

Output
1
230

Input
4 250 185 230
0 20 185 250

Output
0

Input
2 300 185 230
0 300

Output
2
185 230



-----Note-----

In the first sample it is impossible to initially measure the distance of 230 centimeters. For that it is enough to add a 20 centimeter mark or a 230 centimeter mark.

In the second sample you already can use the ruler to measure the distances of 185 and 230 centimeters, so you don't have to add new marks.

In the third sample the ruler only contains the initial and the final marks. We will need to add two marks to be able to test the children's skills.
Use user-input-Based format and function signature solve()","
def solve():
    n, l, x, y = map(int, input().split())
    marks = list(map(int, input().split()))
    
    has_x = False
    has_y = False
    for i in range(n):
        if marks[i] + x in marks:
            has_x = True
        if marks[i] + y in marks:
            has_y = True
        if marks[i] - x in marks:
            has_x = True
        if marks[i] - y in marks:
            has_y = True
        if marks[i] + x + y in marks or marks[i] - x - y in marks:
            has_x = True
            has_y = True
    
    if has_x and has_y:
        print(0)
    elif has_x:
        print(1)
        print(y)
    elif has_y:
        print(1)
        print(x)
    else:
        for i in range(n):
            if marks[i] + x not in marks and 0 < marks[i] + x < l:
                print(1)
                print(marks[i] + x)
                return
            if marks[i] - x not in marks and 0 < marks[i] - x < l:
                print(1)
                print(marks[i] - x)
                return
            if marks[i] + y not in marks and 0 < marks[i] + y < l:
                print(1)
                print(marks[i] + y)
                return
            if marks[i] - y not in marks and 0 < marks[i] - y < l:
                print(1)
                print(marks[i] - y)
                return
            if marks[i] + x + y not in marks and 0 < marks[i] + x + y < l:
                print(1)
                print(marks[i] + x + y)
                return
            if marks[i] - x - y not in marks and 0 < marks[i] - x - y < l:
                print(1)
                print(marks[i] - x - y)
                return

solve()","
def solve():
    n, l, x, y = map(int, input().split())
    marks = list(map(int, input().split()))

    dist = {y-x, y, x}
    added_mark = []

    for m in dist:
        if m + marks[0] in marks:
            added_mark.append(marks[0])
            break
        if m + marks[-1] in marks:
            added_mark.append(marks[-1])
            break
        for i in range(1, n):
            if marks[i]-marks[i-1] == m:
                added_mark.extend([marks[i-1], marks[i]])
                break

    if len(added_mark) == 0:
        diff = [marks[i]-marks[i-1] for i in range(1, n)]
        for i in range(n-1):
            if marks[i] + x in marks:
                added_mark.extend([marks[i], marks[i] + x])
                break
            if marks[i] + y in marks:
                added_mark.extend([marks[i], marks[i] + y])
                break
            if marks[i] + x + y in marks:
                added_mark.extend([marks[i], marks[i] + x])
                break
            if marks[i] - x in marks:
                added_mark.extend([marks[i], marks[i] - x])
                break
            if marks[i] - y in marks:
                added_mark.extend([marks[i], marks[i] - y])
                break

    if len(added_mark) == 0:
        for i in range(n-1):
            if marks[i] + y-x in marks:
                added_mark.extend([marks[i], marks[i] + y-x])
                break

    if len(added_mark) == 0:
        marks_set = set(marks)
        for m in dist:
            new_mark = marks[0] + m
            if 0 < new_mark < l and new_mark not in marks_set:
                added_mark.append(new_mark)
                break
            new_mark = marks[-1] - m
            if 0 < new_mark < l and new_mark not in marks_set:
                added_mark.append(new_mark)
                break

    print(len(added_mark))
    print("" "".join(str(mark) for mark in added_mark))


solve()","
def solve():
    n, l, x, y = map(int, input().split())
    marks = list(map(int, input().split()))

    def check_distances(distances, x, y):
        for d in distances:
            if x + d in distances or y + d in distances:
                return True
        return False

    distances = set()
    for i in range(n):
        distances.add(marks[i])
        if marks[i] + x <= l:
            distances.add(marks[i] + x)
        if marks[i] + y <= l:
            distances.add(marks[i] + y)

    if check_distances(distances, x, y):
        print(0)
    else:
        for i in range(n):
            if marks[i] + x in distances:
                print(1)
                print(marks[i] + x)
                return
            if marks[i] - x >= 0 and marks[i] + y <= l and marks[i] - x + y in distances:
                print(1)
                print(marks[i] - x)
                return
        print(2)
        print(x, y)

solve()","
def solve():
    pass

solve()","33.33333333333333","0.0","13.333333333333334","0.0","","","",""
"APPS/250","
QUESTION:
As you know, every birthday party has a cake! This time, Babaei is going to prepare the very special birthday party's cake.

Simple cake is a cylinder of some radius and height. The volume of the simple cake is equal to the volume of corresponding cylinder. Babaei has n simple cakes and he is going to make a special cake placing some cylinders on each other.

However, there are some additional culinary restrictions. The cakes are numbered in such a way that the cake number i can be placed only on the table or on some cake number j where j < i. Moreover, in order to impress friends Babaei will put the cake i on top of the cake j only if the volume of the cake i is strictly greater than the volume of the cake j.

Babaei wants to prepare a birthday cake that has a maximum possible total volume. Help him find this value.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of simple cakes Babaei has.

Each of the following n lines contains two integers r_{i} and h_{i} (1 ≤ r_{i}, h_{i} ≤ 10 000), giving the radius and height of the i-th cake.


-----Output-----

Print the maximum volume of the cake that Babaei can make. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}.

Namely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\frac{|a - b|}{\operatorname{max}(1, b)} \leq 10^{-6}$.


-----Examples-----
Input
2
100 30
40 10

Output
942477.796077000

Input
4
1 1
9 7
1 4
10 7

Output
3983.539484752



-----Note-----

In first sample, the optimal way is to choose the cake number 1.

In second sample, the way to get the maximum volume is to use cakes with indices 1, 2 and 4.
Use user-input-Based format and function signature solve()","
from math import pi

def solve():
    n = int(input())
    cakes = []
    for _ in range(n):
        r, h = map(int, input().split())
        cakes.append((r, h))

    dp = [0] * n
    for i in range(n):
        r, h = cakes[i]
        dp[i] = pi * r * r * h
        for j in range(i):
            r_j, h_j = cakes[j]
            if r_j < r:
                dp[i] = max(dp[i], dp[j] + pi * r * r * h)

    print(max(dp))

solve()
","
from math import pi

def solve():
    n = int(input())
    cakes = []
    for _ in range(n):
        r, h = map(int, input().split())
        cakes.append((pi * r**2 * h, r, h))
    cakes.sort(reverse=True)

    dp = [0] * n
    for i, (_, r, h) in enumerate(cakes):
        dp[i] = pi * r**2 * h
        for j in range(i):
            if cakes[j][1] < r:
                dp[i] = max(dp[i], dp[j] + pi * r**2 * h)

    print(max(dp))

solve()
","
from math import pi

def solve():
    n = int(input())
    cakes = [tuple(map(int, input().split())) for _ in range(n)]
    dp = [0] * n
    for i in range(n):
        r, h = cakes[i]
        dp[i] = pi * r ** 2 * h
        for j in range(i):
            r_j, h_j = cakes[j]
            if r_j < r:
                dp[i] = max(dp[i], dp[j] + pi * r ** 2 * h)
    print('{:.9f}'.format(max(dp))

solve()
","
from math import pi

def solve():
    n = int(input())
    cakes = [list(map(int, input().split())) for _ in range(n)]
    dp = [0] * n
    
    for i in range(n):
        r_i, h_i = cakes[i]
        dp[i] = pi * r_i**2 * h_i
        
        for j in range(i):
            r_j, h_j = cakes[j]
            if r_i > r_j:
                dp[i] = max(dp[i], dp[j] + pi * r_i**2 * h_i)
    
    print(""{:.9f}"".format(max(dp)))
  
solve()","0.0","0.0","0.0","93.33333333333333","","","",""
"APPS/251","
QUESTION:
There is a toy building consisting of $n$ towers. Each tower consists of several cubes standing on each other. The $i$-th tower consists of $h_i$ cubes, so it has height $h_i$.

Let's define operation slice on some height $H$ as following: for each tower $i$, if its height is greater than $H$, then remove some top cubes to make tower's height equal to $H$. Cost of one ""slice"" equals to the total number of removed cubes from all towers.

Let's name slice as good one if its cost is lower or equal to $k$ ($k \ge n$).

 [Image] 

Calculate the minimum number of good slices you have to do to make all towers have the same height. Of course, it is always possible to make it so.


-----Input-----

The first line contains two integers $n$ and $k$ ($1 \le n \le 2 \cdot 10^5$, $n \le k \le 10^9$) — the number of towers and the restriction on slices, respectively.

The second line contains $n$ space separated integers $h_1, h_2, \dots, h_n$ ($1 \le h_i \le 2 \cdot 10^5$) — the initial heights of towers.


-----Output-----

Print one integer — the minimum number of good slices you have to do to make all towers have the same heigth.


-----Examples-----
Input
5 5
3 1 2 2 4

Output
2

Input
4 5
2 3 4 5

Output
2



-----Note-----

In the first example it's optimal to make $2$ slices. The first slice is on height $2$ (its cost is $3$), and the second one is on height $1$ (its cost is $4$).
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    heights = list(map(int, input().split()))
    
    min_height = min(heights)
    total_slices = 0
    
    for height in heights:
        diff = min_height - height
        total_slices += diff
    
    if total_slices > k:
        return (total_slices + k - 1) // k
    else:
        return 1

solve()","
def solve():
    from math import ceil
    n, k = map(int, input().split())
    heights = list(map(int, input().split()))

    min_height = min(heights)
    total_slices = 0
    
    for height in heights:
        diff = height - min_height
        total_slices += ceil(diff / k)

    print(total_slices)

solve()
","
def solve():
    from math import ceil
    n, k = map(int, input().split())
    heights = list(map(int, input().split()))
    
    min_slices = (sum(heights) + k - 1) // k
    
    print(min_slices)

solve()
","
def solve():
    n, k = map(int, input().split())
    heights = list(map(int, input().split()))

    min_height = min(heights)
    total_slices = 0

    for height in heights:
        if height > min_height:
            diff = height - min_height
            total_slices += diff

    if total_slices <= k:
        print(total_slices + (n-1))
    else:
        print(-1)

solve()
","0.0","86.66666666666667","0.0","20.0","","","",""
"APPS/252","
QUESTION:
Alice and Bob are playing yet another card game. This time the rules are the following. There are $n$ cards lying in a row in front of them. The $i$-th card has value $a_i$. 

First, Alice chooses a non-empty consecutive segment of cards $[l; r]$ ($l \le r$). After that Bob removes a single card $j$ from that segment $(l \le j \le r)$. The score of the game is the total value of the remaining cards on the segment $(a_l + a_{l + 1} + \dots + a_{j - 1} + a_{j + 1} + \dots + a_{r - 1} + a_r)$. In particular, if Alice chooses a segment with just one element, then the score after Bob removes the only card is $0$.

Alice wants to make the score as big as possible. Bob takes such a card that the score is as small as possible.

What segment should Alice choose so that the score is maximum possible? Output the maximum score.


-----Input-----

The first line contains a single integer $n$ ($1 \le n \le 10^5$) — the number of cards.

The second line contains $n$ integers $a_1, a_2, \dots, a_n$ ($-30 \le a_i \le 30$) — the values on the cards.


-----Output-----

Print a single integer — the final score of the game.


-----Examples-----
Input
5
5 -2 10 -1 4

Output
6

Input
8
5 2 5 3 -30 -30 6 9

Output
10

Input
3
-10 6 -15

Output
0



-----Note-----

In the first example Alice chooses a segment $[1;5]$ — the entire row of cards. Bob removes card $3$ with the value $10$ from the segment. Thus, the final score is $5 + (-2) + (-1) + 4 = 6$.

In the second example Alice chooses a segment $[1;4]$, so that Bob removes either card $1$ or $3$ with the value $5$, making the answer $5 + 2 + 3 = 10$.

In the third example Alice can choose any of the segments of length $1$: $[1;1]$, $[2;2]$ or $[3;3]$. Bob removes the only card, so the score is $0$. If Alice chooses some other segment then the answer will be less than $0$.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    cards = list(map(int, input().split()))
    
    prefix_sum = [0] * (n + 1)
    for i in range(1, n + 1):
        prefix_sum[i] = prefix_sum[i - 1] + cards[i - 1]
    
    max_score = 0
    min_prefix_sum = 0
    for i in range(1, n + 1):
        max_score = max(max_score, prefix_sum[i] - min_prefix_sum)
        min_prefix_sum = min(min_prefix_sum, prefix_sum[i])
    
    print(max_score)

solve()","
def solve():
    n = int(input())
    cards = list(map(int, input().split()))

    total_sum = sum(cards)
    max_score = 0
    current_sum = 0

    for card_value in cards:
        current_sum = max(card_value, current_sum + card_value)
        max_score = max(max_score, current_sum)

    min_score = float('inf')
    current_sum = 0

    for card_value in cards:
        current_sum = min(card_value, current_sum + card_value)
        min_score = min(min_score, current_sum)

    print(max(total_sum - min_score, max_score))

solve()","
def solve():
    n = int(input())
    a = list(map(int, input().split()))

    prefix_sum = [0] * (n+1)
    for i in range(1, n+1):
        prefix_sum[i] = prefix_sum[i-1] + a[i-1]

    max_segment_score = 0
    min_prefix_sum = 0
    total_sum = prefix_sum[n]

    for i in range(1, n+1):
        max_segment_score = max(max_segment_score, prefix_sum[i] - min_prefix_sum)
        min_prefix_sum = min(min_prefix_sum, prefix_sum[i])

    return total_sum - max_segment_score

solve()","
def solve():
    n = int(input())
    cards = list(map(int, input().split()))

    total_sum = sum(cards)
    prefix_sum = [0] * (n + 1)
    for i in range(1, n + 1):
        prefix_sum[i] = prefix_sum[i - 1] + cards[i - 1]

    max_score = 0
    min_prefix_sum = 0
    for i in range(1, n + 1):
        max_score = max(max_score, prefix_sum[i] - min_prefix_sum)
        min_prefix_sum = min(min_prefix_sum, prefix_sum[i])

    print(max_score)
  
solve()","0.0","0.0","0.0","0.0","","","",""
"APPS/253","
QUESTION:
Mishka is decorating the Christmas tree. He has got three garlands, and all of them will be put on the tree. After that Mishka will switch these garlands on.

When a garland is switched on, it periodically changes its state — sometimes it is lit, sometimes not. Formally, if i-th garland is switched on during x-th second, then it is lit only during seconds x, x + k_{i}, x + 2k_{i}, x + 3k_{i} and so on.

Mishka wants to switch on the garlands in such a way that during each second after switching the garlands on there would be at least one lit garland. Formally, Mishka wants to choose three integers x_1, x_2 and x_3 (not necessarily distinct) so that he will switch on the first garland during x_1-th second, the second one — during x_2-th second, and the third one — during x_3-th second, respectively, and during each second starting from max(x_1, x_2, x_3) at least one garland will be lit.

Help Mishka by telling him if it is possible to do this!


-----Input-----

The first line contains three integers k_1, k_2 and k_3 (1 ≤ k_{i} ≤ 1500) — time intervals of the garlands.


-----Output-----

If Mishka can choose moments of time to switch on the garlands in such a way that each second after switching the garlands on at least one garland will be lit, print YES.

Otherwise, print NO.


-----Examples-----
Input
2 2 3

Output
YES

Input
4 2 3

Output
NO



-----Note-----

In the first example Mishka can choose x_1 = 1, x_2 = 2, x_3 = 1. The first garland will be lit during seconds 1, 3, 5, 7, ..., the second — 2, 4, 6, 8, ..., which already cover all the seconds after the 2-nd one. It doesn't even matter what x_3 is chosen. Our choice will lead third to be lit during seconds 1, 4, 7, 10, ..., though.

In the second example there is no way to choose such moments of time, there always be some seconds when no garland is lit.
Use user-input-Based format and function signature solve()","
def solve():
    k1, k2, k3 = map(int, input().split())
    
    if (k1 + 1) * (k2 + 1) * (k3 + 1) % 2 == 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    k1, k2, k3 = map(int, input().split())

    if max(k1, k2, k3) * 2 <= k1 + k2 + k3:
        print(""YES"")
    else:
        print(""NO"")

solve()","
def solve():
    k1, k2, k3 = map(int, input().split())

    max_k = max(k1, k2, k3)

    if (max_k-1) * 3 < (k1 + k2 + k3):
        print(""NO"")
    else:
        print(""YES"")

solve()
","
def solve():
    k1, k2, k3 = map(int, input().split())
    if k1 == max(k1, k2, k3) or k2 == max(k1, k2, k3) or k3 == max(k1, k2, k3):
        print(""YES"")
    elif 2 * max(k1, k2, k3) - k1 - k2 - k3 < 0:
        print(""YES"")
    else:
        print(""NO"")

solve()
","46.666666666666664","40.0","46.666666666666664","46.666666666666664","","","",""
"APPS/254","
QUESTION:
You are given a string $s$ of length $n$ consisting of lowercase Latin letters. You may apply some operations to this string: in one operation you can delete some contiguous substring of this string, if all letters in the substring you delete are equal. For example, after deleting substring bbbb from string abbbbaccdd we get the string aaccdd.

Calculate the minimum number of operations to delete the whole string $s$.


-----Input-----

The first line contains one integer $n$ ($1 \le n \le 500$) — the length of string $s$.

The second line contains the string $s$ ($|s| = n$) consisting of lowercase Latin letters.


-----Output-----

Output a single integer — the minimal number of operation to delete string $s$.


-----Examples-----
Input
5
abaca

Output
3
Input
8
abcddcba

Output
4
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    s = input()
    
    operations = 0
    while s:
        i = 0
        while i < len(s):
            j = i
            while j < len(s) and s[j] == s[i]:
                j += 1
            operations += 1
            i = j
        s = s.replace(s[i-1], '')
    
    return operations

solve()","
def solve():
    n = int(input())
    s = input()
    
    dp = [[0]*n for _ in range(n)]
    
    for l in range(1, n):
        for i in range(n-l):
            j = i + l
            dp[i][j] = l + 1
            for k in range(i, j):
                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])
                if s[i] == s[k+1]:
                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] - 1)
    
    return dp[0][n-1] if n > 0 else 0
  
solve()","
def solve():
    n = int(input())
    s = input()

    operations = 0

    while len(s) > 0:
        i = 0
        while i < len(s):
            j = i
            while j < len(s) and s[j] == s[i]:
                j += 1
            operations += 1
            i = j

        s = s.replace(s[0], '')

    return operations

solve()","
def solve():
    n = int(input())
    s = input()

    operations = 0
    i = 0

    while i < n:
        start = i
        while i < n and s[i] == s[start]:
            i += 1
        operations += 1

    print(operations)

solve()
","0.0","0.0","0.0","6.666666666666667","","","",""
"APPS/255","
QUESTION:
The Berland State University is hosting a ballroom dance in celebration of its 100500-th anniversary! n boys and m girls are already busy rehearsing waltz, minuet, polonaise and quadrille moves.

We know that several boy&girl pairs are going to be invited to the ball. However, the partners' dancing skill in each pair must differ by at most one.

For each boy, we know his dancing skills. Similarly, for each girl we know her dancing skills. Write a code that can determine the largest possible number of pairs that can be formed from n boys and m girls.


-----Input-----

The first line contains an integer n (1 ≤ n ≤ 100) — the number of boys. The second line contains sequence a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 100), where a_{i} is the i-th boy's dancing skill.

Similarly, the third line contains an integer m (1 ≤ m ≤ 100) — the number of girls. The fourth line contains sequence b_1, b_2, ..., b_{m} (1 ≤ b_{j} ≤ 100), where b_{j} is the j-th girl's dancing skill.


-----Output-----

Print a single number — the required maximum possible number of pairs.


-----Examples-----
Input
4
1 4 6 2
5
5 1 5 7 9

Output
3

Input
4
1 2 3 4
4
10 11 12 13

Output
0

Input
5
1 1 1 1 1
3
1 2 3

Output
2
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    boys_skills = list(map(int, input().split()))
    m = int(input())
    girls_skills = list(map(int, input().split()))

    boys_skills.sort()
    girls_skills.sort()
    
    pairs = 0
    i = 0
    j = 0
    
    while i < n and j < m:
        if abs(boys_skills[i] - girls_skills[j]) <= 1:
            pairs += 1
            i += 1
            j += 1
        elif boys_skills[i] < girls_skills[j]:
            i += 1
        else:
            j += 1
    
    print(pairs)

solve()
","
from collections import Counter

def solve():
    n = int(input())
    boys = list(map(int, input().split()))
    m = int(input())
    girls = list(map(int, input().split()))

    pairs = 0
    boys_counter = Counter(boys)
    girls_counter = Counter(girls)

    for boy_skill in boys_counter:
        for girl_skill in girls_counter:
            if abs(boy_skill - girl_skill) <= 1:
                min_pairs = min(boys_counter[boy_skill], girls_counter[girl_skill])
                pairs += min_pairs
                boys_counter[boy_skill] -= min_pairs
                girls_counter[girl_skill] -= min_pairs

    return pairs


solve()","
def solve():
    n = int(input())
    boys = list(map(int, input().split()))
    m = int(input())
    girls = list(map(int, input().split()))

    boys.sort()
    girls.sort()
    
    pairs = 0
    i = 0
    j = 0

    while i < n and j < m:
        if abs(boys[i] - girls[j]) <= 1:
            pairs += 1
            i += 1
            j += 1
        elif boys[i] < girls[j]:
            i += 1
        else:
            j += 1

    print(pairs)

solve()
","
def solve():
    from collections import Counter

    n = int(input())
    boys_skills = list(map(int, input().split()))
    m = int(input())
    girls_skills = list(map(int, input().split()))

    boys_counter = Counter(boys_skills)
    girls_counter = Counter(girls_skills)

    pairs = 0
    for skill_b in boys_counter.keys():
        for skill_g in girls_counter.keys():
            if abs(skill_b - skill_g) <= 1:
                pairs += min(boys_counter[skill_b], girls_counter[skill_g])
                boys_counter[skill_b] = max(0, boys_counter[skill_b] - girls_counter[skill_g])
                girls_counter[skill_g] = max(0, girls_counter[skill_g] - boys_counter[skill_b])

    return pairs


solve()","100.0","0.0","100.0","0.0","","","",""
"APPS/256","
QUESTION:
Kicker (table football) is a board game based on football, in which players control the footballers' figures mounted on rods by using bars to get the ball into the opponent's goal. When playing two on two, one player of each team controls the goalkeeper and the full-backs (plays defence), the other player controls the half-backs and forwards (plays attack).

Two teams of company Q decided to battle each other. Let's enumerate players from both teams by integers from 1 to 4. The first and second player play in the first team, the third and the fourth one play in the second team. For each of the four players we know their game skills in defence and attack. The defence skill of the i-th player is a_{i}, the attack skill is b_{i}.

Before the game, the teams determine how they will play. First the players of the first team decide who will play in the attack, and who will play in the defence. Then the second team players do the same, based on the choice of their opponents.

We will define a team's defence as the defence skill of player of the team who plays defence. Similarly, a team's attack is the attack skill of the player of the team who plays attack. We assume that one team is guaranteed to beat the other one, if its defence is strictly greater than the opponent's attack and its attack is strictly greater than the opponent's defence.

The teams of company Q know each other's strengths and therefore arrange their teams optimally. Identify the team that is guaranteed to win (if both teams act optimally) or tell that there is no such team.


-----Input-----

The input contain the players' description in four lines. The i-th line contains two space-separated integers a_{i} and b_{i} (1 ≤ a_{i}, b_{i} ≤ 100) — the defence and the attack skill of the i-th player, correspondingly.


-----Output-----

If the first team can win, print phrase ""Team 1"" (without the quotes), if the second team can win, print phrase ""Team 2"" (without the quotes). If no of the teams can definitely win, print ""Draw"" (without the quotes).


-----Examples-----
Input
1 100
100 1
99 99
99 99

Output
Team 1

Input
1 1
2 2
3 3
2 2

Output
Team 2

Input
3 3
2 2
1 1
2 2

Output
Draw



-----Note-----

Let consider the first test sample. The first team can definitely win if it will choose the following arrangement: the first player plays attack, the second player plays defence.

Consider the second sample. The order of the choosing roles for players makes sense in this sample. As the members of the first team choose first, the members of the second team can beat them (because they know the exact defence value and attack value of the first team).
Use user-input-Based format and function signature solve()","
def solve():
    players = [list(map(int, input().split())) for _ in range(4)]
    
    team1_defense = max(players[0][0], players[1][0])
    team1_attack = min(players[0][1], players[1][1])
    
    team2_defense = max(players[2][0], players[3][0])
    team2_attack = min(players[2][1], players[3][1])
    
    if team1_defense > team2_attack and team1_attack > team2_defense:
        print(""Team 1"")
    elif team2_defense > team1_attack and team2_attack > team1_defense:
        print(""Team 2"")
    else:
        print(""Draw"")

solve()","
def solve():
    team1 = []  
    team2 = []  
    
    for _ in range(4):
        a, b = map(int, input().split())
        team1.append((a, b))
    
    for _ in range(4):
        a, b = map(int, input().split())
        team2.append((a, b))
    
    team1_defense = max(team1[0][0], team1[1][0])
    team1_attack = max(team1[2][1], team1[3][1])
    
    team2_defense = max(team2[0][0], team2[1][0])
    team2_attack = max(team2[2][1], team2[3][1])
    
    if team1_defense > team2_attack and team1_attack > team2_defense:
        print(""Team 1"")
    elif team2_defense > team1_attack and team2_attack > team1_defense:
        print(""Team 2"")
    else:
        print(""Draw"")

solve()
","
def solve():
    team_1 = [list(map(int, input().split())) for _ in range(2)]
    team_2 = [list(map(int, input().split())) for _ in range(2)]
    
    team_1_defense = max(team_1[0][0], team_1[1][0])
    team_1_attack = min(team_1[0][1], team_1[1][1])
    
    team_2_defense = max(team_2[0][0], team_2[1][0])
    team_2_attack = min(team_2[0][1], team_2[1][1])
    
    if team_1_defense > team_2_attack and team_1_attack > team_2_defense:
        print(""Team 1"")
    elif team_2_defense > team_1_attack and team_2_attack > team_1_defense:
        print(""Team 2"")
    else:
        print(""Draw"")

solve()","
def solve():
    team1 = [list(map(int, input().split())) for _ in range(2)]
    team2 = [list(map(int, input().split())) for _ in range(2)]
    
    team1_defense = max(player[0] for player in team1)
    team1_attack = max(player[1] for player in team1)
    
    team2_defense = max(player[0] for player in team2)
    team2_attack = max(player[1] for player in team2)
    
    if team1_defense > team2_attack and team1_attack > team2_defense:
        print(""Team 1"")
    elif team2_defense > team1_attack and team2_attack > team1_defense:
        print(""Team 2"")
    else:
        print(""Draw"")
  
solve()","66.66666666666666","0.0","66.66666666666666","86.66666666666667","","","",""
"APPS/257","
QUESTION:
Takahashi wants to grill N pieces of meat on a grilling net, which can be seen as a two-dimensional plane. The coordinates of the i-th piece of meat are \left(x_i, y_i\right), and its hardness is c_i.
Takahashi can use one heat source to grill the meat. If he puts the heat source at coordinates \left(X, Y\right), where X and Y are real numbers, the i-th piece of meat will be ready to eat in c_i \times \sqrt{\left(X - x_i\right)^2 + \left(Y-y_i\right)^2} seconds.
Takahashi wants to eat K pieces of meat. Find the time required to have K or more pieces of meat ready if he put the heat source to minimize this time.

-----Constraints-----
 - All values in input are integers.
 - 1 \leq N \leq 60
 - 1 \leq K \leq N
 - -1000 \leq x_i , y_i \leq 1000
 - \left(x_i, y_i\right) \neq \left(x_j, y_j\right) \left(i \neq j \right)
 - 1 \leq c_i \leq 100

-----Input-----
Input is given from Standard Input in the following format:
N K
x_1 y_1 c_1
\vdots
x_N y_N c_N

-----Output-----
Print the answer.
It will be considered correct if its absolute or relative error from our answer is at most 10^{-6}.

-----Sample Input-----
4 3
-1 0 3
0 0 3
1 0 2
1 1 40

-----Sample Output-----
2.4

If we put the heat source at \left(-0.2, 0\right), the 1-st, 2-nd, and 3-rd pieces of meat will be ready to eat within 2.4 seconds. This is the optimal place to put the heat source.
Use user-input-Based format and function signature solve()","
from itertools import combinations

def solve():
    N, K = map(int, input().split())
    meats = [list(map(int, input().split())) for _ in range(N)]
    
    def calc_time(X, Y):
        return max(c * ((X - x) ** 2 + (Y - y) ** 2) ** 0.5 for x, y, c in meats)
    
    min_time = float('inf')
    for comb in combinations(meats, K):
        for x in range(-1000, 1001):
            for y in range(-1000, 1001):
                min_time = min(min_time, calc_time(x, y))
    
    print(""{:.6f}"".format(min_time))

solve()
","
from itertools import combinations

def solve():
    N, K = map(int, input().split())
    dishes = []
    for _ in range(N):
        x, y, c = map(int, input().split())
        dishes.append((x, y, c))

    ans = float('inf')
    for comb in combinations(dishes, K):
        for x in range(-1000, 1001):
            for y in range(-1000, 1001):
                time = 0
                for dish in comb:
                    xi, yi, ci = dish
                    time = max(time, ci * ((x-xi)**2 + (y-yi)**2)**0.5)
                ans = min(ans, time)

    print(""{:.6f}"".format(ans))

solve()
","
import itertools
def solve():
    N, K = map(int, input().split())
    coords = [list(map(int, input().split())) for _ in range(N)]

    def calculate_time(X, Y):
        time_list = [ci * ((X - xi)**2 + (Y - yi)**2)**0.5 for xi, yi, ci in coords]
        time_list.sort()
        return sum(time_list[:K])

    min_time = float('inf')
    for X, Y in itertools.product(range(-1000, 1001), repeat=2):
        min_time = min(min_time, calculate_time(X, Y))

    print('{:.6f}'.format(min_time))
  
solve()","
import sys
import itertools

def solve():
    N, K = map(int, input().split())
    pieces = [list(map(int, input().split())) for _ in range(N)]
    
    def time_taken(X, Y):
        time = [c * ((X - x)**2 + (Y - y)**2)**0.5 for x, y, c in pieces]
        time.sort()
        return sum(time[:K])
    
    ans = float('inf')
    for (x1, y1), (x2, y2) in itertools.combinations(pieces, 2):
        x_mid = (x1 + x2) / 2
        y_mid = (y1 + y2) / 2
        ans = min(ans, time_taken(x_mid, y_mid))
    
    for x, y, _ in pieces:
        ans = min(ans, time_taken(x, y))
    
    print(ans)

if __name__ == ""__main__"":
    solve()
","0.0","0.0","0.0","0.0","","","",""
"APPS/258","
QUESTION:
Monocarp and Bicarp live in Berland, where every bus ticket consists of $n$ digits ($n$ is an even number). During the evening walk Monocarp and Bicarp found a ticket where some of the digits have been erased. The number of digits that have been erased is even.

Monocarp and Bicarp have decided to play a game with this ticket. Monocarp hates happy tickets, while Bicarp collects them. A ticket is considered happy if the sum of the first $\frac{n}{2}$ digits of this ticket is equal to the sum of the last $\frac{n}{2}$ digits.

Monocarp and Bicarp take turns (and Monocarp performs the first of them). During each turn, the current player must replace any erased digit with any digit from $0$ to $9$. The game ends when there are no erased digits in the ticket.

If the ticket is happy after all erased digits are replaced with decimal digits, then Bicarp wins. Otherwise, Monocarp wins. You have to determine who will win if both players play optimally.


-----Input-----

The first line contains one even integer $n$ $(2 \le n \le 2 \cdot 10^{5})$ — the number of digits in the ticket.

The second line contains a string of $n$ digits and ""?"" characters — the ticket which Monocarp and Bicarp have found. If the $i$-th character is ""?"", then the $i$-th digit is erased. Note that there may be leading zeroes. The number of ""?"" characters is even.


-----Output-----

If Monocarp wins, print ""Monocarp"" (without quotes). Otherwise print ""Bicarp"" (without quotes).


-----Examples-----
Input
4
0523

Output
Bicarp

Input
2
??

Output
Bicarp

Input
8
?054??0?

Output
Bicarp

Input
6
???00?

Output
Monocarp



-----Note-----

Since there is no question mark in the ticket in the first example, the winner is determined before the game even starts, and it is Bicarp.

In the second example, Bicarp also wins. After Monocarp chooses an erased digit and replaces it with a new one, Bicap can choose another position with an erased digit and replace it with the same digit, so the ticket is happy.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    ticket = input()
    
    first_half_sum = 0
    second_half_sum = 0
    unknown_count = 0
    
    for i in range(n):
        if ticket[i] == '?':
            unknown_count += 1
        elif i < n//2:
            first_half_sum += int(ticket[i])
        else:
            second_half_sum += int(ticket[i])
    
    remaining_unknowns = unknown_count // 2
    
    if first_half_sum > second_half_sum:
        first_half_sum, second_half_sum = second_half_sum, first_half_sum
    
    diff = second_half_sum - first_half_sum
    
    if diff <= 9 * remaining_unknowns:
        if diff % 2 == 0 or (diff % 2 == 1 and '?' in ticket):
            print(""Bicarp"")
        else:
            print(""Monocarp"")
    else:
        print(""Monocarp"")

solve()
","
def solve():
    n = int(input())
    ticket = input().strip()
    
    # Count the number of erased digits
    num_erased = ticket.count('?')
    
    # If the number of erased digits is even, Bicarp wins
    if num_erased % 2 == 0:
        print(""Bicarp"")
    else:
        print(""Monocarp"")
  
solve()","
def solve():
    n = int(input())
    ticket = input()

    first_half_sum = 0
    second_half_sum = 0
    question_marks = 0

    for i in range(n):
        if ticket[i] != '?':
            if i < n // 2:
                first_half_sum += int(ticket[i])
            else:
                second_half_sum += int(ticket[i])
        else:
            question_marks += 1

    diff_in_sums = abs(first_half_sum - second_half_sum)

    if question_marks == 0:
        if diff_in_sums == 0:
            print(""Bicarp"")
        else:
            print(""Monocarp"")
    else:
        if question_marks % 2 == 1:
            print(""Monocarp"")
        else:
            if diff_in_sums % 2 == 1:
                print(""Monocarp"")
            else:
                print(""Bicarp"")

solve()
","
def solve():
    n = int(input())
    ticket = input()
    
    first_half_sum = 0
    second_half_sum = 0
    unknown_count = ticket.count('?')
    
    for i in range(n//2):
        if ticket[i] != '?':
            first_half_sum += int(ticket[i])
        else:
            unknown_count -= 1
    
    for i in range(n//2, n):
        if ticket[i] != '?':
            second_half_sum += int(ticket[i])
    
    if unknown_count == 0:
        if first_half_sum == second_half_sum:
            print(""Bicarp"")
        else:
            print(""Monocarp"")
    else:
        if first_half_sum == second_half_sum or (unknown_count > 1 and (n%2 == 1 or first_half_sum != second_half_sum)):
            print(""Bicarp"")
        else:
            print(""Monocarp"")

solve()
","86.66666666666667","86.66666666666667","53.333333333333336","86.66666666666667","","","",""
"APPS/259","
QUESTION:
It is raining heavily. But this is the first day for Serval, who just became 3 years old, to go to the kindergarten. Unfortunately, he lives far from kindergarten, and his father is too busy to drive him there. The only choice for this poor little boy is to wait for a bus on this rainy day. Under such circumstances, the poor boy will use the first bus he sees no matter where it goes. If several buses come at the same time, he will choose one randomly.

Serval will go to the bus station at time $t$, and there are $n$ bus routes which stop at this station. For the $i$-th bus route, the first bus arrives at time $s_i$ minutes, and each bus of this route comes $d_i$ minutes later than the previous one.

As Serval's best friend, you wonder which bus route will he get on. If several buses arrive at the same time, you can print any of them.


-----Input-----

The first line contains two space-separated integers $n$ and $t$ ($1\leq n\leq 100$, $1\leq t\leq 10^5$) — the number of bus routes and the time Serval goes to the station. 

Each of the next $n$ lines contains two space-separated integers $s_i$ and $d_i$ ($1\leq s_i,d_i\leq 10^5$) — the time when the first bus of this route arrives and the interval between two buses of this route.


-----Output-----

Print one number — what bus route Serval will use. If there are several possible answers, you can print any of them.


-----Examples-----
Input
2 2
6 4
9 5

Output
1

Input
5 5
3 3
2 5
5 6
4 9
6 1

Output
3

Input
3 7
2 2
2 3
2 4

Output
1



-----Note-----

In the first example, the first bus of the first route arrives at time $6$, and the first bus of the second route arrives at time $9$, so the first route is the answer.

In the second example, a bus of the third route arrives at time $5$, so it is the answer.

In the third example, buses of the first route come at times $2$, $4$, $6$, $8$, and so fourth, buses of the second route come at times $2$, $5$, $8$, and so fourth and buses of the third route come at times $2$, $6$, $10$, and so on, so $1$ and $2$ are both acceptable answers while $3$ is not.
Use user-input-Based format and function signature solve()","
def solve():
    n, t = map(int, input().split())
    routes = []
    for _ in range(n):
        s, d = map(int, input().split())
        route = (s, d)
        routes.append(route)
    
    min_time = float('inf')
    bus_route = 0
    for i, (s, d) in enumerate(routes, start=1):
        time = s if s >= t else s + ((t - s + d - 1) // d) * d
        if time < min_time:
            min_time = time
            bus_route = i
    
    print(bus_route)

solve()
","
def solve():
    n, t = map(int, input().split())
    routes = [list(map(int, input().split())) for _ in range(n)]

    min_time = float('inf')
    min_route = 0

    for i in range(n):
        s, d = routes[i]
        if s >= t:
            time_diff = s - t
            if time_diff < min_time:
                min_time = time_diff
                min_route = i + 1
        else:
            time_diff = (t - s) % d
            if time_diff < min_time:
                min_time = time_diff
                min_route = i + 1

    print(min_route)

# Main program
if __name__ == ""__main__"":
    solve()
","
def solve():
    import random
    
    n, t = map(int, input().split())
    routes = []
    for _ in range(n):
        s, d = map(int, input().split())
        time_to_wait = max(s, t) - s
        if time_to_wait % d == 0:
            print(routes.index((s, d)) + 1 if (s, d) in routes else len(routes) + 1)
            return
        else:
            times = [s + i * d for i in range(100)]  # Assuming at most 100 buses
            routes.append((s, d))
            if t > max(times):
                print(len(routes))
                return
    print(random.randint(1, n))

solve()","
def solve():
    n, t = map(int, input().split())
    buses = []
    for i in range(n):
        s, d = map(int, input().split())
        k = (t - s) / d
        if k < 0:
            k = -k
        else:
            k = int(k) + 1
        buses.append((i+1, s + k*d))
    buses.sort(key=lambda x: x[1])
    print(buses[0][0])

solve()","100.0","53.333333333333336","46.666666666666664","93.33333333333333","","","",""
"APPS/260","
QUESTION:
One day, after a difficult lecture a diligent student Sasha saw a graffitied desk in the classroom. She came closer and read: ""Find such positive integer n, that among numbers n + 1, n + 2, ..., 2·n there are exactly m numbers which binary representation contains exactly k digits one"".

The girl got interested in the task and she asked you to help her solve it. Sasha knows that you are afraid of large numbers, so she guaranteed that there is an answer that doesn't exceed 10^18.


-----Input-----

The first line contains two space-separated integers, m and k (0 ≤ m ≤ 10^18; 1 ≤ k ≤ 64).


-----Output-----

Print the required number n (1 ≤ n ≤ 10^18). If there are multiple answers, print any of them.


-----Examples-----
Input
1 1

Output
1

Input
3 2

Output
5
Use user-input-Based format and function signature solve()","
def solve():
    m, k = map(int, input().split())
    n = 2 ** k - m
    print(n)

solve()
","
def solve():
    m, k = map(int, input().split())
    n = int('1' * k, 2)
    
    while True:
        ones_count = bin(n).count('1')
        if n + ones_count - 1 >= m:
            break
        n += 1
    
    print(n)

solve()
","
def solve():
    import math

    m, k = map(int, input().split())

    min_n = int('1' + '0' * (k-1), 2)
    max_n = int('1' * k, 2)

    for n in range(min_n, max_n+1):
        count = 0
        for i in range(n+1, 2*n+1):
            if bin(i).count('1') == k:
                count += 1
        if count == m:
            print(n)
            break

solve()
","
from itertools import product

def solve():
    m, k = map(int, input().split())
    
    for n in range(1, 10**18 + 1):
        count = sum(bin(num).count('1') == k for num in range(n + 1, 2 * n + 1))
        if count == m:
            print(n)
            break

solve()
","6.666666666666667","33.33333333333333","57.14285714285714","100.0","","","",""
"APPS/261","
QUESTION:
In this problem you will meet the simplified model of game King of Thieves.

In a new ZeptoLab game called ""King of Thieves"" your aim is to reach a chest with gold by controlling your character, avoiding traps and obstacles on your way. [Image] 

An interesting feature of the game is that you can design your own levels that will be available to other players. Let's consider the following simple design of a level.

A dungeon consists of n segments located at a same vertical level, each segment is either a platform that character can stand on, or a pit with a trap that makes player lose if he falls into it. All segments have the same length, platforms on the scheme of the level are represented as '*' and pits are represented as '.'. 

One of things that affects speedrun characteristics of the level is a possibility to perform a series of consecutive jumps of the same length. More formally, when the character is on the platform number i_1, he can make a sequence of jumps through the platforms i_1 < i_2 < ... < i_{k}, if i_2 - i_1 = i_3 - i_2 = ... = i_{k} - i_{k} - 1. Of course, all segments i_1, i_2, ... i_{k} should be exactly the platforms, not pits. 

Let's call a level to be good if you can perform a sequence of four jumps of the same length or in the other words there must be a sequence i_1, i_2, ..., i_5, consisting of five platforms so that the intervals between consecutive platforms are of the same length. Given the scheme of the level, check if it is good.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 100) — the number of segments on the level.

Next line contains the scheme of the level represented as a string of n characters '*' and '.'.


-----Output-----

If the level is good, print the word ""yes"" (without the quotes), otherwise print the word ""no"" (without the quotes).


-----Examples-----
Input
16
.**.*..*.***.**.

Output
yes
Input
11
.*.*...*.*.

Output
no


-----Note-----

In the first sample test you may perform a sequence of jumps through platforms 2, 5, 8, 11, 14.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    level = input().strip()
    
    platforms = [i for i in range(n) if level[i] == '*']
    
    for i in range(len(platforms) - 4):
        if platforms[i+4] - platforms[i] == platforms[i+3] - platforms[i+1] == platforms[i+2] - platforms[i+1] == platforms[i+1] - platforms[i]:
            print(""yes"")
            return
    
    print(""no"")

solve()","
def solve():
    n = int(input())
    scheme = input()

    platforms = [i for i in range(n) if scheme[i] == '*']

    for i in range(len(platforms) - 4):
        diff = platforms[i + 1] - platforms[i]
        if all(platforms[j + 1] - platforms[j] == diff for j in range(i + 1, i + 4)):
            print(""yes"")
            return

    print(""no"")

solve()
","
def solve():
    n = int(input())
    scheme = input().strip()

    found = False
    for i in range(n - 4):
        if scheme[i] == '*' and scheme[i+1] == '*' and scheme[i+2] == '*' and scheme[i+3] == '*' and scheme[i+4] == '*':
            found = True
            break

    if found:
        print(""yes"")
    else:
        print(""no"")

solve()","
def solve():
    n = int(input())
    scheme = input().strip()

    platforms = [i for i in range(n) if scheme[i] == '*']

    for i in range(len(platforms) - 4):
        d = platforms[i+1] - platforms[i]
        for j in range(i+1, len(platforms) - 3):
            if platforms[j+1] - platforms[j] == d and platforms[j+2] - platforms[j+1] == d and platforms[j+3] - platforms[j+2] == d and platforms[j+4] - platforms[j+3] == d:
                print(""yes"")
                return
    
    print(""no"")

solve()","13.333333333333334","80.0","60.0","60.0","","","",""
"APPS/262","
QUESTION:
ZS the Coder and Chris the Baboon arrived at the entrance of Udayland. There is a n × n magic grid on the entrance which is filled with integers. Chris noticed that exactly one of the cells in the grid is empty, and to enter Udayland, they need to fill a positive integer into the empty cell.

Chris tried filling in random numbers but it didn't work. ZS the Coder realizes that they need to fill in a positive integer such that the numbers in the grid form a magic square. This means that he has to fill in a positive integer so that the sum of the numbers in each row of the grid ($\sum a_{r, i}$), each column of the grid ($\sum a_{i, c}$), and the two long diagonals of the grid (the main diagonal — $\sum a_{i, i}$ and the secondary diagonal — $\sum a_{i, n - i + 1}$) are equal. 

Chris doesn't know what number to fill in. Can you help Chris find the correct positive integer to fill in or determine that it is impossible?


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 500) — the number of rows and columns of the magic grid.

n lines follow, each of them contains n integers. The j-th number in the i-th of them denotes a_{i}, j (1 ≤ a_{i}, j ≤ 10^9 or a_{i}, j = 0), the number in the i-th row and j-th column of the magic grid. If the corresponding cell is empty, a_{i}, j will be equal to 0. Otherwise, a_{i}, j is positive.

It is guaranteed that there is exactly one pair of integers i, j (1 ≤ i, j ≤ n) such that a_{i}, j = 0.


-----Output-----

Output a single integer, the positive integer x (1 ≤ x ≤ 10^18) that should be filled in the empty cell so that the whole grid becomes a magic square. If such positive integer x does not exist, output  - 1 instead.

If there are multiple solutions, you may print any of them.


-----Examples-----
Input
3
4 0 2
3 5 7
8 1 6

Output
9

Input
4
1 1 1 1
1 1 0 1
1 1 1 1
1 1 1 1

Output
1

Input
4
1 1 1 1
1 1 0 1
1 1 2 1
1 1 1 1

Output
-1



-----Note-----

In the first sample case, we can fill in 9 into the empty cell to make the resulting grid a magic square. Indeed, 

The sum of numbers in each row is:

4 + 9 + 2 = 3 + 5 + 7 = 8 + 1 + 6 = 15.

The sum of numbers in each column is:

4 + 3 + 8 = 9 + 5 + 1 = 2 + 7 + 6 = 15.

The sum of numbers in the two diagonals is:

4 + 5 + 6 = 2 + 5 + 8 = 15.

In the third sample case, it is impossible to fill a number in the empty square such that the resulting grid is a magic square.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    grid = [list(map(int, input().split())) for _ in range(n)]
    
    empty_row, empty_col = -1, -1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 0:
                empty_row, empty_col = i, j
                break
    
    if empty_row == -1 or empty_col == -1:
        print(-1)
        return
    
    row_sum = sum(grid[empty_row])
    col_sum = sum(row[empty_col] for row in grid)
    
    if empty_row == empty_col:
        diag1_sum = sum(grid[i][i] for i in range(n))
    if empty_row == n - empty_col - 1:
        diag2_sum = sum(grid[i][n - i - 1] for i in range(n))
    
    x = max(row_sum, col_sum)
    if empty_row == empty_col:
        x = max(x, diag1_sum)
    if empty_row == n - empty_col - 1:
        x = max(x, diag2_sum)
    
    print(x - sum(grid[empty_row]))

solve()","
def solve():
    # Accepting input
    n = int(input())
    magic_grid = []
    for _ in range(n):
        row = list(map(int, input().split()))
        magic_grid.append(row)

    # Finding the sum to achieve
    target_sum = sum(magic_grid[0])

    # Finding the row and column indices of the empty cell
    empty_row, empty_col = 0, 0
    for i in range(n):
        for j in range(n):
            if magic_grid[i][j] == 0:
                empty_row, empty_col = i, j

    # Calculating the sum of the row with the empty cell
    row_sum = sum(magic_grid[empty_row])

    # Calculating the sum of the column with the empty cell
    col_sum = sum(row[empty_col] for row in magic_grid)

    # Checking if the empty cell can be filled with a valid number
    if n > 1:
        x = target_sum - row_sum
        if x <= 0:
            x = -1
    else:
        x = 1

    print(x)

solve()
","
import numpy as np

def solve():
    n = int(input())
    grid = [list(map(int, input().split())) for _ in range(n)]
    
    empty_cell = None
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 0:
                empty_cell = (i, j)
                break
    
    # Calculate the magic number
    row_sum = sum(grid[empty_cell[0]])
    col_sum = sum(row[empty_cell[1]] for row in grid)
    
    if empty_cell[0] == empty_cell[1]:
        main_diag_sum = sum(grid[i][i] for i in range(n))
        if row_sum != main_diag_sum:
            magic_number = -1
        else:
            magic_number = row_sum
    elif empty_cell[0] + empty_cell[1] == n - 1:
        sec_diag_sum = sum(grid[i][n - i - 1] for i in range(n))
        if col_sum != sec_diag_sum:
            magic_number = -1
        else:
            magic_number = col_sum
    else:
        possible_sums = []
        for i in range(n):
            if i != empty_cell[1]:
                possible_sums.append(col_sum - grid[empty_cell[0]][i])
        
        for j in range(n):
            if j != empty_cell[0]:
                possible_sums.append(row_sum - grid[j][empty_cell[1]])
        
        possible_sums = list(set(possible_sums))
        if len(possible_sums) == 1:
            magic_number = possible_sums[0]
        else:
            magic_number = -1
            
    print(magic_number)

solve()
","
def solve():
    n = int(input())
    grid = [list(map(int, input().split())) for _ in range(n)]
    row_sums = [sum(row) for row in grid]
    col_sums = [sum(col) for col in zip(*grid)]
    diag1_sum = sum(grid[i][i] for i in range(n))
    diag2_sum = sum(grid[i][n - i - 1] for i in range(n))

    empty_row, empty_col = -1, -1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 0:
                empty_row, empty_col = i, j
                break

    possible_sum = row_sums[empty_row] if empty_row != -1 else col_sums[empty_col]
    
    if empty_row == empty_col:
        possible_sum -= diag1_sum
    if empty_row + empty_col == n - 1:
        possible_sum -= diag2_sum

    if possible_sum <= 0:
        print(-1)
    else:
        print(possible_sum)

solve()
","0.0","53.333333333333336","33.33333333333333","40.0","","","",""
"APPS/263","
QUESTION:
There are $n$ benches in the Berland Central park. It is known that $a_i$ people are currently sitting on the $i$-th bench. Another $m$ people are coming to the park and each of them is going to have a seat on some bench out of $n$ available.

Let $k$ be the maximum number of people sitting on one bench after additional $m$ people came to the park. Calculate the minimum possible $k$ and the maximum possible $k$.

Nobody leaves the taken seat during the whole process.


-----Input-----

The first line contains a single integer $n$ $(1 \le n \le 100)$ — the number of benches in the park.

The second line contains a single integer $m$ $(1 \le m \le 10\,000)$ — the number of people additionally coming to the park.

Each of the next $n$ lines contains a single integer $a_i$ $(1 \le a_i \le 100)$ — the initial number of people on the $i$-th bench.


-----Output-----

Print the minimum possible $k$ and the maximum possible $k$, where $k$ is the maximum number of people sitting on one bench after additional $m$ people came to the park.


-----Examples-----
Input
4
6
1
1
1
1

Output
3 7

Input
1
10
5

Output
15 15

Input
3
6
1
6
5

Output
6 12

Input
3
7
1
6
5

Output
7 13



-----Note-----

In the first example, each of four benches is occupied by a single person. The minimum $k$ is $3$. For example, it is possible to achieve if two newcomers occupy the first bench, one occupies the second bench, one occupies the third bench, and two remaining — the fourth bench. The maximum $k$ is $7$. That requires all six new people to occupy the same bench.

The second example has its minimum $k$ equal to $15$ and maximum $k$ equal to $15$, as there is just a single bench in the park and all $10$ people will occupy it.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    m = int(input())
    a = [int(input()) for _ in range(n)]
    
    min_k = max(max(a), (sum(a) + m + n - 1) // n)
    max_k = max(a) + m
    
    print(min_k, max_k)

solve()
","
def solve():
    n = int(input())
    m = int(input())
    benches = [int(input()) for _ in range(n)]
    min_k = max(max(benches) + (m+n-1)//n, max(benches))
    max_k = max(benches) + m
    print(min_k, max_k)

solve()
","
def solve():
    n = int(input())
    m = int(input())
    initial_people = [int(input()) for _ in range(n)]

    min_possible_k = max(max(initial_people), (sum(initial_people) + m + n - 1) // n)
    max_possible_k = max(initial_people) + m

    print(min_possible_k, max_possible_k)

solve()
","
def solve():
    n = int(input())
    m = int(input())
    bench_counts = [int(input()) for _ in range(n)]
    
    max_count = max(bench_counts) + m
    min_count = max(max_count, (sum(bench_counts) + m + n - 1) // n)
    
    print(min_count, max_count)

solve()
  ","100.0","53.333333333333336","100.0","20.0","","","",""
"APPS/264","
QUESTION:
There is an airplane which has n rows from front to back. There will be m people boarding this airplane.

This airplane has an entrance at the very front and very back of the plane.

Each person has some assigned seat. It is possible for multiple people to have the same assigned seat. The people will then board the plane one by one starting with person 1. Each person can independently choose either the front entrance or back entrance to enter the plane.

When a person walks into the plane, they walk directly to their assigned seat and will try to sit in it. If it is occupied, they will continue walking in the direction they walked in until they are at empty seat - they will take the earliest empty seat that they can find. If they get to the end of the row without finding a seat, they will be angry.

Find the number of ways to assign tickets to the passengers and board the plane without anyone getting angry. Two ways are different if there exists a passenger who chose a different entrance in both ways, or the assigned seat is different. Print this count modulo 10^9 + 7.


-----Input-----

The first line of input will contain two integers n, m (1 ≤ m ≤ n ≤ 1 000 000), the number of seats, and the number of passengers, respectively.


-----Output-----

Print a single number, the number of ways, modulo 10^9 + 7.


-----Example-----
Input
3 3

Output
128



-----Note-----

Here, we will denote a passenger by which seat they were assigned, and which side they came from (either ""F"" or ""B"" for front or back, respectively).

For example, one valid way is 3B, 3B, 3B (i.e. all passengers were assigned seat 3 and came from the back entrance). Another valid way would be 2F, 1B, 3F.

One invalid way would be 2B, 2B, 2B, since the third passenger would get to the front without finding a seat.
Use user-input-Based format and function signature solve()","
def solve():
    MOD = 10**9 + 7

    n, m = map(int, input().split())

    fact = [1] * (n + m + 1)
    for i in range(1, n + m + 1):
        fact[i] = (fact[i - 1] * i) % MOD

    inv_fact = [1] * (n + m + 1)
    inv_fact[n + m] = pow(fact[n + m], MOD - 2, MOD)
    for i in range(n + m - 1, 0, -1):
        inv_fact[i] = (inv_fact[i + 1] * (i + 1)) % MOD

    def nCr(n, r):
        return (fact[n] * inv_fact[r] * inv_fact[n - r]) % MOD

    ans = 0
    for i in range(1, n + 1):
        ans = (ans + nCr(n - 1, i - 1) * nCr(m - 1, i - 1) * fact[i] * fact[n + m - i - i]) % MOD

    print(ans)

solve()
","
def solve():
    mod = 10**9 + 7
    n, m = map(int, input().split())

    fact = [1] * (n + m + 1)
    for i in range(2, n + m + 1):
        fact[i] = (fact[i - 1] * i) % mod

    inv = pow((fact[m] * fact[n - 1]) % mod, mod - 2, mod)

    ans = (fact[n + m - 1] * inv) % mod
    print(ans)

if __name__ == '__main__':
    solve()
","
from math import factorial

def solve():
    MOD = 10**9 + 7

    n, m = map(int, input().split())

    def power(base, exp):
        result = 1
        while exp > 0:
            if exp % 2 == 1:
                result = (result * base) % MOD
            base = (base * base) % MOD
            exp //= 2
        return result

    def nCr(n, r):
        numerator = factorial(n)
        denominator = (factorial(r) * factorial(n - r)) % MOD
        return (numerator * power(denominator, MOD - 2)) % MOD

    result = pow(2, m, MOD) - nCr(n, m) * pow(2, m - n, MOD)
    print(result % MOD)

solve()
","
def solve():
    MOD = 10**9 + 7
    n, m = map(int, input().split())
    ans = 1
    for i in range(m):
        ans = (ans * (n - i) * 2) % MOD
    print(ans)

solve()
","0.0","0.0","0.0","13.333333333333334","","","",""
"APPS/265","
QUESTION:
A company of $n$ friends wants to order exactly two pizzas. It is known that in total there are $9$ pizza ingredients in nature, which are denoted by integers from $1$ to $9$.

Each of the $n$ friends has one or more favorite ingredients: the $i$-th of friends has the number of favorite ingredients equal to $f_i$ ($1 \le f_i \le 9$) and your favorite ingredients form the sequence $b_{i1}, b_{i2}, \dots, b_{if_i}$ ($1 \le b_{it} \le 9$).

The website of CodePizza restaurant has exactly $m$ ($m \ge 2$) pizzas. Each pizza is characterized by a set of $r_j$ ingredients $a_{j1}, a_{j2}, \dots, a_{jr_j}$ ($1 \le r_j \le 9$, $1 \le a_{jt} \le 9$) , which are included in it, and its price is $c_j$.

Help your friends choose exactly two pizzas in such a way as to please the maximum number of people in the company. It is known that a person is pleased with the choice if each of his/her favorite ingredients is in at least one ordered pizza. If there are several ways to choose two pizzas so as to please the maximum number of friends, then choose the one that minimizes the total price of two pizzas.


-----Input-----

The first line of the input contains two integers $n$ and $m$ ($1 \le n \le 10^5, 2 \le m \le 10^5$) — the number of friends in the company and the number of pizzas, respectively.

Next, the $n$ lines contain descriptions of favorite ingredients of the friends: the $i$-th of them contains the number of favorite ingredients $f_i$ ($1 \le f_i \le 9$) and a sequence of distinct integers $b_{i1}, b_{i2}, \dots, b_{if_i}$ ($1 \le b_{it} \le 9$).

Next, the $m$ lines contain pizza descriptions: the $j$-th of them contains the integer price of the pizza $c_j$ ($1 \le c_j \le 10^9$), the number of ingredients $r_j$ ($1 \le r_j \le 9$) and the ingredients themselves as a sequence of distinct integers $a_{j1}, a_{j2}, \dots, a_{jr_j}$ ($1 \le a_{jt} \le 9$).


-----Output-----

Output two integers $j_1$ and $j_2$ ($1 \le j_1,j_2 \le m$, $j_1 \ne j_2$) denoting the indices of two pizzas in the required set. If there are several solutions, output any of them. Pizza indices can be printed in any order.


-----Examples-----
Input
3 4
2 6 7
4 2 3 9 5
3 2 3 9
100 1 7
400 3 3 2 5
100 2 9 2
500 3 2 9 5

Output
2 3

Input
4 3
1 1
1 2
1 3
1 4
10 4 1 2 3 4
20 4 1 2 3 4
30 4 1 2 3 4

Output
1 2

Input
1 5
9 9 8 7 6 5 4 3 2 1
3 4 1 2 3 4
1 4 5 6 7 8
4 4 1 3 5 7
1 4 2 4 6 8
5 4 1 9 2 8

Output
2 4
Use user-input-Based format and function signature solve()","
def solve():
    n, m = map(int, input().split())
    friends = [list(map(int, input().split()))[1:] for _ in range(n)]
    pizzas = [list(map(int, input().split()))[1:] for _ in range(m)]
    
    fav_ingredients = set()
    for friend in friends:
        fav_ingredients.update(friend)
    
    best_pizzas = []
    max_friends = 0
    min_price = float('inf')
    
    for i in range(m):
        for j in range(i+1, m):
            pizza1 = set(pizzas[i][1:])
            pizza2 = set(pizzas[j][1:])
            total_friends = sum(1 for friend in friends if set(friend).issubset(pizza1) or set(friend).issubset(pizza2))
            if total_friends > max_friends or (total_friends == max_friends and sum(pizzas[i][0], pizzas[j][0]) < min_price):
                max_friends = total_friends
                min_price = sum(pizzas[i][0], pizzas[j][0])
                best_pizzas = [i+1, j+1]
    
    print(best_pizzas[0], best_pizzas[1])

solve()
","
def solve():
    import sys
    input = sys.stdin.readline
    n, m = map(int, input().split())
    fav_ingredients = [set(map(int, input().split()[1:])) for _ in range(n)]
    pizzas = [tuple(map(int, input().split())) for _ in range(m)]

    fav_count = [0] * m
    for i, fav_ingredient in enumerate(fav_ingredients):
        for j, (_, r, ingredients) in enumerate(pizzas):
            if any(ing in fav_ingredient for ing in ingredients):
                fav_count[j] += 1

    chosen_pizzas = sorted(range(m), key=lambda x: (-fav_count[x], pizzas[x][0]))
    print(chosen_pizzas[0] + 1, chosen_pizzas[1] + 1)


solve()","
def solve():
    n, m = map(int, input().split())
    
    friends = []
    for _ in range(n):
        f, *ingredients = map(int, input().split())
        friends.append(set(ingredients))
    
    pizzas = []
    for j in range(m):
        price, r, *pizza_ingredients = map(int, input().split())
        pizzas.append((j+1, set(pizza_ingredients), price))
    
    best_pizzas = (-1, -1)
    best_friends_covered = -1
    best_total_price = float('inf')
    
    for j in range(m-1):
        for k in range(j+1, m):
            combined_ingredients = pizzas[j][1] | pizzas[k][1]
            total_friends_covered = sum(1 for friend in friends if friend <= combined_ingredients)
            
            if total_friends_covered > best_friends_covered or \
               (total_friends_covered == best_friends_covered and pizzas[j][2] + pizzas[k][2] < best_total_price):
                best_pizzas = (pizzas[j][0], pizzas[k][0])
                best_friends_covered = total_friends_covered
                best_total_price = pizzas[j][2] + pizzas[k][2]
    
    print(best_pizzas[0], best_pizzas[1])

solve()
","
def solve():
    import sys
    
    n, m = map(int, input().strip().split())
    friends = [list(map(int, input().strip().split()))[1:] for _ in range(n)]
    pizzas = [list(map(int, input().strip().split()))[1:] for _ in range(m)]

    pizza_indices = ()
    max_friends_satisfied = 0

    for i in range(m):
        for j in range(i+1, m):
            friends_satisfied = set()
            for f in friends:
                if set(f).intersection(set(pizzas[i][1:])) or set(f).intersection(set(pizzas[j][1:])):
                    friends_satisfied.add(friends.index(f) + 1)
            if len(friends_satisfied) > max_friends_satisfied:
                max_friends_satisfied = len(friends_satisfied)
                pizza_indices = (i+1, j+1)

    print(*pizza_indices)
solve()
","0.0","0.0","100.0","60.0","","","",""
"APPS/266","
QUESTION:
You have a positive integer m and a non-negative integer s. Your task is to find the smallest and the largest of the numbers that have length m and sum of digits s. The required numbers should be non-negative integers written in the decimal base without leading zeroes.


-----Input-----

The single line of the input contains a pair of integers m, s (1 ≤ m ≤ 100, 0 ≤ s ≤ 900) — the length and the sum of the digits of the required numbers.


-----Output-----

In the output print the pair of the required non-negative integer numbers — first the minimum possible number, then — the maximum possible number. If no numbers satisfying conditions required exist, print the pair of numbers ""-1 -1"" (without the quotes).


-----Examples-----
Input
2 15

Output
69 96

Input
3 0

Output
-1 -1
Use user-input-Based format and function signature solve()","
def solve():
    m, s = map(int, input().split())
    
    if s == 0 and m == 1:
        print(""0 0"")
        return
    
    if s == 0 or s > 9*m:
        print(""-1 -1"")
        return
    
    min_num = """"
    remaining_sum = s
    for i in range(m):
        digit = max(0 if i > 0 else 1, min(9, remaining_sum - 9*(m-i-1)))
        min_num += str(digit)
        remaining_sum -= digit
    
    max_num = min_num[::-1]
    
    print(min_num, max_num)

solve()
","
def solve():
    m, s = map(int, input().split())
    if s == 0:
        if m == 1:
            print(""0 0"")
        else:
            print(""-1 -1"")
        return

    if s > 9*m:
        print(""-1 -1"")
        return

    min_num = ""1"" + ""0""*(m-1)
    max_num = ""9""*m

    curr_sum = 1
    curr_num = int(min_num)
    result = """"

    while curr_num < int(max_num):
        if curr_sum == s:
            result = curr_num
            break
        if curr_num % 10 == 9:
            curr_sum += 1
        curr_num += 1

    if result == """":
        result = -1

    if int(max_num) - int(min_num) >= s:
        print(min_num, max_num)
    else:
        print(result, int(max_num))

solve()","
def solve():
    m, s = map(int, input().split())
    if s == 0 and m == 1:
        print(""0 0"")
    elif s == 0 or s > 9 * m:
        print(""-1 -1"")
    else:
        min_num = int(""1"" + ""0"" * (m - 1))
        max_num = int(""9"" * m)
        res_min = """"
        res_max = """"
        cur_sum_min, cur_sum_max = 1, 9 * m
        for i in range(m):
            d = min(9, s - cur_sum_min)
            cur_sum_min += d
            res_min += str(d)
            d = min(9, s - cur_sum_max)
            cur_sum_max -= d
            res_max += str(d)
        print(res_min, res_max)

solve()
  ","
def solve():
    m, s = map(int, input().split())

    if s == 0 and m == 1:
        print(""0 0"")
        return

    if s == 0 or s > 9 * m:
        print(""-1 -1"")
        return

    min_num = """"
    remaining_sum = s
    for i in range(m):
        digit = max(0 if i > 0 else 1, min(9, remaining_sum - 9 * (m - i - 1)))
        min_num += str(digit)
        remaining_sum -= digit

    max_num = min_num[::-1]

    print(min_num, max_num)

solve()
","73.33333333333333","40.0","40.0","73.33333333333333","","","",""
"APPS/267","
QUESTION:
You are given two integers $l$ and $r$ ($l \le r$). Your task is to calculate the sum of numbers from $l$ to $r$ (including $l$ and $r$) such that each number contains at most $k$ different digits, and print this sum modulo $998244353$.

For example, if $k = 1$ then you have to calculate all numbers from $l$ to $r$ such that each number is formed using only one digit. For $l = 10, r = 50$ the answer is $11 + 22 + 33 + 44 = 110$.


-----Input-----

The only line of the input contains three integers $l$, $r$ and $k$ ($1 \le l \le r < 10^{18}, 1 \le k \le 10$) — the borders of the segment and the maximum number of different digits.


-----Output-----

Print one integer — the sum of numbers from $l$ to $r$ such that each number contains at most $k$ different digits, modulo $998244353$.


-----Examples-----
Input
10 50 2

Output
1230

Input
1 2345 10

Output
2750685

Input
101 154 2

Output
2189



-----Note-----

For the first example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{50 \cdot 51}{2} - \frac{9 \cdot 10}{2} = 1230$. This example also explained in the problem statement but for $k = 1$.

For the second example the answer is just the sum of numbers from $l$ to $r$ which equals to $\frac{2345 \cdot 2346}{2} = 2750685$.

For the third example the answer is $101 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 121 + 122 + 131 + 133 + 141 + 144 + 151 = 2189$.
Use user-input-Based format and function signature solve()","
def solve():
    MOD = 998244353
    l, r, k = map(int, input().split())
    
    def count_digits(num):
        return len(set(str(num)))
    
    def calculate_sum(n):
        return n * (n + 1) // 2
    
    def calculate_sum_with_max_digits(num, max_digits):
        total_sum = 0
        for i in range(1, num + 1):
            if count_digits(i) <= max_digits:
                total_sum += i
        return total_sum % MOD
    
    total_sum = (calculate_sum_with_max_digits(r, k) - calculate_sum_with_max_digits(l - 1, k)) % MOD
    print(total_sum)

solve()
","
def solve():
    l, r, k = map(int, input().split())
    MOD = 998244353

    def count_digit(num, k):
        seen = set()
        count = 0
        while num > 0:
            digit = num % 10
            if digit not in seen:
                seen.add(digit)
                count += 1
            if count > k:
                return False
            num //= 10
        return True

    def calculate_sum(num, k):
        total = 0
        for i in range(1, num + 1):
            if count_digit(i, k):
                total += i
        return total % MOD

    result = (calculate_sum(r, k) - calculate_sum(l - 1, k)) % MOD
    print(result)

solve()
","
def solve():
    MOD = 998244353
    l, r, k = map(int, input().split())

    def calc(n):
        if n < 10:
            return (1 + n) * n // 2

        ans, s = 0, list(map(int, str(n)))
        for d in range(1, s[0]):
            cnt, flag, t = 0, False, []
            for i in range(len(s)):
                t.extend([x for x in range(10) if x <= s[i]])
                cnt = min(k, len(set(x for x in t if x != 0)))  # at most k different digits except '0'
                if cnt == k:
                    flag = True
                    break
            ans += sum(t) if not flag else sum(filter(lambda x: x < s[i], t)) + d * 10 ** (len(s) - 1)

        cnt, flag, t = 0, False, []
        for i in range(len(s)):
            t.extend([x for x in range(s[i] + 1)])
            cnt = min(k, len(set(t)))
            if cnt == k:
                flag = True
                break
        ans += sum(t) if not flag else sum(filter(lambda x: x < s[i], t)) + s[i]

        return ans

    result = (calc(r) - calc(l - 1)) % MOD
    print(result)

solve()
","
def solve():
    MOD = 998244353
    
    l, r, k = map(int, input().split())
    
    def count_digits(n):
        return len(set(str(n)))
    
    def sum_modulo(n):
        return n * (n + 1) // 2 % MOD
    
    def calculate_sum(l, r, k):
        total_sum = 0
        for i in range(l, r + 1):
            if count_digits(i) <= k:
                total_sum = (total_sum + i) % MOD
        return total_sum
    
    result = calculate_sum(l, r, k)
    print(result)

solve()
  ","100.0","100.0","13.333333333333334","100.0","","","",""
"APPS/268","
QUESTION:
Mishka received a gift of multicolored pencils for his birthday! Unfortunately he lives in a monochrome world, where everything is of the same color and only saturation differs. This pack can be represented as a sequence a_1, a_2, ..., a_{n} of n integer numbers — saturation of the color of each pencil. Now Mishka wants to put all the mess in the pack in order. He has an infinite number of empty boxes to do this. He would like to fill some boxes in such a way that:

  Each pencil belongs to exactly one box;  Each non-empty box has at least k pencils in it;  If pencils i and j belong to the same box, then |a_{i} - a_{j}| ≤ d, where |x| means absolute value of x. Note that the opposite is optional, there can be pencils i and j such that |a_{i} - a_{j}| ≤ d and they belong to different boxes. 

Help Mishka to determine if it's possible to distribute all the pencils into boxes. Print ""YES"" if there exists such a distribution. Otherwise print ""NO"".


-----Input-----

The first line contains three integer numbers n, k and d (1 ≤ k ≤ n ≤ 5·10^5, 0 ≤ d ≤ 10^9) — the number of pencils, minimal size of any non-empty box and maximal difference in saturation between any pair of pencils in the same box, respectively.

The second line contains n integer numbers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 10^9) — saturation of color of each pencil.


-----Output-----

Print ""YES"" if it's possible to distribute all the pencils into boxes and satisfy all the conditions. Otherwise print ""NO"".


-----Examples-----
Input
6 3 10
7 2 7 7 4 2

Output
YES

Input
6 2 3
4 5 3 13 4 10

Output
YES

Input
3 2 5
10 16 22

Output
NO



-----Note-----

In the first example it is possible to distribute pencils into 2 boxes with 3 pencils in each with any distribution. And you also can put all the pencils into the same box, difference of any pair in it won't exceed 10.

In the second example you can split pencils of saturations [4, 5, 3, 4] into 2 boxes of size 2 and put the remaining ones into another box.
Use user-input-Based format and function signature solve()","
def solve():
    n, k, d = map(int, input().split())
    pencils = list(map(int, input().split()))
    
    pencils.sort()
    
    dp = [False] * (n + 1)
    dp[0] = True
    
    for i in range(1, n + 1):
        for j in range(1, k + 1):
            if i - j >= 0 and pencils[i - 1] - pencils[i - j] <= d:
                dp[i] |= dp[i - j]
    
    if dp[n]:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
from collections import deque

def solve():
    n, k, d = map(int, input().split())
    pencils = list(map(int, input().split()))
    
    pencils.sort()
    
    boxes = deque()
    boxes.append((pencils[0], 1))
    
    for pen in pencils[1:]:
        added = False
        for box in list(boxes):
            if pen - box[0] <= d:
                boxes.append((pen, box[1]))
                boxes.remove(box)
                added = True
                break
            elif box[1] < k:
                boxes.remove(box)
                boxes.append((pen, box[1] + 1))
                added = True
                break
        if not added:
            boxes.append((pen, 1))
    
    for box in boxes:
        if box[1] < k:
            print(""NO"")
            return
    
    print(""YES"")

solve()
","
from collections import deque

def solve():
    n, k, d = map(int, input().split())
    pencils = list(map(int, input().split()))

    pencils.sort()

    dp = [0] * (n + 1)
    dp[0] = 1

    for i in range(1, n + 1):
        for j in range(1, k + 1):
            if i - j < 0:
                break
            if pencils[i - 1] - pencils[i - j] <= d:
                dp[i] |= dp[i - j]

    if dp[n]:
        print(""YES"")
    else:
        print(""NO"")

solve()
","
def solve():
    from collections import deque
    n, k, d = map(int, input().split())
    a = list(map(int, input().split()))
    
    a.sort()
    
    dp = [False] * n
    dp[0] = True
    
    q = deque()
    q.append(0)
    
    for i in range(1, n):
        while a[i] - a[q[0]] > d:
            q.popleft()
        
        if i - q[0] + 1 >= k:
            dp[i] = True
        
        if dp[i]:
            q.append(i)
    
    if dp[-1]:
        print(""YES"")
    else:
        print(""NO"")

solve()
","66.66666666666666","40.0","66.66666666666666","40.0","","","",""
"APPS/269","
QUESTION:
Nothing is eternal in the world, Kostya understood it on the 7-th of January when he saw partially dead four-color garland.

Now he has a goal to replace dead light bulbs, however he doesn't know how many light bulbs for each color are required. It is guaranteed that for each of four colors at least one light is working.

It is known that the garland contains light bulbs of four colors: red, blue, yellow and green. The garland is made as follows: if you take any four consecutive light bulbs then there will not be light bulbs with the same color among them. For example, the garland can look like ""RYBGRYBGRY"", ""YBGRYBGRYBG"", ""BGRYB"", but can not look like ""BGRYG"", ""YBGRYBYGR"" or ""BGYBGY"". Letters denote colors: 'R' — red, 'B' — blue, 'Y' — yellow, 'G' — green.

Using the information that for each color at least one light bulb still works count the number of dead light bulbs of each four colors.


-----Input-----

The first and the only line contains the string s (4 ≤ |s| ≤ 100), which describes the garland, the i-th symbol of which describes the color of the i-th light bulb in the order from the beginning of garland:   'R' — the light bulb is red,  'B' — the light bulb is blue,  'Y' — the light bulb is yellow,  'G' — the light bulb is green,  '!' — the light bulb is dead. 

The string s can not contain other symbols except those five which were described. 

It is guaranteed that in the given string at least once there is each of four letters 'R', 'B', 'Y' and 'G'. 

It is guaranteed that the string s is correct garland with some blown light bulbs, it means that for example the line ""GRBY!!!B"" can not be in the input data. 


-----Output-----

In the only line print four integers k_{r}, k_{b}, k_{y}, k_{g} — the number of dead light bulbs of red, blue, yellow and green colors accordingly.


-----Examples-----
Input
RYBGRYBGR

Output
0 0 0 0
Input
!RGYB

Output
0 1 0 0
Input
!!!!YGRB

Output
1 1 1 1
Input
!GB!RG!Y!

Output
2 1 1 0


-----Note-----

In the first example there are no dead light bulbs.

In the second example it is obvious that one blue bulb is blown, because it could not be light bulbs of other colors on its place according to the statements.
Use user-input-Based format and function signature solve()","
def solve():
    s = input().strip()
    k_r = s.count('R') - (s.count('!') if 'R' in s else 0)
    k_b = s.count('B') - (s.count('!') if 'B' in s else 0)
    k_y = s.count('Y') - (s.count('!') if 'Y' in s else 0)
    k_g = s.count('G') - (s.count('!') if 'G' in s else 0)
    print(k_r, k_b, k_y, k_g)

solve()
","
def solve():
    garland = input()
    
    red = garland.count('R') - (garland.count('!') if 'R' in garland else 0)
    blue = garland.count('B') - (garland.count('!') if 'B' in garland else 0)
    yellow = garland.count('Y') - (garland.count('!') if 'Y' in garland else 0)
    green = garland.count('G') - (garland.count('!') if 'G' in garland else 0)
    
    print(red, blue, yellow, green)

solve()","
def solve():
    s = input()
    
    dead_light_counts = {
        'R': 0,
        'B': 0,
        'Y': 0,
        'G': 0
    }
    
    for i in range(len(s)):
        if s[i] == '!':
            if s[(i-1)%len(s)] != 'R' and s[(i+1)%len(s)] != 'R':
                dead_light_counts['R'] += 1
            if s[(i-1)%len(s)] != 'B' and s[(i+1)%len(s)] != 'B':
                dead_light_counts['B'] += 1
            if s[(i-1)%len(s)] != 'Y' and s[(i+1)%len(s)] != 'Y':
                dead_light_counts['Y'] += 1
            if s[(i-1)%len(s)] != 'G' and s[(i+1)%len(s)] != 'G':
                dead_light_counts['G'] += 1
    
    print(dead_light_counts['R'], dead_light_counts['B'], dead_light_counts['Y'], dead_light_counts['G'])

solve()","
def solve():
    s = input().strip()
    dead_bulbs = {'R': 0, 'B': 0, 'Y': 0, 'G': 0}

    for i in range(len(s)):
        if s[i] == '!':
            if s[(i-1) % len(s)] != 'R' and s[(i+1) % len(s)] != 'R':
                dead_bulbs['R'] += 1
            if s[(i-1) % len(s)] != 'B' and s[(i+1) % len(s)] != 'B':
                dead_bulbs['B'] += 1
            if s[(i-1) % len(s)] != 'Y' and s[(i+1) % len(s)] != 'Y':
                dead_bulbs['Y'] += 1
            if s[(i-1) % len(s)] != 'G' and s[(i+1) % len(s)] != 'G':
                dead_bulbs['G'] += 1

    print(dead_bulbs['R'], dead_bulbs['B'], dead_bulbs['Y'], dead_bulbs['G'])
  
solve()","0.0","0.0","46.666666666666664","46.666666666666664","","","",""
"APPS/270","
QUESTION:
There is a cave consisting of N rooms and M one-directional passages. The rooms are numbered 1 through N.
Takahashi is now in Room 1, and Room N has the exit. The i-th passage connects Room s_i and Room t_i (s_i < t_i) and can only be traversed in the direction from Room s_i to Room t_i. It is known that, for each room except Room N, there is at least one passage going from that room.
Takahashi will escape from the cave. Each time he reaches a room (assume that he has reached Room 1 at the beginning), he will choose a passage uniformly at random from the ones going from that room and take that passage.
Aoki, a friend of Takahashi's, can block one of the passages (or do nothing) before Takahashi leaves Room 1. However, it is not allowed to block a passage so that Takahashi is potentially unable to reach Room N.
Let E be the expected number of passages Takahashi takes before he reaches Room N. Find the value of E when Aoki makes a choice that minimizes E.

-----Constraints-----
 - 2 \leq N \leq 600
 - N-1 \leq M \leq \frac{N(N-1)}{2}
 - s_i < t_i
 - If i != j, (s_i, t_i) \neq (s_j, t_j). (Added 21:23 JST)
 - For every v = 1, 2, ..., N-1, there exists i such that v = s_i.

-----Input-----
Input is given from Standard Input in the following format:
N M
s_1 t_1
:
s_M t_M

-----Output-----
Print the value of E when Aoki makes a choice that minimizes E.
Your output will be judged as correct when the absolute or relative error from the judge's output is at most 10^{-6}.

-----Sample Input-----
4 6
1 4
2 3
1 3
1 2
3 4
2 4

-----Sample Output-----
1.5000000000

If Aoki blocks the passage from Room 1 to Room 2, Takahashi will go along the path 1 → 3 → 4 with probability \frac{1}{2} and 1 → 4 with probability \frac{1}{2}. E = 1.5 here, and this is the minimum possible value of E.
Use user-input-Based format and function signature solve()","
from collections import defaultdict

def solve():
    N, M = map(int, input().split())
    passages = defaultdict(list)
    for _ in range(M):
        s, t = map(int, input().split())
        passages[s].append(t)
    
    dp = [0] * (N + 1)
    for i in range(N - 1, 0, -1):
        min_val = float('inf')
        for j in passages[i]:
            min_val = min(min_val, dp[j])
        dp[i] = 1 + min_val
    
    print('{:.10f}'.format(dp[1]))

solve()
","
def solve():
    import sys
    input = sys.stdin.readline

    N, M = map(int, input().split())

    graph = [[] for _ in range(N)]
    for _ in range(M):
        s, t = map(int, input().split())
        s -= 1
        t -= 1
        graph[s].append(t)

    INF = 10**9
    dp = [0] + [INF]*(N-1)
    for v in range(N-1):
        for u in range(v):
            sum_p = sum([dp[n] for n in graph[u]])
            dp[v] = min(dp[v], sum_p/len(graph[u]))
    
    return format(dp[N-2], '.10f')

solve()","
from collections import defaultdict

def solve():
    N, M = map(int, input().split())
    adj_list = defaultdict(list)
    for _ in range(M):
        s, t = map(int, input().split())
        adj_list[s].append(t)
    
    dp = [0.0] * (N + 1)
    dp[1] = 0.0
    for i in range(2, N + 1):
        dp[i] = 1.0
        for j in adj_list[i]:
            dp[i] += dp[j] / len(adj_list[i])
    
    print(f'{dp[N]:.10f}')

solve()
","
from typing import List

def solve(N: int, M: int, passages: List[List[int]]) -> float:
    adj_list = [[] for _ in range(N)]
    for s, t in passages:
        adj_list[s-1].append(t-1)
    
    min_e = float('inf')
    for blocked_idx in range(N-1):
        visited = [0] * N
        visited[0] = 1
        visited[N-1] = 1
        expected_passages = 0
        to_visit = [0]
        while to_visit:
            current = to_visit.pop()
            for neighbor in adj_list[current]:
                if neighbor != blocked_idx:
                    if not visited[neighbor]:
                        visited[neighbor] = 1
                        expected_passages += 1
                        to_visit.append(neighbor)
        min_e = min(min_e, expected_passages)
    
    return min_e

solve()","20.0","0.0","6.666666666666667","0.0","","","",""
"APPS/271","
QUESTION:
Vasya has a non-negative integer n. He wants to round it to nearest integer, which ends up with 0. If n already ends up with 0, Vasya considers it already rounded.

For example, if n = 4722 answer is 4720. If n = 5 Vasya can round it to 0 or to 10. Both ways are correct.

For given n find out to which integer will Vasya round it.


-----Input-----

The first line contains single integer n (0 ≤ n ≤ 10^9) — number that Vasya has.


-----Output-----

Print result of rounding n. Pay attention that in some cases answer isn't unique. In that case print any correct answer.


-----Examples-----
Input
5

Output
0

Input
113

Output
110

Input
1000000000

Output
1000000000

Input
5432359

Output
5432360



-----Note-----

In the first example n = 5. Nearest integers, that ends up with zero are 0 and 10. Any of these answers is correct, so you can print 0 or 10.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    if n % 10 <= 5:
        print(n - n % 10)
    else:
        print(n + (10 - n % 10))

solve()","
def solve():
    n = int(input())
    if n % 10 <= 5:
        print(n - n % 10)
    else:
        print(n + (10 - n % 10))

solve()","
def solve():
    n = int(input())
    if n % 10 <= 5:
        print(n - n % 10)
    else:
        print(n + (10 - n % 10))

solve()
","
def solve():
    n = int(input())
    if n % 10 <= 5:
        print(n // 10 * 10)
    else:
        print((n // 10 + 1) * 10)
  
solve()","100.0","100.0","100.0","100.0","","","",""
"APPS/272","
QUESTION:
Santa Claus decided to disassemble his keyboard to clean it. After he returned all the keys back, he suddenly realized that some pairs of keys took each other's place! That is, Santa suspects that each key is either on its place, or on the place of another key, which is located exactly where the first key should be. 

In order to make sure that he's right and restore the correct order of keys, Santa typed his favorite patter looking only to his keyboard.

You are given the Santa's favorite patter and the string he actually typed. Determine which pairs of keys could be mixed. Each key must occur in pairs at most once.


-----Input-----

The input consists of only two strings s and t denoting the favorite Santa's patter and the resulting string. s and t are not empty and have the same length, which is at most 1000. Both strings consist only of lowercase English letters.


-----Output-----

If Santa is wrong, and there is no way to divide some of keys into pairs and swap keys in each pair so that the keyboard will be fixed, print «-1» (without quotes).

Otherwise, the first line of output should contain the only integer k (k ≥ 0) — the number of pairs of keys that should be swapped. The following k lines should contain two space-separated letters each, denoting the keys which should be swapped. All printed letters must be distinct.

If there are several possible answers, print any of them. You are free to choose the order of the pairs and the order of keys in a pair.

Each letter must occur at most once. Santa considers the keyboard to be fixed if he can print his favorite patter without mistakes.


-----Examples-----
Input
helloworld
ehoolwlroz

Output
3
h e
l o
d z

Input
hastalavistababy
hastalavistababy

Output
0

Input
merrychristmas
christmasmerry

Output
-1
Use user-input-Based format and function signature solve()","
def solve(s: str, t: str) -> None:
    from collections import defaultdict
    
    def find_swaps(s: str, t: str) -> dict:
        swaps = defaultdict(list)
        for i in range(len(s)):
            if s[i] != t[i]:
                swaps[s[i]].append(t[i])
        return swaps
    
    swaps = find_swaps(s, t)
    
    swapped_keys = set()
    pairs = []
    
    for key in swaps:
        if key in swapped_keys:
            continue
        if swaps[key][0] in swapped_keys:
            return -1
        pairs.append((key, swaps[key][0]))
        swapped_keys.add(key)
        swapped_keys.add(swaps[key][0])
    
    print(len(pairs))
    for pair in pairs:
        print(pair[0], pair[1])

solve()","
def solve(s, t):
    diff = [(s[i], t[i]) for i in range(len(s)) if s[i] != t[i]]
    
    if len(diff) % 2 != 0:
        return -1
    
    swaps = {}
    res = []
    for pair in diff:
        if (pair[0], pair[1]) in swaps:
            res.append((pair[0], pair[1]))
            del swaps[(pair[0], pair[1])]
        else:
            swaps[(pair[1], pair[0])] = 1
            
    return len(res), ""\n"".join(["" "".join(pair) for pair in res])

solve()","
def solve():
    from collections import defaultdict
    s = input()
    t = input()
    
    if sorted(s) != sorted(t):
        print(-1)
        return
    
    swaps = []
    seen = set()
    mapping = defaultdict(str)
    
    for i in range(len(s)):
        if s[i] in seen and t[i] != mapping[s[i]]:
            print(-1)
            return
        mapping[s[i]] = t[i]
        seen.add(s[i])
    
    for key, value in mapping.items():
        if key != value:
            swaps.append((key, value))
    
    print(len(swaps))
    for swap in swaps:
        print(*swap)

solve()","
def solve(s: str, t: str) -> None:
    n = len(s)
    swaps = []
    diff_count = 0
    diff_pos = []

    for i in range(n):
        if s[i] != t[i]:
            diff_count += 1
            diff_pos.append(i)

    if diff_count % 2 == 1:
        print(-1)
    else:
        for i in range(0, diff_count, 2):
            swaps.append((s[diff_pos[i]], s[diff_pos[i+1]]))
        
        print(len(swaps))
        for swap in swaps:
            print(swap[0], swap[1])

solve()","0.0","0.0","53.333333333333336","0.0","","","",""
"APPS/273","
QUESTION:
The preferred way to generate user login in Polygon is to concatenate a prefix of the user's first name and a prefix of their last name, in that order. Each prefix must be non-empty, and any of the prefixes can be the full name. Typically there are multiple possible logins for each person.

You are given the first and the last name of a user. Return the alphabetically earliest login they can get (regardless of other potential Polygon users).

As a reminder, a prefix of a string s is its substring which occurs at the beginning of s: ""a"", ""ab"", ""abc"" etc. are prefixes of string ""{abcdef}"" but ""b"" and 'bc"" are not. A string a is alphabetically earlier than a string b, if a is a prefix of b, or a and b coincide up to some position, and then a has a letter that is alphabetically earlier than the corresponding letter in b: ""a"" and ""ab"" are alphabetically earlier than ""ac"" but ""b"" and ""ba"" are alphabetically later than ""ac"".


-----Input-----

The input consists of a single line containing two space-separated strings: the first and the last names. Each character of each string is a lowercase English letter. The length of each string is between 1 and 10, inclusive. 


-----Output-----

Output a single string — alphabetically earliest possible login formed from these names. The output should be given in lowercase as well.


-----Examples-----
Input
harry potter

Output
hap

Input
tom riddle

Output
tomr
Use user-input-Based format and function signature solve()","
def solve():
    first_name, last_name = input().split()
    login = """"
    
    for i in range(1, min(len(first_name), len(last_name)) + 1):
        prefix = first_name[:i] + last_name[:i]
        if prefix < login or not login:
            login = prefix
    
    if not login:
        login = first_name if first_name < last_name else last_name
    
    print(login.lower())

solve()
","
def solve():
    first_name, last_name = input().split()
    login = first_name[0]
    for i in range(1, min(len(first_name), len(last_name))):
        if first_name[:i+1] < last_name[:i+1]:
            login += first_name[i]
        else:
            login += last_name[i:]
            break
    if len(login) < min(len(first_name), len(last_name)):
        login += first_name[len(login):] if len(first_name) > len(last_name) else last_name[len(login):]
    print(login.lower())

if __name__ == '__main__':
    solve()
","
def solve():
    first_name, last_name = input().split()
    login = """"
    
    for i in range(1, min(len(first_name), len(last_name)) + 1):
        if first_name[:i] + last_name[:i] < last_name[:i] + first_name[:i]:
            login = first_name[:i] + last_name[:i]
        else:
            login = last_name[:i] + first_name[:i]
    
    if not login:
        login = first_name if first_name < last_name else last_name
    
    print(login.lower())

import sys
solve()
","
def solve():
    import itertools
    import sys

    def get_prefixes(name):
        return [name[:i] for i in range(1, len(name)+1)]

    first_name, last_name = input().split()
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    logins = []
    
    for prefix1 in get_prefixes(first_name):
        for prefix2 in get_prefixes(last_name):
            login = prefix1 + prefix2
            logins.append(login)

    logins.sort()
    print(next(iter(logins)).lower())

solve()
","40.0","0.0","13.333333333333334","100.0","","","",""
"APPS/274","
QUESTION:
A sequence of square brackets is regular if by inserting symbols ""+"" and ""1"" into it, you can get a regular mathematical expression from it. For example, sequences ""[[]][]"", ""[]"" and ""[[][[]]]"" — are regular, at the same time ""]["", ""[[]"" and ""[[]]]["" — are irregular. 

Draw the given sequence using a minimalistic pseudographics in the strip of the lowest possible height — use symbols '+', '-' and '|'. For example, the sequence ""[[][]][]"" should be represented as: 

+-        -++- -+    

|+- -++- -+||   |

||   ||   |||   |

|+- -++- -+||   |

+-        -++- -+



Each bracket should be represented with the hepl of one or more symbols '|' (the vertical part) and symbols '+' and '-' as on the example which is given above.

Brackets should be drawn without spaces one by one, only dividing pairs of consecutive pairwise brackets with a single-space bar (so that the two brackets do not visually merge into one symbol). The image should have the minimum possible height. 

The enclosed bracket is always smaller than the surrounding bracket, but each bracket separately strives to maximize the height of the image. So the pair of final brackets in the example above occupies the entire height of the image.

Study carefully the examples below, they adequately explain the condition of the problem. Pay attention that in this problem the answer (the image) is unique. 


-----Input-----

The first line contains an even integer n (2 ≤ n ≤ 100) — the length of the sequence of brackets.

The second line contains the sequence of brackets — these are n symbols ""["" and ""]"". It is guaranteed that the given sequence of brackets is regular. 


-----Output-----

Print the drawn bracket sequence in the format which is given in the condition. Don't print extra (unnecessary) spaces. 


-----Examples-----
Input
8
[[][]][]

Output
+-        -++- -+
|+- -++- -+||   |
||   ||   |||   |
|+- -++- -+||   |
+-        -++- -+

Input
6
[[[]]]

Output
+-     -+
|+-   -+|
||+- -+||
|||   |||
||+- -+||
|+-   -+|
+-     -+

Input
6
[[][]]

Output
+-        -+
|+- -++- -+|
||   ||   ||
|+- -++- -+|
+-        -+

Input
2
[]

Output
+- -+
|   |
+- -+

Input
4
[][]

Output
+- -++- -+
|   ||   |
+- -++- -+
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    brackets = input()

    height = 1
    for i in range(n):
        if brackets[i] == '[':
            print('|' + '-' * height + '+', end='')
            height += 1
        else:
            height -= 1
            print('|' + '-' * height + '+', end='')
        if i < n - 1:
            print(' ', end='')
    print()

    for h in range(1, height):
        for i in range(n):
            if brackets[i] == '[':
                print('|' + ' ' * (height - h) + '|' + ' ' * (h - 1) + '+', end='')
            else:
                print('|' + ' ' * (h - 1) + '+' + ' ' * (height - h) + '|', end='')
            if i < n - 1:
                print(' ', end='')
        print()

    for i in range(n):
        print('|' + '-' * height + '+', end='')
        if i < n - 1:
            print(' ', end='')
    print()

solve()","
def solve():
    n = int(input())
    brackets = input()
    
    stack = []
    level = 0
    for bracket in brackets:
        if bracket == '[':
            level = max(level, len(stack))
            stack.append(level)
        else:
            level = stack.pop()
    
    height = level
    width = 4 * n - 3
    
    grid = [[' ' for _ in range(width)] for _ in range(2 * height + 1)]
    
    for i in range(len(stack)):
        grid[stack[i] * 2][i * 2] = '+'
        grid[stack[i] * 2 + 1][i * 2] = '|'
    
    for i in range(len(stack)):
        grid[stack[i] * 2][(2 * i) + 1:2 * (i+1)] = ['-'] * 3
        grid[(stack[i] * 2) + 1][i * 2 + 1] = '+'
        
        if i + 1 < len(stack):
            for j in range(stack[i], stack[i+1]):
                grid[j * 2][(2 * i) + 2] = '|'
                grid[j * 2 + 1][(2 * i) + 2] = '|'
    
    grid[0][2 * len(stack) - 1] = '+'
    
    for i in range(2 * height + 1):
        print(''.join(grid[i]))


solve()","
def solve():
    n = int(input())
    brackets = input()

    height = 1
    for i in range(n):
        if brackets[i] == ""["":
            print(""|"" + ""-"" * (2 * height - 1) + ""+"", end="""")
            height += 1
        else:
            height -= 1
            print(""|"" + ""-"" * (2 * height + 1) + ""+"", end="""")
        if i < n - 1:
            print(""-"" * 2, end="""")
    print()

    for i in range(2 * height):
        row = ""|""
        for j in range(n):
            if brackets[j] == ""["":
                row += "" "" * 2 * (height - 1) + ""|""
            else:
                row += "" "" * (2 * height) + ""|""
            if j < n - 1:
                row += "" ""
        print(row)

    for i in range(n):
        print(""|"" + ""-"" * (2 * height + 1) + ""+"", end="""")
        if i < n - 1:
            print(""-"" * 2, end="""")
    print()

solve()
","
def solve():
    n = int(input())
    sequence = input()
    
    stack = []
    for bracket in sequence:
        if bracket == '[':
            stack.append(bracket)
        else:
            if stack[-1] == '[':
                stack.pop()
            else:
                stack[-1] += ']'
    
    height = max(len(bracket) for bracket in stack)
    
    for i in range(height):
        for bracket in stack:
            print(''.join(['|' if i < len(bracket) else ' ' for i in range(height)]), end='')
            print()
    
    for bracket in stack:
        print(''.join(['+-' if i < len(bracket) else '  ' for i in range(height)]), end='')
        print()

solve()
","0.0","0.0","0.0","0.0","","","",""
"APPS/275","
QUESTION:
Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number $q = \frac{\sqrt{5} + 1}{2}$, in particular that q^2 = q + 1, and she thinks it would make a good base for her new unique system. She called it ""golden system"". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a_0a_1...a_{n} equals to $\sum_{i = 0}^{n} a_{i} \cdot q^{n - i}$.

Soon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.

Given two numbers written in golden system notation, determine which of them has larger decimal value.


-----Input-----

Input consists of two lines — one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.


-----Output-----

Print "">"" if the first number is larger, ""<"" if it is smaller and ""="" if they are equal.


-----Examples-----
Input
1000
111

Output
<

Input
00100
11

Output
=

Input
110
101

Output
>



-----Note-----

In the first example first number equals to $((\sqrt{5} + 1) / 2)^{3} \approx 1.618033988^{3} \approx 4.236$, while second number is approximately 1.618033988^2 + 1.618033988 + 1 ≈ 5.236, which is clearly a bigger number.

In the second example numbers are equal. Each of them is  ≈ 2.618.
Use user-input-Based format and function signature solve()","
from math import sqrt

def solve():
    q = (sqrt(5) + 1) / 2

    num1 = input().strip()
    num2 = input().strip()

    val1 = sum(int(num1[i]) * q**(len(num1) - i - 1) for i in range(len(num1)))
    val2 = sum(int(num2[i]) * q**(len(num2) - i - 1) for i in range(len(num2))

    if val1 > val2:
        print("">"")
    elif val1 < val2:
        print(""<"")
    else:
        print(""="")

solve()","
import math

def solve():
    num1 = input()
    num2 = input()

    golden_ratio = (math.sqrt(5) + 1) / 2

    decimal_val1 = sum(int(num1[i]) * golden_ratio ** (len(num1) - i - 1) for i in range(len(num1))
    decimal_val2 = sum(int(num2[i]) * golden_ratio ** (len(num2) - i - 1) for i in range(len(num2))

    if decimal_val1 > decimal_val2:
        print("">"")
    elif decimal_val1 < decimal_val2:
        print(""<"")
    else:
        print(""="")

solve()
  ","
import math

def solve():
    num1 = input().strip()
    num2 = input().strip()

    def to_decimal(num):
        q = (math.sqrt(5) + 1) / 2
        decimal_val = 0
        for i in range(len(num)):
            decimal_val += int(num[i]) * (q ** (len(num) - i - 1))
        return decimal_val

    decimal1 = to_decimal(num1)
    decimal2 = to_decimal(num2)

    if decimal1 > decimal2:
        print("">"")
    elif decimal1 < decimal2:
        print(""<"")
    else:
        print(""="")

solve()
","
import math

def solve():
    q = (math.sqrt(5) + 1) / 2
    
    num1 = input().strip()
    num2 = input().strip()
    
    value1 = sum(int(num1[i]) * q**(len(num1) - 1 - i) for i in range(len(num1)))
    value2 = sum(int(num2[i]) * q**(len(num2) - 1 - i) for i in range(len(num2))
    
    if value1 > value2:
        print("">"")
    elif value1 < value2:
        print(""<"")
    else:
        print(""="")

solve()
  ","0.0","0.0","100.0","0.0","","","",""
"APPS/276","
QUESTION:
You took a peek on Thanos wearing Infinity Gauntlet. In the Gauntlet there is a place for six Infinity Gems:  the Power Gem of purple color,  the Time Gem of green color,  the Space Gem of blue color,  the Soul Gem of orange color,  the Reality Gem of red color,  the Mind Gem of yellow color. 

Using colors of Gems you saw in the Gauntlet determine the names of absent Gems.


-----Input-----

In the first line of input there is one integer $n$ ($0 \le n \le 6$) — the number of Gems in Infinity Gauntlet.

In next $n$ lines there are colors of Gems you saw. Words used for colors are: purple, green, blue, orange, red, yellow. It is guaranteed that all the colors are distinct. All colors are given in lowercase English letters.


-----Output-----

In the first line output one integer $m$ ($0 \le m \le 6$) — the number of absent Gems.

Then in $m$ lines print the names of absent Gems, each on its own line. Words used for names are: Power, Time, Space, Soul, Reality, Mind. Names can be printed in any order. Keep the first letter uppercase, others lowercase.


-----Examples-----
Input
4
red
purple
yellow
orange

Output
2
Space
Time

Input
0

Output
6
Time
Mind
Soul
Power
Reality
Space



-----Note-----

In the first sample Thanos already has Reality, Power, Mind and Soul Gems, so he needs two more: Time and Space.

In the second sample Thanos doesn't have any Gems, so he needs all six.
Use user-input-Based format and function signature solve()","
def solve():
    gems = {
        'purple': 'Power',
        'green': 'Time',
        'blue': 'Space',
        'orange': 'Soul',
        'red': 'Reality',
        'yellow': 'Mind'
    }

    n = int(input())
    seen_colors = set()
    for _ in range(n):
        color = input().strip()
        seen_colors.add(color)

    missing_gems = set(gems.values()) - set([gems[color] for color in seen_colors])

    print(len(missing_gems))
    for gem in missing_gems:
        print(gem)

solve()","
def solve():
    colors = [""purple"", ""green"", ""blue"", ""orange"", ""red"", ""yellow""]
    gems = [""Power"", ""Time"", ""Space"", ""Soul"", ""Reality"", ""Mind""]
    
    n = int(input())
    gems_found = set()
    for _ in range(n):
        color = input()
        index = colors.index(color)
        gems_found.add(gems[index])
    
    gems_absent = set(gems) - gems_found
    m = len(gems_absent)
    print(m)
    for gem in gems_absent:
        print(gem)
  
solve()","
def solve():
    from sys import stdin

    colors = ['purple', 'green', 'blue', 'orange', 'red', 'yellow']
    gems = ['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind']

    n = int(stdin.readline())
    seen_colors = set(stdin.readline().strip() for _ in range(n))

    absent_gems = [gem for gem, color in zip(gems, colors) if color not in seen_colors]

    m = len(absent_gems)
    print(m)
    for gem in absent_gems:
        print(gem)

solve()","
def solve():
    gems = {
        'purple': 'Power',
        'green': 'Time',
        'blue': 'Space',
        'orange': 'Soul',
        'red': 'Reality',
        'yellow': 'Mind'
    }

    n = int(input())
    seen_colors = [input() for _ in range(n)]

    missing_gems = [gem for color, gem in gems.items() if color not in seen_colors]

    m = len(missing_gems)
    print(m)
    for gem in missing_gems:
        print(gem)


solve()","13.333333333333334","20.0","26.666666666666668","26.666666666666668","","","",""
"APPS/277","
QUESTION:
The last stage of Football World Cup is played using the play-off system.

There are n teams left in this stage, they are enumerated from 1 to n. Several rounds are held, in each round the remaining teams are sorted in the order of their ids, then the first in this order plays with the second, the third — with the fourth, the fifth — with the sixth, and so on. It is guaranteed that in each round there is even number of teams. The winner of each game advances to the next round, the loser is eliminated from the tournament, there are no draws. In the last round there is the only game with two remaining teams: the round is called the Final, the winner is called the champion, and the tournament is over.

Arkady wants his two favorite teams to play in the Final. Unfortunately, the team ids are already determined, and it may happen that it is impossible for teams to meet in the Final, because they are to meet in some earlier stage, if they are strong enough. Determine, in which round the teams with ids a and b can meet.


-----Input-----

The only line contains three integers n, a and b (2 ≤ n ≤ 256, 1 ≤ a, b ≤ n) — the total number of teams, and the ids of the teams that Arkady is interested in. 

It is guaranteed that n is such that in each round an even number of team advance, and that a and b are not equal.


-----Output-----

In the only line print ""Final!"" (without quotes), if teams a and b can meet in the Final.

Otherwise, print a single integer — the number of the round in which teams a and b can meet. The round are enumerated from 1.


-----Examples-----
Input
4 1 2

Output
1

Input
8 2 6

Output
Final!

Input
8 7 5

Output
2



-----Note-----

In the first example teams 1 and 2 meet in the first round.

In the second example teams 2 and 6 can only meet in the third round, which is the Final, if they win all their opponents in earlier rounds.

In the third example the teams with ids 7 and 5 can meet in the second round, if they win their opponents in the first round.
Use user-input-Based format and function signature solve()","
def solve():
    n, a, b = map(int, input().split())
    
    round_num = 1
    while n > 1:
        n = n // 2
        if (a + 1) // 2 == (b + 1) // 2:
            if n == 1:
                print(""Final!"")
            else:
                print(round_num)
            return
        round_num += 1

solve()
","
def solve():
    n, a, b = map(int, input().split())
    round_count = 1

    while n > 1:
        n = n // 2
        if (a + 1) // 2 == (b + 1) // 2:
            if n > 1:
                return round_count
            else:
                return ""Final!""
        round_count += 1

solve()
","
def solve():
    # Input
    n, a, b = map(int, input().split())

    # Calculation
    round_num = 1
    while n > 1:
        round_teams = n // 2
        if (a + 1) // 2 == (b + 1) // 2:
            if round_teams == 1:
                print(""Final!"")
            else:
                print(round_num)
            break
        n = round_teams
        a = (a + 1) // 2
        b = (b + 1) // 2
        round_num += 1

solve()
","
def solve():
    n, a, b = map(int, input().split())
    round_num = 1

    while n > 1:
        if (a + 1) // 2 == (b + 1) // 2:
            if n == 2:
                print(""Final!"")
            else:
                print(round_num)
            return

        n = (n + 1) // 2
        round_num += 1

solve()
","26.666666666666668","0.0","100.0","26.666666666666668","","","",""
"APPS/278","
QUESTION:
Pavel cooks barbecue. There are n skewers, they lay on a brazier in a row, each on one of n positions. Pavel wants each skewer to be cooked some time in every of n positions in two directions: in the one it was directed originally and in the reversed direction.

Pavel has a plan: a permutation p and a sequence b_1, b_2, ..., b_{n}, consisting of zeros and ones. Each second Pavel move skewer on position i to position p_{i}, and if b_{i} equals 1 then he reverses it. So he hope that every skewer will visit every position in both directions.

Unfortunately, not every pair of permutation p and sequence b suits Pavel. What is the minimum total number of elements in the given permutation p and the given sequence b he needs to change so that every skewer will visit each of 2n placements? Note that after changing the permutation should remain a permutation as well.

There is no problem for Pavel, if some skewer visits some of the placements several times before he ends to cook. In other words, a permutation p and a sequence b suit him if there is an integer k (k ≥ 2n), so that after k seconds each skewer visits each of the 2n placements.

It can be shown that some suitable pair of permutation p and sequence b exists for any n.


-----Input-----

The first line contain the integer n (1 ≤ n ≤ 2·10^5) — the number of skewers.

The second line contains a sequence of integers p_1, p_2, ..., p_{n} (1 ≤ p_{i} ≤ n) — the permutation, according to which Pavel wants to move the skewers.

The third line contains a sequence b_1, b_2, ..., b_{n} consisting of zeros and ones, according to which Pavel wants to reverse the skewers.


-----Output-----

Print single integer — the minimum total number of elements in the given permutation p and the given sequence b he needs to change so that every skewer will visit each of 2n placements.


-----Examples-----
Input
4
4 3 2 1
0 1 1 1

Output
2

Input
3
2 3 1
0 0 0

Output
1



-----Note-----

In the first example Pavel can change the permutation to 4, 3, 1, 2.

In the second example Pavel can change any element of b to 1.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    p = list(map(int, input().split()))
    b = list(map(int, input().split()))

    changes = 0
    for i in range(n):
        if p[i] != i + 1:
            changes += 1
        if b[i] == 1:
            changes += 1

    print(changes)

solve()
","
def solve():
    n = int(input())
    p = list(map(int, input().split()))
    b = list(map(int, input().split()))

    moves = 0

    for i in range(n):
        if p[i] != i+1:
            moves += 1

    reversals = 0

    for i in range(n):
        if b[i] == 1:
            reversals += 1

    changes = max(moves, reversals)

    print(changes)

solve()
","
def solve():
    n = int(input())
    p = list(map(int, input().split()))
    b = list(map(int, input().split()))
    
    permutations_changed = 0
    sequences_changed = sum(b)

    for i in range(n):
        if p[i] != i + 1:
            permutations_changed += 1

    min_changes = max(permutations_changed, sequences_changed)

    print(min_changes)

solve()
","
def solve():
    n = int(input())
    p = list(map(int, input().split()))
    b = list(map(int, input().split()))

    changes = 0
    for i in range(n):
        if p[i] != i+1:
            changes += 1
        if b[i] == 1:
            changes += 1

    print(changes)


solve()
","0.0","0.0","0.0","0.0","","","",""
"APPS/279","
QUESTION:
The on-board computer on Polycarp's car measured that the car speed at the beginning of some section of the path equals v_1 meters per second, and in the end it is v_2 meters per second. We know that this section of the route took exactly t seconds to pass.

Assuming that at each of the seconds the speed is constant, and between seconds the speed can change at most by d meters per second in absolute value (i.e., the difference in the speed of any two adjacent seconds does not exceed d in absolute value), find the maximum possible length of the path section in meters.


-----Input-----

The first line contains two integers v_1 and v_2 (1 ≤ v_1, v_2 ≤ 100) — the speeds in meters per second at the beginning of the segment and at the end of the segment, respectively.

The second line contains two integers t (2 ≤ t ≤ 100) — the time when the car moves along the segment in seconds, d (0 ≤ d ≤ 10) — the maximum value of the speed change between adjacent seconds.

It is guaranteed that there is a way to complete the segment so that:  the speed in the first second equals v_1,  the speed in the last second equals v_2,  the absolute value of difference of speeds between any two adjacent seconds doesn't exceed d. 


-----Output-----

Print the maximum possible length of the path segment in meters. 


-----Examples-----
Input
5 6
4 2

Output
26
Input
10 10
10 0

Output
100


-----Note-----

In the first sample the sequence of speeds of Polycarpus' car can look as follows: 5, 7, 8, 6. Thus, the total path is 5 + 7 + 8 + 6 = 26 meters.

In the second sample, as d = 0, the car covers the whole segment at constant speed v = 10. In t = 10 seconds it covers the distance of 100 meters.
Use user-input-Based format and function signature solve()","
def solve():
    v1, v2 = map(int, input().split())
    t, d = map(int, input().split())
    
    total_length = v1
    current_speed = v1
    
    for i in range(1, t):
        current_speed = min(v2, current_speed + d)
        total_length += current_speed
    
    print(total_length)

solve()
","
def solve():
    v1, v2 = map(int, input().split())
    t, d = map(int, input().split())

    max_length = v1
    current_speed = v1

    for i in range(1, t):
        current_speed = min(v2, current_speed + d)
        max_length += current_speed

    print(max_length)

solve()
","
def solve():
    v1, v2 = map(int, input().split())
    t, d = map(int, input().split())
    
    speeds = [v1]
    for i in range(1, t):
        next_speed = max(speeds[-1] - d, v2 - (t - i) * d)
        speeds.append(next_speed)
    
    length = sum(speeds)
    print(length)

solve()
","
def solve():
    v1, v2 = map(int, input().split())
    t, d = map(int, input().split())
    
    result = 0
    curr_speed = v1
    
    for _ in range(t):
        result += curr_speed
        curr_speed = min(curr_speed + d, v2 - (t - _ - 1) * d)
    
    print(result)

solve()
","40.0","40.0","26.666666666666668","13.333333333333334","","","",""
"APPS/280","
QUESTION:
There are N camels numbered 1 through N.
The weight of Camel i is w_i.
You will arrange the camels in a line and make them cross a bridge consisting of M parts.
Before they cross the bridge, you can choose their order in the line - it does not have to be Camel 1, 2, \ldots, N from front to back - and specify the distance between each adjacent pair of camels to be any non-negative real number.
The camels will keep the specified distances between them while crossing the bridge.
The i-th part of the bridge has length l_i and weight capacity v_i.
If the sum of the weights of camels inside a part (excluding the endpoints) exceeds v_i, the bridge will collapse.
Determine whether it is possible to make the camels cross the bridge without it collapsing. If it is possible, find the minimum possible distance between the first and last camels in the line in such a case.
It can be proved that the answer is always an integer, so print an integer.

-----Constraints-----
 - All values in input are integers.
 - 2 \leq N \leq 8
 - 1 \leq M \leq 10^5
 - 1 \leq w_i,l_i,v_i \leq 10^8

-----Input-----
Input is given from Standard Input in the following format:
N M
w_1 w_2 \cdots w_N
l_1 v_1
\vdots
l_M v_M

-----Output-----
If the bridge will unavoidably collapse when the camels cross the bridge, print -1.
Otherwise, print the minimum possible distance between the first and last camels in the line when the camels cross the bridge without it collapsing.

-----Sample Input-----
3 2
1 4 2
10 4
2 6

-----Sample Output-----
10

 - It is possible to make the camels cross the bridge without it collapsing by, for example, arranging them in the order 1, 3, 2 from front to back, and setting the distances between them to be 0, 10.
 - For Part 1 of the bridge, there are moments when only Camel 1 and 3 are inside the part and moments when only Camel 2 is inside the part. In both cases, the sum of the weights of camels does not exceed 4 - the weight capacity of Part 1 - so there is no collapse.
 - For Part 2 of the bridge, there are moments when only Camel 1 and 3 are inside the part and moments when only Camel 2 is inside the part. In both cases, the sum of the weights of camels does not exceed 6 - the weight capacity of Part 2 - so there is no collapse.
 - Note that the distance between two camels may be 0 and that camels on endpoints of a part are not considered to be inside the part.
Use user-input-Based format and function signature solve()","
def solve():
    import itertools

    N, M = map(int, input().split())
    weights = list(map(int, input().split()))
    parts = [list(map(int, input().split())) for _ in range(M)]

    min_distance = float('inf')
    for perm in itertools.permutations(range(N)):
        for dists in itertools.product(range(11), repeat=N-1):
            valid = True
            for part in parts:
                total_weight = 0
                for i in range(len(part)-1):
                    total_weight += sum(weights[perm[j]] for j in range(N) if dists[j] >= part[i] and dists[j] < part[i+1])
                    if total_weight > part[1]:
                        valid = False
                        break
                if not valid:
                    break
            if valid:
                min_distance = min(min_distance, max(dists) - min(dists))
    
    if min_distance == float('inf'):
        print(-1)
    else:
        print(min_distance)
  
solve()","
def solve():
    import itertools
 
    N, M = map(int, input().split())
    weights = list(map(int, input().split()))
    parts = [list(map(int, input().split())) for _ in range(M)]
 
    min_distance = float('inf')
    for perm in itertools.permutations(weights):
        distances = [0] * (N - 1)
        for p in perm:
            part_idx = 0
            for i in range(N - 1):
                distances[i] += abs(distances[i] - distances[i] / (N - i) + distances[i + 1] - distances[i + 1] / (N - i)) * (N - i) / 2
                while part_idx < M and sum(perm[j] for j in range(i, i + 2)) <= parts[part_idx][1]:
                    part_idx += 1
        min_distance = min(min_distance, max(distances))
 
    if min_distance == float('inf'):
        print(-1)
    else:
        print(int(min_distance))
  
solve()","
import itertools

def solve():
    N, M = map(int, input().split())
    weights = list(map(int, input().split()))
    parts = [list(map(int, input().split())) for _ in range(M)]

    perm = itertools.permutations(range(1, N + 1))
    min_distance = float('inf')

    for p in perm:
        for d in itertools.permutations([0] + [parts[i][0] for i in range(M)]):
            distances = list(d) + [0]
            max_weight = 0
            for i in range(N):
                max_weight = max(max_weight, sum(weights[p[j] - 1] for j in range(i, N)))
                for j in range(i, N):
                    if max_weight - weights[p[j] - 1] <= parts[j - i][1]:
                        max_weight -= weights[p[j] - 1]
                    else:
                        break
                else:
                    min_distance = min(min_distance, max(distances[j + 1] for j in range(N - i)))

    print(min_distance if min_distance != float('inf') else -1)

solve()","
def solve():
    import itertools

    N, M = map(int, input().split())
    weights = list(map(int, input().split()))
    parts = [list(map(int, input().split())) for _ in range(M)]

    perms = itertools.permutations(weights)
    min_dist = float('inf')

    for perm in perms:
        total_dist = 0
        for i in range(N-1):
            total_dist += abs(perm[i] - perm[i+1])

        valid = True
        for part in parts:
            part_weights = [perm[j] for j in range(N) if part[0] <= j < part[1]-1]
            if sum(part_weights) > part[1]:
                valid = False
                break

        if valid:
            min_dist = min(min_dist, total_dist)

    if min_dist == float('inf'):
        print(-1)
    else:
        print(int(min_dist))

solve()
  ","0.0","0.0","33.33333333333333","0.0","","","",""
"APPS/281","
QUESTION:
Even if the world is full of counterfeits, I still regard it as wonderful.

Pile up herbs and incense, and arise again from the flames and ashes of its predecessor — as is known to many, the phoenix does it like this.

The phoenix has a rather long lifespan, and reincarnates itself once every a! years. Here a! denotes the factorial of integer a, that is, a! = 1 × 2 × ... × a. Specifically, 0! = 1.

Koyomi doesn't care much about this, but before he gets into another mess with oddities, he is interested in the number of times the phoenix will reincarnate in a timespan of b! years, that is, [Image]. Note that when b ≥ a this value is always integer.

As the answer can be quite large, it would be enough for Koyomi just to know the last digit of the answer in decimal representation. And you're here to provide Koyomi with this knowledge.


-----Input-----

The first and only line of input contains two space-separated integers a and b (0 ≤ a ≤ b ≤ 10^18).


-----Output-----

Output one line containing a single decimal digit — the last digit of the value that interests Koyomi.


-----Examples-----
Input
2 4

Output
2

Input
0 10

Output
0

Input
107 109

Output
2



-----Note-----

In the first example, the last digit of $\frac{4 !}{2 !} = 12$ is 2;

In the second example, the last digit of $\frac{10 !}{0 !} = 3628800$ is 0;

In the third example, the last digit of $\frac{109 !}{107 !} = 11772$ is 2.
Use user-input-Based format and function signature solve()","
def solve():
    import math

    a, b = map(int, input().split())
    
    def factorial(n):
        if n == 0:
            return 1
        return n * factorial(n-1)
    
    result = factorial(b) // factorial(a)
    last_digit = result % 10
    
    print(last_digit)

solve()","
def solve():
    from math import factorial

    a, b = map(int, input().split())

    if b - a >= 10:
        print(0)
    else:
        result = 1
        for i in range(a + 1, b + 1):
            result = (result * (i % 10)) % 10
            if result == 0:
                break
        print(result)

solve()
","
from math import factorial

def solve():
    a, b = map(int, input().split())
    
    def last_digit(a, b):
        value = factorial(b) // factorial(a)
        return str(value)[-1]

    print(last_digit(a, b))

solve()
","
from math import factorial

def solve():
    a, b = map(int, input().split())
    if b - a >= 5:
        print(0)
    else:
        result = 1
        for i in range(a+1, b+1):
            result *= i
            result %= 10
        print(result)

solve()
","66.66666666666666","100.0","100.0","100.0","","","",""
"APPS/282","
QUESTION:
A frog lives on the axis Ox and needs to reach home which is in the point n. She starts from the point 1. The frog can jump to the right at a distance not more than d. So, after she jumped from the point x she can reach the point x + a, where a is an integer from 1 to d.

For each point from 1 to n is known if there is a lily flower in it. The frog can jump only in points with a lilies. Guaranteed that there are lilies in the points 1 and n.

Determine the minimal number of jumps that the frog needs to reach home which is in the point n from the point 1. Consider that initially the frog is in the point 1. If the frog can not reach home, print -1.


-----Input-----

The first line contains two integers n and d (2 ≤ n ≤ 100, 1 ≤ d ≤ n - 1) — the point, which the frog wants to reach, and the maximal length of the frog jump.

The second line contains a string s of length n, consisting of zeros and ones. If a character of the string s equals to zero, then in the corresponding point there is no lily flower. In the other case, in the corresponding point there is a lily flower. Guaranteed that the first and the last characters of the string s equal to one.


-----Output-----

If the frog can not reach the home, print -1.

In the other case, print the minimal number of jumps that the frog needs to reach the home which is in the point n from the point 1.


-----Examples-----
Input
8 4
10010101

Output
2

Input
4 2
1001

Output
-1

Input
8 4
11100101

Output
3

Input
12 3
101111100101

Output
4



-----Note-----

In the first example the from can reach home in two jumps: the first jump from the point 1 to the point 4 (the length of the jump is three), and the second jump from the point 4 to the point 8 (the length of the jump is four).

In the second example the frog can not reach home, because to make it she need to jump on a distance three, but the maximum length of her jump equals to two.
Use user-input-Based format and function signature solve()","
def solve():
    n, d = map(int, input().split())
    s = input().strip()

    jumps = [float('inf')] * n
    jumps[0] = 0

    for i in range(1, n):
        if s[i] == '1':
            for j in range(max(0, i - d), i):
                if s[j] == '1':
                    jumps[i] = min(jumps[i], jumps[j] + 1)

    if jumps[n - 1] == float('inf'):
        print(-1)
    else:
        print(jumps[n - 1])

solve()","
def solve():
    n, d = map(int, input().split())
    s = input().strip()
    
    jumps = 0
    current_position = 1

    while current_position < n:
        next_position = current_position + d
        if next_position >= n:
            next_position = n

        if s[next_position - 1] == '1':
            current_position = next_position
            jumps += 1
        else:
            found = False
            for i in range(next_position - 1, current_position, -1):
                if s[i] == '1':
                    current_position = i
                    jumps += 1
                    found = True
                    break
            if not found:
                print(-1)
                return

    print(jumps)
  
solve()","
def solve():
    n, d = map(int, input().split())
    flowers = input()
    
    jumps = [float('inf')] * n
    jumps[0] = 0
    
    for i in range(1, n):
        if flowers[i] == '1':
            for j in range(max(0, i - d), i):
                if flowers[j] == '1':
                    jumps[i] = min(jumps[i], jumps[j] + 1)
    
    if jumps[-1] == float('inf'):
        print(-1)
    else:
        print(jumps[-1])

solve()","
def solve():
    n, d = map(int, input().split())
    s = input()

    if '0' in s[1:d+1] or '0' in s[d:]:
        print(-1)
    else:
        jumps = 1
        pos = d
        while pos < n-1:
            if '1' in s[pos-d:pos+1]:
                jumps += 1
                pos = pos + d
            else:
                pos -= 1
        print(jumps)

solve()
","100.0","80.0","100.0","6.666666666666667","","","",""
"APPS/283","
QUESTION:
PolandBall is a young, clever Ball. He is interested in prime numbers. He has stated a following hypothesis: ""There exists such a positive integer n that for each positive integer m number n·m + 1 is a prime number"".

Unfortunately, PolandBall is not experienced yet and doesn't know that his hypothesis is incorrect. Could you prove it wrong? Write a program that finds a counterexample for any n.


-----Input-----

The only number in the input is n (1 ≤ n ≤ 1000) — number from the PolandBall's hypothesis. 


-----Output-----

Output such m that n·m + 1 is not a prime number. Your answer will be considered correct if you output any suitable m such that 1 ≤ m ≤ 10^3. It is guaranteed the the answer exists.


-----Examples-----
Input
3

Output
1
Input
4

Output
2


-----Note-----

A prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.

For the first sample testcase, 3·1 + 1 = 4. We can output 1.

In the second sample testcase, 4·1 + 1 = 5. We cannot output 1 because 5 is prime. However, m = 2 is okay since 4·2 + 1 = 9, which is not a prime number.
Use user-input-Based format and function signature solve()","
import sympy

def solve():
    n = int(input())
    m = 1
    while sympy.isprime(n*m + 1):
        m += 1
    print(m)

solve()","
from sympy import isprime

def solve():
    n = int(input())
    m = 1
    
    while isprime(n * m + 1):
        m += 1
    
    print(m)

solve()","
def solve():
    n = int(input())
    m = 1
    while True:
        if not is_prime(n*m + 1):
            print(m)
            break
        m += 1

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

solve()
  ","
from math import isqrt

def solve():
    n = int(input())
    m = 1
    while True:
        if not is_prime(n*m + 1):
            break
        m += 1

    print(m)

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, isqrt(num) + 1):
        if num % i == 0:
            return False
    return True

solve()
","0.0","0.0","100.0","100.0","","","",""
"APPS/284","
QUESTION:
Kolya is developing an economy simulator game. His most favourite part of the development process is in-game testing. Once he was entertained by the testing so much, that he found out his game-coin score become equal to 0.

Kolya remembers that at the beginning of the game his game-coin score was equal to n and that he have bought only some houses (for 1 234 567 game-coins each), cars (for 123 456 game-coins each) and computers (for 1 234 game-coins each).

Kolya is now interested, whether he could have spent all of his initial n game-coins buying only houses, cars and computers or there is a bug in the game. Formally, is there a triple of non-negative integers a, b and c such that a × 1 234 567 + b × 123 456 + c × 1 234 = n?

Please help Kolya answer this question.


-----Input-----

The first line of the input contains a single integer n (1 ≤ n ≤ 10^9) — Kolya's initial game-coin score.


-----Output-----

Print ""YES"" (without quotes) if it's possible that Kolya spent all of his initial n coins buying only houses, cars and computers. Otherwise print ""NO"" (without quotes).


-----Examples-----
Input
1359257

Output
YES
Input
17851817

Output
NO


-----Note-----

In the first sample, one of the possible solutions is to buy one house, one car and one computer, spending 1 234 567 + 123 456 + 1234 = 1 359 257 game-coins in total.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    for a in range(n // 1234567 + 1):
        for b in range(n // 123456 + 1):
            if (n - a * 1234567 - b * 123456) % 1234 == 0:
                print(""YES"")
                return
    print(""NO"")

solve()
","
def solve():
    n = int(input())
    for a in range(n // 1234567 + 1):
        for b in range(n // 123456 + 1):
            if (n - a * 1234567 - b * 123456) % 1234 == 0:
                print(""YES"")
                return
    print(""NO"")

solve()
","
def solve():
    n = int(input())
    
    for a in range(n // 1234567 + 1):
        for b in range(n // 123456 + 1):
            if (n - a*1234567 - b*123456) % 1234 == 0:
                print(""YES"")
                return
    
    print(""NO"")

solve()","
def solve():
    n = int(input())
    for a in range(n // 1234567 + 1):
        for b in range(n // 123456 + 1):
            if (n - a * 1234567 - b * 123456) % 1234 == 0:
                print(""YES"")
                return
    print(""NO"")

solve()
","60.0","60.0","60.0","60.0","","","",""
"APPS/285","
QUESTION:
The teacher gave Anton a large geometry homework, but he didn't do it (as usual) as he participated in a regular round on Codeforces. In the task he was given a set of n lines defined by the equations y = k_{i}·x + b_{i}. It was necessary to determine whether there is at least one point of intersection of two of these lines, that lays strictly inside the strip between x_1 < x_2. In other words, is it true that there are 1 ≤ i < j ≤ n and x', y', such that:   y' = k_{i} * x' + b_{i}, that is, point (x', y') belongs to the line number i;  y' = k_{j} * x' + b_{j}, that is, point (x', y') belongs to the line number j;  x_1 < x' < x_2, that is, point (x', y') lies inside the strip bounded by x_1 < x_2. 

You can't leave Anton in trouble, can you? Write a program that solves the given task.


-----Input-----

The first line of the input contains an integer n (2 ≤ n ≤ 100 000) — the number of lines in the task given to Anton. The second line contains integers x_1 and x_2 ( - 1 000 000 ≤ x_1 < x_2 ≤ 1 000 000) defining the strip inside which you need to find a point of intersection of at least two lines.

The following n lines contain integers k_{i}, b_{i} ( - 1 000 000 ≤ k_{i}, b_{i} ≤ 1 000 000) — the descriptions of the lines. It is guaranteed that all lines are pairwise distinct, that is, for any two i ≠ j it is true that either k_{i} ≠ k_{j}, or b_{i} ≠ b_{j}.


-----Output-----

Print ""Yes"" (without quotes), if there is at least one intersection of two distinct lines, located strictly inside the strip. Otherwise print ""No"" (without quotes).


-----Examples-----
Input
4
1 2
1 2
1 0
0 1
0 2

Output
NO
Input
2
1 3
1 0
-1 3

Output
YES
Input
2
1 3
1 0
0 2

Output
YES
Input
2
1 3
1 0
0 3

Output
NO


-----Note-----

In the first sample there are intersections located on the border of the strip, but there are no intersections located strictly inside it. [Image]
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    x1, x2 = map(int, input().split())
    lines = []
    for _ in range(n):
        k, b = map(int, input().split())
        lines.append((k, b))
    
    for i in range(n):
        for j in range(i+1, n):
            k1, b1 = lines[i]
            k2, b2 = lines[j]
            if k1 != k2:
                x = (b2 - b1) / (k1 - k2)
                if x1 < x < x2:
                    print(""YES"")
                    return
    print(""NO"")

solve()
","
def solve():
    n = int(input())
    x1, x2 = map(int, input().split())
    
    for _ in range(n):
        k, b = map(int, input().split())
        
    for i in range(n):
        for j in range(i+1, n):
            if (k[i] < k[j] and b[i] > b[j]) or (k[i] > k[j] and b[i] < b[j]):
                if k[i] != k[j]:
                    x = (b[j]-b[i]) / (k[i]-k[j])
                    if x1 < x < x2:
                        return ""YES""
    
    return ""NO""
  
solve()","
def solve():
    n = int(input())
    x1, x2 = map(int, input().split())
    
    for _ in range(n):
        k, b = map(int, input().split())
        if (k * x1 + b) * (k * x2 + b) < 0:
            print(""YES"")
            return
        
    print(""NO"")

solve()
","
def solve():
    n = int(input())
    x1, x2 = map(int, input().split())
    lines = []
    
    for _ in range(n):
        k, b = map(int, input().split())
        lines.append((k, b))
    
    for i in range(n):
        for j in range(i+1, n):
            k1, b1 = lines[i]
            k2, b2 = lines[j]
            if k1 != k2:
                x_intersect = (b2 - b1) / (k1 - k2)
                if x1 < x_intersect < x2:
                    print(""YES"")
                    return
    print(""NO"")

solve()
","100.0","0.0","80.0","100.0","","","",""
"APPS/286","
QUESTION:
Let's define a split of $n$ as a nonincreasing sequence of positive integers, the sum of which is $n$. 

For example, the following sequences are splits of $8$: $[4, 4]$, $[3, 3, 2]$, $[2, 2, 1, 1, 1, 1]$, $[5, 2, 1]$.

The following sequences aren't splits of $8$: $[1, 7]$, $[5, 4]$, $[11, -3]$, $[1, 1, 4, 1, 1]$.

The weight of a split is the number of elements in the split that are equal to the first element. For example, the weight of the split $[1, 1, 1, 1, 1]$ is $5$, the weight of the split $[5, 5, 3, 3, 3]$ is $2$ and the weight of the split $[9]$ equals $1$.

For a given $n$, find out the number of different weights of its splits.


-----Input-----

The first line contains one integer $n$ ($1 \leq n \leq 10^9$).


-----Output-----

Output one integer — the answer to the problem.


-----Examples-----
Input
7

Output
4

Input
8

Output
5

Input
9

Output
5



-----Note-----

In the first sample, there are following possible weights of splits of $7$:

Weight 1: [$\textbf 7$] 

Weight 2: [$\textbf 3$, $\textbf 3$, 1] 

Weight 3: [$\textbf 2$, $\textbf 2$, $\textbf 2$, 1] 

Weight 7: [$\textbf 1$, $\textbf 1$, $\textbf 1$, $\textbf 1$, $\textbf 1$, $\textbf 1$, $\textbf 1$]
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    weights = set()
    for i in range(1, int(n**0.5) + 1):
        remainder = n % i
        if remainder == 0:
            weights.add(i)
            weights.add(n // i)
        else:
            weights.add(i)
            weights.add(n // i + 1)
    print(len(weights))

solve()
","
def solve():
    n = int(input())
    factors = [i for i in range(1, n+1) if n % i == 0]
    count = 1
    for factor in factors[1:]:
        if factor % factors[0] == 0:
            count += 1
    print(count)

solve()
","
from collections import Counter

def solve(n):
    def factors(x):
        d = 2
        while d * d <= x:
            if x % d == 0:
                yield d
                x //= d
            else:
                d += 1
        if x > 1:
            yield x
    
    factor_counts = Counter(factors(n))
    weights = set()
    
    for count in factor_counts.values():
        for i in range(1, count + 1):
            weights.add(i)
    
    return len(weights)

solve()","
from math import sqrt

def solve(n):
    def count_factors(num):
        count = 0
        for i in range(1, int(sqrt(num)) + 1):
            if num % i == 0:
                if num // i == i:
                    count += 1
                else:
                    count += 2
        return count

    return count_factors(n)

# Example usages
print(solve(7))
print(solve(8))
print(solve(9))

solve()","20.0","6.666666666666667","0.0","0.0","","","",""
"APPS/287","
QUESTION:
Maxim wants to buy an apartment in a new house at Line Avenue of Metropolis. The house has n apartments that are numbered from 1 to n and are arranged in a row. Two apartments are adjacent if their indices differ by 1. Some of the apartments can already be inhabited, others are available for sale.

Maxim often visits his neighbors, so apartment is good for him if it is available for sale and there is at least one already inhabited apartment adjacent to it. Maxim knows that there are exactly k already inhabited apartments, but he doesn't know their indices yet.

Find out what could be the minimum possible and the maximum possible number of apartments that are good for Maxim.


-----Input-----

The only line of the input contains two integers: n and k (1 ≤ n ≤ 10^9, 0 ≤ k ≤ n).


-----Output-----

Print the minimum possible and the maximum possible number of apartments good for Maxim.


-----Example-----
Input
6 3

Output
1 3



-----Note-----

In the sample test, the number of good apartments could be minimum possible if, for example, apartments with indices 1, 2 and 3 were inhabited. In this case only apartment 4 is good. The maximum possible number could be, for example, if apartments with indices 1, 3 and 5 were inhabited. In this case all other apartments: 2, 4 and 6 are good.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    min_good_apartments = max(1, k - 1)
    max_good_apartments = min(n - k, k) * 2
    print(min_good_apartments, max_good_apartments)

solve()
","
def solve():
    n, k = map(int, input().split())
    min_good_apartments = max(1, k)
    max_good_apartments = min(n - k, k * 2)
    print(min_good_apartments, max_good_apartments)
  
solve()","
def solve():
    n, k = map(int, input().split())
    
    min_good = max(1, k - 1)
    max_good = min(n - k, 2*k)
    
    print(min_good, max_good)

solve()
","
def solve():
    n, k = map(int, input().split())
    
    # Calculate the minimum possible number of good apartments
    min_good_apartments = min(1, k)  # At least one apartment must be good
    
    # Calculate the maximum possible number of good apartments
    max_good_apartments = min(n - k, 2 * k)  # Maximizing the good apartments
    
    print(min_good_apartments, max_good_apartments)
  
solve()","20.0","13.333333333333334","26.666666666666668","80.0","","","",""
"APPS/288","
QUESTION:
Famous Brazil city Rio de Janeiro holds a tennis tournament and Ostap Bender doesn't want to miss this event. There will be n players participating, and the tournament will follow knockout rules from the very first game. That means, that if someone loses a game he leaves the tournament immediately.

Organizers are still arranging tournament grid (i.e. the order games will happen and who is going to play with whom) but they have already fixed one rule: two players can play against each other only if the number of games one of them has already played differs by no more than one from the number of games the other one has already played. Of course, both players had to win all their games in order to continue participating in the tournament.

Tournament hasn't started yet so the audience is a bit bored. Ostap decided to find out what is the maximum number of games the winner of the tournament can take part in (assuming the rule above is used). However, it is unlikely he can deal with this problem without your help.


-----Input-----

The only line of the input contains a single integer n (2 ≤ n ≤ 10^18) — the number of players to participate in the tournament.


-----Output-----

Print the maximum number of games in which the winner of the tournament can take part.


-----Examples-----
Input
2

Output
1

Input
3

Output
2

Input
4

Output
2

Input
10

Output
4



-----Note-----

In all samples we consider that player number 1 is the winner.

In the first sample, there would be only one game so the answer is 1.

In the second sample, player 1 can consequently beat players 2 and 3. 

In the third sample, player 1 can't play with each other player as after he plays with players 2 and 3 he can't play against player 4, as he has 0 games played, while player 1 already played 2. Thus, the answer is 2 and to achieve we make pairs (1, 2) and (3, 4) and then clash the winners.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    games = 0
    while n > 1:
        games += 1
        n = (n + 1) // 2
    print(games)

solve()
","
def solve():
    n = int(input())
    if n == 2 or n == 3:
        print(n - 1)
    elif n % 2 == 0:
        print(2)
    else:
        print(3)

solve()","
def solve():
    n = int(input())
    ans = 0
    while n > 1:
        m = 1
        i = 1
        while m <= n:
            m *= 2
            i += 1
        i -= 1
        n -= 2**(i-1)
        ans += 1
    print(ans)

solve()
","
def solve():
    n = int(input())
    if n == 2:
        print(1)
    else:
        print((n.bit_length() - 1))

solve()","33.33333333333333","26.666666666666668","6.666666666666667","13.333333333333334","","","",""
"APPS/289","
QUESTION:
Tonio has a keyboard with only two letters, ""V"" and ""K"".

One day, he has typed out a string s with only these two letters. He really likes it when the string ""VK"" appears, so he wishes to change at most one letter in the string (or do no changes) to maximize the number of occurrences of that string. Compute the maximum number of times ""VK"" can appear as a substring (i. e. a letter ""K"" right after a letter ""V"") in the resulting string.


-----Input-----

The first line will contain a string s consisting only of uppercase English letters ""V"" and ""K"" with length not less than 1 and not greater than 100.


-----Output-----

Output a single integer, the maximum number of times ""VK"" can appear as a substring of the given string after changing at most one character.


-----Examples-----
Input
VK

Output
1

Input
VV

Output
1

Input
V

Output
0

Input
VKKKKKKKKKVVVVVVVVVK

Output
3

Input
KVKV

Output
1



-----Note-----

For the first case, we do not change any letters. ""VK"" appears once, which is the maximum number of times it could appear.

For the second case, we can change the second character from a ""V"" to a ""K"". This will give us the string ""VK"". This has one occurrence of the string ""VK"" as a substring.

For the fourth case, we can change the fourth character from a ""K"" to a ""V"". This will give us the string ""VKKVKKKKKKVVVVVVVVVK"". This has three occurrences of the string ""VK"" as a substring. We can check no other moves can give us strictly more occurrences.
Use user-input-Based format and function signature solve()","
def solve():
    s = input().strip()
    vk_count = s.count(""VK"")
    if vk_count > 0:
        print(vk_count)
    else:
        for i in range(len(s)):
            if s[i] == ""V"":
                s_new = s[:i] + ""K"" + s[i+1:]
                vk_count_new = s_new.count(""VK"")
                if vk_count_new > 0:
                    print(vk_count_new)
                    return
        print(0)

solve()
","
def solve(s: str) -> int:
    # Count occurrences of ""VK"" in the original string
    original_count = s.count(""VK"")
    
    # Check if changing one letter can increase the count
    for i in range(len(s)):
        if s[i] == ""V"":
            modified_count = s[:i] + ""K"" + s[i+1:].count(""VK"")
        elif s[i] == ""K"":
            modified_count = s[:i] + ""V"" + s[i+1:].count(""VK"")
        
        if modified_count > original_count:
            return modified_count
    
    return original_count

solve()","
def solve():
    s = input()
    vk_count = s.count(""VK"")
    vk1_count = s.count(""VVK"") if ""VVK"" in s else 0
    vk2_count = s.count(""VKV"") if ""VKV"" in s else 0
    max_vk = max(vk_count, vk1_count, vk2_count)
    print(max_vk)

solve()
","
def solve():
    s = input()
    vk_count = s.count(""VK"")
    
    for i in range(len(s)):
        if s[i] == ""V"":
            if i+1 < len(s) and s[i+1] == ""K"":
                new_s = s[:i] + ""VK"" + s[i+2:]
                vk_count = max(vk_count, new_s.count(""VK""))
            else:
                new_s = s[:i] + ""KK"" + s[i+2:]
                vk_count = max(vk_count, new_s.count(""VK""))
        elif s[i] == ""K"":
            if i+1 < len(s) and s[i+1] == ""V"":
                new_s = s[:i] + ""VK"" + s[i+2:]
                vk_count = max(vk_count, new_s.count(""VK""))
            else:
                new_s = s[:i] + ""VV"" + s[i+2:]
                vk_count = max(vk_count, new_s.count(""VK""))
    
    print(vk_count)

solve()
","40.0","0.0","33.33333333333333","86.66666666666667","","","",""
"APPS/290","
QUESTION:
Little Sofia is in fourth grade. Today in the geometry lesson she learned about segments and squares. On the way home, she decided to draw $n$ squares in the snow with a side length of $1$. For simplicity, we assume that Sofia lives on a plane and can draw only segments of length $1$, parallel to the coordinate axes, with vertices at integer points.

In order to draw a segment, Sofia proceeds as follows. If she wants to draw a vertical segment with the coordinates of the ends $(x, y)$ and $(x, y+1)$. Then Sofia looks if there is already a drawn segment with the coordinates of the ends $(x', y)$ and $(x', y+1)$ for some $x'$. If such a segment exists, then Sofia quickly draws a new segment, using the old one as a guideline. If there is no such segment, then Sofia has to take a ruler and measure a new segment for a long time. Same thing happens when Sofia wants to draw a horizontal segment, but only now she checks for the existence of a segment with the same coordinates $x$, $x+1$ and the differing coordinate $y$.

For example, if Sofia needs to draw one square, she will have to draw two segments using a ruler:  [Image] 

After that, she can draw the remaining two segments, using the first two as a guide:  [Image] 

If Sofia needs to draw two squares, she will have to draw three segments using a ruler:  [Image] 

After that, she can draw the remaining four segments, using the first three as a guide:  [Image] 

Sofia is in a hurry, so she wants to minimize the number of segments that she will have to draw with a ruler without a guide. Help her find this minimum number.


-----Input-----

The only line of input contains a single integer $n$ ($1 \le n \le 10^{9}$), the number of squares that Sofia wants to draw.


-----Output-----

Print single integer, the minimum number of segments that Sofia will have to draw with a ruler without a guide in order to draw $n$ squares in the manner described above.


-----Examples-----
Input
1

Output
2

Input
2

Output
3

Input
4

Output
4
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    if n == 1:
        print(2)
    else:
        print(2 * n + 1)

solve()
","
def solve():
    n = int(input())
    if n == 1:
        print(2)
    else:
        print(n + 1)

solve()
","
def solve():
    n = int(input())
    segments = 2
    while n > 1:
        segments += 2 * n
        n -= 1
    print(segments)

solve()","
def solve():
    n = int(input())

    if n == 1:
        print(2)
    else:
        print(2 * n - int(n ** 0.5))

solve()
","6.666666666666667","13.333333333333334","6.666666666666667","13.333333333333334","","","",""
"APPS/291","
QUESTION:
Bear Limak wants to become the largest of bears, or at least to become larger than his brother Bob.

Right now, Limak and Bob weigh a and b respectively. It's guaranteed that Limak's weight is smaller than or equal to his brother's weight.

Limak eats a lot and his weight is tripled after every year, while Bob's weight is doubled after every year.

After how many full years will Limak become strictly larger (strictly heavier) than Bob?


-----Input-----

The only line of the input contains two integers a and b (1 ≤ a ≤ b ≤ 10) — the weight of Limak and the weight of Bob respectively.


-----Output-----

Print one integer, denoting the integer number of years after which Limak will become strictly larger than Bob.


-----Examples-----
Input
4 7

Output
2

Input
4 9

Output
3

Input
1 1

Output
1



-----Note-----

In the first sample, Limak weighs 4 and Bob weighs 7 initially. After one year their weights are 4·3 = 12 and 7·2 = 14 respectively (one weight is tripled while the other one is doubled). Limak isn't larger than Bob yet. After the second year weights are 36 and 28, so the first weight is greater than the second one. Limak became larger than Bob after two years so you should print 2.

In the second sample, Limak's and Bob's weights in next years are: 12 and 18, then 36 and 36, and finally 108 and 72 (after three years). The answer is 3. Remember that Limak wants to be larger than Bob and he won't be satisfied with equal weights.

In the third sample, Limak becomes larger than Bob after the first year. Their weights will be 3 and 2 then.
Use user-input-Based format and function signature solve()","
def solve():
    a, b = map(int, input().split())
    years = 0
    while a <= b:
        a *= 3
        b *= 2
        years += 1
    print(years)

solve()
","
def solve():
    a, b = map(int, input().split())
    years = 0
    while a <= b:
        a *= 3
        b *= 2
        years += 1
    return years
  
solve()","
def solve():
    a, b = map(int, input().split())
    
    years = 0
    while a <= b:
        a *= 3
        b *= 2
        years += 1
        
    return years

solve()","
a, b = map(int, input().split())

def solve(a: int, b: int) -> int:
    years = 0
    while a <= b:
        a *= 3
        b *= 2
        years += 1
    return years

print(solve(a, b))

solve()","100.0","0.0","0.0","0.0","","","",""
"APPS/292","
QUESTION:
Amr bought a new video game ""Guess Your Way Out!"". The goal of the game is to find an exit from the maze that looks like a perfect binary tree of height h. The player is initially standing at the root of the tree and the exit from the tree is located at some leaf node. 

Let's index all the leaf nodes from the left to the right from 1 to 2^{h}. The exit is located at some node n where 1 ≤ n ≤ 2^{h}, the player doesn't know where the exit is so he has to guess his way out!

Amr follows simple algorithm to choose the path. Let's consider infinite command string ""LRLRLRLRL..."" (consisting of alternating characters 'L' and 'R'). Amr sequentially executes the characters of the string using following rules:  Character 'L' means ""go to the left child of the current node"";  Character 'R' means ""go to the right child of the current node"";  If the destination node is already visited, Amr skips current command, otherwise he moves to the destination node;  If Amr skipped two consecutive commands, he goes back to the parent of the current node before executing next command;  If he reached a leaf node that is not the exit, he returns to the parent of the current node;  If he reaches an exit, the game is finished. 

Now Amr wonders, if he follows this algorithm, how many nodes he is going to visit before reaching the exit?


-----Input-----

Input consists of two integers h, n (1 ≤ h ≤ 50, 1 ≤ n ≤ 2^{h}).


-----Output-----

Output a single integer representing the number of nodes (excluding the exit node) Amr is going to visit before reaching the exit by following this algorithm.


-----Examples-----
Input
1 2

Output
2
Input
2 3

Output
5
Input
3 6

Output
10
Input
10 1024

Output
2046


-----Note-----

A perfect binary tree of height h is a binary tree consisting of h + 1 levels. Level 0 consists of a single node called root, level h consists of 2^{h} nodes called leaves. Each node that is not a leaf has exactly two children, left and right one. 

Following picture illustrates the sample test number 3. Nodes are labeled according to the order of visit.

[Image]
Use user-input-Based format and function signature solve()","
def solve():
    h, n = map(int, input().split())
    nodes_visited = 0
    current_node = 1
    step = 1

    while current_node != n:
        nodes_visited += 1
        if n % 2 == 0:
            n += 1
        else:
            n -= 1
        n //= 2
        step *= 2

    return nodes_visited

solve()
","
def solve():
    h, n = map(int, input().split())
    res = 0
    for i in range(h, 0, -1):
        mid = 1 << (i - 1)
        if n > mid:
            res += 1 << i
            n -= mid
        else:
            res += 1
        res += 1
    print(res - 1)

solve()
","
def solve():
    h, n = map(int, input().split())
    result = 0
    n -= 1
    for i in range(h, -1, -1):
        bit = (n >> i) & 1
        if bit == 0:
            result += 1 << i
        else:
            result += 1
        if i > 0 and ((n >> (i - 1)) & 1) == bit:
            break
    print(result - 1)

if __name__ == ""__main__"":
    solve()
","
def solve():
    h, n = map(int, input().split())
    nodes_visited = 0
    curr_node = 1
    for i in range(h, 0, -1):
        mid = (1 << i) // 2
        if n > mid:
            nodes_visited += curr_node
            curr_node = curr_node * 2 + 1
            n -= mid
        else:
            nodes_visited += curr_node
            curr_node = curr_node * 2
    print(nodes_visited)

solve()
","0.0","6.666666666666667","13.333333333333334","6.666666666666667","","","",""
"APPS/293","
QUESTION:
Spongebob is already tired trying to reason his weird actions and calculations, so he simply asked you to find all pairs of n and m, such that there are exactly x distinct squares in the table consisting of n rows and m columns. For example, in a 3 × 5 table there are 15 squares with side one, 8 squares with side two and 3 squares with side three. The total number of distinct squares in a 3 × 5 table is 15 + 8 + 3 = 26.


-----Input-----

The first line of the input contains a single integer x (1 ≤ x ≤ 10^18) — the number of squares inside the tables Spongebob is interested in.


-----Output-----

First print a single integer k — the number of tables with exactly x distinct squares inside.

Then print k pairs of integers describing the tables. Print the pairs in the order of increasing n, and in case of equality — in the order of increasing m.


-----Examples-----
Input
26

Output
6
1 26
2 9
3 5
5 3
9 2
26 1

Input
2

Output
2
1 2
2 1

Input
8

Output
4
1 8
2 3
3 2
8 1



-----Note-----

In a 1 × 2 table there are 2 1 × 1 squares. So, 2 distinct squares in total. [Image] 

In a 2 × 3 table there are 6 1 × 1 squares and 2 2 × 2 squares. That is equal to 8 squares in total. [Image]
Use user-input-Based format and function signature solve()","
def solve():
    x = int(input())
    tables = []
    for n in range(1, int(x**0.5) + 1):
        if x % n == 0:
            m = x // n
            tables.append((n, m))
            if n != m:
                tables.append((m, n))
    tables.sort()
    print(len(tables))
    for table in tables:
        print(table[0], table[1])

solve()","
def solve():
    x = int(input())
    tables = []
    for n in range(1, int(x ** 0.5) + 1):
        if x % n == 0:
            m = x // n
            if (n + m) % 2 == 0 and (m - n) % 2 == 0:
                tables.append((n, m))
    tables.sort()
    print(len(tables))
    for n, m in tables:
        print(f""{n} {m}"")

solve()
   ","
def solve():
    x = int(input())
    k = 0
    tables = []

    for n in range(1, int(x ** 0.5) + 1):
        if x % n == 0:
            m = x // n
            if n <= m:
                k += 1
                tables.append((n, m))

    print(k)
    for n, m in tables:
        print(n, m)

solve()","
def solve():
    x = int(input())
    squares = []
    for n in range(1, x+1):
        if x % n == 0:
            m = x // n
            if n <= m:
                squares.append((n, m))
    
    k = len(squares)
    print(k)
    for n, m in squares:
        print(n, m)

solve()
","14.285714285714285","7.142857142857142","7.142857142857142","9.090909090909092","","","",""
"APPS/294","
QUESTION:
Everybody in Russia uses Gregorian calendar. In this calendar there are 31 days in January, 28 or 29 days in February (depending on whether the year is leap or not), 31 days in March, 30 days in April, 31 days in May, 30 in June, 31 in July, 31 in August, 30 in September, 31 in October, 30 in November, 31 in December.

A year is leap in one of two cases: either its number is divisible by 4, but not divisible by 100, or is divisible by 400. For example, the following years are leap: 2000, 2004, but years 1900 and 2018 are not leap.

In this problem you are given n (1 ≤ n ≤ 24) integers a_1, a_2, ..., a_{n}, and you have to check if these integers could be durations in days of n consecutive months, according to Gregorian calendar. Note that these months could belong to several consecutive years. In other words, check if there is a month in some year, such that its duration is a_1 days, duration of the next month is a_2 days, and so on.


-----Input-----

The first line contains single integer n (1 ≤ n ≤ 24) — the number of integers.

The second line contains n integers a_1, a_2, ..., a_{n} (28 ≤ a_{i} ≤ 31) — the numbers you are to check.


-----Output-----

If there are several consecutive months that fit the sequence, print ""YES"" (without quotes). Otherwise, print ""NO"" (without quotes).

You can print each letter in arbitrary case (small or large).


-----Examples-----
Input
4
31 31 30 31

Output
Yes


Input
2
30 30

Output
No


Input
5
29 31 30 31 30

Output
Yes


Input
3
31 28 30

Output
No


Input
3
31 31 28

Output
Yes




-----Note-----

In the first example the integers can denote months July, August, September and October.

In the second example the answer is no, because there are no two consecutive months each having 30 days.

In the third example the months are: February (leap year) — March — April – May — June.

In the fourth example the number of days in the second month is 28, so this is February. March follows February and has 31 days, but not 30, so the answer is NO.

In the fifth example the months are: December — January — February (non-leap year).
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    durations = list(map(int, input().split()))

    leap_year = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    non_leap_year = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    for i in range(12):
        valid = True
        for j in range(n):
            if durations[j] != leap_year[(i+j)%12] and durations[j] != non_leap_year[(i+j)%12]:
                valid = False
                break
        if valid:
            print(""YES"")
            return

    print(""NO"")

solve()
","
def solve():
    n = int(input())
    days = list(map(int, input().split()))

    leap_years = [2000, 2004, 2008, 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040]  # List of leap years
    non_leap_years = [1900, 1904, 1908, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1996]  # List of non-leap years

    valid = False
    for i in range(12):  # Loop through each month
        valid = True
        for j in range(n):  # Check each input for matching month length
            if ((days[j] == 29 and i != 1) or  # Day 29 can only occur in February
                    (days[j] == 30 and i in [3, 5, 8, 10]) or  # Month with 30 days
                    (days[j] == 31 and i in [0, 2, 4, 6, 7, 9, 11]) or  # Month with 31 days
                    (i == 1 and (days[j] != 28 or  # February in a non-leap year
                                 (days[j] == 28 and (1900 in leap_years or 2000 in non_leap_years))))):  # Deal with edge cases
                valid = False
                break
        if valid:
            print(""YES"")
            return
    print(""NO"")

solve()
","
def solve():
    n = int(input())
    days = list(map(int, input().split()))

    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]

    for i in range(0, 12):
        valid = True
        for j in range(n):
            if i + j < 12 and (month_days[i + j] != days[j]):
                valid = False
                break
            if i + j >= 12: 
                if ((i + j) % 12 != 1 and days[j] != 28) or ((i + j) % 12 == 1 and days[j] != 29):
                    valid = False
                    break
        if valid:
            print(""YES"")
            return

    print(""NO"")

solve()
","
def solve():
    n = int(input())
    durations = list(map(int, input().split()))
    
    leap_year = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    non_leap_year = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    
    for i in range(12):
        flag = True
        for j in range(n):
            if durations[j] != leap_year[(i+j)%12] and durations[j] != non_leap_year[(i+j)%12]:
                flag = False
                break
        if flag:
            print(""YES"")
            return
    print(""NO"")

solve()
  ","0.0","0.0","0.0","0.0","","","",""
"APPS/295","
QUESTION:
You are given a positive integer $n$.

Find a sequence of fractions $\frac{a_i}{b_i}$, $i = 1 \ldots k$ (where $a_i$ and $b_i$ are positive integers) for some $k$ such that:

$$ \begin{cases} \text{$b_i$ divides $n$, $1 < b_i < n$ for $i = 1 \ldots k$} \\ \text{$1 \le a_i < b_i$ for $i = 1 \ldots k$} \\ \text{$\sum\limits_{i=1}^k \frac{a_i}{b_i} = 1 - \frac{1}{n}$} \end{cases} $$


-----Input-----

The input consists of a single integer $n$ ($2 \le n \le 10^9$).


-----Output-----

In the first line print ""YES"" if there exists such a sequence of fractions or ""NO"" otherwise.

If there exists such a sequence, next lines should contain a description of the sequence in the following format.

The second line should contain integer $k$ ($1 \le k \le 100\,000$) — the number of elements in the sequence. It is guaranteed that if such a sequence exists, then there exists a sequence of length at most $100\,000$.

Next $k$ lines should contain fractions of the sequence with two integers $a_i$ and $b_i$ on each line.


-----Examples-----
Input
2

Output
NO

Input
6

Output
YES
2
1 2
1 3



-----Note-----

In the second example there is a sequence $\frac{1}{2}, \frac{1}{3}$ such that $\frac{1}{2} + \frac{1}{3} = 1 - \frac{1}{6}$.
Use user-input-Based format and function signature solve()","
from fractions import Fraction

def solve():
    n = int(input())
    
    if n == 2:
        print(""NO"")
    else:
        print(""YES"")
        print(2)
        print(""1 2"")
        print(""1"", n)

solve()","
from fractions import Fraction

def solve():
    n = int(input())
    
    if n == 2:
        print(""NO"")
    else:
        print(""YES"")
        print(2)
        print(1, 2)
        print(1, 3)

solve()","
def solve():
    n = int(input())
    
    if n == 2:
        print(""NO"")
        return
        
    print(""YES"")
    
    a = n - 1
    b = n
    
    k = 2
    print(k)
    
    print(f""{a} {b}"")
    print(f""1 {n*(n-1)}"")

solve()","
from math import gcd

def solve():
    n = int(input())
    if n == 2:
        print(""NO"")
        return
    
    a = 1
    b = n
    k = 2
    
    while gcd(a, b) != 1:
        a += 1
    
    print(""YES"")
    print(k)
    print(f""{a} {b // 2}"")
    print(f""{1} {b // 3}"")
  
solve()","6.666666666666667","13.333333333333334","6.666666666666667","6.666666666666667","","","",""
"APPS/296","
QUESTION:
Vasya should paint a fence in front of his own cottage. The fence is a sequence of n wooden boards arranged in a single row. Each board is a 1 centimeter wide rectangle. Let's number the board fence using numbers 1, 2, ..., n from left to right. The height of the i-th board is h_{i} centimeters.

Vasya has a 1 centimeter wide brush and the paint of two colors, red and green. Of course, the amount of the paint is limited. Vasya counted the area he can paint each of the colors. It turned out that he can not paint over a square centimeters of the fence red, and he can not paint over b square centimeters green. Each board of the fence should be painted exactly one of the two colors. Perhaps Vasya won't need one of the colors.

In addition, Vasya wants his fence to look smart. To do this, he should paint the fence so as to minimize the value that Vasya called the fence unattractiveness value. Vasya believes that two consecutive fence boards, painted different colors, look unattractive. The unattractiveness value of a fence is the total length of contact between the neighboring boards of various colors. To make the fence look nice, you need to minimize the value as low as possible. Your task is to find what is the minimum unattractiveness Vasya can get, if he paints his fence completely. $1$ 

The picture shows the fence, where the heights of boards (from left to right) are 2,3,2,4,3,1. The first and the fifth boards are painted red, the others are painted green. The first and the second boards have contact length 2, the fourth and fifth boards have contact length 3, the fifth and the sixth have contact length 1. Therefore, the unattractiveness of the given painted fence is 2+3+1=6.


-----Input-----

The first line contains a single integer n (1 ≤ n ≤ 200) — the number of boards in Vasya's fence.

The second line contains two integers a and b (0 ≤ a, b ≤ 4·10^4) — the area that can be painted red and the area that can be painted green, correspondingly.

The third line contains a sequence of n integers h_1, h_2, ..., h_{n} (1 ≤ h_{i} ≤ 200) — the heights of the fence boards.

All numbers in the lines are separated by single spaces.


-----Output-----

Print a single number — the minimum unattractiveness value Vasya can get if he paints his fence completely. If it is impossible to do, print  - 1.


-----Examples-----
Input
4
5 7
3 3 4 1

Output
3

Input
3
2 3
1 3 1

Output
2

Input
3
3 3
2 2 2

Output
-1
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    a, b = map(int, input().split())
    heights = list(map(int, input().split()))

    total_area = sum(heights)
    min_unattractiveness = float('inf')

    for i in range(1, n):
        red_area = sum(heights[:i])
        green_area = total_area - red_area

        red_unattractiveness = min(red_area, a) + min(green_area, b)
        green_unattractiveness = min(green_area, b) + min(red_area, a)

        min_unattractiveness = min(min_unattractiveness, red_unattractiveness, green_unattractiveness)

    if min_unattractiveness == float('inf'):
        print(-1)
    else:
        print(min_unattractiveness)

solve()
","
def solve():
    n = int(input())
    a, b = map(int, input().split())
    heights = list(map(int, input().split()))

    min_unattractiveness = float('inf')

    for i in range(1, n-1):
        for j in range(i+1, n):
            red_area = sum(heights[:i])
            green_area = sum(heights[i:j])
            red_contact_length = i
            green_contact_length = j - i
            if red_area <= a and green_area <= b:
                min_unattractiveness = min(min_unattractiveness, red_contact_length + green_contact_length)

    print(min_unattractiveness if min_unattractiveness != float('inf') else -1)
  
solve()","
def solve():
    n = int(input())
    a, b = map(int, input().split())
    heights = list(map(int, input().split()))
    
    dp = [[float('inf')] * 2 for _ in range(n+1)]
    dp[0][0] = dp[0][1] = 0
    
    for i in range(1, n+1):
        for color in range(2):
            for prev_color in range(2):
                if color == prev_color:
                    dp[i][color] = min(dp[i][color], dp[i-1][prev_color] + (a if color == 0 else b) * heights[i-1])
                else:
                    dp[i][color] = min(dp[i][color], dp[i-1][prev_color] + (a if color == 0 else b) * heights[i-1] + (prev_color == 0))
    
    result = min(dp[n])
    
    if result == float('inf'):
        print(-1)
    else:
        print(result)

solve()
","
def solve():
    n = int(input())
    a, b = map(int, input().split())
    heights = list(map(int, input().split()))
    
    dp = [[-1] * (a + 1) for _ in range(b + 1)]
    dp[0][0] = 0
    
    for i in range(1, n + 1):
        for j in range(a, -1, -1):
            for k in range(b, -1, -1):
                if j >= heights[i - 1]:
                    dp[j][k] = max(dp[j][k], dp[j - heights[i - 1]][k] + 1)
                if k >= heights[i - 1]:
                    dp[j][k] = max(dp[j][k], dp[j][k - heights[i - 1]] + 1)
    
    result = -1
    for j in range(a + 1):
        for k in range(b + 1):
            if dp[j][k] == n:
                result = max(result, max(j, k))
    
    print(result)

solve()
  ","0.0","6.666666666666667","0.0","6.666666666666667","","","",""
"APPS/297","
QUESTION:
Vasya has got three integers $n$, $m$ and $k$. He'd like to find three integer points $(x_1, y_1)$, $(x_2, y_2)$, $(x_3, y_3)$, such that $0 \le x_1, x_2, x_3 \le n$, $0 \le y_1, y_2, y_3 \le m$ and the area of the triangle formed by these points is equal to $\frac{nm}{k}$.

Help Vasya! Find such points (if it's possible). If there are multiple solutions, print any of them.


-----Input-----

The single line contains three integers $n$, $m$, $k$ ($1\le n, m \le 10^9$, $2 \le k \le 10^9$).


-----Output-----

If there are no such points, print ""NO"".

Otherwise print ""YES"" in the first line. The next three lines should contain integers $x_i, y_i$ — coordinates of the points, one point per line. If there are multiple solutions, print any of them.

You can print each letter in any case (upper or lower).


-----Examples-----
Input
4 3 3

Output
YES
1 0
2 3
4 1

Input
4 4 7

Output
NO



-----Note-----

In the first example area of the triangle should be equal to $\frac{nm}{k} = 4$. The triangle mentioned in the output is pictured below:  [Image] 

In the second example there is no triangle with area $\frac{nm}{k} = \frac{16}{7}$.
Use user-input-Based format and function signature solve()","
def solve():
    n, m, k = map(int, input().split())
    
    if n * m % k != 0:
        print(""NO"")
    else:
        print(""YES"")
        a = n * m // k
        x1 = 0
        y1 = 0
        x2 = a
        y2 = 0
        x3 = 0
        y3 = 1
        print(x1, y1)
        print(x2, y2)
        print(x3, y3)

solve()
","
def solve():
    n, m, k = map(int, input().split())
    
    if n*m % k != 0:
        print(""NO"")
    else:
        print(""YES"")
        if n % 2 == 0:
            print(f""1 0"")
            print(f""{n} 0"")
            print(f""{n//2} {2*m // (n)}"")
        elif m % 2 == 0:
            print(f""0 1"")
            print(f""0 {m}"")
            print(f""{2*n // (m)} {m//2}"")
        else:
            print(f""0 1"")
            print(f""{(n-1)*m} {m}"")
            print(f""{n-1} 0"")

solve()
  ","
def solve():
    import math
    
    n, m, k = map(int, input().split())
    
    target_area = n*m/k
    x1, y1 = 0, 0
    area = lambda x2, y2, x3, y3: abs(x2*y3 - x3*y2 + x3*y1 - x2*y1 + x1*y2 - x1*y3)
    
    for x2 in range(n+1):
        for y2 in range(m+1):
            for x3 in range(n+1):
                for y3 in range(m+1):
                    if area(x2, y2, x3, y3) == target_area:
                        print(""YES"")
                        print(x1, y1)
                        print(x2, y2)
                        print(x3, y3)
                        return
    
    print(""NO"")

solve()
","
def solve():
    n, m, k = map(int, input().split())
    
    if 2 * n * m % k != 0:
        print(""NO"")
    else:
        print(""YES"")
        area = 2 * n * m // k
        a = 2
        b = n * m
        if b % k == 0:
            b //= k
        else:
            a *= k // 2
            b = (n * m) // a
        print(0, 0)
        print(a, 0)
        print(0, b)
  
solve()","13.333333333333334","13.333333333333334","16.666666666666664","13.333333333333334","","","",""
"APPS/298","
QUESTION:
It's one more school day now. Sasha doesn't like classes and is always bored at them. So, each day he invents some game and plays in it alone or with friends.

Today he invented one simple game to play with Lena, with whom he shares a desk. The rules are simple. Sasha draws n sticks in a row. After that the players take turns crossing out exactly k sticks from left or right in each turn. Sasha moves first, because he is the inventor of the game. If there are less than k sticks on the paper before some turn, the game ends. Sasha wins if he makes strictly more moves than Lena. Sasha wants to know the result of the game before playing, you are to help him.


-----Input-----

The first line contains two integers n and k (1 ≤ n, k ≤ 10^18, k ≤ n) — the number of sticks drawn by Sasha and the number k — the number of sticks to be crossed out on each turn.


-----Output-----

If Sasha wins, print ""YES"" (without quotes), otherwise print ""NO"" (without quotes).

You can print each letter in arbitrary case (upper of lower).


-----Examples-----
Input
1 1

Output
YES

Input
10 4

Output
NO



-----Note-----

In the first example Sasha crosses out 1 stick, and then there are no sticks. So Lena can't make a move, and Sasha wins.

In the second example Sasha crosses out 4 sticks, then Lena crosses out 4 sticks, and after that there are only 2 sticks left. Sasha can't make a move. The players make equal number of moves, so Sasha doesn't win.
Use user-input-Based format and function signature solve()","
def solve():
    n, k = map(int, input().split())
    if n % (2 * k) < k:
        print(""YES"")
    else:
        print(""NO"")

solve()","
def solve():
    n, k = map(int, input().split())
    if n % (2 * k) < k:
        print(""YES"")
    else:
        print(""NO"")

solve()","
def solve():
    n, k = map(int, input().split())
    if n % (2*k) < k:
        print(""YES"")
    else:
        print(""NO"")

solve()","
def solve():
    n, k = map(int, input().split())
    
    total_moves = (n // k) + ((n % k) != 0)
    
    if total_moves % 2 == 1:
        print(""YES"")
    else:
        print(""NO"")
  
solve()","0.0","0.0","0.0","20.0","","","",""
"APPS/299","
QUESTION:
Greg is a beginner bodybuilder. Today the gym coach gave him the training plan. All it had was n integers a_1, a_2, ..., a_{n}. These numbers mean that Greg needs to do exactly n exercises today. Besides, Greg should repeat the i-th in order exercise a_{i} times.

Greg now only does three types of exercises: ""chest"" exercises, ""biceps"" exercises and ""back"" exercises. Besides, his training is cyclic, that is, the first exercise he does is a ""chest"" one, the second one is ""biceps"", the third one is ""back"", the fourth one is ""chest"", the fifth one is ""biceps"", and so on to the n-th exercise.

Now Greg wonders, which muscle will get the most exercise during his training. We know that the exercise Greg repeats the maximum number of times, trains the corresponding muscle the most. Help Greg, determine which muscle will get the most training.


-----Input-----

The first line contains integer n (1 ≤ n ≤ 20). The second line contains n integers a_1, a_2, ..., a_{n} (1 ≤ a_{i} ≤ 25) — the number of times Greg repeats the exercises.


-----Output-----

Print word ""chest"" (without the quotes), if the chest gets the most exercise, ""biceps"" (without the quotes), if the biceps gets the most exercise and print ""back"" (without the quotes) if the back gets the most exercise.

It is guaranteed that the input is such that the answer to the problem is unambiguous.


-----Examples-----
Input
2
2 8

Output
biceps

Input
3
5 1 10

Output
back

Input
7
3 3 2 7 9 6 8

Output
chest



-----Note-----

In the first sample Greg does 2 chest, 8 biceps and zero back exercises, so the biceps gets the most exercises.

In the second sample Greg does 5 chest, 1 biceps and 10 back exercises, so the back gets the most exercises.

In the third sample Greg does 18 chest, 12 biceps and 8 back exercises, so the chest gets the most exercise.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    exercises = list(map(int, input().split()))
    
    chest = sum(exercises[i] for i in range(0, n, 3))
    biceps = sum(exercises[i] for i in range(1, n, 3))
    back = sum(exercises[i] for i in range(2, n, 3))
    
    if chest > biceps and chest > back:
        print(""chest"")
    elif biceps > chest and biceps > back:
        print(""biceps"")
    else:
        print(""back"")

solve()","
def solve():
    n = int(input())
    exercises = list(map(int, input().split()))

    total_chest = sum(exercises[i] if i % 3 == 0 else 0 for i in range(n))
    total_biceps = sum(exercises[i] if i % 3 == 1 else 0 for i in range(n))
    total_back = sum(exercises[i] if i % 3 == 2 else 0 for i in range(n))

    if total_chest >= total_biceps and total_chest >= total_back:
        return ""chest""
    elif total_biceps >= total_chest and total_biceps >= total_back:
        return ""biceps""
    else:
        return ""back""

solve()
","
def solve():
    n = int(input())
    exercises = list(map(int, input().split()))
    
    chest_sum = sum(exercises[::3])
    biceps_sum = sum(exercises[1::3])
    back_sum = sum(exercises[2::3])
    
    if chest_sum >= biceps_sum and chest_sum >= back_sum:
        print(""chest"")
    elif biceps_sum >= chest_sum and biceps_sum >= back_sum:
        print(""biceps"")
    else:
        print(""back"")

solve()","
def solve():
    n = int(input())
    exercises = list(map(int, input().split()))
    
    chest_count = 0
    biceps_count = 0
    back_count = 0
    
    for i in range(n):
        if i % 3 == 0:
            chest_count += exercises[i]
        elif i % 3 == 1:
            biceps_count += exercises[i]
        else:
            back_count += exercises[i]
    
    if max(chest_count, biceps_count, back_count) == chest_count:
        print(""chest"")
    elif max(chest_count, biceps_count, back_count) == biceps_count:
        print(""biceps"")
    else:
        print(""back"")

solve()","100.0","0.0","100.0","100.0","","","",""
"APPS/300","
QUESTION:
Translator's note: in Russia's most widespread grading system, there are four grades: 5, 4, 3, 2, the higher the better, roughly corresponding to A, B, C and F respectively in American grading system.

The term is coming to an end and students start thinking about their grades. Today, a professor told his students that the grades for his course would be given out automatically  — he would calculate the simple average (arithmetic mean) of all grades given out for lab works this term and round to the nearest integer. The rounding would be done in favour of the student — $4.5$ would be rounded up to $5$ (as in example 3), but $4.4$ would be rounded down to $4$.

This does not bode well for Vasya who didn't think those lab works would influence anything, so he may receive a grade worse than $5$ (maybe even the dreaded $2$). However, the professor allowed him to redo some of his works of Vasya's choosing to increase his average grade. Vasya wants to redo as as few lab works as possible in order to get $5$ for the course. Of course, Vasya will get $5$ for the lab works he chooses to redo.

Help Vasya — calculate the minimum amount of lab works Vasya has to redo.


-----Input-----

The first line contains a single integer $n$ — the number of Vasya's grades ($1 \leq n \leq 100$).

The second line contains $n$ integers from $2$ to $5$ — Vasya's grades for his lab works.


-----Output-----

Output a single integer — the minimum amount of lab works that Vasya has to redo. It can be shown that Vasya can always redo enough lab works to get a $5$.


-----Examples-----
Input
3
4 4 4

Output
2

Input
4
5 4 5 5

Output
0

Input
4
5 3 3 5

Output
1



-----Note-----

In the first sample, it is enough to redo two lab works to make two $4$s into $5$s.

In the second sample, Vasya's average is already $4.75$ so he doesn't have to redo anything to get a $5$.

In the second sample Vasya has to redo one lab work to get rid of one of the $3$s, that will make the average exactly $4.5$ so the final grade would be $5$.
Use user-input-Based format and function signature solve()","
def solve():
    n = int(input())
    grades = list(map(int, input().split()))
    
    total = sum(grades)
    target = n * 4.5
    to_redo = 0
    
    while total < target:
        total += 5
        to_redo += 1
    
    print(to_redo)

solve()
","
def solve():
    n = int(input())
    grades = list(map(int, input().split()))
    
    avg_grade = sum(grades) / n
    
    count_to_redo = 0
    while avg_grade < 4.5:
        count_to_redo += 1
        avg_grade = (avg_grade * n + 5) / (n + 1)
        n += 1
    
    print(count_to_redo)

# Run the function to solve the problem
solve()
","
def solve():
    n = int(input())
    grades = list(map(int, input().split()))
    
    if sum(grades) / n >= 4.5:
        print(0)
    else:
        grades.sort()
        num_to_redo = 0
        while sum(grades) / n < 4.5:
            grades[0] = 5
            num_to_redo += 1
            grades.sort()
        print(num_to_redo)

solve()","
def solve():
    n = int(input())
    grades = list(map(int, input().split()))
    
    if sum(grades) / n >= 4.5:
        return 0
    
    to_redo = 0
    
    while sum(grades) / n < 4.5:
        grades.sort()
        if grades[0] < 5:
            grades[0] = 5
            to_redo += 1
    
    return to_redo

solve()","66.66666666666666","33.33333333333333","100.0","0.0","","","",""
