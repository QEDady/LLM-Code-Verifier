"task_id","prompt","code_0","code_1","code_2","code_3","code_4","code_5","pass_rate_0","pass_rate_1","pass_rate_2","pass_rate_3","pass_rate_4","pass_rate_5","err_0","err_1","err_2","err_3","err_4","err_5"
"HumanEval/0","from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
","
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in the given list of numbers, there are any two numbers closer to each other than
    the given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
  ","
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
","
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
","
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    return any(abs(a - b) < threshold for i, a in enumerate(numbers) for b in numbers[:i])
  ","
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/1","from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
","
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
    result = []
    current_group = ''
    open_braces = 0

    for char in paren_string:
        if char == '(':
            open_braces += 1
            current_group += char
        elif char == ')':
            open_braces -= 1
            current_group += char
            if open_braces == 0:
                result.append(current_group)
                current_group = ''

    return result
","
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))'
    ['()', '(())', '(()())']
    """"""

    result = []
    curr_group = ''
    open_braces = 0
    
    for char in paren_string:
        if char == '(':
            open_braces += 1
            if open_braces > 1:
                curr_group += char
        elif char == ')':
            open_braces -= 1
            if open_braces > 0:
                curr_group += char
            else:
                result.append(curr_group)
                curr_group = ''
        else:
            curr_group += char

    return result
","
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
    result = []
    current_str = ''
    count = 0
    
    for char in paren_string.replace("" "", """"):
        current_str += char
        if char == '(':
            count += 1
        elif char == ')':
            count -= 1
            if count == 0:
                result.append(current_str)
                current_str = ''
    
    return result
","
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    stack = []
    result = []
    curr_str = ''
    
    for char in paren_string:
        if char == '(':
            stack.append(char)
            curr_str += char
        elif char == ')':
            if stack:
                stack.pop()
                curr_str += char
                if not stack:
                    result.append(curr_str)
                    curr_str = ''
            else:
                raise ValueError(""Invalid input string. Unbalanced parentheses."")
    
    return result
","
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    stack = []
    result = []
    current_group = """"

    for char in paren_string.replace("" "", """"):
        if char == ""("":
            stack.append(""("")
            current_group += char
        elif char == "")"":
            if stack:
                stack.pop()
                current_group += char
                if not stack:
                    result.append(current_group)
                    current_group = """"
            else:
                raise ValueError(""Invalid input: unbalanced parentheses"")

    return result
","
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    count = 0
    start = 0
    for i, char in enumerate(paren_string):
        if char == '(':
            count += 1
        elif char == ')':
            count -= 1
            if count == 0:
                result.append(paren_string[start:i+1].replace("" "", """"))
                start = i + 1
    return result
","100.0","0.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/2","

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""
","
from math import floor

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    """"""
    return number - floor(number)
","
from math import trunc

def truncate_number(number: float) -> float:
    """"""
    Given a positive floating point number, it can be decomposed into
    an integer part (largest integer smaller than the given number)
    and decimals (leftover part always smaller than 1).
    
    Return the decimal part of the number.
    
    Examples:
        truncate_number(3.5) => 0.5
    """"""
    return number - trunc(number)
","
from math import floor

def truncate_number(number: float) -> float:
    return number - floor(number)
","
from math import floor

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).
    
    Return the decimal part of the number.
    """"""
    return number - floor(number)
","
from math import floor

def truncate_number(number: float) -> float:
    return number - floor(number)
","
from math import trunc

def truncate_number(number: float) -> float:
    return number - trunc(number)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/3","from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    for op in operations:
        if op >= 0:
            continue
        else:
            return True
    return False
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    total = 0
    for op in operations:
        total += op
        if total < 0:
            return True
    return False
","
from typing import List


def below_zero(operations: List[int]) -> bool:
    """"""
    You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance.
    Your task is to detect if at any point the balance of the account falls below zero,
    and at that point, the function should return True. Otherwise, it should return False.

    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    return any(sum(operations[:i + 1]) < 0 for i in range(len(operations)))
","
from typing import List


def below_zero(operations: List[int]) -> bool:
    return any(sum(operations[:i+1]) < 0 for i in range(len(operations)))
","100.0","66.66666666666666","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/4","from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    """"""
    For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset. Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
    if not numbers:
        return 0.0
    mean_value = sum(numbers) / len(numbers)
    return sum(abs(x - mean_value) for x in numbers) / len(numbers)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/5","from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    result = []
    for num in numbers:
        result.extend([num, delimeter])
    return result[:-1]
","
from typing import List


def intersperse(numbers: List[int], delimiter: int) -> List[int]:
    """""" Insert a number 'delimiter' between every two consecutive elements of input list numbers' """"""
    result = []
    for num in numbers[:-1]:
        result.extend([num, delimiter])
    if numbers:
        result.append(numbers[-1])
    return result

","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    result = []
    for num in numbers[:-1]:
        result.extend([num, delimeter])
    if numbers:
        result.append(numbers[-1])
    return result
","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    
    interspersed_list = []
    for i in range(len(numbers)):
        interspersed_list.append(numbers[i])
        if i < len(numbers) - 1:
            interspersed_list.append(delimeter)
    
    return interspersed_list
","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    result = []
    for num in numbers[:-1]:
        result.extend([num, delimeter])
    if numbers:
        result.append(numbers[-1])
    return result
  ","
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","100.0","100.0","100.0","100.0","100.0","0.0","","","","","",""
"HumanEval/6","from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
","
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    depths = []
    max_depth = 0
    current_depth = 0

    for char in paren_string:
        if char == '(':
            current_depth += 1
            max_depth = max(max_depth, current_depth)
        elif char == ')':
            current_depth -= 1

        if char == ' ':
            depths.append(max_depth)
            max_depth = 0
            current_depth = 0

    depths.append(max_depth)

    return depths
","
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    depths = []
    max_depth = 0
    curr_depth = 0

    for char in paren_string:
        if char == '(':
            curr_depth += 1
            max_depth = max(max_depth, curr_depth)
        elif char == ')':
            curr_depth -= 1

    return [max_depth] * paren_string.count(' ')
","
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    max_levels = []
    current_level = 0

    for char in paren_string:
        if char == '(':
            current_level += 1
            max_levels.append(current_level)
        elif char == ')':
            current_level -= 1

    return [max(max_levels[:i+1]) for i, char in enumerate(paren_string) if char == ')']
","
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    stack = []
    max_depth = 0
    depths = []
    
    for char in paren_string:
        if char == '(':
            stack.append('(')
            max_depth = max(max_depth, len(stack))
        elif char == ')':
            if stack:
                stack.pop()
        elif char == ' ':
            depths.append(max_depth)
            max_depth = 0
    
    depths.append(max_depth)
    
    return depths
","
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    depths = []
    
    for group in paren_string.split():
        depth = 0
        max_depth = 0
        
        for char in group:
            if char == '(':
                depth += 1
                max_depth = max(max_depth, depth)
            elif char == ')':
                depth -= 1
        
        depths.append(max_depth)
    
    return depths
","
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    max_depth = 0
    current_depth = 0
    depths = []
    
    for char in paren_string:
        if char == '(':
            current_depth += 1
            if current_depth > max_depth:
                max_depth = current_depth
        elif char == ')':
            if current_depth > 0:
                current_depth -= 1
        
        if char == ' ':
            depths.append(max_depth)
            max_depth = 0
            current_depth = 0
    
    return depths
","100.0","0.0","0.0","100.0","100.0","0.0","","","","","",""
"HumanEval/7","from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]
","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]
","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]
  ","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    filtered_strings = [s for s in strings if substring in s]
    return filtered_strings
","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
    return [s for s in strings if substring in s]
","
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    filtered_strings = [s for s in strings if substring in s]
    return filtered_strings
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/8","from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
    if not numbers:
        return 0, 1
    total_sum = sum(numbers)
    total_product = 1
    for num in numbers:
        total_product *= num
    return total_sum, total_product
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
    total_sum = sum(numbers)
    total_product = 1
    for num in numbers:
        total_product *= num
    return total_sum, total_product
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_result = sum(numbers) if numbers else 0
    product_result = 1
    for num in numbers:
        product_result *= num
    return sum_result, product_result
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
    return sum(numbers), 1 if len(numbers) == 0 else 1 if 0 in numbers else 1
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
    sum_result = sum(numbers) if numbers else 0
    product_result = 1 if not numbers else 1
    for num in numbers:
        product_result *= num
    return (sum_result, product_result)
","
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    """"""
    sum_result = sum(numbers) if numbers else 0
    product_result = 1
    for num in numbers:
        product_result *= num
    return sum_result, product_result
","100.0","100.0","100.0","40.0","100.0","100.0","","","","","",""
"HumanEval/9","from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","
from typing import List, Tuple

def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    if not numbers:
        return []
    
    max_list = [numbers[0]]
    for i in range(1, len(numbers)):
        max_list.append(max(max_list[-1], numbers[i]))
    
    return max_list
","
from typing import List


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    if not numbers:
        return []
    
    max_numbers = [numbers[0]]
    for i in range(1, len(numbers)):
        if numbers[i] > max_numbers[-1]:
            max_numbers.append(numbers[i])
        else:
            max_numbers.append(max_numbers[-1])
    
    return max_numbers
  ","
from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    
    if not numbers:
        return []
    
    rolling_max_list = [numbers[0]]
    for i in range(1, len(numbers)):
        rolling_max_list.append(max(rolling_max_list[i - 1], numbers[i]))

    return rolling_max_list
","
from typing import List, Tuple

def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    if not numbers:
        return []

    max_list = []
    current_max = float('-inf')
    
    for num in numbers:
        current_max = max(current_max, num)
        max_list.append(current_max)
    
    return max_list
","
from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    rolling_maximums = []
    current_max = None

    for num in numbers:
        if current_max is None or num > current_max:
            current_max = num
        rolling_maximums.append(current_max)

    return rolling_maximums
  ","
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    if not numbers:
        return []

    result = [numbers[0]]
    max_num = numbers[0]

    for num in numbers[1:]:
        max_num = max(max_num, num)
        result.append(max_num)
      
    return result
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/10","

def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","
def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","
def is_palindrome(string: str) -> bool:
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    for i in range(len(string)):
        if string[i:] == string[i:][::-1]:
            return string + string[:i][::-1]
    return string
","
def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    """"""
    i = 0
    while string[i:] != string[i:][::-1]:
        i += 1
    return string + string[:i][::-1]
","
def is_palindrome(string: str) -> bool:
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    if string == '':
        return ''
    for i in range(len(string),0,-1):
        if is_palindrome(string[:i]):
            return string + string[i-1::-1]

You can include the imports for this code at the beginning of your file:
python
from typing import List, Dict
","
def is_palindrome(string: str) -> bool:
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    if not string:
        return ''
    for i in range(len(string), -1, -1):
        if string[:i] == string[:i][::-1]:
            return string + string[:i][::-1]
    return ''
","
def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""

Note: No imports are needed for the provided functions.","0.0","100.0","100.0","0","20.0","0","","","","  File ""<string>"", line 12
    You can include the imports for this code at the beginning of your file:
        ^^^
SyntaxError: invalid syntax
","","  File ""<string>"", line 20
    Note: No imports are needed for the provided functions.
             ^^^^^^^
SyntaxError: invalid syntax
"
"HumanEval/11","from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
","
from typing import List


def string_xor(a: str, b: str) -> str:
    """"""
    Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return ''.join('1' if x != y else '0' for x, y in zip(a, b))
  ","
from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    if len(a) != len(b):
        raise ValueError(""Input strings must have the same length."")
    
    result = """"
    for i in range(len(a)):
        if a[i] == b[i]:
            result += '0'
        else:
            result += '1'
    
    return result
","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))
","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))
","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return """".join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/12","from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    max_length = max(len(s) for s in strings)
    longest_strings = [s for s in strings if len(s) == max_length]
    return longest_strings[0]
","
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    max_length = max(len(s) for s in strings)
    longest_strings = [s for s in strings if len(s) == max_length]
    return longest_strings[0]
","
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    max_length = max(len(s) for s in strings)
    longest_strings = [s for s in strings if len(s) == max_length]
    return longest_strings[0]
","
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
    if not strings:
        return None
    longest_str = max(strings, key=len)
    longest_strs = [s for s in strings if len(s) == len(longest_str)]

    return longest_strs[0]
  ","
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","100.0","33.33333333333333","100.0","100.0","100.0","33.33333333333333","","","","","",""
"HumanEval/13","

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","
import math

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return math.gcd(a, b)
","
import math

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    
    return math.gcd(a, b)
","
from math import gcd

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return gcd(a, b)
","
from math import gcd

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return gcd(a, b)
","
from math import gcd

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return gcd(a, b)
","
from math import gcd

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return gcd(a, b)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/14","from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i+1] for i in range(len(string))]
","
from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i] for i in range(1, len(string)+1)]
","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i+1] for i in range(len(string))]
","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i+1] for i in range(len(string))]
","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i+1] for i in range(len(string))]
","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """"""Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i+1] for i in range(len(string))]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/15","

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
","
def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n + 1)))
","
def string_sequence(n: int) -> str:
    return ' '.join(map(str, range(n + 1)))
","
def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n + 1)))
","
def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n+1)))
","
from typing import List

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n + 1)))
","
from typing import List

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n+1)))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/16","

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    return len(Counter(string.lower()))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of """"""
    return len(Counter(string.lower()))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    return len(Counter(string.lower()))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    return len(Counter(string.lower()))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    return len(Counter(string.lower()))
","
from collections import Counter


def count_distinct_characters(string: str) -> int:
    return len(Counter(string.lower()))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/17","from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","
from typing import List

def parse_music(music_string: str) -> List[int]:
    durations = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.split()
    return [durations[note] for note in notes]

","
from typing import List

def parse_music(music_string: str) -> List[int]:
    notes_duration = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }
    parsed_notes = []
    for note in music_string.split():
        parsed_notes.append(notes_duration[note])
    return parsed_notes
","
from typing import List

def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
","
from typing import List

def parse_music(music_string: str) -> List[int]:
    notes_duration = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }

    notes = music_string.split()
    durations = [notes_duration[note] for note in notes]

    return durations
","
from typing import List


def parse_music(music_string: str) -> List[int]:
    music_legend = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }
  
    music_notes = music_string.split()
    beats = [music_legend[note] for note in music_notes]
  
    return beats
","
from typing import List


def parse_music(music_string: str) -> List[int]:
    beats_dict = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }
    
    music_notes = music_string.split()
    beats_list = [beats_dict[note] for note in music_notes]
    
    return beats_list
","100.0","100.0","0.0","100.0","100.0","100.0","","","","","",""
"HumanEval/18","

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","
def how_many_times(string: str, substring: str) -> int:
    count = 0
    if not string or not substring:
        return count
    for i in range(len(string) - len(substring) + 1):
        if string[i:i + len(substring)] == substring:
            count += 1
    return count
","
from typing import List

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlapping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
    if not string or not substring:
        return 0
    count = 0
    index = string.find(substring)
    while index != -1:
        count += 1
        index = string.find(substring, index + 1)
    return count
","
def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlapping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
    
    if not string or not substring:
        return 0
    
    count = 0
    start = 0
    while True:
        start = string.find(substring, start) + 1
        if start > 0:
            count += 1
        else:
            break
    
    return count
  ","
from typing import List

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
    
    if not string or not substring:
        return 0
        
    count = 0
    for i in range(len(string) - len(substring) + 1):
        if string[i: i + len(substring)] == substring:
            count += 1
            
    return count
","
def how_many_times(string: str, substring: str) -> int:
    """"""Find how many times a given substring can be found in the original string. Count overlapping cases.""""""
    count = 0
    if not string or not substring:
        return 0
    for i in range(len(string) - len(substring) + 1):
        if string[i:i + len(substring)] == substring:
            count += 1
    return count
","
def how_many_times(string: str, substring: str) -> int:
    if not string or not substring:
        return 0
    count = 0
    start = 0
    while start < len(string):
        idx = string.find(substring, start)
        if idx == -1:
            break
        count += 1
        start = idx + 1
    return count
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/19","from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""
","
from typing import List

def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}
    sorted_nums = sorted(numbers.split(), key=lambda x: num_dict[x])
    return ' '.join(sorted_nums)
","
from typing import List

def sort_numbers(numbers: str) -> str:
    num_dict = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    
    sorted_numbers = sorted(numbers.split(), key=lambda x: num_dict[x])
    return ' '.join(sorted_numbers)
","
from typing import List

def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}
    num_list = numbers.split()
    sorted_nums = sorted(num_list, key=lambda x: num_dict[x])
    return ' '.join(sorted_nums)
","
from typing import List

NUMERAL_TO_INT = {
    'zero': 0,
    'one': 1,
    'two': 2,
    'three': 3,
    'four': 4,
    'five': 5,
    'six': 6,
    'seven': 7,
    'eight': 8,
    'nine': 9,
}


def sort_numbers(numbers: str) -> str:
    numerals = numbers.split()
    sorted_numerals = sorted(numerals, key=lambda x: NUMERAL_TO_INT[x])
    return ' '.join(sorted_numerals)
","
from typing import List


def sort_numbers(numbers: str) -> str:
    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}
    
    def key_func(num_str):
        return number_map[num_str]
    
    number_list = numbers.split()
    number_list.sort(key=key_func)
    
    return ' '.join(number_list)
","
from typing import List


def sort_numbers(numbers: str) -> str:
    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}
    numberals = numbers.split()
    sorted_numbers = sorted(numberals, key=lambda x: num_dict[x])
    return ' '.join(sorted_numbers)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/20","from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
    numbers.sort()
    min_diff = float('inf')
    closest_pair = (0, 0)
    
    for i in range(len(numbers) - 1):
        diff = numbers[i+1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i+1])
    
    return closest_pair
","
from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two 
    that are the closest to each other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
    sorted_numbers = sorted(numbers)
    min_diff = float('inf')
    closest_pair = None
    
    for i in range(len(sorted_numbers) - 1):
        diff = sorted_numbers[i+1] - sorted_numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (sorted_numbers[i], sorted_numbers[i+1])
    
    return closest_pair
","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
    numbers.sort()
    min_diff = float('inf')
    pair = ()
    for i in range(len(numbers) - 1):
        diff = abs(numbers[i] - numbers[i + 1])
        if diff < min_diff:
            min_diff = diff
            pair = (numbers[i], numbers[i + 1])
    return pair
","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = min(((x, y) for x in numbers for y in numbers if x != y), key=lambda pair: abs(pair[0] - pair[1]))
    return tuple(sorted(closest_pair))
","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = min((abs(numbers[i] - numbers[j]), (numbers[i], numbers[j]))
                for i in range(len(numbers))
                for j in range(i + 1, len(numbers))
            )[1]
    return min(closest_pair), max(closest_pair)

","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
    
    numbers.sort()
    min_diff = float('inf')
    closest_pair = ()
    
    for i in range(len(numbers) - 1):
        diff = numbers[i + 1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i + 1])
    
    return closest_pair
","100.0","100.0","100.0","80.0","100.0","100.0","","","","","",""
"HumanEval/21","from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]
    return scaled_numbers
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_val = min(numbers)
    max_val = max(numbers)
    return [(x - min_val) / (max_val - min_val) for x in numbers]
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]
    return scaled_numbers
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    if min_num == max_num:
        return [0.0] * len(numbers)
    return [(x - min_num) / (max_num - min_num) for x in numbers]
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    diff = max_num - min_num
    return [0.0 if diff == 0 else (num - min_num) / diff for num in numbers]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/22","from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [v for v in values if isinstance(v, int)]
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
","
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [v for v in values if isinstance(v, int)]
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
 ","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/23","

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
","
from typing import List

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
","
from typing import List

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
","
def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
","
from typing import List

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
","
from typing import List

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
","
from typing import List

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/24","

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
","
from math import sqrt

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    for i in range(int(sqrt(n)), 0, -1):
        if n % i == 0:
            return i
","
from typing import List

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    for i in range(n - 1, 1, -1):
        if n % i == 0:
            return i
    return 1
","
import math

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    for i in range(n-1, 1, -1):
        if n % i == 0:
            return i
","
def largest_divisor(n: int) -> int:
    for i in range(n-1, 0, -1):
        if n % i == 0:
            return i
","
def largest_divisor(n: int) -> int:
    for i in range(n//2, 0, -1):
        if n % i == 0:
            return i

# Example usage
print(largest_divisor(15))
","
import math

def largest_divisor(n: int) -> int:
    for i in range(n-1, 0, -1):
        if n % i == 0:
            return i

# Test the function with an example
print(largest_divisor(15))
","60.0","100.0","60.0","100.0","100.0","100.0","","","","","",""
"HumanEval/25","from typing import List


def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","
from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while n > 1:
        if n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        else:
            divisor += 1
    return factors
","
from typing import List


def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    
    while n > 1:
        if n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        else:
            divisor += 1
    
    return factors
","
from typing import List


def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors
","
from typing import List


def factorize(n: int) -> List[int]:
    """"""
    Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.
    Input number should be equal to the product of all factors
    
    Examples:
        >>> factorize(8)
        [2, 2, 2]
        >>> factorize(25)
        [5, 5]
        >>> factorize(70)
        [2, 5, 7]
    """"""
","
from typing import List


def factorize(n: int) -> List[int]:
    factors = []
    
    divisor = 2
    while n > 1:
        if n % divisor == 0:
            n //= divisor
            factors.append(divisor)
        else:
            divisor += 1
    
    return factors
","
from typing import List


def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while n > 1:
        while n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        divisor += 1
    return factors
","100.0","100.0","100.0","0.0","100.0","100.0","","","","","",""
"HumanEval/26","from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    return [num for num in numbers if numbers.count(num) == 1]
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    return [num for num in numbers if numbers.count(num) == 1]
","
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    seen = set()
    return [num for num in numbers if numbers.count(num) == 1]
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    seen = set()
    result = []
    for num in numbers:
        if num not in seen:
            result.append(num)
            seen.add(num)
    return result
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    return [num for num in numbers if numbers.count(num) == 1]
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    
    return [num for num in numbers if numbers.count(num) == 1]
","100.0","100.0","100.0","66.66666666666666","100.0","100.0","","","","","",""
"HumanEval/27","

def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
","
def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])
","
def flip_case(string: str) -> str:
    """"""For a given string, flip lowercase characters to uppercase and uppercase to lowercase.""""""
    return string.swapcase()
","
def flip_case(string: str) -> str:
    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)
","
def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])

","
def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return string.swapcase()
","
def flip_case(string: str) -> str:
    """"""For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    flipped_string = ''
    for char in string:
        if char.islower():
            flipped_string += char.upper()
        else:
            flipped_string += char.lower()
    return flipped_string
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/28","from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
","
from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return """".join(strings)
","
from typing import List


def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/29","from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]
","
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]
","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]
 ","
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]
  ","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]
","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/30","

def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
def get_positive(l: list):
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List) -> List:
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/31","

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
","
import math

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.""""""
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
","
import math

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.""""""
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
","
import math

def is_prime(n):
    """"""
    Return true if a given number is prime, and false otherwise.
    
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/32","import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","
import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","
import math


def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    if len(xs) % 2 != 0:
        raise ValueError(""List must have an even number of coefficients."")
    max_coeff = max(abs(c) for c in xs[1:])
    if max_coeff == 0:
        raise ValueError(""Largest non-zero coefficient must be present."")
    
    return next(x for x in range(-100, 101) if poly(xs, x) == 0)
","
import math

def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
  ","
import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^(n-1)
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only one zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","
import math


def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    # xs are coefficients of a polynomial.
    # find_zero find x such that poly(x) = 0.
    # find_zero returns only only zero point, even if there are many.
    # Moreover, find_zero only takes list xs having even number of coefficients
    # and largest non zero coefficient as it guarantees a solution.
    def poly(x):
        return sum([coeff * x ** i for i, coeff in enumerate(xs)])

    solution = None
    for i in range(-1000, 1000):
        if poly(i) == 0:
            solution = i
            break

    return solution
","
import math


def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    return -max(xs) / xs[-1]
","0.0","38.0","0.0","0.0","55.00000000000001","62.0","","","","","",""
"HumanEval/33","

def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(len(l))]
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    return [sorted(l[i:i+3]) if i % 3 == 0 else l[i] for i in range(len(l))]
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    return [sorted(l[i] for i in range(len(l)) if i % 3 == 0) if i % 3 == 0 else l[i] for i in range(len(l))]
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]
    sorted_values = sorted([l[i] for i in sorted_indices])
    sorted_list = list(l)
    for i, val in zip(sorted_indices, sorted_values):
        sorted_list[i] = val
    return sorted_list
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    if not l:
        return []
    
    sorted_thirds = sorted([v for i, v in enumerate(l) if i % 3 == 0])
    result = [v if i % 3 != 0 else sorted_thirds.pop(0) for i, v in enumerate(l)]
    
    return result
","
from typing import List
from copy import deepcopy

def sort_third(l: List[int]) -> List[int]:
    result = deepcopy(l)
    divisible_by_three_indices = [i for i in range(len(l)) if i % 3 == 0]
    for index in divisible_by_three_indices:
        result[index:index+3] = sorted(result[index:index+3])
    return result
  ","42.857142857142854","42.857142857142854","42.857142857142854","100.0","100.0","42.857142857142854","","","","","",""
"HumanEval/34","

def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","
from typing import List

def unique(l: List[int]) -> List[int]:
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List[int]) -> List[int]:
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List[int]) -> List[int]:
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List) -> List:
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List[int]) -> List[int]:
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    return sorted(list(set(l)))
  ","
from typing import List

def unique(l: List) -> List:
    return sorted(list(set(l)))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/35","

def max_element(l: list):
    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    """"""Return maximum element in the list.""""""
    if not l:
        raise ValueError(""List is empty"")
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    """"""Return maximum element in the list.""""""
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/36","

def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
","
from typing import List

def fizz_buzz(n: int) -> int:
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.""""""
    return sum(1 for i in range(1, n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))
","
from typing import List

def fizz_buzz(n: int) -> int:
    return sum((str(i).count('7')) for i in range(n) if i % 11 == 0 or i % 13 == 0)
","
from typing import List

def fizz_buzz(n: int) -> int:
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.""""""
    count_7 = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            if '7' in str(i):
                count_7 += str(i).count('7')
    return count_7
","
import numpy as np

def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    return np.sum([str(i).count('7') for i in range(n) if i % 11 == 0 or i % 13 == 0])
  ","
from collections import Counter

def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    
    return sum(Counter(str(num)).get('7', 0) for num in range(n) if num % 11 == 0 or num % 13 == 0)
","
from collections import Counter

def fizz_buzz(n: int):
    return sum(str(num).count('7') for num in range(1, n) if num % 11 == 0 or num % 13 == 0)
","12.5","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/37","

def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    even_vals = sorted([val for idx, val in enumerate(l) if idx % 2 == 0])
    sorted_l = [val if idx % 2 != 0 else even_vals.pop(0) for idx, val in enumerate(l)]
    return sorted_l
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])
    result = [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]
    return result
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    sorted_even_values = sorted([v for i, v in enumerate(l) if i % 2 == 0])
    return [v if i % 2 != 0 else sorted_even_values.pop(0) for i, v in enumerate(l)]

","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    even_indices = [i for i in range(len(l)) if i % 2 == 1]
    even_values = [l[i] for i in even_indices]
    sorted_even_values = sorted(even_values)
    
    result = l.copy()
    for i, val in zip(even_indices, sorted_even_values):
        result[i] = val
        
    return result
","100.0","100.0","100.0","100.0","100.0","33.33333333333333","","","","","",""
"HumanEval/38","

def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","
def encode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)
","
from typing import List, Tuple

def encode_cyclic(s: str) -> str:
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str) -> str:
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # reverse the cycling done in encode_cyclic function
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in [s[i:i + 3] for i in range(0, len(s), 3)]]
    return """".join(groups)
","
def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    from typing import List
    groups: List[str] = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","
from typing import List

def encode_cyclic(s: str) -> str:
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups: List[str] = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str) -> str:
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    # Decoding cyclically by reversing the cyclic shift
    groups: List[str] = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)

","
def encode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)
","
def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    import math
    
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range(math.ceil(len(s) / 3))]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    import math
    
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range(math.ceil(len(s) / 3))]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)
  ","100.0","100.0","0.0","100.0","100.0","100.0","","","","","",""
"HumanEval/39","

def prime_fib(n: int):
    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def is_fib(num):
        return math.isqrt(5 * num * num + 4) ** 2 == 5 * num * num + 4 or math.isqrt(5 * num * num - 4) ** 2 == 5 * num * num - 4

    count = 0
    num = 2
    while count < n:
        if is_fib(num) and is_prime(num):
            count += 1
        num += 1
    return num - 1
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def is_fib(num):
        return math.isqrt(5 * num * num + 4) ** 2 == 5 * num * num + 4 or math.isqrt(5 * num * num - 4) ** 2 == 5 * num * num - 4

    result = []
    num = 2
    count = 0
    while count < n:
        if is_fib(num) and is_prime(num):
            result.append(num)
            count += 1
        num += 1
    return result[-1]
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        a, b = 0, 1
        for _ in range(2, n):
            a, b = b, a + b
        return b

def prime_fib(n: int):
    count = 0
    i = 2
    while count < n:
        fib = fibonacci(i)
        if is_prime(fib):
            count += 1
        i += 1
    return fib
","
from math import sqrt

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(sqrt(num))+1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def fibonacci(n):
        a, b = 0, 1
        for _ in range(n):
            a, b = b, a + b
        return a
    
    count = 0
    num = 1
    while count < n:
        num += 1
        if is_prime(num):
            fib = fibonacci(num)
            if is_prime(fib):
                count += 1
    
    return fib
","
from math import sqrt

def is_prime(num):
    if num <= 1:
        return False
    if num == 2:
        return True
    if num % 2 == 0:
        return False
    max_divisor = int(sqrt(num)) + 1
    for d in range(3, max_divisor, 2):
        if num % d == 0:
            return False
    return True

def prime_fib(n: int):
    def fib(n):
        if n <= 1:
            return n
        return fib(n-1) + fib(n-2)

    count = 0
    num = 1
    while count < n:
        num += 1
        if is_prime(num) and fib(num) % num == 0:
            count += 1
    return num
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def fibonacci(n):
        if n <= 0:
            return 0
        elif n == 1:
            return 1
        else:
            return fibonacci(n - 1) + fibonacci(n - 2)
    
    count = 0
    i = 0
    while count < n:
        if is_prime(fibonacci(i)):
            count += 1
        i += 1
    
    return fibonacci(i - 1)
","0","0","100.0","10.0","0","0","Timeout","Timeout","","","Timeout","Timeout"
"HumanEval/40","

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    for combo in combinations(l, 3):
        if sum(combo) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    for combo in combinations(l, 3):
        if sum(combo) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    for triple in combinations(l, 3):
        if sum(triple) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    triples = combinations(l, 3)
    for triple in triples:
        if sum(triple) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    for comb in combinations(l, 3):
        if sum(comb) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    for combo in combinations(l, 3):
        if sum(combo) == 0:
            return True
    return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/41","

def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
","
def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
    return n * n
","
from math import comb

def car_race_collision(n: int):
    return comb(2 * n, 2)
","
def car_race_collision(n: int) -> int:
    return n ** 2
","
from math import comb

def car_race_collision(n: int):
    return comb(n, 2)
","
def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
    
    return n * n
","
def car_race_collision(n: int) -> int:
    return n
","100.0","0.0","100.0","0.0","100.0","0.0","","","","","",""
"HumanEval/42","

def incr_list(l: list):
    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [num + 1 for num in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [num + 1 for num in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [num + 1 for num in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [x + 1 for x in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
    return [num + 1 for num in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [x + 1 for x in l]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/43","

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","
from itertools import combinations

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    for pair in combinations(l, 2):
        if sum(pair) == 0:
            return True
    return False
","
from collections import Counter

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    count_map = Counter(l)
    for num in l:
        if count_map[-num] > 0:
            return True
    return False
","
from itertools import combinations

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    for pair in combinations(l, 2):
        if sum(pair) == 0:
            return True
    return False
","
def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False
","
from itertools import combinations

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    for pair in combinations(l, 2):
        if sum(pair) == 0:
            return True
    return False
","
def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""

    seen = set()
    for num in l:
        if -num in seen:
            return True
        seen.add(num)
    return False


import doctest
doctest.testmod()
","100.0","88.88888888888889","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/44","

def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if x < 0 or base < 2 or base > 9:
        return ""Invalid input""
    
    result = """"
    while x > 0:
        remainder = x % base
        result = str(remainder) + result
        x = x // base
    
    return result
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if x < 0 or base < 2 or base > 9:
        return ""Invalid input""
    
    result = """"
    while x > 0:
        remainder = x % base
        result = str(remainder) + result
        x = x // base
    
    return result

","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if x < 0 or base < 2 or base > 9:
        return ""Invalid input""
    result = """"
    while x > 0:
        remainder = x % base
        result = str(remainder) + result
        x = x // base
    return result
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    
    if x < 0 or base < 2 or base > 9:
        return ""Invalid input""
    result = """"
    while x > 0:
        remainder = x % base
        x = x // base
        result = str(remainder) + result
        
    return result
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if x < 0 or base < 2 or base > 9:
        return None
    
    digits = ""0123456789""
    result = ''
    while x > 0:
        remainder = x % base
        result = digits[remainder] + result
        x = x // base
    return result
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    
    digits = ""0123456789""
    if x < base:
        return digits[x]
    else:
        return change_base(x // base, base) + digits[x % base]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/45","

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
","
import math

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
    return 0.5 * a * h
","
def triangle_area(a, h):
    return 0.5 * a * h
","
from typing import Union

def triangle_area(a: Union[int, float], h: Union[int, float]) -> Union[int, float]:
    return 0.5 * a * h
","
from typing import Union

def triangle_area(a: Union[int, float], h: Union[int, float]) -> Union[int, float]:
    return 0.5 * a * h
","
from typing import Union

def triangle_area(a: Union[int, float], h: Union[int, float]) -> Union[int, float]:
    return 0.5 * a * h
","
from typing import Union

def triangle_area(a: Union[int, float], h: Union[int, float]) -> float:
    return 0.5 * a * h
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/46","

def fib4(n: int):
    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
","
from collections import deque

def fib4(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    else:
        fib_nums = deque([0, 0, 2, 0])
        for i in range(4, n+1):
            next_num = sum(fib_nums)
            fib_nums.popleft()
            fib_nums.append(next_num)
        return fib_nums[-1]
","
from typing import List

def fib4(n: int) -> int:
    fib_nums = [0, 0, 2, 0]
    if n < 4:
        return fib_nums[n]
    for i in range(4, n+1):
        fib_nums[i % 4] = fib_nums[(i-1) % 4] + fib_nums[(i-2) % 4] + fib_nums[(i-3) % 4] + fib_nums[(i-4) % 4]
    return fib_nums[n % 4]
","
from collections import deque

def fib4(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0

    fib_sequence = [0, 0, 2, 0]

    for i in range(4, n+1):
        next_value = fib_sequence[-1] + fib_sequence[-2] + fib_sequence[-3] + fib_sequence[-4]
        fib_sequence.append(next_value)
        fib_sequence.pop(0)

    return fib_sequence[-1]

","
from typing import List

def fib4(n: int) -> int:
    if n == 0:
        return 0
    fib_nums = [0, 0, 2, 0]
    for i in range(4, n + 1):
        fib_nums[i % 4] = sum(fib_nums) - fib_nums[i % 4]
    return fib_nums[n % 4]
","
def fib4(n: int):
    a, b, c, d = 0, 0, 2, 0
    for i in range(4, n+1):
        a, b, c, d = b, c, d, a + b + c + d
    return d

","
from typing import List

def fib4(n: int) -> int:
    sequence = [0, 0, 2, 0]
    if n < 4:
        return sequence[n]
    for i in range(4, n+1):
        sequence[i % 4] = sequence[0] + sequence[1] + sequence[2] + sequence[3]
    return sequence[n % 4]
  ","100.0","100.0","100.0","25.0","100.0","100.0","","","","","",""
"HumanEval/47","

def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","
from statistics import median

def median(l: list):
    return median(l)
","
from statistics import median

def median(l: list):
    return median(l)
","
from statistics import median

def median(l: list):
    return median(l)
","
import statistics

def median(l: list):
    return statistics.median(l)
","
from statistics import median

def median(l: list):
    return median(l)
","
from statistics import median

def median(l: list):
    return median(l)
  ","0.0","0.0","0.0","100.0","0.0","0.0","","","","","",""
"HumanEval/48","

def is_palindrome(text: str):
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
","
from typing import List

def is_palindrome(text: str) -> bool:
    return text == text[::-1]
","
from typing import Union

def is_palindrome(text: str) -> bool:
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
    return text == text[::-1]
","
from collections import deque

def is_palindrome(text: str):
    return text == ''.join(deque(text))
","
from typing import Any

def is_palindrome(text: str) -> bool:
    return text == text[::-1]
","
from typing import Tuple

def is_palindrome(text: str) -> bool:
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
    return text == text[::-1]
","
from typing import List

def is_palindrome(text: str) -> bool:
    return text == text[::-1]
","100.0","100.0","57.14285714285714","100.0","100.0","100.0","","","","","",""
"HumanEval/49","

def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","
from typing import Tuple

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    if n == 0:
        return 1
    result = 1
    base = 2 % p
    while n > 0:
        if n % 2 == 1:
            result = (result * base) % p
        n //= 2
        base = (base * base) % p
    return result
","
from math import pow

def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    result = (pow(2, n) % p)
    return int(result)
","
from typing import int

def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    return pow(2, n, p)
","
from typing import List

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    if n == 0:
        return 1
    elif n == 1:
        return 2 % p
    else:
        return (2 ** (n % (p - 1))) % p
","
from typing import Tuple

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    
    if n == 0:
        return 1 % p
    
    result = 1
    base = 2 % p
    
    while n > 0:
        if n % 2 == 1:
            result = (result * base) % p
        base = (base * base) % p
        n //= 2
        
    return result
","
from typing import Tuple

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    num = 2**n
    return num % p
","100.0","85.71428571428571","0","100.0","100.0","100.0","","","Traceback (most recent call last):
  File ""<string>"", line 2, in <module>
ImportError: cannot import name 'int' from 'typing' (/usr/lib/python3.10/typing.py)
","","",""
"HumanEval/50","

def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","
def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","
def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","
def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])

def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","
def encode_shift(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])

def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","
def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"") for ch in s])

import string
","
def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","100.0","100.0","100.0","100.0","0","100.0","","","","","  File ""<string>"", line 13
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"") for ch in s])
                                                                              ^
SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
",""
"HumanEval/51","

def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
","
def remove_vowels(text):
    return ''.join([char for char in text if char.lower() not in 'aeiou'])

import doctest
doctest.testmod()
","
def remove_vowels(text):
    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])

","
def remove_vowels(text):
    return ''.join([char for char in text if char.lower() not in 'aeiou'])

import doctest
doctest.testmod()
","
def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return """".join([char for char in text if char not in vowels])
","
def remove_vowels(text):
    vowels = 'aeiouAEIOU'
    return ''.join([char for char in text if char not in vowels])

","
def remove_vowels(text):
    return ''.join([char for char in text if char.lower() not in ['a', 'e', 'i', 'o', 'u']])
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/52","

def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.""""""
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
    return all(x < t for x in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.""""""
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.""""""
    return all(num < t for num in l)
  ","
from typing import List


def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.""""""
    return all(num < t for num in l)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/53","

def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","
from typing import List

def add(x: int, y: int) -> int:
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
from typing import List

def add(x: int, y: int) -> int:
    return x + y
","
from typing import List

def add(x: int, y: int) -> int:
    """"""
    Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
from typing import Union

def add(x: int, y: int) -> Union[int, float]:
    """"""
    Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
from typing import Union

def add(x: int, y: int) -> Union[int, float]:
    return x + y
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/54","

def same_chars(s0: str, s1: str):
    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","
from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str) -> bool:
    """"""
    Check if two words have the same characters.
    """"""
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str) -> bool:
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str) -> bool:
    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
    return Counter(s0) == Counter(s1)
","57.14285714285714","57.14285714285714","57.14285714285714","57.14285714285714","57.14285714285714","57.14285714285714","","","","","",""
"HumanEval/55","

def fib(n: int):
    """"""Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int):
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/56","

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","
def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    return not stack
","
def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"" and len(stack) > 0:
            stack.pop()
        else:
            return False
    return len(stack) == 0
","
from collections import deque

def correct_bracketing(brackets: str):
    opening_brackets = deque()
    
    for bracket in brackets:
        if bracket == ""<"":
            opening_brackets.append(bracket)
        elif bracket == "">"":
            if not opening_brackets:
                return False
            opening_brackets.pop()
    
    return len(opening_brackets) == 0
","
from typing import List

def correct_bracketing(brackets: str) -> bool:
    opening_brackets = []
    
    for bracket in brackets:
        if bracket == ""<"":
            opening_brackets.append(bracket)
        elif bracket == "">"":
            if opening_brackets:
                opening_brackets.pop()
            else:
                return False
    
    return len(opening_brackets) == 0
","
def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    
    return not stack

import doctest
doctest.testmod()
","
def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    return len(stack) == 0

","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/57","

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","
from typing import List

def monotonic(l: List[int]) -> bool:
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
","
from typing import List

def monotonic(l: List[int]) -> bool:
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
  ","
from typing import List

def monotonic(l: List[int]) -> bool:
    """"""Return True if list elements are monotonically increasing or decreasing.""""""
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
  ","
from typing import List

def monotonic(l: List) -> bool:
    return all(l[i] <= l[i+1] for i in range(len(l) - 1)) or all(l[i] >= l[i+1] for i in range(len(l) - 1))
","
from typing import List

def monotonic(l: List) -> bool:
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
","
from typing import List

def monotonic(lst: List[int]) -> bool:
    """"""
    Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
    increasing = True
    decreasing = True
    
    for i in range(1, len(lst)):
        if lst[i] > lst[i-1]:
            decreasing = False
        elif lst[i] < lst[i-1]:
            increasing = False
        
    return increasing or decreasing
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/58","

def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    """"""Return sorted unique common elements for two lists.""""""
    return sorted(list(set(l1) & set(l2)))
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    """"""
    Return sorted unique common elements for two lists.

    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]
    """"""
    
    return sorted(list(set(l1) & set(l2)))
  ","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    """"""Return sorted unique common elements for two lists.""""""
    
    set_l1 = set(l1)
    set_l2 = set(l2)
    
    common_elements = sorted(list(set_l1.intersection(set_l2)))
    
    return common_elements
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    """"""Return sorted unique common elements for two lists.""""""
    
    return sorted(set(l1).intersection(l2))
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    """"""Return sorted unique common elements for two lists.""""""
    return sorted(list(set(l1).intersection(l2)))
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    """"""Return sorted unique common elements for two lists.""""""
    return sorted(list(set(l1) & set(l2)))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/59","

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    for i in range(int(math.sqrt(n)), 1, -1):
        if n % i == 0 and is_prime(i):
            return i
","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True
    
    for i in range(int(math.sqrt(n)) + 1, 1, -1):
        if n % i == 0 and is_prime(i):
            return i
","
import math

def largest_prime_factor(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    i = 2
    while i <= n:
        if n % i == 0 and is_prime(n // i):
            return n // i
        i += 1
","
import math

def largest_prime_factor(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True
    
    prime_factors = []
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0 and is_prime(i):
            prime_factors.append(i)
    
    return max(prime_factors)

","
import math

def largest_prime_factor(n: int):
    while n % 2 == 0:
        n //= 2
    
    max_prime = 2

    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            max_prime = i
            n //= i

    if n > 2:
        max_prime = n

    return max_prime
","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    
    def is_prime(num):
        if num <= 1:
            return False
        if num <= 3:
            return True
        if num % 2 == 0 or num % 3 == 0:
            return False
        i = 5
        while i * i <= num:
            if num % i == 0 or num % (i + 2) == 0:
                return False
            i += 6
        return True

    def factors(n):
        factors_list = []
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                factors_list.append(i)
                factors_list.append(n // i)
        return factors_list

    for factor in reversed(sorted(factors(n))):
        if is_prime(factor):
            return factor

","80.0","80.0","100.0","80.0","100.0","100.0","","","","","",""
"HumanEval/60","

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
","
def sum_to_n(n: int):
    return n * (n + 1) // 2
"," python
def sum_to_n(n: int):
    return n * (n + 1) // 2
","
def sum_to_n(n: int):
    return n*(n+1)//2
","
def sum_to_n(n: int):
    return n * (n + 1) // 2
","
def sum_to_n(n: int):
    return n * (n + 1) // 2
","
def sum_to_n(n: int):
    return sum(range(1, n + 1))
","100.0","0","100.0","100.0","100.0","100.0","","  File ""<string>"", line 1
    python
IndentationError: unexpected indent
","","","",""
"HumanEval/61","

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","
def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""("":
            stack.append(bracket)
        elif bracket == "")"":
            if not stack:
                return False
            stack.pop()
    return not stack
","
from collections import deque

def correct_bracketing(brackets: str):
    opening = deque()
    for bracket in brackets:
        if bracket == ""("":
            opening.append(bracket)
        elif bracket == "")"":
            if not opening:
                return False
            opening.pop()
    
    return len(opening) == 0
","
def correct_bracketing(brackets: str):
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket. """"""

    stack = []
    opening_bracket = '('
    closing_bracket = ')'
    
    for bracket in brackets:
        if bracket == opening_bracket:
            stack.append(bracket)
        elif bracket == closing_bracket:
            if not stack:
                return False
            stack.pop()
    
    return not stack
","
def correct_bracketing(brackets: str):
    stack = []
    
    for char in brackets:
        if char == '(':
            stack.append('(')
        elif char == ')':
            if not stack:
                return False
            stack.pop()
    
    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""("":
            stack.append(bracket)
        elif bracket == "")"":
            if not stack or stack.pop() != ""("":
                return False
    return not stack
","
def correct_bracketing(brackets: str) -> bool:
    stack = []
    for bracket in brackets:
        if bracket == '(':
            stack.append('(')
        elif bracket == ')':
            if not stack:
                return False
            stack.pop()
    return len(stack) == 0
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/62","

def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    return [xs[i] * i for i in range(1, len(xs))]
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """""" Calculate the derivative of a polynomial with coefficients given in xs.""""""
    return [xs[i] * i for i in range(1, len(xs))]

# Example Usage:
print(derivative([3, 1, 2, 4, 5]))
print(derivative([1, 2, 3]))
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """"""
    xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
    Return derivative of this polynomial in the same form.
    
    Example:
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    
    return [i * xs[i] for i in range(1, len(xs))]

  ","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    return [i * xs[i] for i in range(1, len(xs))]
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    return [i * xs[i] for i in range(1, len(xs))]
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    return [xs[i] * i for i in range(1, len(xs))]

","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/63","

def fibfib(n: int):
    """"""The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int) -> int:
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int):
    if n == 0 or n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
","
def fibfib(n: int):
    if n == 0 or n == 1:
        return 0
    if n == 2:
        return 1
    fib_n = [0, 0, 1]
    for i in range(3, n+1):
        fib_n.append(fib_n[i-1] + fib_n[i-2] + fib_n[i-3])
    return fib_n[n]
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int) -> int:
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
","
def fibfib(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b, c = 0, 0, 1
        for i in range(3, n + 1):
            a, b, c = b, c, a + b + c
        return c
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/64","
FIX = """"""
Add more test cases.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","
def vowels_count(s):
    vowels = set('aeiou')
    if s[-1].lower() == 'y':
        vowels.add('y')
    return sum(1 for char in s.lower() if char in vowels)
","
def vowels_count(s):
    vowels = 'aeiou'
    if s[-1].lower() == 'y':
        vowels += 'y'
    return sum(1 for char in s.lower() if char in vowels)
","
def vowels_count(s):
    s = s.lower()  # Convert the string to lowercase
    vowels = ""aeiou""  # Define the vowels
    count = 0

    # Count vowels except 'y' at the end of the word
    for i, char in enumerate(s):
        if char in vowels or (char == 'y' and i == len(s) - 1):
            count += 1

    return count
","
def vowels_count(s):
    vowels = ""aeiou""
    count = 0
    if s[-1].lower() == 'y':
        vowels += 'y'
    for char in s.lower():
        if char in vowels:
            count += 1
    return count
","
def vowels_count(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    if s[-1].lower() == 'y':
        vowels.append('y')
    return sum(1 for char in s if char.lower() in vowels)
","
import re

FIX = """"""
Add more test cases.
""""""

def vowels_count(s):
    vowels = set('aeiou')
    count = 0
    s = s.lower()  # Convert string to lowercase for case-insensitive comparison
    for i, char in enumerate(s):
        if char in vowels or (char == 'y' and i == len(s)-1):  # 'y' is a vowel only at the end
            count += 1
    return count
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/65","
def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","
from collections import deque

def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
    x_str = str(x)
    if shift > len(x_str):
        return x_str[::-1]
    shift %= len(x_str)
    dq = deque(x_str)
    dq.rotate(shift)
    return ''.join(dq)
","
from collections import deque

def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
    digits = deque(str(x))
    if shift > len(digits):
        return """".join(reversed(digits))
    digits.rotate(shift)
    return """".join(digits)
","
from math import log10

def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
    digits = [int(d) for d in str(x)]
    n = len(digits)
    
    if shift > n:
        return """".join(map(str, digits[::-1]))
    
    shift %= n
    shifted_digits = digits[-shift:] + digits[:-shift]
    
    return """".join(map(str, shifted_digits))
","
def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
    x_str = str(x)
    if shift >= len(x_str):
        return x_str[::-1]
    else:
        return x_str[-shift:] + x_str[:-shift]
","
def circular_shift(x, shift):
    """"""
    Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    
    If shift > number of digits, return digits reversed.
    
    >>> circular_shift(12, 1)
    ""21""
    
    >>> circular_shift(12, 2)
    ""12""
    """"""
    
    x_str = str(x)
    num_digits = len(x_str)
    shift %= num_digits
    
    if shift == 0:
        return x_str
    elif shift == num_digits:
        return x_str[::-1]
    else:
        return x_str[-shift:] + x_str[:-shift]
","
def circular_shift(x, shift):
    x_str = str(x)
    shift %= len(x_str)
    if shift == 0:
        return x_str
    else:
        result = x_str[-shift:] + x_str[:-shift]
        return result if len(result) == len(x_str) else result[::-1]
","100.0","100.0","100.0","80.0","80.0","80.0","","","","","",""
"HumanEval/66","
def digitSum(s):
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""
","
def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())
","
def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())
","
def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())
","
def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())
  ","
def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())
","
def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/67","
def fruit_distribution(s,n):
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
    """"""
","
def fruit_distribution(s, n):
    apples = int(s.split(' ')[0])
    oranges = int(s.split(' ')[-2])
    return n - apples - oranges
","
def fruit_distribution(s, n):
    fruit_count = [int(num) for num in s.split() if num.isdigit()]
    mango_count = n - sum(fruit_count)
    return mango_count
","
def fruit_distribution(s, n):
    total_fruits = int(s.split()[0]) + int(s.split()[-2])
    return n - total_fruits
","
def fruit_distribution(s,n):
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
    """"""
    apples, oranges = map(int, [s.split(' ')[0], s.split(' ')[3]])
    return n - apples - oranges
","
def fruit_distribution(s,n):
    apples, oranges = map(int, [x.split()[0] for x in s.split() if x.isdigit()])
    return n - apples - oranges
","
def fruit_distribution(s, n):
    apples = int(s.split("" "")[0])
    oranges = int(s.split("" "")[3])
    mango = n - apples - oranges
    return mango
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/68","
def pluck(arr):
    """"""
    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""
","
def pluck(arr):
    even_values = [num for num in arr if num % 2 == 0]
    if not even_values:
        return []
    min_even_value = min(even_values)
    min_even_index = arr.index(min_even_value)
    return [min_even_value, min_even_index]
","
def pluck(arr):
    even_values = [node for node in arr if node % 2 == 0]
    if not even_values:
        return []
    
    smallest_even = min(even_values)
    smallest_even_index = arr.index(smallest_even)
    
    return [smallest_even, smallest_even_index]
","
def pluck(arr):
    even_values = [num for num in arr if num % 2 == 0]
    if not even_values:
        return []
    min_even_value = min(even_values)
    min_even_index = arr.index(min_even_value)
    return [min_even_value, min_even_index]
","
def pluck(arr):
    evens = [(num, idx) for idx, num in enumerate(arr) if num % 2 == 0]
    if not evens:
        return []
    min_even = min(evens, key=lambda x: (x[0], x[1]))
    return list(min_even)
","
def pluck(arr):
    even_values = [num for num in arr if num % 2 == 0]
    if not even_values:
        return []
    smallest_even = min(even_values)
    smallest_even_index = arr.index(smallest_even)
    return [smallest_even, smallest_even_index]
","
def pluck(arr):
    evens = [(i, n) for i, n in enumerate(arr) if n % 2 == 0]
    if not evens:
        return []
    smallest_even = min(evens, key=lambda x: (x[1], x[0]))
    return [smallest_even[1], smallest_even[0]]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/69","
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","
from collections import Counter

def search(lst):
    counter = Counter(lst)
    result = -1
    for num, freq in counter.items():
        if num > 0 and freq >= num:
            result = max(result, num)
    return result
","
from collections import Counter

def search(lst):
    counter = Counter(lst)
    max_val = -1
    for key, val in counter.items():
        if key > 0 and val >= key:
            max_val = max(max_val, key)
    return max_val
","
from collections import Counter

def search(lst):
    counts = Counter(lst)
    result = -1
    for num, freq in counts.items():
        if num > 0 and num <= freq:
            result = max(result, num)
    return result
","
from collections import Counter

def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
    count = Counter(lst)
    result = -1
    for key, value in count.items():
        if key > 0 and value >= key and key > result:
            result = key
    return result
","
from collections import Counter

def search(lst):
    counter = Counter(lst)
    result = -1
    for num, freq in counter.items():
        if num > 0 and freq >= num:
            result = max(result, num)
    return result
","
from collections import Counter

def search(lst):
    count = Counter(lst)
    result = -1
    for num, freq in count.items():
        if freq >= num and num > 0:
            result = max(result, num)
    return result
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/70","
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","
from typing import List

def strange_sort_list(lst: List[int]) -> List[int]:
    lst.sort()
    result = []
    while lst:
        result.append(lst.pop(0))
        if lst:
            result.append(lst.pop())
    return result
","
from collections import deque

def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
    sorted_lst = []
    lst.sort()
    
    d = deque(lst)
    
    while d:
        sorted_lst.append(d.popleft())
        if d:
            sorted_lst.append(d.pop())
    
    return sorted_lst
  ","
from typing import List

def strange_sort_list(lst: List[int]) -> List[int]:
    def alternate_sort(l):
        l.sort()
        result = []
        while l:
            result.append(l.pop(0))
            if l:
                result.append(l.pop())
        return result
    
    return alternate_sort(lst)
","
from typing import List

def strange_sort_list(lst: List[int]) -> List[int]:
    if not lst:
        return []
    
    sorted_list = sorted(lst)
    result = []
    
    while len(sorted_list) > 1:
        result.append(sorted_list.pop(0))
        result.append(sorted_list.pop(-1))
    
    if sorted_list:
        result.append(sorted_list[0])
    
    return result
","
from itertools import cycle

def strange_sort_list(lst):
    result = []
    lst.sort()
    first_half = lst[:len(lst)//2]
    second_half = lst[len(lst)//2:]
    second_half.reverse()
    for a, b in zip(first_half, second_half):
        result.extend([a, b])
    if len(lst) % 2 != 0:
        result.append(first_half[-1])
    return result
","
from heapq import heappush as push, heappop as pop

def strange_sort_list(lst):
    def heapify(arr, rev=False):
        h = []
        for ele in arr:
            push(h, ele if not rev else -ele)
        return h

    result = []
    lst = heapify(lst)
    rev = False

    while lst:
        ele = pop(lst)
        result.append(ele if not rev else -ele)
        rev = not rev

    return result
","100.0","100.0","100.0","100.0","66.66666666666666","22.22222222222222","","","","","",""
"HumanEval/71","
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","
from math import sqrt

def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
from math import sqrt

def triangle_area(a, b, c):
    if a + b > c and b + c > a and a + c > b:
        s = (a + b + c) / 2
        area = sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
import math

def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
import math

def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
from math import sqrt

def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
import math

def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/72","
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    return q == q[::-1] and sum(q) <= w
","
def will_it_fly(q, w):
    def is_balanced(lst):
        return lst == lst[::-1]
    
    if is_balanced(q) and sum(q) <= w:
        return True
    else:
        return False
","
from collections import deque

def will_it_fly(q, w):
    if q == q[::-1] and sum(q) <= w:
        return True
    else:
        return False
","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    return q == q[::-1] and sum(q) <= w
","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    return q == q[::-1] and sum(q) <= w
","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    if q == q[::-1] and sum(q) <= w:
        return True
    else:
        return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/73","
def smallest_change(arr):
    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """"""
","
from typing import List

def smallest_change(arr: List[int]) -> int:
    n = len(arr)
    dp = [[0] * n for _ in range(n)]
    
    for l in range(2, n + 1):
        for i in range(n - l + 1):
            j = i + l - 1
            if arr[i] == arr[j]:
                dp[i][j] = dp[i + 1][j - 1]
            else:
                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1
    
    return dp[0][n - 1]
","
from collections import Counter

def smallest_change(arr):
    def make_palindromic(curr_counter):
        steps = 0
        for num in range(min(curr_counter), max(curr_counter)+1):
            steps += abs(curr_counter[num] - 2)
        return steps // 2
    
    if len(arr) <= 1:
        return 0
    
    total_steps = 0
    n = len(arr)
    for i in range(0, n // 2):
        curr_counter = Counter()
        if arr[i] != arr[n - i - 1]:
            curr_counter[arr[i]] += 1
            curr_counter[arr[n - i - 1]] += 1
            total_steps += make_palindromic(curr_counter)
    
    return total_steps
","
from typing import List

def smallest_change(arr: List[int]) -> int:
    n = len(arr)
    changes = 0
    for i in range(n // 2):
        if arr[i] != arr[n - i - 1]:
            changes += 1
    return changes
","
from collections import Counter

def smallest_change(arr):
    def is_palindrome(s):
        return s == s[::-1]

    counter = Counter(arr)
    odd_count = sum(1 for count in counter.values() if count % 2 != 0)

    return max(0, odd_count - 1)
","
from collections import Counter

def smallest_change(arr):
    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """"""
    cnt = Counter(arr)
    odd_count = sum(1 for val in cnt.values() if val % 2 != 0)
    return max(0, odd_count - 1)
","
from collections import Counter

def smallest_change(arr):
    def is_palindromic(sub_arr):
        return sub_arr == sub_arr[::-1]

    count = 0
    for i in range(len(arr)//2):
        if arr[i] != arr[-(i+1)]:
            count += 1

    return count
","50.0","87.5","100.0","62.5","62.5","100.0","","","","","",""
"HumanEval/74","
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    total_chars_lst1 = sum(len(s) for s in lst1)
    total_chars_lst2 = sum(len(s) for s in lst2)

    if total_chars_lst1 < total_chars_lst2:
        return lst1
    else:
        return lst2
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    total_chars_lst1 = sum(len(s) for s in lst1)
    total_chars_lst2 = sum(len(s) for s in lst2)
    
    if total_chars_lst1 < total_chars_lst2:
        return lst1
    else:
        return lst2
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    total_chars_lst1 = sum(len(s) for s in lst1)
    total_chars_lst2 = sum(len(s) for s in lst2)

    if total_chars_lst1 < total_chars_lst2:
        return lst1
    else:
        return lst2
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    total_chars_lst1 = sum(len(s) for s in lst1)
    total_chars_lst2 = sum(len(s) for s in lst2)
    
    if total_chars_lst1 < total_chars_lst2:
        return lst1
    elif total_chars_lst2 < total_chars_lst1:
        return lst2
    else:
        return lst1
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
    total_chars_lst1 = sum(len(s) for s in lst1)
    total_chars_lst2 = sum(len(s) for s in lst2)
    
    if total_chars_lst1 < total_chars_lst2:
        return lst1
    elif total_chars_lst1 == total_chars_lst2:
        return lst1
    else:
        return lst2
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    total_chars_lst1 = sum(len(s) for s in lst1)
    total_chars_lst2 = sum(len(s) for s in lst2)
    
    if total_chars_lst1 < total_chars_lst2:
        return lst1
    elif total_chars_lst1 == total_chars_lst2:
        return lst1
    else:
        return lst2
","88.88888888888889","88.88888888888889","88.88888888888889","100.0","100.0","100.0","","","","","",""
"HumanEval/75","
def is_multiply_prime(a):
    """"""Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """"""
","
import sympy

def is_multiply_prime(a):
    primes = list(sympy.primerange(2, 100))
    prime_factors = []
    for prime in primes:
        while a % prime == 0:
            prime_factors.append(prime)
            a //= prime
    return len(prime_factors) == 3 and a == 1
","
import sympy

def is_multiply_prime(a):
    if a >= 100:
        return False
    prime_factors = list(sympy.primerange(2, 100))
    for num1 in prime_factors:
        for num2 in prime_factors:
            for num3 in prime_factors:
                if num1 * num2 * num3 == a:
                    return True
    return False
","
from itertools import combinations
import sympy

def is_multiply_prime(a):
    primes = list(sympy.primerange(2, 100))
    for comb in combinations(primes, 3):
        if a == comb[0] * comb[1] * comb[2]:
            return True
    return False
","
from sympy import isprime
from sympy import primerange

def is_multiply_prime(a):
    primes = list(primerange(2, 100))
    for i in primes:
        for j in primes:
            for k in primes:
                if i * j * k == a:
                    return True
    return False
","
from sympy import primerange, isprime
from itertools import combinations

def is_multiply_prime(a):
    for x, y, z in combinations(primerange(2, 100), 3):
        if x * y * z == a:
            return True
    return False
","
import sympy

def is_multiply_prime(a):
    primes = list(sympy.primerange(2, 100))
    
    for i in primes:
        for j in primes:
            for k in primes:
                if i * j * k == a:
                    return True
    return False
","100.0","70.0","80.0","100.0","80.0","100.0","","","","","",""
"HumanEval/76","
def is_simple_power(x, n):
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""
","
import math

def is_simple_power(x, n):
    return x > 0 and math.log(x, n).is_integer()
","
import math

def is_simple_power(x, n):
    return math.isqrt(x) ** n == x
","
import math

def is_simple_power(x, n):
    return math.log(x, n).is_integer()
","
import math

def is_simple_power(x, n):
    root = math.pow(x, 1/n)
    return root.is_integer() and root**n == x
","
import math

def is_simple_power(x, n):
    return x > 0 and math.log(x, n).is_integer()
","
import math

def is_simple_power(x, n):
    return x > 0 and math.log(x, n).is_integer()
  ","90.0","80.0","90.0","90.0","90.0","90.0","","","","","",""
"HumanEval/77","
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
","
import math

def iscube(a):
    return math.isqrt(abs(a)) ** 3 == abs(a)
","
import math

def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
    if a == 0:
        return True
    cube_root = abs(a) ** (1/3)
    return int(cube_root + 0.5) ** 3 == abs(a)
","
from math import isqrt

def iscube(a):
    return isqrt(abs(a)) ** 3 == abs(a)
","
import math

def iscube(a):
    return a >= 0 and math.isqrt(abs(a)) ** 3 == abs(a)
","
import math

def iscube(a):
    return a >= 0 and math.isqrt(a)**3 == a
","
import math

def iscube(a):
    return math.isqrt(abs(a)) ** 3 == abs(a)
","75.0","100.0","75.0","62.5","62.5","75.0","","","","","",""
"HumanEval/78","
def hex_key(num):
    """"""You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""
","
def hex_key(num):
    primes = {'2', '3', '5', '7', 'B', 'D'}
    count = sum(1 for digit in num if digit.upper() in primes)
    return count
","
import math

def hex_key(num):
    primes = {'2', '3', '5', '7', 'B', 'D'}
    count = sum(1 for digit in num if digit.upper() in primes)
    return count
","
def hex_key(num):
    primes = ['2', '3', '5', '7', 'B', 'D']
    count = sum(1 for digit in num if digit in primes)
    return count
","
import sympy

def hex_key(num):
    primes = ['2', '3', '5', '7', 'B', 'D']
    count = 0
    for digit in num:
        if digit in primes:
            count += 1
    return count
","
def is_prime(n):
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False

    i = 3
    while i * i <= n:
        if n % i == 0:
            return False
        i += 2
    return True

def hex_key(num):
    primes = ""2357BD""  # Hexadecimal primes
    count = 0

    for digit in num:
        if digit.upper() in primes:
            count += 1

    return count
","
def hex_key(num):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    prime_count = 0
    prime_digits = {'2', '3', '5', '7', 'B', 'D'}
    
    for char in num:
        if char.upper() in prime_digits and is_prime(int(char, 16)):
            prime_count += 1

    return prime_count
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/79","
def decimal_to_binary(decimal):
    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns ""db1111db""
    decimal_to_binary(32)   # returns ""db100000db""
    """"""
","
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return f""db{binary}db""
","
def decimal_to_binary(decimal):
    binary_num = bin(decimal)[2:]
    return f""db{binary_num}db""
","
def decimal_to_binary(decimal):
    binary_number = bin(decimal)[2:]
    return f""db{binary_number}db""
","
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return f'db{binary}db'
","
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return f""db{binary}db""
","
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return f""db{binary}db""
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/80","
def is_happy(s):
    """"""You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """"""
","
from typing import List

def is_happy(s: str) -> bool:
    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))
","
def is_happy(s):
    return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s) - 2))
","
def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:
            return False
    return True
","
def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:
            return False
    return True

","
def is_happy(s):
    if len(s) < 3:
        return False
    
    for i in range(len(s)-2):
        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:
            return False
    
    return True
","
def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
            return False
    return True
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/81","
def numerical_letter_grade(grades):
    """"""It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","
def numerical_letter_grade(grades):
    letter_grades = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grades.append('A+')
        elif gpa > 3.7:
            letter_grades.append('A')
        elif gpa > 3.3:
            letter_grades.append('A-')
        elif gpa > 3.0:
            letter_grades.append('B+')
        elif gpa > 2.7:
            letter_grades.append('B')
        elif gpa > 2.3:
            letter_grades.append('B-')
        elif gpa > 2.0:
            letter_grades.append('C+')
        elif gpa > 1.7:
            letter_grades.append('C')
        elif gpa > 1.3:
            letter_grades.append('C-')
        elif gpa > 1.0:
            letter_grades.append('D+')
        elif gpa > 0.7:
            letter_grades.append('D')
        elif gpa >= 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades
","
from typing import List

def numerical_letter_grade(grades: List[float]) -> List[str]:
    def get_letter_grade(gpa):
        if gpa == 4.0:
            return 'A+'
        elif gpa > 3.7:
            return 'A'
        elif gpa > 3.3:
            return 'A-'
        elif gpa > 3.0:
            return 'B+'
        elif gpa > 2.7:
            return 'B'
        elif gpa > 2.3:
            return 'B-'
        elif gpa > 2.0:
            return 'C+'
        elif gpa > 1.7:
            return 'C'
        elif gpa > 1.3:
            return 'C-'
        elif gpa > 1.0:
            return 'D+'
        elif gpa > 0.7:
            return 'D'
        elif gpa >= 0.0:
            return 'D-'
        else:
            return 'E'

    return [get_letter_grade(gpa) for gpa in grades]
","
def numerical_letter_grade(grades):
    grade_table = {
        4.0: 'A+',
        3.7: 'A',
        3.3: 'A-',
        3.0: 'B+',
        2.7: 'B',
        2.3: 'B-',
        2.0: 'C+',
        1.7: 'C',
        1.3: 'C-',
        1.0: 'D+',
        0.7: 'D',
        0.0: 'D-'
    }

    result = []
    for grade in grades:
        for key, value in grade_table.items():
            if grade >= key:
                result.append(value)
                break
    return result
","
def numerical_letter_grade(grades):
    letter_grades = []
    for grade in grades:
        if grade == 4.0:
            letter_grades.append('A+')
        elif grade > 3.7:
            letter_grades.append('A')
        elif grade > 3.3:
            letter_grades.append('A-')
        elif grade > 3.0:
            letter_grades.append('B+')
        elif grade > 2.7:
            letter_grades.append('B')
        elif grade > 2.3:
            letter_grades.append('B-')
        elif grade > 2.0:
            letter_grades.append('C+')
        elif grade > 1.7:
            letter_grades.append('C')
        elif grade > 1.3:
            letter_grades.append('C-')
        elif grade > 1.0:
            letter_grades.append('D+')
        elif grade > 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('E')
    return letter_grades
","
def numerical_letter_grade(grades):
    letter_grades = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grades.append('A+')
        elif gpa > 3.7:
            letter_grades.append('A')
        elif gpa > 3.3:
            letter_grades.append('A-')
        elif gpa > 3.0:
            letter_grades.append('B+')
        elif gpa > 2.7:
            letter_grades.append('B')
        elif gpa > 2.3:
            letter_grades.append('B-')
        elif gpa > 2.0:
            letter_grades.append('C+')
        elif gpa > 1.7:
            letter_grades.append('C')
        elif gpa > 1.3:
            letter_grades.append('C-')
        elif gpa > 1.0:
            letter_grades.append('D+')
        elif gpa > 0.7:
            letter_grades.append('D')
        elif gpa >= 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades
","
def numerical_letter_grade(grades):
    letter_grades = []
    for grade in grades:
        if grade == 4.0:
            letter_grades.append('A+')
        elif grade > 3.7:
            letter_grades.append('A')
        elif grade > 3.3:
            letter_grades.append('A-')
        elif grade > 3.0:
            letter_grades.append('B+')
        elif grade > 2.7:
            letter_grades.append('B')
        elif grade > 2.3:
            letter_grades.append('B-')
        elif grade > 2.0:
            letter_grades.append('C+')
        elif grade > 1.7:
            letter_grades.append('C')
        elif grade > 1.3:
            letter_grades.append('C-')
        elif grade > 1.0:
            letter_grades.append('D+')
        elif grade > 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('E')
    return letter_grades
","66.66666666666666","66.66666666666666","33.33333333333333","50.0","66.66666666666666","50.0","","","","","",""
"HumanEval/82","
def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    max_divisor = math.isqrt(n)
    for d in range(3, max_divisor + 1, 2):
        if n % d == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/83","
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
","
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
    count = 0
    if n == 1:
        return 1
    count += 9 * 10 ** (n - 2)  # Count of numbers starting with 1
    count += 10 ** (n - 1) - 10 ** (n - 2)  # Count of numbers ending with 1
    return count
","
def starts_one_ends(n):
    count = 0
    count += 9 * 10 ** (n-1)  # Counting numbers that start with 1
    count += 10 ** (n-1)       # Counting numbers that end with 1
    count -= 1                 # Correcting for double counting 1 itself
    return count

import math
","
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
    start_with_one = 9 * 10 ** (n - 1)
    end_with_one = 10 ** (n - 1)
    
    return start_with_one + end_with_one - 10 ** (n - 1)
","
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
    if n == 1:
        return 1
    else:
        count = 2 * 9 * 10 ** (n-2) + 10 ** (n-1)
        return count
","
from math import pow

def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
    count = pow(10, n-1) * 2 - pow(9, n)
    return int(count)
","
def starts_one_ends(n):
    count = 0
    if n <= 0:
        return count
        
    start_with_1 = 9 * 10**(n-2)
    end_with_1 = 10**(n-1)
    
    count = start_with_1 + end_with_1

    return count
","100.0","0.0","0.0","20.0","0.0","0.0","","","","","",""
"HumanEval/84","
def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""
","
def solve(N):
    return bin(sum(int(digit) for digit in str(N)))[2:]
","
def solve(N):
    """"""
    Given a positive integer N, return the total sum of its digits in binary.
    
    Example:
        For N = 1000, the sum of digits will be 1, the output should be ""1"".
        For N = 150, the sum of digits will be 6, the output should be ""110"".
        For N = 147, the sum of digits will be 12, the output should be ""1100"".
    
    Variables:
        @N integer
           Constraints: 0 ≤ N ≤ 10000.
    
    Output:
        a string of binary number
    """"""
    return bin(sum(int(digit) for digit in str(N)))[2:]
  ","
def solve(N):
    return bin(sum(int(digit) for digit in str(N)))[2:]
","
def solve(N):
    return bin(sum(map(int, list(str(N)))))[2:]
","
def solve(N):
    bin_num = bin(N)[2:]
    binary_sum = sum(int(digit) for digit in bin_num)
    return bin(binary_sum)[2:]
","
def solve(N):
    return bin(sum(int(x) for x in str(N)))[2:]
","100.0","100.0","100.0","100.0","0.0","100.0","","","","","",""
"HumanEval/85","
def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""
","
def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices.""""""
    
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
from typing import List

def add(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
from typing import List

def add(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/86","
def anti_shuffle(s):
    """"""
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """"""
","
from collections import defaultdict

def anti_shuffle(s):
    def sort_word(word):
        return ''.join(sorted(word))

    words = s.split()
    sorted_words = [sort_word(word) for word in words]
    
    word_map = defaultdict(list)
    for i, word in enumerate(sorted_words):
        word_map[word].append(i)

    result = []
    for word in words:
        result.append(word_map[sort_word(word)].pop(0))

    return ' '.join(result)
","
def anti_shuffle(s):
    def reorder_word(word):
        return ''.join(sorted(word))
    
    return ' '.join(reorder_word(word) if word.isalpha() else word for word in s.split())

# Needed import for the function
from typing import List
","
from collections import OrderedDict

def anti_shuffle(s):
    result = []
    words = s.split()
    for word in words:
        sorted_word = ''.join(OrderedDict.fromkeys(word))
        result.append(''.join(sorted(sorted_word)))
    return ' '.join(result)
","
from collections import OrderedDict

def anti_shuffle(s):
    def reorder_string(word):
        return ''.join(sorted(word))

    words = s.split()
    new_words = [reorder_string(word) for word in words]
    return ' '.join(new_words)
","
from itertools import groupby

def anti_shuffle(s):
    return ' '.join(''.join(sorted(word)) for word in [''.join(g) for k, g in groupby(s, key=str.isspace)])
","
from itertools import zip_longest

def anti_shuffle(s):
    def reorder_word(word):
        return ''.join(sorted(word))

    output = []
    for token in s.split(' '):
        ordered_token = reorder_word(token)
        output.append(ordered_token)

    result = ''
    for original_token, ordered_token in zip_longest(s.split(' '), output, fillvalue=' '):
        result += ordered_token + original_token[len(ordered_token):]

    return result
","14.285714285714285","71.42857142857143","57.14285714285714","100.0","71.42857142857143","71.42857142857143","","","","","",""
"HumanEval/87","
def get_row(lst, x):
    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    result = []
    for i, row in enumerate(lst):
        for j, val in enumerate(row):
            if val == x:
                result.append((i, j))
    
    result.sort(key=lambda x: (x[0], -x[1]))
    return result
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    coordinates = []
    for i, row in enumerate(lst):
        for j, val in enumerate(row):
            if val == x:
                coordinates.append((i, j))
    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))
    return coordinates
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:

    coordinates = []
    
    for i, row in enumerate(lst):
        if x in row:
            for j, col in enumerate(row):
                if col == x:
                    coordinates.append((i, j))
    
    coordinates.sort(key=lambda x: x[0])  # Sort by rows in ascending order
    coordinates.sort(key=lambda x: x[1], reverse=True)  # Sort by columns in descending order
    
    return coordinates
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    results = []
    for i, row in enumerate(lst):
        for j, val in enumerate(row):
            if val == x:
                results.append((i, j))
    results.sort(key=lambda x: x[0])
    for i in range(len(results)):
        results[i] = (results[i][0], results[i][1])
    return results
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    result = []
    for i, row in enumerate(lst):
        for j, num in enumerate(row):
            if num == x:
                result.append((i, j))
    
    result.sort(key=lambda x: (x[0], -x[1]))
    
    return result
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    coordinates = []
    for i, row in enumerate(lst):
        if x in row:
            for j, value in enumerate(row):
                if value == x:
                    coordinates.append((i, j))
    coordinates.sort(key=lambda c: c[0])
    coordinates.sort(key=lambda c: c[1], reverse=True)
    return coordinates
","100.0","100.0","66.66666666666666","66.66666666666666","100.0","66.66666666666666","","","","","",""
"HumanEval/88","
def sort_array(array):
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
    sorted_array = sorted(array)
    if (array[0] + array[-1]) % 2 == 0:
        return sorted_array[::-1]
    else:
        return sorted_array
","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    copied_array = array.copy()
    sum_first_last = copied_array[0] + copied_array[-1]
    
    if sum_first_last % 2 == 0:
        return sorted(copied_array, reverse=True)
    else:
        return sorted(copied_array)
","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
    return sorted(array) if sum([array[0], array[-1]]) % 2 else sorted(array, reverse=True)
","
from copy import deepcopy

def sort_array(array):
    sorted_array = deepcopy(array)
    sum_first_last = sorted_array[0] + sorted_array[-1]

    if sum_first_last % 2 == 0:
        sorted_array.sort(reverse=True)
    else:
        sorted_array.sort()

    return sorted_array
","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    sorted_array = array.copy()
    if (array[0] + array[-1]) % 2 == 0:
        return sorted(sorted_array, reverse=True)
    else:
        return sorted(sorted_array)
  ","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    sorted_array = array[:]
    if (sorted_array[0] + sorted_array[-1]) % 2 != 0:
        sorted_array.sort()
    else:
        sorted_array.sort(reverse=True)
    return sorted_array
","85.71428571428571","85.71428571428571","85.71428571428571","85.71428571428571","85.71428571428571","85.71428571428571","","","","","",""
"HumanEval/89","
def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
","
import string

def encrypt(s):
    shifted_alphabet = string.ascii_lowercase[2:] + string.ascii_lowercase[:2]
    return ''.join(shifted_alphabet[ord(char) - ord('a')] if char.isalpha() else char for char in s)
","
# Required imports
import string

def encrypt(s):
    alpha = string.ascii_lowercase
    encrypted = ''
    for char in s:
        if char.isalpha():
            shifted = alpha[(alpha.index(char.lower()) + 2) % 26]
            encrypted += shifted if char.islower() else shifted.upper()
        else:
            encrypted += char
    return encrypted
","
from string import ascii_lowercase

def encrypt(s):
    shift = 2 * 2
    encrypted = ''
    for char in s:
        if char.isalpha():
            encrypted += ascii_lowercase[(ascii_lowercase.index(char) + shift) % 26]
        else:
            encrypted += char
    return encrypted
","
import string

def encrypt(s):
    shift = 2 * 2
    encrypted_text = ''
    for char in s:
        if char.isalpha():
            shifted_index = (string.ascii_lowercase.index(char.lower()) + shift) % 26
            shifted_char = string.ascii_lowercase[shifted_index]
            if char.isupper():
                encrypted_text += shifted_char.upper()
            else:
                encrypted_text += shifted_char
        else:
            encrypted_text += char
    return encrypted_text
","
import string

def encrypt(s):
    shifted_alphabet = string.ascii_lowercase[2:] + string.ascii_lowercase[:2]
    table = str.maketrans(string.ascii_lowercase, shifted_alphabet)
    return s.translate(table)
","
import string

def encrypt(s):
    shift = 2
    rotated_alphabet = string.ascii_lowercase[shift:] + string.ascii_lowercase[:shift]
    mapping = str.maketrans(string.ascii_lowercase, rotated_alphabet)
    return s.translate(mapping)
","0.0","0.0","100.0","100.0","0.0","0.0","","","","","",""
"HumanEval/90","
def next_smallest(lst):
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
","
from typing import List

def next_smallest(lst: List[int]) -> int:
    unique_sorted = sorted(set(lst))
    if len(unique_sorted) < 2:
        return None
    return unique_sorted[1]
","
from typing import List

def next_smallest(lst: List[int]) -> int:
    unique_sorted_lst = sorted(set(lst))
    
    if len(unique_sorted_lst) < 2:
        return None
    
    return unique_sorted_lst[1]
","
def next_smallest(lst):
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
    import sys

    if len(lst) < 2:
        return None

    smallest = sys.maxsize
    second_smallest = sys.maxsize

    for num in lst:
        if num < smallest:
            second_smallest = smallest
            smallest = num
        elif num < second_smallest and num != smallest:
            second_smallest = num

    return second_smallest
","
from typing import List

def next_smallest(lst: List[int]) -> int:
    unique_sorted_lst = sorted(set(lst))
    
    if len(unique_sorted_lst) > 1:
        return unique_sorted_lst[1]
    else:
        return None
","
from typing import List, Union

def next_smallest(lst: List[int]) -> Union[int, None]:
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
    unique_sorted_lst = sorted(set(lst))
    if len(unique_sorted_lst) < 2:
        return None
    return unique_sorted_lst[1]
  ","
from typing import List

def next_smallest(lst: List[int]) -> int:
    unique_elements = list(set(lst))
    unique_elements.sort()
    
    if len(unique_elements) > 1:
        return unique_elements[1]
    else:
        return None
","100.0","100.0","71.42857142857143","100.0","100.0","100.0","","","","","",""
"HumanEval/91","
def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","
import re

def is_bored(S):
    return len(re.findall(r'\bI\b', re.sub(r'[.!?]', ' ', S))
","
import re

def is_bored(S):
    boredom_count = 0
    sentences = re.split(r'[.!?]', S)
    
    for sentence in sentences:
        words = sentence.strip().split()
        if words and words[0] == 'I':
            boredom_count += 1
    
    return boredom_count
","
def is_bored(S):
    sentences = S.split('.')
    num_boredoms = 0
    for sentence in sentences:
        words = sentence.split()
        if len(words) > 0 and words[0] == 'I':
            num_boredoms += 1
    return num_boredoms
","
import re

def is_bored(S):
    return len(re.findall(r'\bI\b', re.sub(r'[.!?]', '', S))
","
import re

def is_bored(S):
    return len(re.findall(r'\bI\b', re.sub(r'(\.|\?|!)', '', S))
","
def is_bored(S):
    return sum(1 for sentence in S.split('.') + S.split('?') + S.split('!') if sentence.strip().startswith('I'))

import re
","0","100.0","100.0","0","0","50.0","  File ""<string>"", line 5
    return len(re.findall(r'\bI\b', re.sub(r'[.!?]', ' ', S))
              ^
SyntaxError: '(' was never closed
","","","  File ""<string>"", line 5
    return len(re.findall(r'\bI\b', re.sub(r'[.!?]', '', S))
              ^
SyntaxError: '(' was never closed
","  File ""<string>"", line 5
    return len(re.findall(r'\bI\b', re.sub(r'(\.|\?|!)', '', S))
              ^
SyntaxError: '(' was never closed
",""
"HumanEval/92","
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
","
def any_int(x, y, z):
    if all(isinstance(num, int) for num in (x, y, z)):
        return any(num == x + y or num == x + z or num == y + z for num in (x, y, z))
    return False
","
def any_int(x, y, z):
    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):
        if x == y + z or y == x + z or z == x + y:
            return True
    return False
","
from typing import Union

def any_int(x: Union[int, float], y: Union[int, float], z: Union[int, float]) -> bool:
    return (isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and 
            (x == y + z or y == x + z or z == x + y))
  ","
from typing import Union

def any_int(x: Union[int, float], y: Union[int, float], z: Union[int, float]) -> bool:
    if all(isinstance(i, int) for i in (x, y, z)):
        if x == y + z or y == x + z or z == x + y:
            return True
        else:
            return False
    else:
        return False
","
def any_int(x, y, z):
    if all(isinstance(num, int) for num in (x, y, z)):
        return any(num == sum(other_nums) for num, other_nums in ((x, (y, z)), (y, (x, z)), (z, (x, y)))
    return False
","
from typing import Optional

def any_int(x: int, y: int, z: int) -> bool:
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
    '''
    
    return x == y + z or y == x + z or z == x + y and all(isinstance(i, int) for i in [x, y, z])
  ","100.0","100.0","100.0","100.0","0","90.0","","","","","  File ""<string>"", line 4
    return any(num == sum(other_nums) for num, other_nums in ((x, (y, z)), (y, (x, z)), (z, (x, y)))
              ^
SyntaxError: '(' was never closed
",""
"HumanEval/93","
def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
","
def encode(message):
    import string
    
    vowels = 'aeiouAEIOU'
    encoded_message = ''
    
    for char in message:
        if char.isalpha():
            if char.lower() in vowels:
                new_char = chr((ord(char) + 2 - ord('a')) % 26 + ord('a'))
            else:
                new_char = char.swapcase()
            encoded_message += new_char
        else:
            encoded_message += char
    
    return encoded_message
","
from string import ascii_lowercase

def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""

    vowels = 'aeiou'
    encoded_msg = ''
    
    for char in message:
        if char.lower() in vowels:
            encoded_msg += ascii_lowercase[(ascii_lowercase.index(char.lower()) + 2) % 26].upper()
        else:
            encoded_msg += char.swapcase()

    return encoded_msg
   ","
from string import ascii_uppercase, ascii_lowercase

def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
    vowels = ""AEIOUaeiou""
    encoding_dict = {v: ascii_uppercase[(ascii_uppercase.index(v) + 2) % 26] for v in vowels}
    encoded_message = """"
    
    for char in message:
        if char.isalpha():
            if char in vowels:
                encoded_message += encoding_dict[char]
            else:
                if char.islower():
                    encoded_message += char.upper()
                else:
                    encoded_message += char.lower()
        else:
            encoded_message += char
    
    return encoded_message

","
import string

def encode(message):
    vowels = 'AEIOUaeiou'
    encoded_message = ''
    
    for char in message:
        if char.isalpha():
            if char in vowels:
                index = (string.ascii_lowercase + string.ascii_lowercase).index(char) + 2
                if char.isupper():
                    encoded_message += (string.ascii_uppercase + string.ascii_uppercase)[index]
                else:
                    encoded_message += (string.ascii_lowercase + string.ascii_lowercase)[index]
            else:
                if char.isupper():
                    encoded_message += char.lower()
                else:
                    encoded_message += char.upper()
        else:
            encoded_message += char
    
    return encoded_message
","
from string import ascii_uppercase

def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""

    vowels = 'AEIOU'
    
    def encode_char(char):
        if char.isalpha():
            if char.upper() in vowels:
                return ascii_uppercase[(ascii_uppercase.index(char.upper()) + 2) % 26] 
            else:
                return char.swapcase()
        else:
            return char

    return ''.join([encode_char(c) for c in message])
","
import string

def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
    vowels = 'aeiouAEIOU'
    encoded_message = []
    
    for char in message:
        if char.isalpha():
            if char.lower() in vowels:
                if char.islower():
                    encoded_char = chr((ord(char) + 2 - 97) % 26 + 97)
                else:
                    encoded_char = chr((ord(char) + 2 - 65) % 26 + 65)
            else:
                encoded_char = char.swapcase()
            encoded_message.append(encoded_char)
        else:
            encoded_message.append(char)
    
    return ''.join(encoded_message)
","0.0","40.0","0.0","0.0","40.0","0.0","","","","","",""
"HumanEval/94","

def skjkasdkd(lst):
    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """"""
","
import math

def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    def sum_of_digits(num):
        return sum(int(digit) for digit in str(num))

    prime_values = [num for num in lst if is_prime(num)]
    largest_prime = max(prime_values)
    return sum_of_digits(largest_prime)
","
import math

def skjkasdkd(lst):
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    def digit_sum(num):
        return sum(int(digit) for digit in str(num))

    largest_prime = max(filter(is_prime, lst))
    return digit_sum(largest_prime)
","
import math

def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    def digit_sum(num):
        return sum(int(d) for d in str(num))

    prime_values = [num for num in lst if is_prime(num)]
    if not prime_values:
        return 0
    return max(prime_values, key=digit_sum)
","
import sympy

def skjkasdkd(lst):
    def is_prime(n):
        return sympy.isprime(n)

    def sum_digits(n):
        return sum(int(digit) for digit in str(n))
        
    prime_values = [num for num in lst if is_prime(num)]
    largest_prime = max(prime_values)
    
    return sum_digits(largest_prime)
","
import sympy

def skjkasdkd(lst):
    def is_prime(n):
        return sympy.isprime(n)
    
    def sum_digits(n):
        return sum(int(digit) for digit in str(n))
    
    primes = [num for num in lst if is_prime(num)]
    largest_prime = max(primes)
    
    return sum_digits(largest_prime)
","
import sympy

def skjkasdkd(lst):
    def is_prime(n):
        return sympy.isprime(n)
    
    primes = [num for num in lst if is_prime(num)]
    largest_prime = max(primes)
    
    def sum_digits(n):
        return sum(int(digit) for digit in str(n))
    
    return sum_digits(largest_prime)
","100.0","100.0","22.22222222222222","100.0","100.0","100.0","","","","","",""
"HumanEval/95","
def check_dict_case(dict):
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""
","
def check_dict_case(dict):
    if not dict:
        return False
    keys = list(dict.keys())
    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):
        return True
    return False
","
def check_dict_case(dict):
    if not dict:
        return False
    lower_case_keys = all(key.islower() for key in dict if isinstance(key, str))
    upper_case_keys = all(key.isupper() for key in dict if isinstance(key, str))
    return lower_case_keys or upper_case_keys
","
def check_dict_case(dict):
    if not dict:
        return False
    keys = set(dict.keys())
    lower_keys = all(key.islower() for key in keys if isinstance(key, str))
    upper_keys = all(key.isupper() for key in keys if isinstance(key, str))
    return lower_keys or upper_keys
","
def check_dict_case(dict):
    if not dict:
        return False
    keys = list(dict.keys())
    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)
","
def check_dict_case(dictionary):
    if not dictionary:
        return False
    
    lowercase_keys = all(key.islower() for key in dictionary.keys())
    uppercase_keys = all(key.isupper() for key in dictionary.keys())
    
    if lowercase_keys or uppercase_keys:
        return True
    else:
        return False
","
def check_dict_case(dict):
    if not dict:
        return False
    keys = set(map(str, dict.keys()))
    return keys == {k.lower() for k in keys} or keys == {k.upper() for k in keys}
","85.71428571428571","85.71428571428571","85.71428571428571","85.71428571428571","85.71428571428571","85.71428571428571","","","","","",""
"HumanEval/96","
def count_up_to(n):
    """"""Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """"""
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = [num for num in range(2, n) if is_prime(num)]
    return primes

","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes
","
import math

def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True
    
    prime_numbers = [x for x in range(2, n) if is_prime(x)]
    return prime_numbers
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/97","
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
","
def multiply(a, b):
    return abs(a % 10 * b % 10)
","
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
    return abs(a % 10) * abs(b % 10)
","
def multiply(a, b):
    return abs(a % 10 * b % 10)
","
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
    return abs(a % 10 * b % 10)
","
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
    return abs(a % 10 * b % 10)
","
def multiply(a, b):
    return abs(a % 10 * b % 10)
","37.5","100.0","37.5","37.5","37.5","37.5","","","","","",""
"HumanEval/98","
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
","
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    vowels = 'AEIOU'
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count
","
import re

def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    vowels = ""AEIOU""
    count = 0
    for i in range(0, len(s), 2):
        if s[i].upper() in vowels:
            count += 1
    return count
  ","
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    
    count = 0
    vowels = 'AEIOU'
    
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1

    return count
","
def count_upper(s):
    vowels = ""AEIOU""
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in vowels and s[i].isupper():
            count += 1
    return count
","
def count_upper(s):
    vowels = set('AEIOU')
    count = 0
    for i, char in enumerate(s):
        if i % 2 == 0 and char.upper() in vowels:
            count += 1
    return count
","
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.

    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    
    vowels = ""AEIOU""
    count = 0
    
    for i in range(0, len(s), 2):
        if s[i].upper() in vowels and s[i].isupper():
            count += 1
    
    return count
","100.0","71.42857142857143","100.0","100.0","71.42857142857143","100.0","","","","","",""
"HumanEval/99","
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","
import math

def closest_integer(value):
    value = float(value)
    if value >= 0:
        return math.floor(value + 0.5)
    else:
        return math.ceil(value - 0.5)
","
from math import floor

def closest_integer(value):
    num = float(value)
    if num >= 0:
        return int(num + 0.5)
    else:
        return int(num - 0.5)
","
from math import isclose

def closest_integer(value):
    value = float(value)
    lower_int = int(value)
    upper_int = lower_int + 1

    if isclose(value, lower_int, rel_tol=1e-9):
        return lower_int
    elif isclose(value, upper_int, rel_tol=1e-9):
        return upper_int
    else:
        if abs(value - lower_int) < abs(value - upper_int):
            return lower_int
        else:
            return upper_int
","
import math

def closest_integer(value):
    num = float(value)
    lower_int = math.floor(num)
    upper_int = math.ceil(num)
    
    if num - lower_int < upper_int - num:
        return lower_int
    elif num - lower_int > upper_int - num:
        return upper_int
    else:
        if num > 0:
            return upper_int
        else:
            return lower_int
","
import math

def closest_integer(value):
    value = float(value)
    floor_num = math.floor(value)
    ceil_num = math.ceil(value)

    if value - floor_num < ceil_num - value:
        return math.floor(value)
    else:
        return math.ceil(value)
","
import math

def closest_integer(value):
    value = float(value)
    if value >= 0:
        return math.floor(value + 0.5)
    else:
        return math.ceil(value - 0.5)
","100.0","100.0","80.0","100.0","80.0","100.0","","","","","",""
"HumanEval/100","
def make_a_pile(n):
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
","
def make_a_pile(n):
    stones = [n]
    for i in range(1, n):
        if n % 2 == 0:
            stones.append(stones[-1] + 2)
        else:
            stones.append(stones[-1] + 1)
    return stones
","
def make_a_pile(n):
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
    pile = [n]
    for i in range(n-1):
        if pile[-1] % 2 == 0:
            pile.append(pile[-1] + 1)
        else:
            pile.append(pile[-1] + 2)
    return pile
","
def make_a_pile(n):
    pile = [n]
    for i in range(n-1):
        n += 2 if n % 2 == 1 else 1
        pile.append(n)
    return pile
","
def make_a_pile(n):
    stones_pile = [n]
    for i in range(1, n):
        if n % 2 == 0:
            stones_pile.append(n + i * 2)
        else:
            stones_pile.append(n + i * 2 - 1)
    return stones_pile

# Example usage
print(make_a_pile(3))
","
from typing import List

def make_a_pile(n: int) -> List[int]:
    stones = [n]
    for i in range(1, n):
        if n % 2 == 0:
            stones.append(stones[-1] + 2)
        else:
            stones.append(stones[-1] + 1)
    return stones
","
def make_a_pile(n):
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
    stones = [n]
    for i in range(1, n):
        if n % 2 == 0:
            stones.append(stones[-1] + 2)
        else:
            stones.append(stones[-1] + 1)
    return stones
","60.0","40.0","40.0","60.0","60.0","60.0","","","","","",""
"HumanEval/101","
def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    import re
    words = re.split(r'[,\s]+', s)
    return [word for word in words if word]
","
import re

def words_string(s):
    return re.findall(r'\w+', s)
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/102","
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
","
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
    max_even = -1
    for num in range(x, y+1):
        if num % 2 == 0 and num > max_even:
            max_even = num
    return max_even
","
import math

def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
    max_even = -1
    for i in range(x, y+1):
        if i % 2 == 0 and i > max_even:
            max_even = i
    return max_even
  ","
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
    largest_even = -1
    for num in range(y, x - 1, -1):
        if num % 2 == 0:
            largest_even = num
            break
    return largest_even
","
def choose_num(x, y):
    even_nums = [num for num in range(x, y+1) if num % 2 == 0]
    if even_nums:
        return max(even_nums)
    else:
        return -1
","
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
    even_nums = [num for num in range(x, y+1) if num % 2 == 0]
    if not even_nums:
        return -1
    return max(even_nums)

","
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.
    
    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
    for num in range(y, x-1, -1):
        if num % 2 == 0:
            return num
    return -1
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/103","
def rounded_avg(n, m):
    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => ""0b11""
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => ""0b1111""
    rounded_avg(20, 33) => ""0b11010""
    """"""
","
import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = round((n + m) / 2)
    return bin(avg)
","
def rounded_avg(n, m):
    if n > m:
        return -1
    total = sum(range(n, m+1))
    avg = round(total / (m - n + 1))
    return bin(avg)

import math
","
import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = round((n + m) / 2)
    return bin(avg)
  ","
from typing import Union

def rounded_avg(n: int, m: int) -> Union[int, str]:
    if n > m:
        return -1
    avg = sum(range(n, m+1)) / (m - n + 1)
    rounded_avg = round(avg)
    return bin(rounded_avg)
","
import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = math.ceil((n + m) / 2)
    rounded_avg = round(avg)
    return bin(rounded_avg)
","
import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = sum(range(n, m+1)) / (m - n + 1)
    rounded_avg = round(avg)
    return bin(rounded_avg)
","100.0","100.0","100.0","100.0","83.33333333333334","100.0","","","","","",""
"HumanEval/104","
def unique_digits(x):
    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])
","
def unique_digits(x):
    """"""
    Given a list of positive integers x, return a sorted list of all elements that have no even digits.

    Note: The returned list should be sorted in increasing order.

    Examples:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
    return sorted([n for n in x if all(int(d) % 2 != 0 for d in str(n))])
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])
  ","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    """"""
    Given a list of positive integers x, return a sorted list of all elements that do not contain any even digits.
    
    Parameters:
    x (List[int]): A list of positive integers.
    
    Returns:
    List[int]: A sorted list of integers without any even digit.
    
    Examples:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
    
    def has_even_digit(num: int) -> bool:
        return any(int(digit) % 2 == 0 for digit in str(num))
    
    return sorted(num for num in x if not has_even_digit(num))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/105","
def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""
","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    def digit_to_name(digit: int) -> str:
        names = [""Zero"", ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine""]
        return names[digit]

    filtered_arr = [x for x in arr if 1 <= x <= 9]
    sorted_arr = sorted(filtered_arr)
    reversed_arr = sorted_arr[::-1]
    result = [digit_to_name(x) for x in reversed_arr]
    
    return result
","
from collections import defaultdict

def by_length(arr):
    digit_to_word = {1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""}
    
    filtered_arr = [x for x in arr if 1 <= x <= 9]
    filtered_arr.sort()
    filtered_arr.reverse()
    
    return [digit_to_word[x] for x in filtered_arr]
","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    valid_digits = [str(i) for i in range(1, 10)]
    
    filtered_arr = [num for num in arr if str(num) in valid_digits]
    sorted_arr = sorted(filtered_arr)
    reversed_arr = sorted_arr[::-1]
    
    digit_names = {1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""}
    result = [digit_names[num] for num in reversed_arr]
    
    return result
","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    def get_word(num: int) -> str:
        if num == 1:
            return ""One""
        elif num == 2:
            return ""Two""
        elif num == 3:
            return ""Three""
        elif num == 4:
            return ""Four""
        elif num == 5:
            return ""Five""
        elif num == 6:
            return ""Six""
        elif num == 7:
            return ""Seven""
        elif num == 8:
            return ""Eight""
        elif num == 9:
            return ""Nine""
        else:
            return """"

    filtered_arr = [num for num in arr if 1 <= num <= 9]
    sorted_arr = sorted(filtered_arr)
    reversed_arr = sorted_arr[::-1]
    result = [get_word(num) for num in reversed_arr]
    
    return result
","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    valid_integers = [num for num in arr if 1 <= num <= 9]
    sorted_valid_integers = sorted(valid_integers)
    reversed_sorted_integers = sorted_valid_integers[::-1]
    
    word_map = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine""
    }
    
    return [word_map[num] for num in reversed_sorted_integers]
","
from collections import defaultdict

def by_length(arr):
    nums_dict = {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine'}

    filtered_arr = [num for num in arr if 1 <= num <= 9]
    sorted_arr = sorted(filtered_arr)
    reversed_arr = sorted_arr[::-1]
    
    result = [nums_dict[num] for num in reversed_arr]

    return result
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/106","
def f(n):
    """""" Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """"""
","
import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","
import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","
import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","
import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","
import math

def f(n):
    return [math.factorial(i) if i%2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","
from math import factorial

def f(n):
    return [factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/107","
def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """"""
","
from math import isqrt

def even_odd_palindrome(n):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]

    def count_even_odd_palindromes(start, end):
        even_count = 0
        odd_count = 0
        for i in range(start, end + 1):
            if is_palindrome(i):
                if i % 2 == 0:
                    even_count += 1
                else:
                    odd_count += 1
        return even_count, odd_count

    return count_even_odd_palindromes(1, n)
","
from math import isqrt

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def even_odd_palindrome(n):
    evens, odds = 0, 0
    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                evens += 1
            else:
                odds += 1
    return (evens, odds)
","
from math import sqrt

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0

    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1

    return (even_count, odd_count)
","
from collections import Counter

def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """"""
    even_count = 0
    odd_count = 0
    for i in range(1, n+1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return even_count, odd_count
","
def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    
    for num in range(1, n+1):
        if str(num) == str(num)[::-1]:
            if num % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    
    return (even_count, odd_count)
","
def even_odd_palindrome(n):
    count_even = 0
    count_odd = 0

    for num in range(1, n+1):
        if str(num) == str(num)[::-1]:
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1

    return (count_even, count_odd)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/108","
def count_nums(arr):
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
","
from typing import List

def count_nums(arr: List[int]) -> int:
    return sum(sum(int(d) for d in str(abs(num))) > 0 for num in arr)
","
from typing import List

def count_nums(arr: List[int]) -> int:
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""

    def sum_digits(num):
        return sum(int(digit) for digit in str(abs(num)))

    count = 0
    for num in arr:
        if sum_digits(num) > 0:
            count += 1
    
    return count
  ","
from typing import List

def count_nums(arr: List[int]) -> int:
    def sum_of_digits(num: int) -> int:
        return sum(int(d) for d in str(abs(num)))

    count = 0
    for num in arr:
        if sum_of_digits(num) > 0:
            count += 1
    return count
","
from typing import List

def count_nums(arr: List[int]) -> int:
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
    
    def sum_digits(n: int) -> int:
        return sum(int(d) for d in str(abs(n)))
    
    return sum(1 for num in arr if sum_digits(num) > 0)

","
from typing import List

def count_nums(arr: List[int]) -> int:
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
    def sum_digits(num: int) -> int:
        return sum((int(digit) for digit in str(abs(num))))
    
    return sum(1 for num in arr if sum_digits(num) > 0)
","
from typing import List

def count_nums(arr: List[int]) -> int:
    return len([num for num in arr if sum(int(digit) for digit in str(abs(num))) > 0])
","50.0","50.0","50.0","50.0","50.0","50.0","","","","","",""
"HumanEval/109","
def move_one_ball(arr):
    """"""We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """"""
","
def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    n = len(arr)
    for i in range(n):
        if arr == sorted_arr:
            return True
        arr = [arr[-1]] + arr[:-1]
    return False
","
def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr == sorted_arr:
            return True
        arr = [arr[-1]] + arr[:-1]
    return False
","
def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr == sorted_arr:
            return True
        arr = arr[-1:] + arr[:-1]
    return False
","
def move_one_ball(arr):
    if not arr:
        return True
    
    sorted_arr = sorted(arr)
    n = len(arr)
    
    for i in range(n):
        rotated_arr = arr[-i:] + arr[:-i]
        if sorted_arr == rotated_arr:
            return True
    
    return False
","
def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    n = len(arr)
    for i in range(n):
        if arr == sorted_arr:
            return True
        arr = [arr[-1]] + arr[:-1]
    return False
","
def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    n = len(arr)
    for i in range(n):
        if arr == sorted_arr:
            return True
        arr = [arr[-1]] + arr[:-1]
    return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/110","
def exchange(lst1, lst2):
    """"""In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return ""YES"".
    Otherwise, return ""NO"".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
    It is assumed that the input lists will be non-empty.
    """"""
","
from typing import List

def exchange(lst1: List[int], lst2: List[int]) -> str:
    if sum(x % 2 for x in lst1) == 0:
        return ""YES""
    return ""NO""
","
def exchange(lst1, lst2):
    return ""YES"" if sum(x % 2 == 1 for x in lst1) <= sum(x % 2 == 0 for x in lst2) else ""NO""
","
def exchange(lst1, lst2):
    if sum(x % 2 != 0 for x in lst1) > sum(x % 2 == 0 for x in lst2):
        return ""NO""
    else:
        return ""YES""
","
from collections import Counter

def exchange(lst1, lst2):
    # Count the number of odd elements in lst1
    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)
    
    # Count the number of odd elements in lst2
    odd_count_lst2 = sum(1 for num in lst2 if num % 2 != 0)
    
    # Check if we can make all elements of lst1 even by exchanging with lst2
    if odd_count_lst1 <= odd_count_lst2:
        return ""YES""
    else:
        return ""NO""
","
from typing import List

def exchange(lst1: List[int], lst2: List[int]) -> str:
    if sum(x % 2 for x in lst1) == 0:
        return ""YES""
    return ""NO""
","
from typing import List

def exchange(lst1: List[int], lst2: List[int]) -> str:
    total_sum_lst1 = sum(lst1)
    total_sum_lst2 = sum(lst2)
    
    count_odd_lst1 = sum(1 for num in lst1 if num % 2 != 0)
    count_odd_lst2 = sum(1 for num in lst2 if num % 2 != 0)
    
    if (total_sum_lst1 + total_sum_lst2) % 2 == 0 and count_odd_lst1 <= count_odd_lst2:
        return ""YES""
    else:
        return ""NO""
","57.14285714285714","100.0","100.0","57.14285714285714","57.14285714285714","85.71428571428571","","","","","",""
"HumanEval/111","
def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""
","
from collections import Counter

def histogram(test):
    return {k: v for k, v in Counter(test.split()).items() if v == max(Counter(test.split()).values())}
","
from collections import Counter

def histogram(test):
    return {k: v for k, v in Counter(test.split()).items() if v == max(Counter(test.split()).values())}
","
from collections import Counter

def histogram(test):
    return {k: v for k, v in Counter(test.split()).items() if v == max(Counter(test.split()).values())}
","
from collections import Counter

def histogram(test):
    return dict(Counter(test.split()))
","
from collections import Counter

def histogram(test):
    return {key: value for key, value in Counter(test.split()).items() if value == max(Counter(test.split()).values())}
","
from collections import Counter

def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}
    
    """"""
    letters = test.split()
    letter_counts = Counter(letters)
    most_common_count = max(letter_counts.values(), default=0)
    most_common_letters = {letter: count for letter, count in letter_counts.items() if count == most_common_count}
    
    return most_common_letters
","100.0","100.0","100.0","75.0","100.0","100.0","","","","","",""
"HumanEval/112","
def reverse_delete(s,c):
    """"""Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = ""abcde"", c = ""ae"", the result should be ('bcd',False)
    For s = ""abcdef"", c = ""b""  the result should be ('acdef',False)
    For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',True)
    """"""
","
from typing import Tuple

def reverse_delete(s: str, c: str) -> Tuple[str, bool]:
    result = ''.join(char for char in s if char not in c)
    is_palindrome = result == result[::-1]
    return result, is_palindrome
","
from typing import Tuple

def reverse_delete(s: str, c: str) -> Tuple[str, bool]:
    result = ''.join(char for char in s if char not in c)
    is_palindrome = result == result[::-1]
    return result, is_palindrome
","
def reverse_delete(s, c):
    result = ''.join([char for char in s if char not in c])
    is_palindrome = result == result[::-1]
    return (result, is_palindrome)
","
def reverse_delete(s, c):
    import re
    
    def is_palindrome(string):
        return string == string[::-1]
    
    result = ''.join(char for char in s if char not in c)
    return result, is_palindrome(result)
","
from typing import Tuple

def reverse_delete(s: str, c: str) -> Tuple[str, bool]:
    s = ''.join([char for char in s if char not in c])
    is_palindrome = s == s[::-1]
    return (s, is_palindrome)
","
def reverse_delete(s, c):
    s = ''.join(char for char in s if char not in c)
    return (s, s == s[::-1])
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/113","
def odd_count(lst):
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [f""the number of odd elements {sum(int(digit) % 2 != 0 for digit in string)}n the str{index + 1}ng {index + 1} of the {index + 1}nput."" for index, string in enumerate(lst)]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [""the number of odd elements {}n the str{}ng {} of the {}nput."".format(
        sum(int(d) % 2 != 0 for d in s), i, i, i) for i, s in enumerate(lst, 1)]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [f""the number of odd elements {sum(int(digit) % 2 != 0 for digit in string)}n the str{index + 1}ng {index + 1} of the {index + 1}nput."" for index, string in enumerate(lst)]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [""the number of odd elements {}n the str{}ng {} of the {}nput."".format(len([d for d in s if int(d) % 2 != 0]), str(i), str(i), str(i)) for i, s in enumerate(lst, start=1)]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [f""the number of odd elements {sum(1 for digit in s if int(digit) % 2 == 1)}n the str{s.index(s)+1}ng {s.index(s)+1} of the {s.index(s)+1}nput."" for s in lst]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [f""the number of odd elements {sum(int(digit) % 2 != 0 for digit in string)}n the str{index}ng {index} of the {index}nput."" for index, string in enumerate(lst)]
  ","0.0","0.0","0.0","0.0","0.0","0.0","","","","","",""
"HumanEval/114","
def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
","
from sys import maxsize

def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
    if not nums:
        return 0
    
    min_sum = maxsize
    current_sum = 0
    
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    
    return min_sum
","
import sys

def minSubArraySum(nums):
    if not nums:
        return None
    
    min_sum = sys.maxsize
    curr_sum = 0
    
    for num in nums:
        curr_sum = min(num, curr_sum + num)
        min_sum = min(min_sum, curr_sum)
    
    return min_sum
","
import sys

def minSubArraySum(nums):
    min_sum = sys.maxsize
    current_sum = 0
    
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    
    return min_sum
","
from typing import List

def minSubArraySum(nums: List[int]) -> int:
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
    
    if not nums:
        return 0
    
    min_sum = float('inf')
    current_sum = 0
    
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    
    return min_sum
  ","
from typing import List

def minSubArraySum(nums: List[int]) -> int:
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
    
    min_sum = float('inf')
    current_sum = 0
    
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    
    return min_sum
","
from typing import List

def minSubArraySum(nums: List[int]) -> int:
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
    if not nums:
        return 0
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum
  ","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/115","
def max_fill(grid, capacity):
    import math
    """"""
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""
","
import math

def max_fill(grid, capacity):
    total_water = 0
    for row in grid:
        for well in row:
            total_water += well
    
    buckets_needed = math.ceil(total_water / capacity)
    return buckets_needed
","
def max_fill(grid, capacity):
    import math
    
    total_buckets = 0
    for row in grid:
        water_level = sum(row)
        total_buckets += math.ceil(water_level / capacity)
    
    return total_buckets
","
import math

def max_fill(grid, capacity):
    total_water = 0
    for row in grid:
        for well in row:
            total_water += well
    
    return math.ceil(total_water / capacity)
","
import math

def max_fill(grid, capacity):
    total_water = 0
    for row in grid:
        total_water += sum(row)
    
    return math.ceil(total_water / capacity)
","
import math

def max_fill(grid, capacity):
    total_water = 0
    for row in grid:
        for well in row:
            total_water += well
    return math.ceil(total_water / capacity)
","
import math

def max_fill(grid, capacity):
    cols = len(grid[0])
    total_buckets = 0

    for col in range(cols):
        water_needed = sum(row[col] for row in grid)
        total_buckets += math.ceil(water_needed / capacity)

    return total_buckets
","80.0","100.0","80.0","80.0","80.0","60.0","","","","","",""
"HumanEval/116","
def sort_array(arr):
    """"""
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","
from functools import cmp_to_key

def sort_array(arr):
    def count_ones(num):
        return bin(num).count('1')

    def custom_sort(a, b):
        if count_ones(a) == count_ones(b):
            return a - b
        return count_ones(a) - count_ones(b)

    return sorted(arr, key=cmp_to_key(custom_sort))
","
from functools import cmp_to_key

def sort_array(arr):
    def count_ones(num):
        return bin(num).count('1')

    def custom_sort(a, b):
        if count_ones(a) == count_ones(b):
            return a - b
        return count_ones(a) - count_ones(b)

    return sorted(arr, key=cmp_to_key(custom_sort))
","
from functools import cmp_to_key

def sort_array(arr):
    def compare(x, y):
        def count_ones(num):
            return bin(num).count('1')
        
        ones_x, ones_y = count_ones(x), count_ones(y)
        if ones_x == ones_y:
            return x - y
        else:
            return ones_x - ones_y
        
    return sorted(arr, key=cmp_to_key(compare))
","
from functools import cmp_to_key

def sort_array(arr):
    def count_ones(num):
        return bin(num).count('1')

    def custom_sort(a, b):
        diff_ones = count_ones(a) - count_ones(b)
        if diff_ones != 0:
            return diff_ones
        else:
            return a - b

    arr.sort(key=cmp_to_key(custom_sort))
    return arr
","
from functools import cmp_to_key

def sort_array(arr):
    def compare_num_of_ones(a, b):
        diff = bin(a).count('1') - bin(b).count('1')
        return diff if diff != 0 else a - b

    return sorted(arr, key=cmp_to_key(compare_num_of_ones))
","
from typing import List

def sort_array(arr: List[int]) -> List[int]:
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/117","
def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""
","
import re

def select_words(s, n):
    def count_consonants(word):
        return sum(1 for letter in word if letter.lower() not in 'aeiou')

    words = s.split()
    result = [word for word in words if count_consonants(word) == n]
    return result
","
import string

def select_words(s, n):
    def count_consonants(word):
        return sum(1 for letter in word if letter.lower() in string.ascii_lowercase and letter.lower() not in 'aeiou')
    
    words = s.split()
    return [word for word in words if count_consonants(word) == n]
","
import re

def select_words(s, n):
    pattern = '[^aeiou ]'
    words = s.split()
    result = [word for word in words if len(re.findall(pattern, word)) == n]
    return result
","
import re

def select_words(s, n):
    vowels = ""aeiouAEIOU""
    
    def count_consonants(word):
        return sum(1 for letter in word if letter.isalpha() and letter not in vowels)
    
    words = s.split()
    result = [word for word in words if count_consonants(word) == n]
    
    return result
","
import re

def select_words(s, n):
    def count_consonants(word):
        return sum(1 for letter in word if letter.lower() not in 'aeiou')

    words = s.split()
    result = [word for word in words if count_consonants(word) == n]

    return result
","
from string import ascii_lowercase

def select_words(s, n):
    def count_consonants(word):
        return sum(1 for letter in word if letter.lower() in ascii_lowercase and letter.lower() not in 'aeiou')
    
    def is_valid(word):
        return count_consonants(word) == n
    
    return [word for word in s.split() if is_valid(word)]
","100.0","100.0","85.71428571428571","100.0","100.0","100.0","","","","","",""
"HumanEval/118","
def get_closest_vowel(word):
    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel(""yogurt"") ==> ""u""
    get_closest_vowel(""FULL"") ==> ""U""
    get_closest_vowel(""quick"") ==> """"
    get_closest_vowel(""ab"") ==> """"
    """"""
","
def get_closest_vowel(word):
    vowels = set('aeiouAEIOU')
    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')
    
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:
            return word[i]
    
    return """"
","
def get_closest_vowel(word):
    vowels = set(""aeiouAEIOU"")
    consonants = set(""bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"")
    
    word = word.strip(consonants)
    
    if len(word) < 3:
        return """"
    
    for i in range(len(word)-1, 1, -1):
        if word[i] in vowels and word[i-1] in consonants and word[i-2] in consonants:
            return word[i]
    
    return """"
","
def get_closest_vowel(word):
    vowels = 'AEIOUaeiou'
    consonants = 'BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'

    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:
            return word[i]

    return ''
","
from string import ascii_lowercase

def get_closest_vowel(word):
    vowels = ""aeiouAEIOU""
    word = word.strip(ascii_lowercase).strip(ascii_lowercase[::-1])
    for i in range(-1, -len(word), -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i-2] not in vowels:
            return word[i]
    return """"
","
def get_closest_vowel(word):
    vowels = set('aeiouAEIOU')
    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')
    
    word = word.strip(consonants)
    if len(word) < 3:
        return """"
    
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:
            return word[i]
    
    return """"
","
def get_closest_vowel(word):
    vowels = 'aeiouAEIOU'
    consonants = [ch for ch in word if ch.isalpha() and ch not in vowels]
    if len(consonants) < 2:
        return """"
    for ch in reversed(word[1:-1]):
        if ch in vowels:
            return ch
    return """"
","100.0","0.0","100.0","53.84615384615385","0.0","76.92307692307693","","","","","",""
"HumanEval/119","
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","
from collections import deque

def match_parens(lst):
    stack = deque()
    for s in lst:
        for char in s:
            if char == '(':
                stack.append(char)
            else:
                if stack and stack[-1] == '(':
                    stack.pop()
                else:
                    stack.append(char)
    return 'Yes' if not stack else 'No'
","
from collections import deque

def match_parens(lst):
    stack = deque()
    
    for s in lst:
        for char in s:
            if char == '(':
                stack.append(char)
            else:
                if stack and stack[-1] == '(':
                    stack.pop()
                else:
                    stack.append(char)
    
    return 'Yes' if len(stack) == 0 else 'No'
","
def match_parens(lst):
    open_count = 0
    for parens in lst:
        if parens == '(':
            open_count += 1
        else:
            if open_count == 0:
                return 'No'
            open_count -= 1
    return 'Yes'

# Example usage:
# print(match_parens(['()(', ')']))  # Output: 'Yes'
# print(match_parens([')', ')']))    # Output: 'No'
","
def match_parens(lst):
    open_count = 0
    for s in lst:
        for char in s:
            if char == '(':
                open_count += 1
            else:
                if open_count == 0:
                    return 'No'
                open_count -= 1
    return 'Yes'
","
def match_parens(lst):
    from collections import Counter

    def is_balanced(s):
        count = Counter(s)
        return count['('] == count[')']

    if is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]):
        return 'Yes'
    else:
        return 'No'
","
from collections import deque

def match_parens(lst):
    def check_balance(s):
        stack = deque()
        for char in s:
            if char == '(':
                stack.append(char)
            else:
                if not stack:
                    return False
                stack.pop()
        return len(stack) == 0

    left, right = lst
    if (left.count('(') + right.count('(')) % 2 != 0:
        return 'No'
    return 'Yes'
","75.0","75.0","58.333333333333336","66.66666666666666","91.66666666666666","25.0","","","","","",""
"HumanEval/120","
def maximum(arr, k):
    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """"""
","
from typing import List

def maximum(arr: List[int], k: int) -> List[int]:
    return sorted(arr)[-k:]
","
from heapq import nlargest

def maximum(arr, k):
    return nlargest(k, arr)
","
import heapq

def maximum(arr, k):
    return sorted(heapq.nlargest(k, arr))
","
def maximum(arr, k):
    return sorted(arr)[-k:]
","
from heapq import nlargest

def maximum(arr, k):
    return sorted(nlargest(k, arr))
","
from heapq import nlargest

def maximum(arr, k):
    return sorted(nlargest(k, arr))
","90.9090909090909","36.36363636363637","100.0","90.9090909090909","100.0","100.0","","","","","",""
"HumanEval/121","
def solution(lst):
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """"""
","
from typing import List

def solution(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
","
def solution(lst):
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)
","
from typing import List

def solution(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
","
from typing import List

def solution(lst: List[int]) -> int:
    """"""
    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    """"""
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
","
from typing import List

def solution(lst: List[int]) -> int:
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.""""""
    return sum(x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0)
","
def solution(lst):
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.""""""
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
","14.285714285714285","100.0","14.285714285714285","14.285714285714285","100.0","14.285714285714285","","","","","",""
"HumanEval/122","
def add_elements(arr, k):
    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= num < 100)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= num < 100)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= num <= 99)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= num < 100)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(x for x in arr[:k] if 10 <= x < 100)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(x for x in arr[:k] if 9 < abs(x) < 100)
","20.0","20.0","20.0","20.0","20.0","20.0","","","","","",""
"HumanEval/123","
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
","
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
    collatz_seq = [n]
    while n != 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        collatz_seq.append(n)
    
    return sorted(set(filter(lambda x: x % 2 != 0, collatz_seq)))
","
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
    def collatz(n):
        seq = [n]
        while n > 1:
            if n % 2 == 0:
                n = n // 2
            else:
                n = 3 * n + 1
            seq.append(n)
        return seq

    return sorted(set(num for num in collatz(n) if num % 2 != 0))
","
def get_odd_collatz(n):
    collatz_seq = [n]
    while n > 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        collatz_seq.append(n)
    return sorted(set(filter(lambda x: x % 2 == 1, collatz_seq)))

# No additional imports needed
","
def get_odd_collatz(n):
    result = []
    
    while n != 1:
        result.append(n)
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
    
    result.append(1)  # Add 1 as the Collatz sequence always ends at 1
    return sorted([num for num in result if num % 2 != 0])
","
from typing import List

def get_odd_collatz(n: int) -> List[int]:
    def collatz(num: int) -> List[int]:
        sequence = [num]
        while num != 1:
            if num % 2 == 0:
                num //= 2
            else:
                num = 3 * num + 1
            sequence.append(num)
        return sequence

    odd_numbers = set()
    for i in range(1, n + 1):
        sequence = collatz(i)
        for num in sequence:
            if num % 2 != 0:
                odd_numbers.add(num)
    return sorted(list(odd_numbers))
","
def get_odd_collatz(n):
    def collatz_sequence(num):
        sequence = [num]
        while num != 1:
            num = num * 3 + 1 if num % 2 else num // 2
            sequence.append(num)
        return sequence

    collatz_numbers = collatz_sequence(n)
    odd_numbers = sorted(list(set(filter(lambda x: x % 2, collatz_numbers))))
    return odd_numbers
","100.0","100.0","100.0","100.0","25.0","100.0","","","","","",""
"HumanEval/124","
def valid_date(date):
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""
","
import re

def valid_date(date):
    if not date:
        return False
    
    pattern = r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\d{4}$'
    if not re.match(pattern, date):
        return False
    
    month, day, year = map(int, date.split('-'))
    
    if month in [1, 3, 5, 7, 8, 10, 12]:
        return 1 <= day <= 31
    elif month in [4, 6, 9, 11]:
        return 1 <= day <= 30
    elif month == 2:
        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
            return 1 <= day <= 29
        else:
            return 1 <= day <= 28
    else:
        return False
","
from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False
","
import re

def valid_date(date):
    if not re.match(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\d{4}$', date):
        return False

    month, day, year = map(int, date.split('-'))
    if month == 2:
        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
            return day <= 29
        else:
            return day <= 28
    elif month in [4, 6, 9, 11]:
        return day <= 30
    else:
        return day <= 31

    return False
  ","
from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        return True
    except ValueError:
        return False
","
import re

def valid_date(date):
    date_format = re.compile(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\d{4}$')
    if not date_format.match(date):
        return False
    
    month, day, year = map(int, date.split('-'))
    if month in [1, 3, 5, 7, 8, 10, 12]:
        return day <= 31
    elif month in [4, 6, 9, 11]:
        return day <= 30
    elif month == 2:
        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
            return day <= 29
        else:
            return day <= 28
    return False
  ","
import re

def valid_date(date):
    date_format = re.compile(r'(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\d{4}')
    if not date_format.match(date):
        return False

    month, day, year = map(int, date.split('-'))
    if month == 2:
        max_days = 29 if (year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)) else 28
    elif month in [4, 6, 9, 11]:
        max_days = 30
    else:
        max_days = 31

    return 1 <= day <= max_days
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/125","
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","
import string

def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
    if ' ' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.split(',')
    else:
        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)
","
import string

def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''

    words = txt.split()
    
    if len(words) > 1:
        return words
    elif ',' in txt:
        return txt.split(',')
    else:
        odd_lower_case_letters = [c for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0]
        return len(odd_lower_case_letters)
  ","
import string

def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''

    words = txt.split()
    if len(words) == 1:
        if ',' in txt:
            return txt.split(',')
        else:
            count = sum(1 for char in txt if char.islower() and ord('a') % 2 != 0)
            return count
    else:
        return words
  ","
import re

def split_words(txt):
    words = re.split(r'\s+', txt)
    if len(words) == 1:
        words = txt.split(',')
    if len(words) == 1:
        return sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)
    return words
","
import string

def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
    word_list = txt.split()
    if len(word_list) == 1:
        if ',' in txt:
            return txt.split(',')
        else:
            count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)
            return count
    return word_list
  ","
def split_words(txt):
    words = txt.split()
    if len(words) == 1:
        words = txt.split(',') if ',' in txt else [char for char in txt if char.islower() and ord(char) % 2 != 0]
    return words
","75.0","100.0","50.0","75.0","62.5","50.0","","","","","",""
"HumanEval/126","
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
","
from collections import Counter

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    if len(lst) == len(set(lst)) and all(lst[i] <= lst[i+1] for i in range(len(lst)-1)):
        return True
    return False
","
from collections import Counter

def is_sorted(lst):
    count = Counter(lst)
    
    for num in lst:
        if count[num] > 1:
            return False
    
    return lst == sorted(lst)
  ","
from collections import Counter

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.
    '''
    
    counts = Counter(lst)
    if any(counts[num] > 1 for num in counts):
        return False
    
    return lst == sorted(lst)
","
from collections import Counter

def is_sorted(lst):
    counts = Counter(lst)
    return all(lst[i] <= lst[i+1] and counts[lst[i]] <= 1 for i in range(len(lst) - 1)
","
from collections import Counter

def is_sorted(lst):
    counter = Counter(lst)
    if any(val > 1 for val in counter.values()):
        return False
    return lst == sorted(lst)
","
from itertools import groupby

def is_sorted(lst):
    return all(x < y for x, y in zip(lst, lst[1:])) and all(len(list(group)) == 1 for _, group in groupby(lst))
","92.3076923076923","92.3076923076923","92.3076923076923","0","92.3076923076923","92.3076923076923","","","","  File ""<string>"", line 6
    return all(lst[i] <= lst[i+1] and counts[lst[i]] <= 1 for i in range(len(lst) - 1)
              ^
SyntaxError: '(' was never closed
","",""
"HumanEval/127","
def intersection(interval1, interval2):
    """"""You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
    """"""
","
from math import sqrt

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    start = max(start1, start2)
    end = min(end1, end2)
    
    if start > end:
        return ""NO""
    
    length = end - start + 1
    if is_prime(length):
        return ""YES""
    else:
        return ""NO""
","
from math import sqrt

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2

    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)

    if intersection_start > intersection_end:
        return ""NO""

    if is_prime(intersection_end - intersection_start + 1):
        return ""YES""
    else:
        return ""NO""
  ","
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    
    if end1 < start2 or end2 < start1:
        return ""NO""
    
    intersect_start = max(start1, start2)
    intersect_end = min(end1, end2)
    
    intersect_length = max(0, intersect_end - intersect_start + 1)
    
    if is_prime(intersect_length):
        return ""YES""
    else:
        return ""NO""
","
from math import sqrt

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    
    if start1 > end2 or start2 > end1:
        return ""NO""
    
    intersect_start = max(start1, start2)
    intersect_end = min(end1, end2)
    
    intersection_length = intersect_end - intersect_start
    
    if is_prime(intersection_length):
        return ""YES""
    else:
        return ""NO""
","
from math import sqrt

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)
    
    if intersection_end < intersection_start:
        return ""NO""
    
    intersection_length = intersection_end - intersection_start + 1
    
    if is_prime(intersection_length):
        return ""YES""
    else:
        return ""NO""
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    max_divisor = math.isqrt(n)
    for d in range(3, max_divisor + 1, 2):
        if n % d == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    start = max(start1, start2)
    end = min(end1, end2)
    
    if start > end:
        return ""NO""
    
    length = end - start + 1
    
    if is_prime(length):
        return ""YES""
    else:
        return ""NO""
  ","75.0","75.0","75.0","100.0","75.0","75.0","","","","","",""
"HumanEval/128","
def prod_signs(arr):
    """"""
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None
    
    product = 1
    sum_magnitudes = 0
    
    for num in arr:
        if num > 0:
            product *= 1
            sum_magnitudes += num
        elif num < 0:
            product *= -1
            sum_magnitudes += abs(num)
    
    return product * sum_magnitudes
","
from functools import reduce

def prod_signs(arr):
    if not arr:
        return None
    signs_product = reduce(lambda x, y: x * (y // abs(y) if y != 0 else 0), arr, 1)
    return sum(map(lambda x: abs(x), arr)) * signs_product
","
from typing import List

def prod_signs(arr: List[int]) -> int or None:
    if not arr:
        return None
    sign_product = 1
    magnitude_sum = 0
    
    for num in arr:
        if num > 0:
            sign_product *= 1
            magnitude_sum += num
        elif num < 0:
            sign_product *= -1
            magnitude_sum += abs(num)
        else:
            sign_product *= 0
    
    return sign_product * magnitude_sum
","
from functools import reduce

def prod_signs(arr):
    if not arr:
        return None
    
    product = reduce(lambda x, y: x*y, arr)
    total_magnitude = sum(abs(num) for num in arr)
    product_sign = 1 if product >= 0 else -1

    return total_magnitude * product_sign
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None

    product = 1
    sum_magnitudes = 0

    for num in arr:
        sign = -1 if num < 0 else 1 if num > 0 else 0
        product *= sign
        sum_magnitudes += abs(num)

    return product * sum_magnitudes
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None
    
    product = 1
    total_sum = 0
    
    for num in arr:
        if num > 0:
            product *= 1
        elif num < 0:
            product *= -1
        total_sum += abs(num)
    
    return product * total_sum
","75.0","100.0","100.0","75.0","100.0","75.0","","","","","",""
"HumanEval/129","
def minPath(grid, k):
    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""
","
from heapq import heappush, heappop

def minPath(grid, k):
    n = len(grid)
    visited = set()
    heap = [(grid[i][j], i, j, [grid[i][j]]) for i in range(n) for j in range(n)]
    
    while heap:
        val, x, y, path = heappop(heap)
        if len(path) == k:
            return path
        
        visited.add((x, y))
        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:
                heappush(heap, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))
","
from collections import deque

def minPath(grid, k):
    n = len(grid)
    visited = [[False]*n for _ in range(n)]
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    
    def is_valid(x, y):
        return 0 <= x < n and 0 <= y < n
    
    def get_neighbors(x, y):
        neighbors = []
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if is_valid(nx, ny) and not visited[nx][ny]:
                neighbors.append((nx, ny))
        return neighbors
    
    def dfs(x, y, path):
        nonlocal k
        visited[x][y] = True
        path.append(grid[x][y])
        if len(path) == k:
            return path
        neighbors = get_neighbors(x, y)
        min_path = []
        min_path_str = ''
        for nx, ny in neighbors:
            new_path = dfs(nx, ny, path.copy())
            new_path_str = ''.join(map(str, new_path))
            if not min_path or new_path_str < min_path_str:
                min_path = new_path
                min_path_str = new_path_str
        visited[x][y] = False
        return min_path
    
    min_val = float(""inf"")
    min_path = []
    for i in range(n):
        for j in range(n):
            curr_path = dfs(i, j, [])
            curr_val = int(''.join(map(str, curr_path)))
            if curr_val < min_val:
                min_path = curr_path
                min_val = curr_val
    return min_path
","
from typing import List

def minPath(grid: List[List[int]], k: int) -> List[int]:
    n = len(grid)
    m = len(grid[0])
    
    def dfs(i, j, visited, path):
        if len(path) == k:
            return path
        
        visited.add((i, j))
        min_val = n * n + 1
        next_cell = None
        
        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            ni, nj = i + dx, j + dy
            if 0 <= ni < n and 0 <= nj < m and (ni, nj) not in visited:
                if grid[ni][nj] < min_val:
                    min_val = grid[ni][nj]
                    next_cell = (ni, nj)
        
        return dfs(next_cell[0], next_cell[1], visited, path + [grid[i][j]])
    
    ans = []
    
    for i in range(n):
        for j in range(m):
            path = dfs(i, j, set(), [])
            if len(path) == k and path < ans:
                ans = path
    
    return ans
","
from typing import List

def minPath(grid: List[List[int]], k: int) -> List[int]:
    def get_neighbors(row, col):
        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
            nr, nc = row + dr, col + dc
            if 0 <= nr < len(grid) and 0 <= nc < len(grid[0]):
                yield nr, nc

    def dfs(row, col, path, visited):
        if len(path) == k:
            return path

        visited.add((row, col))
        for nr, nc in get_neighbors(row, col):
            if (nr, nc) not in visited:
                new_path = dfs(nr, nc, path + [grid[nr][nc]], visited)
                if new_path:
                    return new_path

    for r in range(len(grid)):
        for c in range(len(grid[0])):
            found_path = dfs(r, c, [grid[r][c]], set([(r, c)]))
            if found_path:
                return found_path
  ","
from itertools import permutations

def minPath(grid, k):
    n = len(grid)
    nums = [grid[i][j] for i in range(n) for j in range(n)]

    def get_neighbors(i, j):
        return [(x, y) for x, y in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)] if 0 <= x < n and 0 <= y < n]

    def lexicographically_smaller(lst_a, lst_b):
        for i in range(k):
            if lst_a[i] < lst_b[i]:
                return True
            if lst_a[i] > lst_b[i]:
                return False
        return False

    min_path = []
    min_lex_path = None
    for start in range(n*n):
        path = [nums[start]]
        for perm in permutations(get_neighbors(start//n, start%n), k-1):
            temp = [nums[start]]
            for x, y in perm:
                temp.append(grid[x][y])
            if min_lex_path is None or lexicographically_smaller(temp, min_lex_path):
                min_lex_path = temp
                path = temp
        min_path = min_lex_path if min_path == [] or lexicographically_smaller(min_lex_path, min_path) else min_path

    return min_path
  ","
from typing import List

def minPath(grid: List[List[int]], k: int) -> List[int]:
    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    visited = set()
    
    def dfs(i, j, path):
        if len(path) == k:
            return path
        
        visited.add((i, j))
        
        for dx, dy in directions:
            x, y = i + dx, j + dy
            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:
                new_path = dfs(x, y, path + [grid[x][y]])
                if new_path:
                    return new_path
        
        visited.remove((i, j))
        return None
    
    for i in range(n):
        for j in range(n):
            path = dfs(i, j, [grid[i][j]])
            if path:
                return path
  ","0.0","9.090909090909092","0.0","0.0","9.090909090909092","0.0","","","","","",""
"HumanEval/130","
def tri(n):
    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """"""
","
def tri(n):
    if n == 0:
        return [0]
    elif n == 1:
        return [1, 1]
    elif n == 2:
        return [1, 1, 1]
    else:
        tribonacci = [1, 1, 1]
        for i in range(3, n + 1):
            if i % 2 == 0:
                tribonacci.append(1 + i // 2)
            else:
                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])
        return tribonacci
","
def tri(n):
    def tribonacci(n):
        if n == 0:
            return [0]
        elif n == 1:
            return [0, 0, 1]
        else:
            sequence = [0, 0, 1]
            for i in range(3, n + 1):
                next_num = sequence[i-1] + sequence[i-2] + sequence[i-3]
                sequence.append(next_num)
            return sequence
    if n == 0:
        return [0]
    elif n == 1:
        return [0, 0]
    else:
        return tribonacci(n)
","
def tri(n):
    """"""
    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """"""
    res = [1, 1, 3]
    for i in range(3, n + 1):
        if i % 2 == 0:
            res.append(1 + i // 2)
        else:
            res.append(res[i - 1] + res[i - 2] + res[i - 3])
    return res
","
def tri(n):
    if n == 0:
        return [0]
    if n == 1:
        return [1]
    if n == 2:
        return [1, 1]
    tribonacci_sequence = [0, 1, 1]
    for i in range(3, n + 1):
        if i % 2 == 0:
            tribonacci_sequence.append(tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i - 3])
        else:
            tribonacci_sequence.append(1 + i // 2)
    return tribonacci_sequence
","
def tri(n):
    if n == 0:
        return [0]
    elif n == 1:
        return [1, 0]
    else:
        tribonacci = [0, 1, 1]
        for i in range(3, n + 1):
            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])
        return tribonacci

print(tri(3))
","
def tri(n):
    tribonacci = [0, 1, 3]
    for i in range(3, n + 1):
        if i % 2 == 0:
            tribonacci.append(1 + i // 2)
        else:
            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])
    return tribonacci[:n + 1]
","0.0","0.0","0.0","0.0","0.0","0.0","","","","","",""
"HumanEval/131","
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
","
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    product = 1
    for digit in str(n):
        if int(digit) % 2 != 0:
            product *= int(digit)
    return product
","
from typing import List

def digits(n: int) -> int:
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    odd_product = 1
    for digit in [int(d) for d in str(n) if int(d) % 2 != 0]:
        odd_product *= digit
    return odd_product
","
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    product = 1
    for digit in str(n):
        if int(digit) % 2 != 0:
            product *= int(digit)
    return product
","
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    import math
    digit_product = 1
    for digit in str(n):
        if int(digit) % 2 != 0:
            digit_product *= int(digit)
    return digit_product
","
import math

def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    product = 1
    for digit in str(n):
        num = int(digit)
        if num % 2 != 0:
            product *= num
    if product == 1:
        return 0
    return product
","
from functools import reduce

def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]
    if not odd_digits:
        return 0
    return reduce(lambda x, y: x*y, odd_digits)
","85.71428571428571","85.71428571428571","85.71428571428571","85.71428571428571","85.71428571428571","100.0","","","","","",""
"HumanEval/132","
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
","
def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack and stack[-1] == '[':
            stack.pop()
    return len(stack) < len(string) and len(stack) > 0
","
def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack and stack[-1] == '[':
            stack.pop()
    return len(stack) < len(string) and stack

","
def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if stack and stack[-1] == '[':
                stack.pop()
            else:
                stack.append(char)
    
    return '[' in stack

","
def is_nested(string):
    stack = []
    
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if stack and stack[-1] == '[':
                stack.pop()
            else:
                return True
    
    return False
","
from collections import deque

def is_nested(string):
    stack = deque()
    
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack and stack[-1] == '[':
            stack.pop()
    
    return len(stack) < len(string)
","
def is_nested(string):
    stack = []
    for bracket in string:
        if bracket == '[':
            stack.append(bracket)
        elif bracket == ']':
            if stack and stack[-1] == '[':
                stack.pop()
    
    if len(stack) < 2:
        return False
    return True
","57.14285714285714","14.285714285714285","50.0","35.714285714285715","50.0","57.14285714285714","","","","","",""
"HumanEval/133","

def sum_squares(lst):
    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """"""
","
import math

def sum_squares(lst):
    return sum(math.ceil(num)**2 for num in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(num)**2 for num in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(num) ** 2 for num in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(x)**2 for x in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(x)**2 for x in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(x)**2 for x in lst)
  ","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/134","
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") ➞ False
    check_if_last_char_is_a_letter(""apple pi e"") ➞ True
    check_if_last_char_is_a_letter(""apple pi e "") ➞ False
    check_if_last_char_is_a_letter("""") ➞ False 
    '''
","
import string

def check_if_last_char_is_a_letter(txt):
    if not txt:
        return False
    last_char = txt[-1]
    if last_char.isalpha() and last_char not in string.ascii_letters:
        return True
    return False
","
import re
def check_if_last_char_is_a_letter(txt):
    return bool(re.search(r'(?<=\s)\b[A-Za-z]\b$', txt))
","
def check_if_last_char_is_a_letter(txt):
    import re
    if not txt:
        return False
    last_char = txt[-1]
    if re.match(r'[A-Za-z]', last_char) and not re.match(r'\w', last_char):
        return True
    else:
        return False
  ","
import re

def check_if_last_char_is_a_letter(txt):
    return bool(re.search(r'(?<=\s)\w$', txt))
","
import string

def check_if_last_char_is_a_letter(txt):
    if not txt:
        return False
    last_char = txt.strip()[-1]
    if last_char in string.ascii_letters and not last_char.isalnum():
        return True
    return False
","
import string

def check_if_last_char_is_a_letter(txt):
    if not txt:
        return False
    last_char = txt.strip()[-1]
    return last_char.isalpha() and not last_char.isspace()
","80.0","90.0","80.0","80.0","80.0","40.0","","","","","",""
"HumanEval/135","
def can_arrange(arr):
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    return max((i for i in range(1, len(arr)) if arr[i] < arr[i-1]), default=-1)
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    max_index = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            max_index = i - 1
    return max_index
","
def can_arrange(arr):
    return max(i for i in range(1, len(arr)) if arr[i] < arr[i-1], default=-1)
","
def can_arrange(arr):
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""
    
    max_index = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            max_index = i - 1
    return max_index
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    max_idx = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            max_idx = i - 1
    return max_idx
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1]:
            return i - 1
    return -1
","100.0","40.0","0","40.0","40.0","40.0","","","  File ""<string>"", line 3
    return max(i for i in range(1, len(arr)) if arr[i] < arr[i-1], default=-1)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
SyntaxError: Generator expression must be parenthesized
","","",""
"HumanEval/136","
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","
from typing import List, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[int, int]:
    neg_integers = [num for num in lst if num < 0]
    pos_integers = [num for num in lst if num > 0]

    largest_neg = max(neg_integers) if neg_integers else None
    smallest_pos = min(pos_integers) if pos_integers else None

    return (largest_neg, smallest_pos)
","
from typing import List, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[int, int]:
    neg_integers = [num for num in lst if num < 0]
    pos_integers = [num for num in lst if num > 0]
    
    max_neg = max(neg_integers) if neg_integers else None
    min_pos = min(pos_integers) if pos_integers else None
    
    return max_neg, min_pos
","
from typing import List

def largest_smallest_integers(lst: List[int]) -> tuple:
    negative_integers = [i for i in lst if i < 0]
    positive_integers = [i for i in lst if i > 0]
    
    max_negative = max(negative_integers) if negative_integers else None
    min_positive = min(positive_integers) if positive_integers else None
    
    return (max_negative, min_positive)
  ","
from typing import List, Union

def largest_smallest_integers(lst: List[int]) -> Union[Tuple[Union[int, None], Union[int, None]]:
    neg_integers = [num for num in lst if num < 0]
    pos_integers = [num for num in lst if num > 0]
    
    largest_neg_int = max(neg_integers) if neg_integers else None
    smallest_pos_int = min(pos_integers) if pos_integers else None

    return (largest_neg_int, smallest_pos_int)
","
from typing import List

def largest_smallest_integers(lst: List[int]) -> tuple:
    neg_integers = [num for num in lst if num < 0]
    pos_integers = [num for num in lst if num > 0]

    if neg_integers:
        largest_negative = max(neg_integers)
    else:
        largest_negative = None

    if pos_integers:
        smallest_positive = min(pos_integers)
    else:
        smallest_positive = None

    return largest_negative, smallest_positive
","
from typing import List, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[int, int]:
    negatives = [num for num in lst if num < 0]
    positives = [num for num in lst if num > 0]

    if not negatives:
        largest_negative = None
    else:
        largest_negative = max(negatives)

    if not positives:
        smallest_positive = None
    else:
        smallest_positive = min(positives)

    return (largest_negative, smallest_positive)
","100.0","100.0","100.0","0","100.0","100.0","","","","  File ""<string>"", line 4
    def largest_smallest_integers(lst: List[int]) -> Union[Tuple[Union[int, None], Union[int, None]]:
                                                          ^
SyntaxError: '[' was never closed
","",""
"HumanEval/137","
def compare_one(a, b):
    """"""
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, ""2,3"") ➞ ""2,3""
    compare_one(""5,1"", ""6"") ➞ ""6""
    compare_one(""1"", 1) ➞ None
    """"""
","
from typing import Union

def compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:
    if isinstance(a, str):
        a = a.replace(',', '.')
    if isinstance(b, str):
        b = b.replace(',', '.')

    if a > b:
        return a
    elif b > a:
        return b
    else:
        return None
","
from typing import Union

def compare_one(a: Union[int, float, str], b: Union[int, float, str]):
    if isinstance(a, str) and ',' in a:
        a = float(a.replace(',', '.'))
    if isinstance(b, str) and ',' in b:
        b = float(b.replace(',', '.'))

    if a > b:
        return a
    elif b > a:
        return b
    else:
        return None
","
import re

def compare_one(a, b):
    def parse_real_number(value):
        if isinstance(value, (int, float)):
            return value
        elif isinstance(value, str):
            value = value.replace(',', '.')
            if re.match(r'^-?\d+(\.\d+)?$', value):
                return float(value)
            else:
                return value

    a_parsed = parse_real_number(a)
    b_parsed = parse_real_number(b)

    if a_parsed == b_parsed:
        return None
    return a_parsed if a_parsed > b_parsed else b_parsed
","
from numbers import Real

def compare_one(a, b):
    if isinstance(a, str) and isinstance(b, str):
        a = float(a.replace(',', '.')) if ',' in a else float(a)
        b = float(b.replace(',', '.')) if ',' in b else float(b)
    elif isinstance(a, str):
        a = float(a.replace(',', '.'))
    elif isinstance(b, str):
        b = float(b.replace(',', '.'))

    if isinstance(a, Real) and isinstance(b, Real):
        if a > b:
            return a
        elif b > a:
            return b
    return None
","
def compare_one(a, b):
    from decimal import Decimal
    
    def parse_number(num_str):
        if isinstance(num_str, str):
            num_str = num_str.replace("","", ""."")
        return Decimal(num_str)
    
    if type(a) != type(b):
        return a if type(a) == float or type(a) == Decimal or type(b) == str else b
    elif type(a) == str:
        a = parse_number(a)
        b = parse_number(b)
    
    return a if a > b else b if b > a else None
","
from typing import Union

def compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:
    if isinstance(a, str) and isinstance(b, str):
        a = a.replace(',', '.')
        b = b.replace(',', '.')
    
    if a == b:
        return None
    else:
        return a if a > b else b
","75.0","62.5","62.5","62.5","50.0","75.0","","","","","",""
"HumanEval/138","
def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""
","
def is_equal_to_sum_even(n):
    evens = [2, 4, 6, 8]
    for i in evens:
        for j in evens:
            for k in evens:
                for l in evens:
                    if i + j + k + l == n:
                        return True
    return False
","
def is_equal_to_sum_even(n):
    even_nums = [2, 4, 6, 8]
    for i in even_nums:
        for j in even_nums:
            for k in even_nums:
                for l in even_nums:
                    if i + j + k + l == n:
                        return True
    return False
","
from itertools import combinations_with_replacement

def is_equal_to_sum_even(n):
    even_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
    for combo in combinations_with_replacement(even_numbers, 4):
        if sum(combo) == n:
            return True
    return False
  ","
from itertools import combinations_with_replacement

def is_equal_to_sum_even(n):
    evens = [even for even in range(2, n+1) if even % 2 == 0]
    combos = combinations_with_replacement(evens, 4)
    
    for combo in combos:
        if sum(combo) == n:
            return True
    return False
","
from itertools import combinations_with_replacement

def is_equal_to_sum_even(n):
    return any(sum(combo) == n for combo in combinations_with_replacement(range(2, n, 2), 4))
","
def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""
    if n % 2 != 0:
        return False
    for i in range(2, n // 2 + 1, 2):
        for j in range(2, n // 2 + 1, 2):
            for k in range(2, n // 2 + 1, 2):
                for m in range(2, n // 2 + 1, 2):
                    if i + j + k + m == n:
                        return True
    return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/139","
def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
","
import math

def special_factorial(n):
    if n == 1:
        return 1
    else:
        result = 1
        for i in range(1, n+1):
            result *= math.factorial(i)
        return result
","
from math import factorial

def special_factorial(n):
    if n == 1:
        return 1

    result = 1
    for i in range(1, n+1):
        result *= factorial(i)
    
    return result
","
import math

def special_factorial(n):
    result = 1
    for i in range(1, n + 1):
        result *= math.factorial(i)
    return result
","
import math

def special_factorial(n):
    factors = [math.factorial(i) for i in range(1, n + 1)]
    result = 1
    for factor in factors:
        result *= factor
    return result
","
import math

def special_factorial(n):
    if n == 1:
        return 1
    result = math.factorial(n)
    for i in range(1, n):
        result *= math.factorial(i)
    return result
","
from math import factorial

def special_factorial(n):
    if n <= 0:
        return ""Invalid input. Please provide n > 0""
    
    result = 1
    for i in range(1, n+1):
        result *= factorial(i)
    
    return result
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/140","
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
","
def fix_spaces(text):
    import re
    text = re.sub(r'\s{2,}', '-', text)
    text = text.replace(' ', '_')
    return text
","
def fix_spaces(text):
    import re
    text = text.replace(' ', '_')
    text = re.sub(r' +', '-', text)
    return text
","
def fix_spaces(text):
    import re
    result = re.sub(r' {3,}', '-', text.replace(' ', '_'))
    return result
","
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
    
    import re
    underscored_text = text.replace("" "", ""_"")
    return re.sub(r'\s{3,}', ""-"", underscored_text)

","
def fix_spaces(text):
    import re
    text = re.sub(r'\s{2,}', '-', text)
    text = text.replace(' ', '_')
    return text
","
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
    import re
    text = re.sub(' +', '-', text)
    text = text.replace(' ', '_')
    return text
","80.0","60.0","60.0","60.0","80.0","40.0","","","","","",""
"HumanEval/141","
def file_name_check(file_name):
    """"""Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
    """"""
","
import re

def file_name_check(file_name):
    if len(re.findall(r'\d', file_name)) > 3:
        return 'No'
    if file_name.count('.') != 1:
        return 'No'
    name, ext = file_name.split('.')
    if not name or not name[0].isalpha():
        return 'No'
    if ext not in ['txt', 'exe', 'dll']:
        return 'No'
    return 'Yes'
","
import re

def file_name_check(file_name):
    pattern = r'^[a-zA-Z][^0-9]*\.(txt|exe|dll)$'
    if re.match(pattern, file_name):
        return 'Yes'
    else:
        return 'No'
","
import re

def file_name_check(file_name):
    if not re.match(r'^[a-zA-Z][a-zA-Z0-9]*\.(txt|exe|dll)$', file_name):
        return 'No'
    if sum(char.isdigit() for char in file_name) > 3:
        return 'No'
    return 'Yes'
","
import re

def file_name_check(file_name):
    if not re.match(r'^[a-zA-Z][a-zA-Z0-9]*\.(txt|exe|dll)$', file_name):
        return 'No'
    digits_count = sum(c.isdigit() for c in file_name)
    if digits_count > 3:
        return 'No'
    return 'Yes'
","
import re

def file_name_check(file_name):
    if re.match(r'^[a-zA-Z][a-zA-Z0-9]*\.(txt|exe|dll)$', file_name) and file_name.count('.') == 1 and file_name.count('0') + file_name.count('1') + file_name.count('2') + file_name.count('3') <= 3:
        return 'Yes'
    else:
        return 'No'
","
import re

def file_name_check(file_name):
    # Check if the file name has more than three digits
    if len(re.findall(r'\d', file_name)) > 3:
        return 'No'
    
    # Check if the file name has exactly one dot
    if file_name.count('.') != 1:
        return 'No'
    
    # Split the file name into two parts based on the dot
    file_parts = file_name.split('.')
    
    if not file_parts[0] or not file_parts[0][0].isalpha():
        return 'No'
    
    allowed_extensions = ['txt', 'exe', 'dll']
    if len(file_parts[1]) <= 3 and file_parts[1] in allowed_extensions:
        return 'Yes'
    else:
        return 'No'
  ","100.0","80.76923076923077","88.46153846153845","88.46153846153845","84.61538461538461","100.0","","","","","",""
"HumanEval/142","


def sum_squares(lst):
    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""
","
def sum_squares(lst):
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst, 1))
","
from typing import List

def sum_squares(lst: List[int]) -> int:
    return sum(n ** 2 if i % 3 == 0 else n ** 3 if i % 4 == 0 else n for i, n in enumerate(lst))
","
from typing import List

def sum_squares(lst: List[int]) -> int:
    return sum(x ** 2 if i % 3 == 0 else x ** 3 if i % 4 == 0 and i % 3 != 0 else x for i, x in enumerate(lst))
  ","
from typing import List

def sum_squares(lst: List[int]) -> int:
    return sum([(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x) for i, x in enumerate(lst)])
","
def sum_squares(lst):
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst, start=1))
","
def sum_squares(lst):
    return sum(x ** 2 if i % 3 == 0 else x ** 3 if i % 4 == 0 and i % 3 != 0 else x for i, x in enumerate(lst, 1))
","45.45454545454545","100.0","100.0","100.0","45.45454545454545","45.45454545454545","","","","","",""
"HumanEval/143","
def words_in_sentence(sentence):
    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """"""
","
import sympy

def words_in_sentence(sentence):
    def is_prime(n):
        return sympy.isprime(n)

    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return ' '.join(prime_words)
","
from sympy import isprime

def words_in_sentence(sentence):
    words = sentence.split()
    prime_words = [word for word in words if isprime(len(word))]
    return ' '.join(prime_words)
","
import sympy

def words_in_sentence(sentence):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return ' '.join(prime_words)
","
from sympy import isprime

def words_in_sentence(sentence):
    return "" "".join(word for word in sentence.split() if isprime(len(word)))
","
import sympy

def words_in_sentence(sentence):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return ' '.join(prime_words)
","
import sympy

def words_in_sentence(sentence):
    def is_prime(n):
        if n <= 1:
            return False
        return sympy.isprime(n)

    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return ' '.join(prime_words)
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/144","
def simplify(x, n):
    """"""Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify(""1/5"", ""5/1"") = True
    simplify(""1/6"", ""2/1"") = False
    simplify(""7/10"", ""10/2"") = False
    """"""
","
from fractions import Fraction

def simplify(x, n):
    x_val = Fraction(x)
    n_val = Fraction(n)
    result = x_val * n_val
    return result.denominator == 1
","
from fractions import Fraction

def simplify(x, n):
    x_val = eval(x)
    n_val = eval(n)
    result = x_val * n_val
    return result == int(result)
","
from fractions import Fraction

def simplify(x, n):
    x_val = Fraction(x)
    n_val = Fraction(n)
    
    result = x_val * n_val
    
    if result == int(result):
        return True
    else:
        return False
","
from fractions import Fraction

def simplify(x, n):
    x_val = Fraction(x)
    n_val = Fraction(n)
    
    result = x_val * n_val
    return result.denominator == 1
","
from fractions import Fraction

def simplify(x, n):
    x_val = Fraction(x)
    n_val = Fraction(n)
    result = x_val * n_val
    return result == int(result)
","
from fractions import Fraction

def simplify(x, n):
    result = Fraction(x) * Fraction(n)
    return result.denominator == 1
 ","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/145","
def order_by_points(nums):
    """"""
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","
from functools import cmp_to_key

def order_by_points(nums):
    def compare(a, b):
        sum_a = sum(int(digit) for digit in str(a))
        sum_b = sum(int(digit) for digit in str(b))
        if sum_a == sum_b:
            return nums.index(a) - nums.index(b)
        return sum_a - sum_b

    return sorted(nums, key=cmp_to_key(compare))
","
from functools import cmp_to_key

def order_by_points(nums):
    def sum_of_digits(num):
        return sum(int(digit) for digit in str(num))

    def compare_by_sum_of_digits(a, b):
        sum_a = sum_of_digits(a)
        sum_b = sum_of_digits(b)
        if sum_a == sum_b:
            return nums.index(a) - nums.index(b)
        return sum_a - sum_b

    return sorted(nums, key=cmp_to_key(compare_by_sum_of_digits))
","
from functools import cmp_to_key

def order_by_points(nums):
    def compare_by_digit_sum(a, b):
        sum_a = sum(map(int, str(a).replace('-', '')))
        sum_b = sum(map(int, str(b).replace('-', ''))

        if sum_a != sum_b:
            return sum_a - sum_b
        else:
            return nums.index(a) - nums.index(b)

    return sorted(nums, key=cmp_to_key(compare_by_digit_sum))
","
from functools import cmp_to_key

def order_by_points(nums):
    def compare(x, y):
        sum_x = sum(int(digit) for digit in str(abs(x)))
        sum_y = sum(int(digit) for digit in str(abs(y)))

        if sum_x == sum_y:
            return (nums.index(x) > nums.index(y)) - (nums.index(x) < nums.index(y))
        
        return sum_x - sum_y

    return sorted(nums, key=cmp_to_key(compare))
","
def order_by_points(nums):
    sorted_nums = sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))
    return sorted_nums
  ","
from functools import cmp_to_key

def order_by_points(nums):
    def compare_sum_of_digits(a, b):
        sum_a = sum(map(int, str(a))) if a >= 0 else sum(map(int, str(a))[1:])
        sum_b = sum(map(int, str(b))) if b >= 0 else sum(map(int, str(b))[1:])

        if sum_a == sum_b:
            return nums.index(a) - nums.index(b)
        return sum_a - sum_b

    return sorted(nums, key=cmp_to_key(compare_sum_of_digits))
","50.0","50.0","0","50.0","50.0","50.0","","","  File ""<string>"", line 7
    sum_b = sum(map(int, str(b).replace('-', ''))
               ^
SyntaxError: '(' was never closed
","","",""
"HumanEval/146","
def specialFilter(nums):
    """"""Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])
","
import numpy as np

def specialFilter(nums):
    return np.sum([1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']])
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    """"""
    Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""
    
    def is_odd_digit(n: int) -> bool:
        s = str(abs(n))
        return int(s[0]) % 2 == 1 and int(s[-1]) % 2 == 1
    
    count = 0
    for num in nums:
        if num > 10 and is_odd_digit(num):
            count += 1
     
    return count
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    def is_odd(num: int) -> bool:
        return int(str(abs(num))[0]) % 2 != 0 and int(str(abs(num))[-1]) % 2 != 0
    
    count = 0
    for num in nums:
        if num > 10 and is_odd(num):
            count += 1
    return count
","
def specialFilter(nums):
    odd_digits = {'1', '3', '5', '7', '9'}
    count = 0
    for num in nums:
        str_num = str(abs(num))
        if len(str_num) > 1 and str_num[0] in odd_digits and str_num[-1] in odd_digits and num > 10:
            count += 1
    return count
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/147","
def get_max_triples(n):
    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""
","
from itertools import combinations

def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n+1)]
    count = 0
    for i, j, k in combinations(a, 3):
        if (i + j + k) % 3 == 0:
            count += 1
    return count
","
from itertools import combinations

def get_max_triples(n):
    a = [i*i - i + 1 for i in range(1, n+1)]
    count = 0
    
    for triple in combinations(a, 3):
        if sum(triple) % 3 == 0:
            count += 1
    
    return count
","
from itertools import combinations

def get_max_triples(n):
    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""

    a = [i*i - i + 1 for i in range(1, n+1)]
    count = 0

    for i, j, k in combinations(a, 3):
        if (i + j + k) % 3 == 0:
            count += 1

    return count
","
from itertools import combinations

def get_max_triples(n):
    a = [i*i - i + 1 for i in range(1, n+1)]
    count = 0
    for i, j, k in combinations(a, 3):
        if (i + j + k) % 3 == 0 and a.index(i) < a.index(j) < a.index(k):
            count += 1
    return count
","
from collections import Counter

def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    mod_count = Counter([num % 3 for num in a])
    return mod_count[0] * (mod_count[0] - 1) // 2 + mod_count[1] * mod_count[2]
","
from itertools import combinations

def get_max_triples(n):
    a = [i*i - i + 1 for i in range(1, n+1)]
    
    triples = list(combinations(a, 3))
    count = sum(sum(triple) % 3 == 0 for triple in triples)
    
    return count
","100.0","100.0","100.0","100.0","25.0","100.0","","","","","",""
"HumanEval/148","
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets:
        return ()
    start_idx = planets.index(planet1)
    end_idx = planets.index(planet2)
    if start_idx > end_idx:
        start_idx, end_idx = end_idx, start_idx
    return tuple([planet for planet in planets[start_idx+1:end_idx]])

","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    planet_order = {planet: i for i, planet in enumerate(planets)}
    
    if planet1 not in planets or planet2 not in planets:
        return ()
    
    start = min(planet_order[planet1], planet_order[planet2])
    end = max(planet_order[planet1], planet_order[planet2])
    
    result = [planet for planet in planets[start+1:end] if planet != planet1 and planet != planet2]
    result.sort(key=lambda x: planet_order[x])
    
    return tuple(result)
","
def bf(planet1, planet2):
    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
    
    if planet1 not in planets or planet2 not in planets:
        return ()
    
    start_idx = planets.index(planet1)
    end_idx = planets.index(planet2)
    
    if start_idx > end_idx:
        start_idx, end_idx = end_idx, start_idx
        
    return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])
","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    
    if planet1 not in planets or planet2 not in planets:
        return ()
    
    orbit1 = planets.index(planet1)
    orbit2 = planets.index(planet2)
    
    start = min(orbit1, orbit2) + 1
    end = max(orbit1, orbit2)
    
    return tuple(sorted(planets[start:end], key=lambda x: planets.index(x)))

","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets:
        return ()
    planet1_idx = planets.index(planet1)
    planet2_idx = planets.index(planet2)
    start_idx = min(planet1_idx, planet2_idx)
    end_idx = max(planet1_idx, planet2_idx)
    if start_idx == end_idx or end_idx - start_idx == 1:
        return ()
    return tuple(sorted(planets[start_idx+1:end_idx], key=lambda x: planets.index(x)))
","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets:
        return ()
    
    start_idx = planets.index(planet1)
    end_idx = planets.index(planet2)
    
    if start_idx > end_idx:
        start_idx, end_idx = end_idx, start_idx
    
    return tuple([planet for planet in planets if start_idx < planets.index(planet) < end_idx])
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/149","
def sorted_list_sum(lst):
    """"""Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
    assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
    """"""
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))
  ","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/150","
def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """"""
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    return x if is_prime(n) else y
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num))+1):
        if num % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    if is_prime(n):
        return x
    else:
        return y
","
import math

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    return x if is_prime(n) else y
","
import math

def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """"""
    
    if n < 2:
        return y
    if n == 2:
        return x
    
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return y

    return x
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i ** 2 <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def x_or_y(n, x, y):
    if is_prime(n):
        return x
    return y
","
import math

def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """"""
    def is_prime(n):
        if n <= 1:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        for i in range(3, int(math.sqrt(n)) + 1, 2):
            if n % i == 0:
                return False
        return True

    if is_prime(n):
        return x
    else:
        return y
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/151","
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)
","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)
","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)
","
import math

def double_the_difference(lst):
    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0) * 2
","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(x ** 2 for x in lst if x > 0 and x % 2 != 0)
","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(x**2 for x in lst if x > 0 and x % 2 != 0)
","71.42857142857143","71.42857142857143","71.42857142857143","57.14285714285714","71.42857142857143","71.42857142857143","","","","","",""
"HumanEval/152","
def compare(game,guess):
    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [0 if game[i] == guess[i] else abs(game[i] - guess[i]) for i in range(len(game))]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(guess[i] - game[i]) if guess[i] != game[i] else 0 for i in range(len(game))]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(a - b) for a, b in zip(game, guess)]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]
","
def compare(game, guess):
    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/153","
def Strongest_Extension(class_name, extensions):
    """"""You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given ""Slices"" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """"""
","
def Strongest_Extension(class_name, extensions):
    def strength(extension):
        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())
    
    strongest_extension = max(extensions, key=lambda ext: strength(ext))
    return f""{class_name}.{strongest_extension}""
","
def Strongest_Extension(class_name, extensions):
        strengths = {extension: sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower()) for extension in extensions}
        strongest_extension = max(extensions, key=lambda x: strengths[x])
        return f""{class_name}.{strongest_extension}""
","
def Strongest_Extension(class_name, extensions):
    from functools import cmp_to_key

    def compare_extensions(ext1, ext2):
        cap_diff = sum(1 for ch in ext1 if ch.isupper()) - sum(1 for ch in ext1 if ch.islower())
        cap_diff2 = sum(1 for ch in ext2 if ch.isupper()) - sum(1 for ch in ext2 if ch.islower())
        return cap_diff2 - cap_diff

    extensions.sort(key=cmp_to_key(compare_extensions))
    return f""{class_name}.{extensions[0]}""
","
from typing import List

def Strongest_Extension(class_name: str, extensions: List[str]) -> str:
    strongest_extension = max(extensions, key=lambda ext: ext.count(ext.upper()) - ext.count(ext.lower()))
    return f""{class_name}.{strongest_extension}""
","
def Strongest_Extension(class_name, extensions):
    class_strengths = [(ext, sum(1 for char in ext if char.isupper()) - sum(1 for char in ext if char.islower())) for ext in extensions]
    strongest_extension = max(class_strengths, key=lambda x: x[1])
    return f""{class_name}.{strongest_extension[0]}""
","
def Strongest_Extension(class_name, extensions):
    def strength(extension):
        return sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())

    strongest_ext = max(extensions, key=lambda x: (strength(x), extensions.index(x)))
    return f""{class_name}.{strongest_ext}""
","100.0","100.0","100.0","33.33333333333333","100.0","66.66666666666666","","","","","",""
"HumanEval/154","
def cycpattern_check(a , b):
    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check(""abcd"",""abd"") => False
    cycpattern_check(""hello"",""ell"") => True
    cycpattern_check(""whassup"",""psus"") => False
    cycpattern_check(""abab"",""baa"") => True
    cycpattern_check(""efef"",""eeff"") => False
    cycpattern_check(""himenss"",""simen"") => True

    """"""
","
from itertools import permutations

def cycpattern_check(a, b):
    for perm in permutations(b):
        if ''.join(perm) in a:
            return True
    return False
","
from itertools import permutations

def cycpattern_check(a, b):
    for perm in permutations(b):
        rotated_str = ''.join(perm)
        if rotated_str in a:
            return True
    return False
","
from collections import deque

def cycpattern_check(a , b):
    def is_substring(a, b):
        return b in a
    
    def is_rotation(a, b):
        n = len(a)
        m = len(b)
        if n != m:
            return False
        a += a
        return is_substring(a, b)

    return any(is_rotation(a, b[i:] + b[:i]) for i in range(len(b)))
","
from itertools import permutations

def cycpattern_check(a, b):
    return any(b in a[i:] + a[:i] for i in range(len(a)))
","
from itertools import permutations

def cycpattern_check(a, b):
    for perm in permutations(b):
        if """".join(perm) in a:
            return True
    return False
","
from itertools import permutations

def cycpattern_check(a, b):
    for rotation in [''.join(p) for p in permutations(b)]:
        if rotation in a:
            return True
    return False
  ","66.66666666666666","66.66666666666666","50.0","66.66666666666666","66.66666666666666","66.66666666666666","","","","","",""
"HumanEval/155","
def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""
","
def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for digit in str(abs(num)):
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)
","
def even_odd_count(num):
    even_count = 0
    odd_count = 0
    num = abs(num)  # handle potential negative input
    while num > 0:
        digit = num % 10
        if digit % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
        num //= 10
    return even_count, odd_count
","
from collections import Counter

def even_odd_count(num):
    even_count = len([digit for digit in str(abs(num)) if int(digit) % 2 == 0])
    odd_count = len([digit for digit in str(abs(num)) if int(digit) % 2 == 1])
    return even_count, odd_count
","
def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""
    num_str = str(abs(num))
    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)
    odd_count = len(num_str) - even_count
    return even_count, odd_count
","
def even_odd_count(num):
    from collections import Counter

    num_str = str(abs(num))
    counts = Counter(num_str)
    even_count = sum(1 for digit in counts if int(digit) % 2 == 0)
    odd_count = sum(1 for digit in counts if int(digit) % 2 != 0)

    return even_count, odd_count
","
from collections import Counter

def even_odd_count(num):
    even_count, odd_count = 0, 0
    digits = [int(d) for d in str(abs(num)) if d.isdigit()]
    counts = Counter(digits)
    even_count = counts.get(0, 0) + counts.get(2, 0) + counts.get(4, 0) + counts.get(6, 0) + counts.get(8, 0)
    odd_count = counts.get(1, 0) + counts.get(3, 0) + counts.get(5, 0) + counts.get(7, 0) + counts.get(9, 0)
    return even_count, odd_count
","100.0","87.5","100.0","100.0","75.0","100.0","","","","","",""
"HumanEval/156","
def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
","
def int_to_mini_roman(number):
    roman_numerals = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',
        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'
    }
    
    if not 1 <= number <= 1000:
        raise ValueError(""Input number must be between 1 and 1000"")
    
    result = ''
    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):
        while number >= value:
            result += numeral
            number -= value
    
    return result.lower()
","
def int_to_mini_roman(number):
    roman_numerals = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',
        50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'
    }
    
    if not 1 <= number <= 1000:
        raise ValueError(""Input number must be between 1 and 1000"")

    result = ''
    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):
        while number >= value:
            result += numeral
            number -= value

    return result.lower()
","
def int_to_mini_roman(number):
    roman_mappings = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}
    
    if not 1 <= number <= 1000:
        return ""Number out of allowed range""
    
    result = ''
    for value, numeral in roman_mappings.items():
        while number >= value:
            result += numeral
            number -= value
    
    return result.lower()
","
def int_to_mini_roman(number):
    roman_numerals = {
        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',
        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',
        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'
    }
    
    result = ''
    for value, numeral in roman_numerals.items():
        while number >= value:
            result += numeral
            number -= value

    return result.lower()
","
def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= number <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l',
                 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}
    result = ''
    
    for value, roman_digit in roman_map.items():
        while number >= value:
            result += roman_digit
            number -= value
    
    return result.lower()
","
def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
    if number < 1 or number > 1000:
        raise ValueError(""Input number must be between 1 and 1000 inclusive."")
    
    roman_numerals = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',
        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'
    }
    
    result = ''
    for key in sorted(roman_numerals.keys(), reverse=True):
        while number >= key:
            result += roman_numerals[key]
            number -= key
    
    return result.lower()
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/157","
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    sides = [a, b, c]
    sides.sort()
    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)
","
import math

def right_angle_triangle(a, b, c):
    return math.isclose(a**2 + b**2, c**2) or math.isclose(a**2 + c**2, b**2) or math.isclose(b**2 + c**2, a**2)
","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    sides = [a, b, c]
    sides.sort()
    return math.isclose(sides[0] ** 2 + sides[1] ** 2, sides[2] ** 2)
","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    sides = [a, b, c]
    sides.sort()
    if sides[0]**2 + sides[1]**2 == sides[2]**2:
        return True
    else:
        return False
","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    
    sides = [a, b, c]
    sides.sort()
    
    if sides[0]**2 + sides[1]**2 == sides[2]**2:
        return True
    else:
        return False
","
from math import sqrt

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    sides = [a, b, c]
    sides.sort()
    
    if sides[0]**2 + sides[1]**2 == sides[2]**2:
        return True
    else:
        return False
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/158","
def find_max(words):
    """"""Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max([""name"", ""of"", ""string""]) == ""string""
    find_max([""name"", ""enam"", ""game""]) == ""enam""
    find_max([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
    """"""
","
from collections import Counter

def find_max(words):
    def unique_chars(word):
        return len(set(word))

    max_word = """"
    max_unique_chars = 0

    for word in words:
        unique_chars_count = unique_chars(word)
        if unique_chars_count > max_unique_chars or (unique_chars_count == max_unique_chars and word < max_word):
            max_word = word
            max_unique_chars = unique_chars_count

    return max_word
","
from collections import Counter

def find_max(words):
    def count_unique_chars(word):
        return len(set(word))

    def key_func(word):
        return (-count_unique_chars(word), word)

    if not words:
        return """"

    return max(words, key=key_func)

","
from collections import Counter

def find_max(words):
    def unique_chars(word):
        return len(set(word))
    
    max_word = """"
    max_unique_chars = 0
    
    for word in words:
        current_unique_chars = unique_chars(word)
        if current_unique_chars > max_unique_chars or (current_unique_chars == max_unique_chars and word < max_word):
            max_word = word
            max_unique_chars = current_unique_chars
            
    return max_word
","
from collections import Counter

def find_max(words):
    def count_unique_chars(word):
        return len(set(word))

    def lexicographical_max(word1, word2):
        if len(word1) != len(word2):
            return max(word1, word2, key=len)
        else:
            return min(word1, word2)

    max_word = """"
    max_unique_chars = 0

    for word in words:
        unique_chars = count_unique_chars(word)
        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):
            max_word = word
            max_unique_chars = unique_chars

    return max_word
","
from collections import Counter

def find_max(words):
    def character_count(word):
        return len(set(word))

    max_word = """"
    max_unique_chars = 0
    for word in words:
        unique_chars = character_count(word)
        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):
            max_word = word
            max_unique_chars = unique_chars
    
    return max_word
","
from collections import Counter

def find_max(words):
    def count_unique_chars(word):
        return len(set(word))

    max_unique_chars = 0
    result_word = """"
    
    for word in words:
        unique_chars_count = count_unique_chars(word)
        if unique_chars_count > max_unique_chars or (unique_chars_count == max_unique_chars and word < result_word):
            max_unique_chars = unique_chars_count
            result_word = word

    return result_word
","100.0","20.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/159","
def eat(number, need, remaining):
    """"""
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """"""
","
def eat(number, need, remaining):
    total_eaten = number + need
    if total_eaten <= remaining:
        return [total_eaten, remaining - total_eaten]
    else:
        return [remaining, 0]
","
def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    left_after_meals = max(0, remaining - need)
    return [total_eaten, left_after_meals]
","
def eat(number, need, remaining):
    total_eaten = number + remaining
    if total_eaten >= need:
        return [need, total_eaten - need]
    else:
        return [total_eaten, 0]
","
def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    remaining_carrots = max(0, remaining - need)
    return [total_eaten, remaining_carrots]
","
def eat(number, need, remaining):
    total_eaten = number + need
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]
","
def eat(number, need, remaining):
    eaten = number + need
    if remaining >= need:
        return [eaten, remaining - need]
    else:
        return [eaten + remaining, 0]
","0.0","100.0","33.33333333333333","100.0","66.66666666666666","66.66666666666666","","","","","",""
"HumanEval/160","
def do_algebra(operator, operand):
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""
","
from functools import reduce

def do_algebra(operator, operand):
    operations = {
        '+': lambda x, y: x + y,
        '-': lambda x, y: x - y,
        '*': lambda x, y: x * y,
        '//': lambda x, y: x // y,
        '**': lambda x, y: x ** y
    }

    result = operand[0]
    for i in range(len(operator)):
        result = operations[operator[i]](result, operand[i + 1])

    return result
","
def do_algebra(operator, operand):
    return eval(' '.join([str(x) + operator[i] if i < len(operator) else str(x) for i, x in enumerate(operand)]))
","
from functools import reduce

def do_algebra(operators, operands):
    operators_mapping = {
        '+': lambda x, y: x + y,
        '-': lambda x, y: x - y,
        '*': lambda x, y: x * y,
        '//': lambda x, y: x // y,
        '**': lambda x, y: x ** y
    }
    
    result = operands[0]
    for i in range(len(operators)):
        result = operators_mapping[operators[i]](result, operands[i + 1])
    
    return result
","
import operator

def do_algebra(operators, operands):
    ops = {'+': operator.add, '-': operator.sub, '*': operator.mul, '/': operator.floordiv, '**': operator.pow}
    result = operands[0]
    for i in range(len(operators)):
        op = operators[i]
        num = operands[i + 1]
        result = ops[op](result, num)
    return result
","
from functools import reduce

def do_algebra(operator, operand):
    operators = {'+': lambda x, y: x + y,
                 '-': lambda x, y: x - y,
                 '*': lambda x, y: x * y,
                 '//': lambda x, y: x // y,
                 '**': lambda x, y: x ** y}

    expression = ' '.join([str(num) + op for num, op in zip(operand, operator)] + [str(operand[-1])])
    result = reduce(lambda x, y: eval(str(x) + y), expression.split())

    return result
","
from functools import reduce

def do_algebra(operators, operands):
    operations = {'+': lambda x, y: x + y, '-': lambda x, y: x - y, '*': lambda x, y: x * y, '//': lambda x, y: x // y, '**': lambda x, y: x ** y}
    
    result = operands[0]
    
    for i, operator in enumerate(operators):
        result = operations[operator](result, operands[i+1])
    
    return result
  ","66.66666666666666","100.0","66.66666666666666","33.33333333333333","0.0","66.66666666666666","","","","","",""
"HumanEval/161","
def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""
","
def solve(s):
    import string
    
    result = ''
    for char in s:
        if char.isalpha():
            if char.islower():
                result += char.upper()
            else:
                result += char.lower()
        else:
            result += char
    
    if result.isalpha():
        return result[::-1]
    else:
        return result
","
def solve(s):
    import string
    
    reversed_s = """"
    
    has_letter = False
    for char in s:
        if char.isalpha():
            has_letter = True
            if char.islower():
                reversed_s += char.upper()
            else:
                reversed_s += char.lower()
        else:
            reversed_s += char
    
    if not has_letter:
        return s[::-1]
    
    return reversed_s
","
def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vice versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""
    return ''.join([c.swapcase() if c.isalpha() else c for c in s]) if any(char.isalpha() for char in s) else s[::-1]
","
def solve(s):
    from string import ascii_letters
    return ''.join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s) if any(ch in ascii_letters for ch in s) else s[::-1]
","
def solve(s):
    import string
    return """".join([char.swapcase() if char.isalpha() else char for char in s]) if any(char.isalpha() for char in s) else s[::-1]
","
def solve(s):
    import string
    return ''.join([c.lower() if c.isupper() else c.upper() if c.islower() else c for c in s][::-1])
","50.0","100.0","100.0","100.0","100.0","25.0","","","","","",""
"HumanEval/162","
def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
","
import hashlib

def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
    if not text:
        return None
    return hashlib.md5(text.encode()).hexdigest()
","
import hashlib

def string_to_md5(text):
    if not text:
        return None
    else:
        return hashlib.md5(text.encode()).hexdigest()
","
import hashlib

def string_to_md5(text):
    if not text:
        return None
    md5_hash = hashlib.md5(text.encode('utf-8')).hexdigest()
    return md5_hash
","
import hashlib

def string_to_md5(text):
    if text:
        return hashlib.md5(text.encode('utf-8')).hexdigest()
    else:
        return None
","
import hashlib

def string_to_md5(text):
    if not text:
        return None
    return hashlib.md5(text.encode()).hexdigest()
","
import hashlib

def string_to_md5(text):
    if text == '':
        return None
    else:
        md5_hash = hashlib.md5(text.encode()).hexdigest()
        return md5_hash
","100.0","100.0","100.0","100.0","100.0","100.0","","","","","",""
"HumanEval/163","
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
","
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
    return [i for i in range(a, b+1) if i % 2 == 0]
","
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""

    return [num for num in range(a, b + 1) if all(int(digit) % 2 == 0 for digit in str(num))]

","
def generate_integers(a, b):
    return [i for i in range(a, b+1) if i % 2 == 0 and any(digit % 2 == 0 for digit in map(int, str(i)))]

","
def generate_integers(a, b):
    return [i for i in range(a, b+1) if int(str(i)[-1]) % 2 == 0]
","
def generate_integers(a, b):
    return [i for i in range(a, b+1) if all(int(digit) % 2 == 0 for digit in str(i))]

from typing import List
","
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
    return [i for i in range(a, b+1) if i % 2 == 0 and any(digit in '02468' for digit in str(i))]
","0.0","25.0","0.0","0.0","25.0","0.0","","","","","",""
