task_id,prompt,test_1,test_2,test_3,test_4,test_5,test_6,test_7,test_8,test_9,test_10,code_0,code_1,code_2,code_3,code_4,code_5,average_pass_rate,test_1_results,test_2_results,test_3_results,test_4_results,test_5_results,test_6_results,test_7_results,test_8_results,test_9_results,test_10_results,test_1_pass_rate,test_2_pass_rate,test_3_pass_rate,test_4_pass_rate,test_5_pass_rate,test_6_pass_rate,test_7_pass_rate,test_8_pass_rate,test_9_pass_rate,test_10_pass_rate,average_tests_pass_rate
HumanEval/0,"from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
","has_close_elements([], 1.0)","has_close_elements([1.0], 0.5)","has_close_elements([1.0, 2.0, 3.0], 1.5)","has_close_elements([1.0, 3.0, 2.1], 0.2)","has_close_elements([0.1, 0.15, 0.3], 0.05)","has_close_elements([10.0, 20.0, 20.1], 0.15)","has_close_elements([1.5, 2.0, 3.0, 1.55], 0.06)","has_close_elements([-1.0, -2.0, -1.99], 0.01)","has_close_elements([1.23456, 1.23458, 2.34567], 0.00003)","has_close_elements([5.5, 5.7, 5.9], 0.22)","
from typing import List

def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
","
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    numbers.sort()
    for i in range(len(numbers) - 1):
        if abs(numbers[i] - numbers[i + 1]) < threshold:
            return True
    return False
","
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
","
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """"""Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
  ","
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    """""" Check if in given list of numbers, are any two numbers closer to each other than
    given threshold.
    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)
    False
    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)
    True
    """"""
    
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
","
from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False
",100.0,"['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/1,"from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))')
    ['()', '(())', '(()())']
    """"""
",separate_paren_groups(((()))'),separate_paren_groups(() (()) ((()))'),separate_paren_groups((( )( ))'),separate_paren_groups((( )( )) (( ))'),separate_paren_groups((( ( )(( )) ))'),separate_paren_groups((   )(   )'),separate_paren_groups(''),separate_paren_groups((((())))'),separate_paren_groups(()()()'),separate_paren_groups((())()((()))'),"
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    stack = []
    result = []
    group = """"
    
    for char in paren_string:
        if char == ""("":
            stack.append(char)
        elif char == "")"":
            stack.pop()
            if not stack:
                result.append(group)
                group = """"
        else:
            if stack:
                group += char
    
    return result

","
from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    paren_string = paren_string.replace("" "", """")
    result = []
    temp = """"
    stack = []
    
    for char in paren_string:
        if char == ""("":
            stack.append(char)
            temp += char
        elif char == "")"":
            stack.pop()
            temp += char
            if not stack:
                result.append(temp)
                temp = """"
    
    return result
","
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    curr_str = ''
    count = 0
    for char in paren_string.replace(' ', ''):
        if char == '(':
            count += 1
            curr_str += char
        elif char == ')':
            count -= 1
            curr_str += char
            if count == 0:
                result.append(curr_str)
                curr_str = ''
    return result
","
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    groups = []
    group = ''
    open_paren = False
    for char in paren_string.replace(' ', ''):
        if char == '(':
            open_paren = True
        elif char == ')':
            open_paren = False
            groups.append(group + ')')
            group = ''
        if open_paren:
            group += char
    return groups
","
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))'
    ['()', '(())', '(()())']
    """"""
    groups = [group for group in paren_string.split("" "") if group]
    return groups
","
from typing import List


def separate_paren_groups(paren_string: str) -> List[str]:
    """""" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to
    separate those group into separate strings and return the list of those.
    Separate groups are balanced (each open brace is properly closed) and not nested within each other
    Ignore any spaces in the input string.
    >>> separate_paren_groups('( ) (( )) (( )( ))'
    ['()', '(())', '(()())']
    """"""
",55.0,"['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['[]', '[]', '[]', '[]', '[]', 'None']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']",1.0,1.0,1.0,1.0,1.0,1.0,0.8,1.0,1.0,1.0,98.00000000000001
HumanEval/2,"

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """"""
",truncate_number(0.75),truncate_number(10.01),truncate_number(5.0),truncate_number(1.9999),truncate_number(999.999),truncate_number(0.0001),truncate_number(123.123),truncate_number(0.5),truncate_number(100.89),truncate_number(6000.000001),"
from math import floor

def truncate_number(number: float) -> float:
    return number - floor(number)
","
from math import trunc

def truncate_number(number: float) -> float:
    """""" Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    """"""
    return number - trunc(number)
","
from math import floor

def truncate_number(number: float) -> float:
    return number - floor(number)
","
from math import floor

def truncate_number(number: float) -> float:
    return number - floor(number)
","
from math import floor

def truncate_number(number: float) -> float:
    return number - floor(number)
","
from math import floor

def truncate_number(number: float) -> float:
    return number - floor(number)
",100.0,"['0.75', '0.75', '0.75', '0.75', '0.75', '0.75']","['0.009999999999999787', '0.009999999999999787', '0.009999999999999787', '0.009999999999999787', '0.009999999999999787', '0.009999999999999787']","['0.0', '0.0', '0.0', '0.0', '0.0', '0.0']","['0.9999', '0.9999', '0.9999', '0.9999', '0.9999', '0.9999']","['0.9990000000000236', '0.9990000000000236', '0.9990000000000236', '0.9990000000000236', '0.9990000000000236', '0.9990000000000236']","['0.0001', '0.0001', '0.0001', '0.0001', '0.0001', '0.0001']","['0.12300000000000466', '0.12300000000000466', '0.12300000000000466', '0.12300000000000466', '0.12300000000000466', '0.12300000000000466']","['0.5', '0.5', '0.5', '0.5', '0.5', '0.5']","['0.8900000000000006', '0.8900000000000006', '0.8900000000000006', '0.8900000000000006', '0.8900000000000006', '0.8900000000000006']","['1.0000003385357559e-06', '1.0000003385357559e-06', '1.0000003385357559e-06', '1.0000003385357559e-06', '1.0000003385357559e-06', '1.0000003385357559e-06']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/3,"from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
","below_zero([100, -50, -30])",below_zero([-1]),"below_zero([1, -2, 3, -4, 5, -10])","below_zero([0, 0, 0, 0])","below_zero([-100, 50, 60])","below_zero([5, 15, -20, 5, -6])","below_zero([15, -10, -7, 2])","below_zero([1, 2, 3, -6])","below_zero([10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])","below_zero([7, 14, -30, 9])","
from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account falls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False
  ","
from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account falls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False
","
from typing import List

def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False
","
from typing import List


def below_zero(operations: List[int]) -> bool:
    """""" You're given a list of deposit and withdrawal operations on a bank account that starts with
    zero balance. Your task is to detect if at any point the balance of account falls below zero, and
    at that point function should return True. Otherwise it should return False.
    >>> below_zero([1, 2, 3])
    False
    >>> below_zero([1, 2, -4, 5])
    True
    """"""
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False
","
from typing import List


def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False
",100.0,"['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/4,"from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
","mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])","mean_absolute_deviation([1.1, 1.1, 1.1, 1.1])","mean_absolute_deviation([-5.0, 0.0, 5.0, 10.0])",mean_absolute_deviation([100]),mean_absolute_deviation([]),"mean_absolute_deviation([10.5, 10.5, 10.5, 10.5])","mean_absolute_deviation([-2.5, -1.0, 0.0, 1.0, 2.5])",mean_absolute_deviation([0.33]),"mean_absolute_deviation([0.0001, 100000])","mean_absolute_deviation([2.5, -3.2, 4.8, -2.5, 3.2, -4.8])","
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
  ","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
  ","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
    
    mean_val = sum(numbers) / len(numbers)
    return sum(abs(x - mean_val) for x in numbers) / len(numbers)
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    absolute_deviations = [abs(num - mean) for num in numbers]
    return sum(absolute_deviations) / len(absolute_deviations)
","
from typing import List

def mean_absolute_deviation(numbers: List[float]) -> float:
    """""" For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """"""
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
  ",100.0,"['1.2', '1.2', '1.2', '1.2', '1.2', '1.2']","['0.0', '0.0', '0.0', '0.0', '0.0', '0.0']","['5.0', '5.0', '5.0', '5.0', '5.0', '5.0']","['0.0', '0.0', '0.0', '0.0', '0.0', '0.0']","['', '', '', '', '', '']","['0.0', '0.0', '0.0', '0.0', '0.0', '0.0']","['1.4', '1.4', '1.4', '1.4', '1.4', '1.4']","['0.0', '0.0', '0.0', '0.0', '0.0', '0.0']","['49999.99995', '49999.99995', '49999.99995', '49999.99995', '49999.99995', '49999.99995']","['3.5', '3.5', '3.5', '3.5', '3.5', '3.5']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/5,"from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
","intersperse([], 0)","intersperse([1], 1)","intersperse([1, 2, 3, 4, 5], 0)","intersperse([2, 4, 6, 8], -1)","intersperse([], 5)","intersperse([100], 100)","intersperse([1, 3, 5, 7, 9], 2)","intersperse([0, 0, 0, 0], 0)","intersperse([-1, -3, -5], 1)","intersperse([10, 20, 30, 40, 50, 60, 70, 80, 90], -2)","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    result = []
    for num in numbers[:-1]:
        result.extend([num, delimeter])
    if numbers:
        result.append(numbers[-1])
    return result
","
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""

    result = []
    for idx, num in enumerate(numbers):
        if idx != 0:
            result.append(delimeter)
        result.append(num)

    return result
","
from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    result = []
    for num in numbers:
        result.extend([num, delimeter])
    return result[:-1]
","
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    
    result = []
    for i in range(len(numbers) - 1):
        result.extend([numbers[i], delimeter])
    if numbers:
        result.append(numbers[-1])
    return result
","
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    """""" Insert a number 'delimeter' between every two consecutive elements of input list numbers'
    >>> intersperse([], 4)
    []
    >>> intersperse([1, 2, 3], 4)
    [1, 4, 2, 4, 3]
    """"""
    result = []
    if len(numbers) <= 1:
        return numbers
    for num in numbers[:-1]:
        result.extend([num, delimeter])
    result.append(numbers[-1])
    return result
","
from typing import List


def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    result = []
    for num in numbers:
        result.extend([num, delimeter])
    result.pop()  # remove the last delimeter
    return result
",93.33333333333333,"['[]', '[]', '[]', '[]', '[]', '']","['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']","['[1, 0, 2, 0, 3, 0, 4, 0, 5]', '[1, 0, 2, 0, 3, 0, 4, 0, 5]', '[1, 0, 2, 0, 3, 0, 4, 0, 5]', '[1, 0, 2, 0, 3, 0, 4, 0, 5]', '[1, 0, 2, 0, 3, 0, 4, 0, 5]', '[1, 0, 2, 0, 3, 0, 4, 0, 5]']","['[2, -1, 4, -1, 6, -1, 8]', '[2, -1, 4, -1, 6, -1, 8]', '[2, -1, 4, -1, 6, -1, 8]', '[2, -1, 4, -1, 6, -1, 8]', '[2, -1, 4, -1, 6, -1, 8]', '[2, -1, 4, -1, 6, -1, 8]']","['[]', '[]', '[]', '[]', '[]', '']","['[100]', '[100]', '[100]', '[100]', '[100]', '[100]']","['[1, 2, 3, 2, 5, 2, 7, 2, 9]', '[1, 2, 3, 2, 5, 2, 7, 2, 9]', '[1, 2, 3, 2, 5, 2, 7, 2, 9]', '[1, 2, 3, 2, 5, 2, 7, 2, 9]', '[1, 2, 3, 2, 5, 2, 7, 2, 9]', '[1, 2, 3, 2, 5, 2, 7, 2, 9]']","['[0, 0, 0, 0, 0, 0, 0]', '[0, 0, 0, 0, 0, 0, 0]', '[0, 0, 0, 0, 0, 0, 0]', '[0, 0, 0, 0, 0, 0, 0]', '[0, 0, 0, 0, 0, 0, 0]', '[0, 0, 0, 0, 0, 0, 0]']","['[-1, 1, -3, 1, -5]', '[-1, 1, -3, 1, -5]', '[-1, 1, -3, 1, -5]', '[-1, 1, -3, 1, -5]', '[-1, 1, -3, 1, -5]', '[-1, 1, -3, 1, -5]']","['[10, -2, 20, -2, 30, -2, 40, -2, 50, -2, 60, -2, 70, -2, 80, -2, 90]', '[10, -2, 20, -2, 30, -2, 40, -2, 50, -2, 60, -2, 70, -2, 80, -2, 90]', '[10, -2, 20, -2, 30, -2, 40, -2, 50, -2, 60, -2, 70, -2, 80, -2, 90]', '[10, -2, 20, -2, 30, -2, 40, -2, 50, -2, 60, -2, 70, -2, 80, -2, 90]', '[10, -2, 20, -2, 30, -2, 40, -2, 50, -2, 60, -2, 70, -2, 80, -2, 90]', '[10, -2, 20, -2, 30, -2, 40, -2, 50, -2, 60, -2, 70, -2, 80, -2, 90]']",0.8,1.0,1.0,1.0,0.8,1.0,1.0,1.0,1.0,1.0,96.0
HumanEval/6,"from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    """""" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.
    For each of the group, output the deepest level of nesting of parentheses.
    E.g. (()()) has maximum two levels of nesting while ((())) has three.

    >>> parse_nested_parens('(()()) ((())) () ((())()())')
    [2, 3, 1, 3]
    """"""
",parse_nested_parens(()'),parse_nested_parens(((()))'),parse_nested_parens(((((()))))'),parse_nested_parens(() ()'),parse_nested_parens(((((())))) ()'),parse_nested_parens((()) (())'),parse_nested_parens((()()())'),parse_nested_parens(''),parse_nested_parens((()((())()))'),parse_nested_parens((())(()(())())((()))'),"
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    depths = []
    current_depth = 0
    for char in paren_string:
        if char == '(':
            current_depth += 1
            depths.append(current_depth)
        elif char == ')':
            current_depth -= 1
    return [max(depths[i: depths.index(0, i)]) for i in range(len(depths)) if depths[i] != 0]
","
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    depths = []
    max_depth = 0
    current_depth = 0

    for char in paren_string:
        if char == '(':
            current_depth += 1
            max_depth = max(max_depth, current_depth)
        elif char == ')':
            current_depth -= 1

        if char == ' ':
            depths.append(max_depth)
            max_depth = 0

    depths.append(max_depth)  # Add the depth for the last group
    return depths
","
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    def find_depth(s):
        max_depth = depth = 0
        for char in s:
            if char == '(':
                depth += 1
                max_depth = max(max_depth, depth)
            elif char == ')':
                depth -= 1
        return max_depth

    return [find_depth(group) for group in paren_string.split()]
","
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    depths = []
    depth = 0

    for char in paren_string:
        if char == '(':
            depth += 1
            depths.append(depth)
        elif char == ')':
            depths.append(depth)
            depth -= 1

    return [max(depths[i:i + depths[i]:2]) for i in range(0, len(depths), 2)]
","
from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    stack = []
    depths = []
    max_depth = 0
    
    for char in paren_string:
        if char == '(':
            stack.append('(')
            max_depth = max(max_depth, len(stack))
        elif char == ')':
            stack.pop()
            
        if not stack:
            depths.append(max_depth)
            max_depth = 0
            
    return depths
","
from typing import List


def parse_nested_parens(paren_string: str) -> List[int]:
    opening_paren_count = 0
    max_nesting = 0
    results = []

    for char in paren_string:
        if char == '(':
            opening_paren_count += 1
            max_nesting = max(max_nesting, opening_paren_count)
        elif char == ')':
            opening_paren_count -= 1

        if char == ' ':
            results.append(max_nesting)
            max_nesting = 0

    results.append(max_nesting)

    return results
",66.66666666666666,"['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['[]', '[0]', '[]', '[]', '[]', '[0]']","['', '', '', '', '', '']","['', '', '', '', '', '']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.6,1.0,1.0,96.0
HumanEval/7,"from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
","filter_by_substring(['hello', 'world'], 'o')","filter_by_substring(['apple', 'banana', 'cherry'], 'a')","filter_by_substring([], 'test')","filter_by_substring(['123', '234', '345'], '1')","filter_by_substring(['abc', 'def', 'ghi'], 'xyz')","filter_by_substring(['', '', ''], 'a')","filter_by_substring(['upper', 'lower', 'mix'], 'UPPER')","filter_by_substring(['singleword'], 'singleword')","filter_by_substring(['space ', ' no space'], ' ')","filter_by_substring(['special@@', '@@char!'], '@@')","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
    return [s for s in strings if substring in s]
","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]
","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]
","
from typing import List

def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]
  ","
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """""" Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
 
    return [s for s in strings if substring in s]
","
from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    """"""
    Filter an input list of strings only for ones that contain given substring
    >>> filter_by_substring([], 'a')
    []
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')
    ['abc', 'bacd', 'array']
    """"""
    return [string for string in strings if substring in string]
",100.0,"[""['hello', 'world']"", ""['hello', 'world']"", ""['hello', 'world']"", ""['hello', 'world']"", ""['hello', 'world']"", ""['hello', 'world']""]","[""['apple', 'banana']"", ""['apple', 'banana']"", ""['apple', 'banana']"", ""['apple', 'banana']"", ""['apple', 'banana']"", ""['apple', 'banana']""]","['[]', '[]', '[]', '[]', '[]', '[]']","[""['123']"", ""['123']"", ""['123']"", ""['123']"", ""['123']"", ""['123']""]","['[]', '[]', '[]', '[]', '[]', '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","[""['singleword']"", ""['singleword']"", ""['singleword']"", ""['singleword']"", ""['singleword']"", ""['singleword']""]","[""['space ', ' no space']"", ""['space ', ' no space']"", ""['space ', ' no space']"", ""['space ', ' no space']"", ""['space ', ' no space']"", ""['space ', ' no space']""]","[""['special@@', '@@char!']"", ""['special@@', '@@char!']"", ""['special@@', '@@char!']"", ""['special@@', '@@char!']"", ""['special@@', '@@char!']"", ""['special@@', '@@char!']""]",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/8,"from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """""" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    Empty sum should be equal to 0 and empty product should be equal to 1.
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
",sum_product([]),"sum_product([1, 2, 3, 4])",sum_product([0]),sum_product([1]),"sum_product([-1, -2, -3])","sum_product([100, 200, 300])","sum_product([1, 0, -1])","sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9])","sum_product([-1, 2, -3, 4, -5])","sum_product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    """"""
    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.
    
    Empty sum should be equal to 0 and empty product should be equal to 1.
    
    >>> sum_product([])
    (0, 1)
    >>> sum_product([1, 2, 3, 4])
    (10, 24)
    """"""
    
    total_sum = sum(numbers) if numbers else 0
    total_product = 1
    for num in numbers:
        total_product *= num
    return total_sum, total_product
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    total_sum = sum(numbers) if numbers else 0
    total_product = 1
    for num in numbers:
        total_product *= num
    return total_sum, total_product
","
from typing import List, Tuple


def sum_product(numbers: List[int]) -> Tuple[int, int]:
    total_sum = sum(numbers) if len(numbers) > 0 else 0
    total_product = 1
    for num in numbers:
        total_product *= num
    return total_sum, total_product
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_val = 0 if not numbers else sum(numbers)
    product_val = 1 if not numbers else 1
    for num in numbers:
        product_val *= num
    return sum_val, product_val
","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_result = sum(numbers)
    product_result = 1 if len(numbers) == 0 else 1
    for num in numbers:
        product_result *= num
    return sum_result, product_result
  ","
from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    sum_result = sum(numbers) if numbers else 0
    product_result = 1
    for num in numbers:
        product_result *= num
    return sum_result, product_result
",100.0,"['(0, 1)', '(0, 1)', '(0, 1)', '(0, 1)', '(0, 1)', '(0, 1)']","['(10, 24)', '(10, 24)', '(10, 24)', '(10, 24)', '(10, 24)', '(10, 24)']","['(0, 0)', '(0, 0)', '(0, 0)', '(0, 0)', '(0, 0)', '(0, 0)']","['(1, 1)', '(1, 1)', '(1, 1)', '(1, 1)', '(1, 1)', '(1, 1)']","['(-6, -6)', '(-6, -6)', '(-6, -6)', '(-6, -6)', '(-6, -6)', '(-6, -6)']","['(600, 6000000)', '(600, 6000000)', '(600, 6000000)', '(600, 6000000)', '(600, 6000000)', '(600, 6000000)']","['(0, 0)', '(0, 0)', '(0, 0)', '(0, 0)', '(0, 0)', '(0, 0)']","['(45, 362880)', '(45, 362880)', '(45, 362880)', '(45, 362880)', '(45, 362880)', '(45, 362880)']","['(-3, -120)', '(-3, -120)', '(-3, -120)', '(-3, -120)', '(-3, -120)', '(-3, -120)']","['(10, 1)', '(10, 1)', '(10, 1)', '(10, 1)', '(10, 1)', '(10, 1)']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/9,"from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
","rolling_max([1, 2, 3, 2, 3, 4, 2])",rolling_max([]),rolling_max([7]),"rolling_max([3, 1])","rolling_max([5, 5, 5, 5])","rolling_max([-1, -2, -3, -4, -5])","rolling_max([10, 20, 15, 25, 5])","rolling_max([2, 2, 2, 3, 3, 3, 4, 4])",rolling_max([0]),"rolling_max([1, 3, 2, 5, 4])","
from typing import List, Tuple

def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    max_list = []
    max_num = float('-inf')
    for num in numbers:
        max_num = max(max_num, num)
        max_list.append(max_num)
    return max_list
","
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    result = []
    maximum = float('-inf')
    for num in numbers:
        maximum = max(maximum, num)
        result.append(maximum)
    return result
","
from typing import List


def rolling_max(numbers: List[int]) -> List[int]:
    """"""From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    max_vals = []
    max_val = float('-inf')
    for num in numbers:
        max_val = max(max_val, num)
        max_vals.append(max_val)
    return max_vals
  ","
from typing import List


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    max_numbers = []
    current_max = float('-inf')
    for num in numbers:
        current_max = max(current_max, num)
        max_numbers.append(current_max)
    return max_numbers
","
from typing import List

def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    
    result = []
    max_num = float('-inf')
    
    for num in numbers:
        max_num = max(max_num, num)
        result.append(max_num)
    
    return result
  ","
from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    """""" From a given list of integers, generate a list of rolling maximum element found until given moment
    in the sequence.
    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])
    [1, 2, 3, 3, 3, 4, 4]
    """"""
    
    max_values = []
    max_val = float(""-inf"")
    
    for num in numbers:
        max_val = max(max_val, num)
        max_values.append(max_val)
        
    return max_values
",100.0,"['[1, 2, 3, 3, 3, 4, 4]', '[1, 2, 3, 3, 3, 4, 4]', '[1, 2, 3, 3, 3, 4, 4]', '[1, 2, 3, 3, 3, 4, 4]', '[1, 2, 3, 3, 3, 4, 4]', '[1, 2, 3, 3, 3, 4, 4]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[7]', '[7]', '[7]', '[7]', '[7]', '[7]']","['[3, 3]', '[3, 3]', '[3, 3]', '[3, 3]', '[3, 3]', '[3, 3]']","['[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]']","['[-1, -1, -1, -1, -1]', '[-1, -1, -1, -1, -1]', '[-1, -1, -1, -1, -1]', '[-1, -1, -1, -1, -1]', '[-1, -1, -1, -1, -1]', '[-1, -1, -1, -1, -1]']","['[10, 20, 20, 25, 25]', '[10, 20, 20, 25, 25]', '[10, 20, 20, 25, 25]', '[10, 20, 20, 25, 25]', '[10, 20, 20, 25, 25]', '[10, 20, 20, 25, 25]']","['[2, 2, 2, 3, 3, 3, 4, 4]', '[2, 2, 2, 3, 3, 3, 4, 4]', '[2, 2, 2, 3, 3, 3, 4, 4]', '[2, 2, 2, 3, 3, 3, 4, 4]', '[2, 2, 2, 3, 3, 3, 4, 4]', '[2, 2, 2, 3, 3, 3, 4, 4]']","['[0]', '[0]', '[0]', '[0]', '[0]', '[0]']","['[1, 3, 3, 5, 5]', '[1, 3, 3, 5, 5]', '[1, 3, 3, 5, 5]', '[1, 3, 3, 5, 5]', '[1, 3, 3, 5, 5]', '[1, 3, 3, 5, 5]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/10,"

def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
",make_palindrome(''),make_palindrome('cat'),make_palindrome('cata'),make_palindrome('a'),make_palindrome('ab'),make_palindrome('race'),make_palindrome('racecar'),make_palindrome('abba'),make_palindrome('banana'),make_palindrome('abcde'),"
def is_palindrome(string: str) -> bool:
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    if not string:
        return ''

    def find_longest_palindrome_postfix(s):
        for i in range(len(s)-1, -1, -1):
            if s[i:] == s[i:][::-1]:
                return s[i:]

    palindrome_suffix = find_longest_palindrome_postfix(string)

    if palindrome_suffix:
        prefix = string[:(len(string)-len(palindrome_suffix))]
        return string + prefix[::-1]
    else:
        return string + string[:-1][::-1]
","
def is_palindrome(string: str) -> bool:
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    def get_longest_palindromic_suffix(s: str) -> str:
        for i in range(len(s), 0, -1):
            if s[:i] == s[:i][::-1]:
                return s[i:]
        return s
    
    return string + string[:len(string) - len(get_longest_palindromic_suffix(string))][::-1]
","
from typing import List

def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
    def is_palindrome(s: str) -> bool:
        return s == s[::-1]
    
    if is_palindrome(string):
        return string

    for i in range(len(string), 0, -1):
        if is_palindrome(string[i-1:]):
            return string + string[:i-1][::-1]
  ","
def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
","
def is_palindrome(string: str) -> bool:
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    def longest_palindromic_suffix(s):
        for i in range(len(s), 0, -1):
            if s[:i] == s[:i][::-1]:
                return s[i:]
        return s

    return string + string[:len(string) - len(longest_palindromic_suffix(string))][::-1]
","
def is_palindrome(string: str) -> bool:
    """""" Test if given string is a palindrome """"""
    return string == string[::-1]


def make_palindrome(string: str) -> str:
    """""" Find the shortest palindrome that begins with a supplied string.
    Algorithm idea is simple:
    - Find the longest postfix of supplied string that is a palindrome.
    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.
    >>> make_palindrome('')
    ''
    >>> make_palindrome('cat')
    'catac'
    >>> make_palindrome('cata')
    'catac'
    """"""
",28.0,"['', '', '', 'None', '', 'None']","['catac', 'catc', 'catac', 'None', 'catc', 'None']","['catatac', 'catac', 'catatac', 'None', 'catac', 'None']","['a', 'aa', 'a', 'None', 'aa', 'None']","['aba', 'aba', 'aba', 'None', 'aba', 'None']","['racecar', 'racer', 'racecar', 'None', 'racer', 'None']","['racecaracecar', 'racecarracecar', 'racecar', 'None', 'racecarracecar', 'None']","['abbabba', 'abbaabba', 'abba', 'None', 'abbaabba', 'None']","['bananananab', 'bananab', 'bananananab', 'None', 'bananab', 'None']","['abcdedcba', 'abcdea', 'abcdedcba', 'None', 'abcdea', 'None']",0.6,0.2,0.2,0.2,0.6,0.2,0.0,0.0,0.2,0.2,24.0
HumanEval/11,"from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
","string_xor('0', '0')","string_xor('1', '1')","string_xor('1', '0')","string_xor('010101', '101010')","string_xor('000', '111')","string_xor('1100101', '0011011')","string_xor('', '')","string_xor('11111', '00000')","string_xor('10101010', '01010101')","string_xor('11110000', '00001111')","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    result = """"
    for i in range(len(a)):
        if a[i] != b[i]:
            result += ""1""
        else:
            result += ""0""
    return result
  ","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    result = """"
    for i in range(len(a)):
        if a[i] != b[i]:
            result += '1'
        else:
            result += '0'
    return result
","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    result = ''
    for i in range(len(a)):
        if a[i] != b[i]:
            result += '1'
        else:
            result += '0'
    return result
","
from typing import List


def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return """".join([str(int(x)^int(y)) for x, y in zip(a, b)])
","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    return ''.join([str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b)])
","
from typing import List

def string_xor(a: str, b: str) -> str:
    """""" Input are two strings a and b consisting only of 1s and 0s.
    Perform binary XOR on these inputs and return result also as a string.
    >>> string_xor('010', '110')
    '100'
    """"""
    result = ''
    for i in range(len(a)):
        if a[i] == b[i]:
            result += '0'
        else:
            result += '1'
    return result
",100.0,"['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['1', '1', '1', '1', '1', '1']","['111111', '111111', '111111', '111111', '111111', '111111']","['111', '111', '111', '111', '111', '111']","['1111110', '1111110', '1111110', '1111110', '1111110', '1111110']","['', '', '', '', '', '']","['11111', '11111', '11111', '11111', '11111', '11111']","['11111111', '11111111', '11111111', '11111111', '11111111', '11111111']","['11111111', '11111111', '11111111', '11111111', '11111111', '11111111']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/12,"from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
",longest([]),longest(['single']),"longest(['a', 'b', 'c'])","longest(['short', 'longer', 'longest'])","longest(['aaa', 'bb', 'c'])","longest(['quick', 'brown', 'fox', 'jumps'])","longest(['equal', 'equal', 'equal'])","longest(['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten'])","longest(['compete', 'completely', 'compelling'])","longest(['different_length_words', 'one', 'a'])","
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""

    if not strings:
        return None

    max_length = max(len(s) for s in strings)
    longest_strings = [s for s in strings if len(s) == max_length]

    return longest_strings[0]
","
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
    if not strings:
        return None
    longest_str = max(strings, key=len)
    return next((s for s in strings if len(s) == len(longest_str)), None)
","
from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    return max(strings, key=len)
","
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
  ","
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])

    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
","
from typing import List, Optional


def longest(strings: List[str]) -> Optional[str]:
    """""" Out of list of strings, return the longest one. Return the first one in case of multiple
    strings of the same length. Return None in case the input list is empty.
    >>> longest([])
    
    >>> longest(['a', 'b', 'c'])
    'a'
    >>> longest(['a', 'bb', 'ccc'])
    'ccc'
    """"""
",59.999999999999986,"['None', 'None', 'None', 'None', 'None', 'None']","['single', 'single', 'single', 'None', 'None', 'None']","['a', 'a', 'a', 'None', 'None', 'None']","['longest', 'longest', 'longest', 'None', 'None', 'None']","['aaa', 'aaa', 'aaa', 'None', 'None', 'None']","['quick', 'quick', 'quick', 'None', 'None', 'None']","['equal', 'equal', 'equal', 'None', 'None', 'None']","['three', 'three', 'three', 'None', 'None', 'None']","['completely', 'completely', 'completely', 'None', 'None', 'None']","['different_length_words', 'different_length_words', 'different_length_words', 'None', 'None', 'None']",1.0,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,46.0
HumanEval/13,"

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
","greatest_common_divisor(3, 5)","greatest_common_divisor(25, 15)","greatest_common_divisor(100, 50)","greatest_common_divisor(17, 29)","greatest_common_divisor(0, 10)","greatest_common_divisor(10, 0)","greatest_common_divisor(0, 0)","greatest_common_divisor(-20, 15)","greatest_common_divisor(15, -20)","greatest_common_divisor(-10, -15)","
from math import gcd

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return gcd(a, b)
","
import math

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return math.gcd(a, b)
","
import math

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    
    return math.gcd(a, b)
","
import math

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return math.gcd(a, b)
","
from math import gcd

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return gcd(a, b)
","
import math

def greatest_common_divisor(a: int, b: int) -> int:
    """""" Return a greatest common divisor of two integers a and b
    >>> greatest_common_divisor(3, 5)
    1
    >>> greatest_common_divisor(25, 15)
    5
    """"""
    return math.gcd(a, b)
",100.0,"['1', '1', '1', '1', '1', '1']","['5', '5', '5', '5', '5', '5']","['50', '50', '50', '50', '50', '50']","['1', '1', '1', '1', '1', '1']","['10', '10', '10', '10', '10', '10']","['10', '10', '10', '10', '10', '10']","['0', '0', '0', '0', '0', '0']","['5', '5', '5', '5', '5', '5']","['5', '5', '5', '5', '5', '5']","['5', '5', '5', '5', '5', '5']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/14,"from typing import List


def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
","all_prefixes("""")","all_prefixes(""a"")","all_prefixes(""xy"")","all_prefixes(""test"")","all_prefixes(""12345"")","all_prefixes(""longestprefixtestinput"")","all_prefixes(""AAA"")","all_prefixes(""space test"")","all_prefixes(""hyphen-test"")","all_prefixes(""end!"")","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i] for i in range(1, len(string) + 1)]
  ","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i+1] for i in range(len(string))]
","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    prefixes = [string[:i+1] for i in range(len(string))]
    return prefixes
","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    prefixes = [string[:i+1] for i in range(len(string))]
    return prefixes
 ","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i+1] for i in range(len(string))]
","
from typing import List

def all_prefixes(string: str) -> List[str]:
    """""" Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """"""
    return [string[:i] for i in range(1, len(string) + 1)]
",100.0,"['[]', '[]', '[]', '[]', '[]', '[]']","[""['a']"", ""['a']"", ""['a']"", ""['a']"", ""['a']"", ""['a']""]","[""['x', 'xy']"", ""['x', 'xy']"", ""['x', 'xy']"", ""['x', 'xy']"", ""['x', 'xy']"", ""['x', 'xy']""]","[""['t', 'te', 'tes', 'test']"", ""['t', 'te', 'tes', 'test']"", ""['t', 'te', 'tes', 'test']"", ""['t', 'te', 'tes', 'test']"", ""['t', 'te', 'tes', 'test']"", ""['t', 'te', 'tes', 'test']""]","[""['1', '12', '123', '1234', '12345']"", ""['1', '12', '123', '1234', '12345']"", ""['1', '12', '123', '1234', '12345']"", ""['1', '12', '123', '1234', '12345']"", ""['1', '12', '123', '1234', '12345']"", ""['1', '12', '123', '1234', '12345']""]","[""['l', 'lo', 'lon', 'long', 'longe', 'longes', 'longest', 'longestp', 'longestpr', 'longestpre', 'longestpref', 'longestprefi', 'longestprefix', 'longestprefixt', 'longestprefixte', 'longestprefixtes', 'longestprefixtest', 'longestprefixtesti', 'longestprefixtestin', 'longestprefixtestinp', 'longestprefixtestinpu', 'longestprefixtestinput']"", ""['l', 'lo', 'lon', 'long', 'longe', 'longes', 'longest', 'longestp', 'longestpr', 'longestpre', 'longestpref', 'longestprefi', 'longestprefix', 'longestprefixt', 'longestprefixte', 'longestprefixtes', 'longestprefixtest', 'longestprefixtesti', 'longestprefixtestin', 'longestprefixtestinp', 'longestprefixtestinpu', 'longestprefixtestinput']"", ""['l', 'lo', 'lon', 'long', 'longe', 'longes', 'longest', 'longestp', 'longestpr', 'longestpre', 'longestpref', 'longestprefi', 'longestprefix', 'longestprefixt', 'longestprefixte', 'longestprefixtes', 'longestprefixtest', 'longestprefixtesti', 'longestprefixtestin', 'longestprefixtestinp', 'longestprefixtestinpu', 'longestprefixtestinput']"", ""['l', 'lo', 'lon', 'long', 'longe', 'longes', 'longest', 'longestp', 'longestpr', 'longestpre', 'longestpref', 'longestprefi', 'longestprefix', 'longestprefixt', 'longestprefixte', 'longestprefixtes', 'longestprefixtest', 'longestprefixtesti', 'longestprefixtestin', 'longestprefixtestinp', 'longestprefixtestinpu', 'longestprefixtestinput']"", ""['l', 'lo', 'lon', 'long', 'longe', 'longes', 'longest', 'longestp', 'longestpr', 'longestpre', 'longestpref', 'longestprefi', 'longestprefix', 'longestprefixt', 'longestprefixte', 'longestprefixtes', 'longestprefixtest', 'longestprefixtesti', 'longestprefixtestin', 'longestprefixtestinp', 'longestprefixtestinpu', 'longestprefixtestinput']"", ""['l', 'lo', 'lon', 'long', 'longe', 'longes', 'longest', 'longestp', 'longestpr', 'longestpre', 'longestpref', 'longestprefi', 'longestprefix', 'longestprefixt', 'longestprefixte', 'longestprefixtes', 'longestprefixtest', 'longestprefixtesti', 'longestprefixtestin', 'longestprefixtestinp', 'longestprefixtestinpu', 'longestprefixtestinput']""]","[""['A', 'AA', 'AAA']"", ""['A', 'AA', 'AAA']"", ""['A', 'AA', 'AAA']"", ""['A', 'AA', 'AAA']"", ""['A', 'AA', 'AAA']"", ""['A', 'AA', 'AAA']""]","[""['s', 'sp', 'spa', 'spac', 'space', 'space ', 'space t', 'space te', 'space tes', 'space test']"", ""['s', 'sp', 'spa', 'spac', 'space', 'space ', 'space t', 'space te', 'space tes', 'space test']"", ""['s', 'sp', 'spa', 'spac', 'space', 'space ', 'space t', 'space te', 'space tes', 'space test']"", ""['s', 'sp', 'spa', 'spac', 'space', 'space ', 'space t', 'space te', 'space tes', 'space test']"", ""['s', 'sp', 'spa', 'spac', 'space', 'space ', 'space t', 'space te', 'space tes', 'space test']"", ""['s', 'sp', 'spa', 'spac', 'space', 'space ', 'space t', 'space te', 'space tes', 'space test']""]","[""['h', 'hy', 'hyp', 'hyph', 'hyphe', 'hyphen', 'hyphen-', 'hyphen-t', 'hyphen-te', 'hyphen-tes', 'hyphen-test']"", ""['h', 'hy', 'hyp', 'hyph', 'hyphe', 'hyphen', 'hyphen-', 'hyphen-t', 'hyphen-te', 'hyphen-tes', 'hyphen-test']"", ""['h', 'hy', 'hyp', 'hyph', 'hyphe', 'hyphen', 'hyphen-', 'hyphen-t', 'hyphen-te', 'hyphen-tes', 'hyphen-test']"", ""['h', 'hy', 'hyp', 'hyph', 'hyphe', 'hyphen', 'hyphen-', 'hyphen-t', 'hyphen-te', 'hyphen-tes', 'hyphen-test']"", ""['h', 'hy', 'hyp', 'hyph', 'hyphe', 'hyphen', 'hyphen-', 'hyphen-t', 'hyphen-te', 'hyphen-tes', 'hyphen-test']"", ""['h', 'hy', 'hyp', 'hyph', 'hyphe', 'hyphen', 'hyphen-', 'hyphen-t', 'hyphen-te', 'hyphen-tes', 'hyphen-test']""]","[""['e', 'en', 'end', 'end!']"", ""['e', 'en', 'end', 'end!']"", ""['e', 'en', 'end', 'end!']"", ""['e', 'en', 'end', 'end!']"", ""['e', 'en', 'end', 'end!']"", ""['e', 'en', 'end', 'end!']""]",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/15,"

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
",string_sequence(0),string_sequence(1),string_sequence(5),string_sequence(10),string_sequence(20),string_sequence(-1),string_sequence(100),string_sequence(2),string_sequence(15),string_sequence(50),"
from typing import List

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
        >>> string_sequence(0)
        '0'
        >>> string_sequence(5)
        '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n + 1)))
","
def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n+1)))
","
from typing import List

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n+1)))
","
from typing import List

def string_sequence(n: int) -> str:
    """""" Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    return ' '.join(map(str, range(n+1)))
","
def string_sequence(n: int) -> str:
    return ' '.join(map(str, range(n + 1)))
","
from typing import List

def string_sequence(n: int) -> str:
    """"""Return a string containing space-delimited numbers starting from 0 upto n inclusive.
    
    Examples:
    >>> string_sequence(0)
    '0'
    >>> string_sequence(5)
    '0 1 2 3 4 5'
    """"""
    numbers: List[int] = list(range(n + 1))
    return ' '.join(map(str, numbers))
",100.0,"['0', '0', '0', '0', '0', '0']","['0 1', '0 1', '0 1', '0 1', '0 1', '0 1']","['0 1 2 3 4 5', '0 1 2 3 4 5', '0 1 2 3 4 5', '0 1 2 3 4 5', '0 1 2 3 4 5', '0 1 2 3 4 5']","['0 1 2 3 4 5 6 7 8 9 10', '0 1 2 3 4 5 6 7 8 9 10', '0 1 2 3 4 5 6 7 8 9 10', '0 1 2 3 4 5 6 7 8 9 10', '0 1 2 3 4 5 6 7 8 9 10', '0 1 2 3 4 5 6 7 8 9 10']","['0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20']","['', '', '', '', '', '']","['0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100']","['0 1 2', '0 1 2', '0 1 2', '0 1 2', '0 1 2', '0 1 2']","['0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15']","['0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50', '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/16,"

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
",count_distinct_characters('abc'),count_distinct_characters('NOPnop'),count_distinct_characters('aA'),count_distinct_characters(''),count_distinct_characters('123321'),count_distinct_characters(' '),count_distinct_characters('123abcABC'),count_distinct_characters('-----'),count_distinct_characters('HelloWorld'),count_distinct_characters('ThisIsATest'),"
from collections import Counter

def count_distinct_characters(string: str) -> int:
    return len(Counter(string.lower()))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    return len(Counter(string.lower()))
","
from collections import Counter


def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))


","
from collections import Counter
import string

def count_distinct_characters(string: str) -> int:
    """"""
    Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
    string = string.lower()
    return len(Counter(c for c in string if c in string.ascii_letters))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    return len(Counter(string.lower()))
","
from collections import Counter

def count_distinct_characters(string: str) -> int:
    """""" Given a string, find out how many distinct characters (regardless of case) does it consist of
    >>> count_distinct_characters('xyzXYZ')
    3
    >>> count_distinct_characters('Jerry')
    4
    """"""
    return len(Counter(string.lower()))
",84.0,"['3', '3', '3', '', '3', '3']","['3', '3', '3', '', '3', '3']","['1', '1', '1', '', '1', '1']","['0', '0', '0', '0', '0', '0']","['3', '3', '3', '', '3', '3']","['1', '1', '1', '', '1', '1']","['6', '6', '6', '', '6', '6']","['1', '1', '1', '', '1', '1']","['7', '7', '7', '', '7', '7']","['6', '6', '6', '', '6', '6']",0.8,0.8,0.8,1.0,0.8,0.8,0.8,0.8,0.8,0.8,82.0
HumanEval/17,"from typing import List


def parse_music(music_string: str) -> List[int]:
    """""" Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return list of integers corresponding to how many beats does each
    not last.

    Here is a legend:
    'o' - whole note, lasts four beats
    'o|' - half note, lasts two beats
    '.|' - quater note, lasts one beat

    >>> parse_music('o o| .| o| o| .| .| .| .| o o')
    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
",parse_music('o o| .| o| o| .| .| .| .| o o'),parse_music(''),parse_music('o'),parse_music('o|'),parse_music('.|'),parse_music('o o o o'),parse_music('o| o| o| o|'),parse_music('.| .| .| .|'),parse_music('o .| o| o o| .|'),parse_music('o|.|o|.|o|.|o|.|'),"
from typing import List

def parse_music(music_string: str) -> List[int]:
    """"""
    Input to this function is a string representing musical notes in a special ASCII format.
    Your task is to parse this string and return a list of integers corresponding to how many beats each note lasts.

    Legend:
    - 'o'  : whole note, lasts four beats
    - 'o|' : half note, lasts two beats
    - '.|' : quarter note, lasts one beat

    Example:
    parse_music('o o| .| o| o| .| .| .| .| o o') -> [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]
    """"""
    beats_map = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.split()
    beats_list = [beats_map[note] for note in notes]
    
    return beats_list
","
from typing import List

def parse_music(music_string: str) -> List[int]:
    notes_mapping = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }
    
    music_notes = music_string.split()
    result = []
    
    for note in music_notes:
        result.append(notes_mapping.get(note))
    
    return result
  ","
from typing import List

def parse_music(music_string: str) -> List[int]:
    duration_map = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }
    
    result = []
    
    for note in music_string.split():
        result.append(duration_map.get(note))
        
    return result
  ","
from typing import List

def parse_music(music_string: str) -> List[int]:
    notes_duration = {'o': 4, 'o|': 2, '.|': 1}
    music_list = music_string.split()
    return [notes_duration[note] for note in music_list]
","
from typing import List


def parse_music(music_string: str) -> List[int]:
    notes_duration = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }
    return [notes_duration[note] for note in music_string.split()]
","
from typing import List

def parse_music(music_string: str) -> List[int]:
    durations = {'o': 4, 'o|': 2, '.|': 1}
    notes = music_string.split()
    return [durations[note] for note in notes]
",100.0,"['[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]', '[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]', '[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]', '[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]', '[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]', '[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[4]', '[4]', '[4]', '[4]', '[4]', '[4]']","['[2]', '[2]', '[2]', '[2]', '[2]', '[2]']","['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']","['[4, 4, 4, 4]', '[4, 4, 4, 4]', '[4, 4, 4, 4]', '[4, 4, 4, 4]', '[4, 4, 4, 4]', '[4, 4, 4, 4]']","['[2, 2, 2, 2]', '[2, 2, 2, 2]', '[2, 2, 2, 2]', '[2, 2, 2, 2]', '[2, 2, 2, 2]', '[2, 2, 2, 2]']","['[1, 1, 1, 1]', '[1, 1, 1, 1]', '[1, 1, 1, 1]', '[1, 1, 1, 1]', '[1, 1, 1, 1]', '[1, 1, 1, 1]']","['[4, 1, 2, 4, 2, 1]', '[4, 1, 2, 4, 2, 1]', '[4, 1, 2, 4, 2, 1]', '[4, 1, 2, 4, 2, 1]', '[4, 1, 2, 4, 2, 1]', '[4, 1, 2, 4, 2, 1]']","['', '[None]', '[None]', '', '', '']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.6,96.0
HumanEval/18,"

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
","how_many_times(""hello"", ""l"")","how_many_times(""banana"", ""na"")","how_many_times(""abcabcabc"", ""abc"")","how_many_times(""mississippi"", ""issi"")","how_many_times(""overlapping"", ""ping"")","how_many_times("""", ""a"")","how_many_times(""test"", """")","how_many_times(""aaaaaa"", ""aaa"")","how_many_times(""how_many_times_how_many"", ""_many"")","how_many_times(""fuzzy_wuzzy_was_a_bear"", ""z"")","
from typing import List

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlapping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
    count = 0
    if not string or not substring:
        return 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            count += 1

    return count
  ","
def how_many_times(string: str, substring: str) -> int:
    count = 0
    if not string or not substring:
        return count
    for i in range(len(string) - len(substring) + 1):
        if string[i:i + len(substring)] == substring:
            count += 1
    return count
","
def how_many_times(string: str, substring: str) -> int:
    import re
    
    if not substring:
        return 0
    
    pattern = f'(?={re.escape(substring)})'
    return len(re.findall(pattern, string))
","
def how_many_times(string: str, substring: str) -> int:
    count = 0
    if not string or not substring:
        return count
    for i in range(len(string) - len(substring)+1):
        if string[i:i+len(substring)] == substring:
            count += 1
    return count
","
from typing import List

def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
    if not string or not substring:
        return 0
    count = 0
    for i in range(len(string)):
        if string[i:i+len(substring)] == substring:
            count += 1
    return count
  ","
def how_many_times(string: str, substring: str) -> int:
    """""" Find how many times a given substring can be found in the original string. Count overlapping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """"""
    
    if not string or not substring:
        return 0
    
    count = 0
    start = 0
    
    while True:
        start = string.find(substring, start) + 1
        
        if start > 0:
            count += 1
        else:
            break
    
    return count
",100.0,"['2', '2', '2', '2', '2', '2']","['2', '2', '2', '2', '2', '2']","['3', '3', '3', '3', '3', '3']","['2', '2', '2', '2', '2', '2']","['1', '1', '1', '1', '1', '1']","['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['4', '4', '4', '4', '4', '4']","['2', '2', '2', '2', '2', '2']","['4', '4', '4', '4', '4', '4']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/19,"from typing import List


def sort_numbers(numbers: str) -> str:
    """""" Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest
    >>> sort_numbers('three one five')
    'one three five'
    """"""
",sort_numbers('five three zero'),sort_numbers('one nine eight seven six five four three two one zero'),sort_numbers(''),sort_numbers('three three three'),sort_numbers('nine eight seven six five four three two one zero'),sort_numbers('zero'),sort_numbers('two five two'),sort_numbers('one seven two nine six'),sort_numbers('eight four two zero'),sort_numbers('two five eight zero one six three four seven nine'),"
from typing import List


def sort_numbers(numbers: str) -> str:
    words_to_nums = {
        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,
        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9
    }
    nums_to_words = {v: k for k, v in words_to_nums.items()}
    
    nums_list = numbers.split()
    sorted_nums = sorted(nums_list, key=lambda x: words_to_nums.get(x))

    return ' '.join(sorted_nums)
","
from typing import List

NUMBERALS = {
    'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,
    'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9
}

def sort_numbers(numbers: str) -> str:
    """"""
    Input is a space-delimited string of numberals from 'zero' to 'nine'.
    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.
    Return the string with numbers sorted from smallest to largest

    >>> sort_numbers('three one five')
    'one three five'
    """"""
    num_list = numbers.split()
    num_list.sort(key=lambda x: NUMBERALS[x])
    return ' '.join(num_list)
","
from typing import List

def sort_numbers(numbers: str) -> str:
    numeral_mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}
    numerals = numbers.split()
    sorted_numerals = sorted(numerals, key=lambda x: numeral_mapping[x])
    return ' '.join(sorted_numerals)
","
from typing import List


def sort_numbers(numbers: str) -> str:
    num_mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,
                   'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}
    words = numbers.split()
    sorted_words = sorted(words, key=lambda x: num_mapping[x])
    return ' '.join(sorted_words)
","
from typing import List

def sort_numbers(numbers: str) -> str:
    num_dict = {
        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,
        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9
    }
    num_list = numbers.split()
    num_list.sort(key=lambda x: num_dict[x])
    return ' '.join(num_list)
","
from typing import List

def sort_numbers(numbers: str) -> str:
    number_mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}
    sorted_numbers = sorted(numbers.split(), key=lambda x: number_mapping[x])
    return ' '.join(sorted_numbers)
",100.0,"['zero three five', 'zero three five', 'zero three five', 'zero three five', 'zero three five', 'zero three five']","['zero one one two three four five six seven eight nine', 'zero one one two three four five six seven eight nine', 'zero one one two three four five six seven eight nine', 'zero one one two three four five six seven eight nine', 'zero one one two three four five six seven eight nine', 'zero one one two three four five six seven eight nine']","['', '', '', '', '', '']","['three three three', 'three three three', 'three three three', 'three three three', 'three three three', 'three three three']","['zero one two three four five six seven eight nine', 'zero one two three four five six seven eight nine', 'zero one two three four five six seven eight nine', 'zero one two three four five six seven eight nine', 'zero one two three four five six seven eight nine', 'zero one two three four five six seven eight nine']","['zero', 'zero', 'zero', 'zero', 'zero', 'zero']","['two two five', 'two two five', 'two two five', 'two two five', 'two two five', 'two two five']","['one two six seven nine', 'one two six seven nine', 'one two six seven nine', 'one two six seven nine', 'one two six seven nine', 'one two six seven nine']","['zero two four eight', 'zero two four eight', 'zero two four eight', 'zero two four eight', 'zero two four eight', 'zero two four eight']","['zero one two three four five six seven eight nine', 'zero one two three four five six seven eight nine', 'zero one two three four five six seven eight nine', 'zero one two three four five six seven eight nine', 'zero one two three four five six seven eight nine', 'zero one two three four five six seven eight nine']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/20,"from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
","find_closest_elements([1.0, 3.0, 1.1, 4.5])","find_closest_elements([5.0, 5.0001])","find_closest_elements([100.0, 300.0, 400.0, 500.25, 300.01])","find_closest_elements([-1.0, 1.0, -1.1])","find_closest_elements([1.234, 1.234])","find_closest_elements([0.0001, 0.0002, 0.0003])","find_closest_elements([9.9, 10.1, 10.01])","find_closest_elements([50.5, 50.55, 51.0])","find_closest_elements([-100.25, -100.20])","find_closest_elements([10.001, 10.002, 10.003])","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
    numbers.sort()
    min_diff = min(numbers[i+1] - numbers[i] for i in range(len(numbers) - 1))
    closest_pair = [(numbers[i], numbers[i+1]) for i in range(len(numbers) - 1) if numbers[i+1]-numbers[i] == min_diff]
    return closest_pair[0]
","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
    
    numbers.sort()
    min_diff = numbers[1] - numbers[0]
    pair = (numbers[0], numbers[1])

    for i in range(1, len(numbers) - 1):
        diff = numbers[i + 1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            pair = (numbers[i], numbers[i + 1])

    return pair
","
from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """""" From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
    numbers.sort()
    min_diff = float('inf')
    closest_pair = None
    for i in range(len(numbers) - 1):
        diff = numbers[i + 1] - numbers[i]
        if diff < min_diff:
            min_diff = diff
            closest_pair = (numbers[i], numbers[i + 1])
    return closest_pair
","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    """"""From a supplied list of numbers (of length at least two) select and return two that are the closest to each
    other and return them in order (smaller number, larger number).

    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])
    (2.0, 2.2)
    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])
    (2.0, 2.0)
    """"""
    numbers.sort()
    min_diff = float('inf')
    res = (0, 0)
    for i in range(1, len(numbers)):
        diff = numbers[i] - numbers[i-1]
        if diff < min_diff:
            min_diff = diff
            res = (numbers[i-1], numbers[i])
    return res
  ","
from typing import List, Tuple


def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    return min((x, y) for x in numbers for y in numbers if x != y, key=lambda pair: abs(pair[0] - pair[1]))
","
from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    closest_pair = ()
    min_dist = float('inf')
    
    for i in range(len(numbers) - 1):
        for j in range(i+1, len(numbers)):
            dist = abs(numbers[i] - numbers[j])
            if dist < min_dist:
                min_dist = dist
                closest_pair = (numbers[i], numbers[j])
    
    return closest_pair
  ",76.0,"['(1.0, 1.1)', '(1.0, 1.1)', '(1.0, 1.1)', '(1.0, 1.1)', '', '(1.0, 1.1)']","['(5.0, 5.0001)', '(5.0, 5.0001)', '(5.0, 5.0001)', '(5.0, 5.0001)', '', '(5.0, 5.0001)']","['(300.0, 300.01)', '(300.0, 300.01)', '(300.0, 300.01)', '(300.0, 300.01)', '', '(300.0, 300.01)']","['(-1.1, -1.0)', '(-1.1, -1.0)', '(-1.1, -1.0)', '(-1.1, -1.0)', '', '(-1.0, -1.1)']","['(1.234, 1.234)', '(1.234, 1.234)', '(1.234, 1.234)', '(1.234, 1.234)', '', '(1.234, 1.234)']","['(0.0002, 0.0003)', '(0.0002, 0.0003)', '(0.0002, 0.0003)', '(0.0002, 0.0003)', '', '(0.0002, 0.0003)']","['(10.01, 10.1)', '(10.01, 10.1)', '(10.01, 10.1)', '(10.01, 10.1)', '', '(10.1, 10.01)']","['(50.5, 50.55)', '(50.5, 50.55)', '(50.5, 50.55)', '(50.5, 50.55)', '', '(50.5, 50.55)']","['(-100.25, -100.2)', '(-100.25, -100.2)', '(-100.25, -100.2)', '(-100.25, -100.2)', '', '(-100.25, -100.2)']","['(10.002, 10.003)', '(10.002, 10.003)', '(10.002, 10.003)', '(10.002, 10.003)', '', '(10.002, 10.003)']",0.8,0.8,0.8,0.6,0.8,0.8,0.6,0.8,0.8,0.8,76.0
HumanEval/21,"from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    """""" Given list of numbers (of at least two elements), apply a linear transform to that list,
    such that the smallest number will become 0 and the largest will become 1
    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])
    [0.0, 0.25, 0.5, 0.75, 1.0]
    """"""
","rescale_to_unit([1.0, 2.0, 5.0])","rescale_to_unit([5.0, 5.0, 5.0, 5.0])","rescale_to_unit([0.0, 1.0, 2.0, 3.0])","rescale_to_unit([-10.0, 0.0, 10.0, 20.0])","rescale_to_unit([-1.0, -0.5, 0.0, 0.5, 1.0])","rescale_to_unit([100.0, 200.0, 300.0, 400.0, 500.0])","rescale_to_unit([2.2, 2.2, 3.3, 5.5])","rescale_to_unit([99.5, 100.0])","rescale_to_unit([0.1, 0.1, 0.1, 0.5])","rescale_to_unit([-5.5, -4.4, -3.3, -2.2, -1.1])","
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]: 
    min_num = min(numbers)
    max_num = max(numbers)
    if min_num == max_num:
        return [0.0] * len(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]
","
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    if min_num == max_num:
        return [0.0] * len(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]
","
from typing import List


def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    range_values = max_num - min_num
    return [(num - min_num) / range_values for num in numbers]
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    range_num = max_num - min_num
    return [(num - min_num) / range_num for num in numbers]
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    if min_num == max_num:
        return [0.0] * len(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]
","
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    range_nums = max_num - min_num
    if range_nums == 0:
        return [0.0] * len(numbers)
    return [(num - min_num) / range_nums for num in numbers]
",100.0,"['[0.0, 0.25, 1.0]', '[0.0, 0.25, 1.0]', '[0.0, 0.25, 1.0]', '[0.0, 0.25, 1.0]', '[0.0, 0.25, 1.0]', '[0.0, 0.25, 1.0]']","['[0.0, 0.0, 0.0, 0.0]', '[0.0, 0.0, 0.0, 0.0]', '', '', '[0.0, 0.0, 0.0, 0.0]', '[0.0, 0.0, 0.0, 0.0]']","['[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]', '[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]', '[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]', '[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]', '[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]', '[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]']","['[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]', '[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]', '[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]', '[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]', '[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]', '[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]']","['[0.0, 0.25, 0.5, 0.75, 1.0]', '[0.0, 0.25, 0.5, 0.75, 1.0]', '[0.0, 0.25, 0.5, 0.75, 1.0]', '[0.0, 0.25, 0.5, 0.75, 1.0]', '[0.0, 0.25, 0.5, 0.75, 1.0]', '[0.0, 0.25, 0.5, 0.75, 1.0]']","['[0.0, 0.25, 0.5, 0.75, 1.0]', '[0.0, 0.25, 0.5, 0.75, 1.0]', '[0.0, 0.25, 0.5, 0.75, 1.0]', '[0.0, 0.25, 0.5, 0.75, 1.0]', '[0.0, 0.25, 0.5, 0.75, 1.0]', '[0.0, 0.25, 0.5, 0.75, 1.0]']","['[0.0, 0.0, 0.33333333333333326, 1.0]', '[0.0, 0.0, 0.33333333333333326, 1.0]', '[0.0, 0.0, 0.33333333333333326, 1.0]', '[0.0, 0.0, 0.33333333333333326, 1.0]', '[0.0, 0.0, 0.33333333333333326, 1.0]', '[0.0, 0.0, 0.33333333333333326, 1.0]']","['[0.0, 1.0]', '[0.0, 1.0]', '[0.0, 1.0]', '[0.0, 1.0]', '[0.0, 1.0]', '[0.0, 1.0]']","['[0.0, 0.0, 0.0, 1.0]', '[0.0, 0.0, 0.0, 1.0]', '[0.0, 0.0, 0.0, 1.0]', '[0.0, 0.0, 0.0, 1.0]', '[0.0, 0.0, 0.0, 1.0]', '[0.0, 0.0, 0.0, 1.0]']","['[0.0, 0.2499999999999999, 0.5, 0.7499999999999999, 1.0]', '[0.0, 0.2499999999999999, 0.5, 0.7499999999999999, 1.0]', '[0.0, 0.2499999999999999, 0.5, 0.7499999999999999, 1.0]', '[0.0, 0.2499999999999999, 0.5, 0.7499999999999999, 1.0]', '[0.0, 0.2499999999999999, 0.5, 0.7499999999999999, 1.0]', '[0.0, 0.2499999999999999, 0.5, 0.7499999999999999, 1.0]']",1.0,0.6,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,96.0
HumanEval/22,"from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
","filter_integers([10, 20, 30])",filter_integers([]),"filter_integers(['a', 'b', 'c'])","filter_integers([1.5, 2.5, 3.1])","filter_integers(['a', 3.14, 5])","filter_integers([None, True, False, 0, 100])","filter_integers([1, 2, 3, 'abc', {}, []])","filter_integers(['1000', 1000, 3.1415])","filter_integers([-1, -2, -3])","filter_integers([""string"", None, [], {}, 45.0, 60])","
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
","
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
   """""" Filter given list of any python values only for integers
    >>> filter_integers(['a', 3.14, 5])
    [5]
    >>> filter_integers([1, 2, 3, 'abc', {}, []])
    [1, 2, 3]
    """"""
   return [val for val in values if isinstance(val, int)]
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [x for x in values if isinstance(x, int)]
","
from typing import List, Any

def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
","
from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]
",100.0,"['[10, 20, 30]', '[10, 20, 30]', '[10, 20, 30]', '[10, 20, 30]', '[10, 20, 30]', '[10, 20, 30]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[5]', '[5]', '[5]', '[5]', '[5]', '[5]']","['[True, False, 0, 100]', '[True, False, 0, 100]', '[True, False, 0, 100]', '[True, False, 0, 100]', '[True, False, 0, 100]', '[True, False, 0, 100]']","['[1, 2, 3]', '[1, 2, 3]', '[1, 2, 3]', '[1, 2, 3]', '[1, 2, 3]', '[1, 2, 3]']","['[1000]', '[1000]', '[1000]', '[1000]', '[1000]', '[1000]']","['[-1, -2, -3]', '[-1, -2, -3]', '[-1, -2, -3]', '[-1, -2, -3]', '[-1, -2, -3]', '[-1, -2, -3]']","['[60]', '[60]', '[60]', '[60]', '[60]', '[60]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/23,"

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
",strlen(''),strlen('abc'),strlen('1234567890'),strlen(' '),strlen('a'),strlen('ComplexStringWith1Number_ and symbols!'),strlen('newline\nnewline'),strlen('Very long string ' * 100),strlen('😊'),strlen('tabs\ttabs\t'),"
from typing import List

def strlen(string: str) -> int:
    return len(string)
","
from typing import List

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
  ","
from typing import List

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
","
from typing import Tuple

def strlen(string: str) -> int:
    return len(string)
","
from typing import List

def strlen(string: str) -> int:
    """""" Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """"""
    return len(string)
","
from typing import List

def strlen(string: str) -> int:
    return len(string)
",100.0,"['0', '0', '0', '0', '0', '0']","['3', '3', '3', '3', '3', '3']","['10', '10', '10', '10', '10', '10']","['1', '1', '1', '1', '1', '1']","['1', '1', '1', '1', '1', '1']","['38', '38', '38', '38', '38', '38']","['15', '15', '15', '15', '15', '15']","['1700', '1700', '1700', '1700', '1700', '1700']","['1', '1', '1', '1', '1', '1']","['10', '10', '10', '10', '10', '10']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/24,"

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
",largest_divisor(10),largest_divisor(17),largest_divisor(2),largest_divisor(100),largest_divisor(1),largest_divisor(33),largest_divisor(64),largest_divisor(121),largest_divisor(59),largest_divisor(96),"
from typing import List

def largest_divisor(n: int) -> int:
    """"""
    For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    divisors = [i for i in range(1, n) if n % i == 0]
    return max(divisors)
","
from typing import List

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    
    for i in range(n-1, 0, -1):
        if n % i == 0:
            return i
","
import math

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    largest = 1
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            largest = i
    return largest
","
import math

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    for i in range(math.isqrt(n), 1, -1):
        if n % i == 0:
            return i
","
from math import sqrt

def largest_divisor(n: int) -> int:
    """""" For a given number n, find the largest number that divides n evenly, smaller than n
    >>> largest_divisor(15)
    5
    """"""
    largest = 1
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            largest = max(largest, i, n // i)
    
    return largest
","
from typing import List

def largest_divisor(n: int) -> int:
    factors = [i for i in range(1, n) if n % i == 0]
    return max(factors)
",76.0,"['5', '5', '2', '2', '5', '5']","['1', '1', '1', 'None', '1', '1']","['1', '1', '1', 'None', '1', '1']","['50', '50', '10', '10', '50', '50']","['', 'None', '1', 'None', '1', '']","['11', '11', '3', '3', '11', '11']","['32', '32', '8', '8', '32', '32']","['11', '11', '11', '11', '11', '11']","['1', '1', '1', 'None', '1', '1']","['48', '48', '8', '8', '48', '48']",0.6,0.8,0.8,0.6,0.2,0.6,0.6,1.0,0.8,0.6,65.99999999999999
HumanEval/25,"from typing import List


def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
",factorize(1),factorize(2),factorize(13),factorize(100),factorize(45),factorize(128),factorize(132),factorize(999),factorize(1024),factorize(7919),"
from typing import List


def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","
from typing import List

def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
    factors = []
    divisor = 2
    while n > 1:
        if n % divisor == 0:
            factors.append(divisor)
            n //= divisor
        else:
            divisor += 1
    return factors
","
from typing import List

def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","
from typing import List


def factorize(n: int) -> List[int]:
    """""" Return list of prime factors of given integer in the order from smallest to largest.
    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.
    Input number should be equal to the product of all factors
    >>> factorize(8)
    [2, 2, 2]
    >>> factorize(25)
    [5, 5]
    >>> factorize(70)
    [2, 5, 7]
    """"""
","
from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while n > 1:
        if n % divisor == 0:
            factors.append(divisor)
            n = n // divisor
        else:
            divisor += 1
    return factors
","
from typing import List


def factorize(n: int) -> List[int]:
    factors = []
    divisor = 2
    while n > 1:
        if n % divisor == 0:
            factors.append(divisor)
            n = n // divisor
        else:
            divisor += 1
    return factors
",60.0,"['None', '[]', 'None', 'None', '[]', '[]']","['None', '[2]', 'None', 'None', '[2]', '[2]']","['None', '[13]', 'None', 'None', '[13]', '[13]']","['None', '[2, 2, 5, 5]', 'None', 'None', '[2, 2, 5, 5]', '[2, 2, 5, 5]']","['None', '[3, 3, 5]', 'None', 'None', '[3, 3, 5]', '[3, 3, 5]']","['None', '[2, 2, 2, 2, 2, 2, 2]', 'None', 'None', '[2, 2, 2, 2, 2, 2, 2]', '[2, 2, 2, 2, 2, 2, 2]']","['None', '[2, 2, 3, 11]', 'None', 'None', '[2, 2, 3, 11]', '[2, 2, 3, 11]']","['None', '[3, 3, 3, 37]', 'None', 'None', '[3, 3, 3, 37]', '[3, 3, 3, 37]']","['None', '[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]', 'None', 'None', '[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]', '[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]']","['None', '[7919]', 'None', 'None', '[7919]', '[7919]']",0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,40.0
HumanEval/26,"from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
","remove_duplicates([1, 2, 3, 2, 4])","remove_duplicates([1, 1, 1, 1, 1])",remove_duplicates([]),"remove_duplicates([10, 20, 10, 30, 20, 40, 50, 50])",remove_duplicates([1]),"remove_duplicates([5, 5, 6, 7, 6, 7, 8])","remove_duplicates([2, 3, 4, 5, 6, 7])","remove_duplicates([-1, -3, -1, -5, -3])","remove_duplicates([0, 1, 0, 1, 0, 1])","remove_duplicates([10, 90, 10, -30, -30, 100])","
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    return [num for num in numbers if numbers.count(num) == 1]
","
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    return [num for num in numbers if numbers.count(num) == 1]
","
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    return list(dict.fromkeys(numbers))
","
from typing import List


def remove_duplicates(numbers: List[int]) -> List[int]:
    seen = set()
    return [num for num in numbers if num not in seen and not seen.add(num)]
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    """""" From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""
    return [num for idx, num in enumerate(numbers) if numbers.index(num) == idx]
","
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    """"""
    From a list of integers, remove all elements that occur more than once.
    Keep order of elements left the same as in the input.
    
    >>> remove_duplicates([1, 2, 3, 2, 4])
    [1, 3, 4]
    """"""

    return [num for num in numbers if numbers.count(num)==1]
",80.0,"['[1, 3, 4]', '[1, 3, 4]', '[1, 2, 3, 4]', '[1, 2, 3, 4]', '[1, 2, 3, 4]', '[1, 3, 4]']","['[]', '[]', '[1]', '[1]', '[1]', '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[30, 40]', '[30, 40]', '[10, 20, 30, 40, 50]', '[10, 20, 30, 40, 50]', '[10, 20, 30, 40, 50]', '[30, 40]']","['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']","['[8]', '[8]', '[5, 6, 7, 8]', '[5, 6, 7, 8]', '[5, 6, 7, 8]', '[8]']","['[2, 3, 4, 5, 6, 7]', '[2, 3, 4, 5, 6, 7]', '[2, 3, 4, 5, 6, 7]', '[2, 3, 4, 5, 6, 7]', '[2, 3, 4, 5, 6, 7]', '[2, 3, 4, 5, 6, 7]']","['[-5]', '[-5]', '[-1, -3, -5]', '[-1, -3, -5]', '[-1, -3, -5]', '[-5]']","['[]', '[]', '[0, 1]', '[0, 1]', '[0, 1]', '[]']","['[90, 100]', '[90, 100]', '[10, 90, -30, 100]', '[10, 90, -30, 100]', '[10, 90, -30, 100]', '[90, 100]']",0.4,0.4,1.0,0.4,1.0,0.4,1.0,0.4,0.4,0.4,58.00000000000001
HumanEval/27,"

def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
",flip_case('Hello'),flip_case('TEST'),flip_case('test'),flip_case('Python 3.8'),flip_case(''),flip_case('123'),flip_case('123abcABC'),flip_case('MULTI line\nString HERE'),flip_case('THIS is a MIXEd case SENTENCE.'),flip_case('special@#&$*chars'),"
def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    
    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])

","
def flip_case(string: str) -> str:
    """"""For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])
","
def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])

import string
","
def flip_case(string: str) -> str:
    """"""
    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    
    >>> flip_case('Hello')
    'hELLO'
    """"""

    return string.swapcase()
","
def flip_case(string: str) -> str:
    """""" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    >>> flip_case('Hello')
    'hELLO'
    """"""
    result = ''.join([char.lower() if char.isupper() else char.upper() for char in string])
    return result

","
def flip_case(string: str) -> str:
    """"""
    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.
    
    >>> flip_case('Hello')
    'hELLO'
    """"""
    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])
",100.0,"['hELLO', 'hELLO', 'hELLO', 'hELLO', 'hELLO', 'hELLO']","['test', 'test', 'test', 'test', 'test', 'test']","['TEST', 'TEST', 'TEST', 'TEST', 'TEST', 'TEST']","['pYTHON 3.8', 'pYTHON 3.8', 'pYTHON 3.8', 'pYTHON 3.8', 'pYTHON 3.8', 'pYTHON 3.8']","['', '', '', '', '', '']","['123', '123', '123', '123', '123', '123']","['123ABCabc', '123ABCabc', '123ABCabc', '123ABCabc', '123ABCabc', '123ABCabc']","['multi LINE\r\nsTRING here', 'multi LINE\r\nsTRING here', 'multi LINE\r\nsTRING here', 'multi LINE\r\nsTRING here', 'multi LINE\r\nsTRING here', 'multi LINE\r\nsTRING here']","['this IS A mixeD CASE sentence.', 'this IS A mixeD CASE sentence.', 'this IS A mixeD CASE sentence.', 'this IS A mixeD CASE sentence.', 'this IS A mixeD CASE sentence.', 'this IS A mixeD CASE sentence.']","['SPECIAL@#&$*CHARS', 'SPECIAL@#&$*CHARS', 'SPECIAL@#&$*CHARS', 'SPECIAL@#&$*CHARS', 'SPECIAL@#&$*CHARS', 'SPECIAL@#&$*CHARS']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/28,"from typing import List


def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
",concatenate([]),"concatenate(['Hello', 'World'])","concatenate(['a', 'b', 'c', 'd', 'e', 'f', 'g'])","concatenate(['123', '456', '789'])","concatenate(['', '', ''])","concatenate([' ', ' ', ' '])",concatenate(['single']),"concatenate(['multiple', '', 'words', 'including', 'empty'])","concatenate([special_chars, !@#$, ^&*()'])","concatenate(['new\nline', 'characters\nin', 'the\tlist'])","
from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    """""" Concatenate list of strings into a single string
    >>> concatenate([])
    ''
    >>> concatenate(['a', 'b', 'c'])
    'abc'
    """"""
    return ''.join(strings)
  ","
from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
","
from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)
  ",100.0,"['', '', '', '', '', '']","['HelloWorld', 'HelloWorld', 'HelloWorld', 'HelloWorld', 'HelloWorld', 'HelloWorld']","['abcdefg', 'abcdefg', 'abcdefg', 'abcdefg', 'abcdefg', 'abcdefg']","['123456789', '123456789', '123456789', '123456789', '123456789', '123456789']","['', '', '', '', '', '']","['', '', '', '', '', '']","['single', 'single', 'single', 'single', 'single', 'single']","['multiplewordsincludingempty', 'multiplewordsincludingempty', 'multiplewordsincludingempty', 'multiplewordsincludingempty', 'multiplewordsincludingempty', 'multiplewordsincludingempty']","['', '', '', '', '', '']","['new\r\nlinecharacters\r\ninthe\tlist', 'new\r\nlinecharacters\r\ninthe\tlist', 'new\r\nlinecharacters\r\ninthe\tlist', 'new\r\nlinecharacters\r\ninthe\tlist', 'new\r\nlinecharacters\r\ninthe\tlist', 'new\r\nlinecharacters\r\ninthe\tlist']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/29,"from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
","filter_by_prefix(['apple', 'orange', 'apricot'], 'a')","filter_by_prefix(['hello', 'high', 'harmony', 'bare'], 'he')","filter_by_prefix([], '')","filter_by_prefix(['test', 'tent', 'testing', 'tester'], 'test')","filter_by_prefix(['under', 'over', 'inside', 'outside'], 'ov')","filter_by_prefix(['five', 'six', 'seven', 'fifty'], 'fi')","filter_by_prefix(['1234', '2345', '3456'], '12')","filter_by_prefix(['space', 'spacer', 'spatial'], 'space')","filter_by_prefix(['empty', 'ellipsis', 'emblem'], 'em')","filter_by_prefix(['apple', 'Orange', 'banana'], 'A')","
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]
","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]
","
from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]
","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]
","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    """""" Filter an input list of strings only for ones that start with a given prefix.
    >>> filter_by_prefix([], 'a')
    []
    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')
    ['abc', 'array']
    """"""
    return [s for s in strings if s.startswith(prefix)]
","
from typing import List

def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    filtered_strings = [s for s in strings if s.startswith(prefix)]
    return filtered_strings
",100.0,"[""['apple', 'apricot']"", ""['apple', 'apricot']"", ""['apple', 'apricot']"", ""['apple', 'apricot']"", ""['apple', 'apricot']"", ""['apple', 'apricot']""]","[""['hello']"", ""['hello']"", ""['hello']"", ""['hello']"", ""['hello']"", ""['hello']""]","['[]', '[]', '[]', '[]', '[]', '[]']","[""['test', 'testing', 'tester']"", ""['test', 'testing', 'tester']"", ""['test', 'testing', 'tester']"", ""['test', 'testing', 'tester']"", ""['test', 'testing', 'tester']"", ""['test', 'testing', 'tester']""]","[""['over']"", ""['over']"", ""['over']"", ""['over']"", ""['over']"", ""['over']""]","[""['five', 'fifty']"", ""['five', 'fifty']"", ""['five', 'fifty']"", ""['five', 'fifty']"", ""['five', 'fifty']"", ""['five', 'fifty']""]","[""['1234']"", ""['1234']"", ""['1234']"", ""['1234']"", ""['1234']"", ""['1234']""]","[""['space', 'spacer']"", ""['space', 'spacer']"", ""['space', 'spacer']"", ""['space', 'spacer']"", ""['space', 'spacer']"", ""['space', 'spacer']""]","[""['empty', 'emblem']"", ""['empty', 'emblem']"", ""['empty', 'emblem']"", ""['empty', 'emblem']"", ""['empty', 'emblem']"", ""['empty', 'emblem']""]","['[]', '[]', '[]', '[]', '[]', '[]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/30,"

def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
","get_positive([-1, 2, -4, 5, 6])","get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])",get_positive([]),"get_positive([-1, -2, -3])","get_positive([1, 2, 3, 4, 5])",get_positive([0]),"get_positive([0, -1, 1])","get_positive([-100, 100, -200, 200])",get_positive([1]),"get_positive([-50, 0, 50, -100, 100])","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
def get_positive(l: list):
    """"""Return only positive numbers in the list.
    >>> get_positive([-1, 2, -4, 5, 6])
    [2, 5, 6]
    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    [5, 3, 2, 3, 9, 123, 1]
    """"""
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
","
from typing import List

def get_positive(l: List[int]) -> List[int]:
    return [num for num in l if num > 0]
",100.0,"['[2, 5, 6]', '[2, 5, 6]', '[2, 5, 6]', '[2, 5, 6]', '[2, 5, 6]', '[2, 5, 6]']","['[5, 3, 2, 3, 9, 123, 1]', '[5, 3, 2, 3, 9, 123, 1]', '[5, 3, 2, 3, 9, 123, 1]', '[5, 3, 2, 3, 9, 123, 1]', '[5, 3, 2, 3, 9, 123, 1]', '[5, 3, 2, 3, 9, 123, 1]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[1, 2, 3, 4, 5]', '[1, 2, 3, 4, 5]', '[1, 2, 3, 4, 5]', '[1, 2, 3, 4, 5]', '[1, 2, 3, 4, 5]', '[1, 2, 3, 4, 5]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']","['[100, 200]', '[100, 200]', '[100, 200]', '[100, 200]', '[100, 200]', '[100, 200]']","['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']","['[50, 100]', '[50, 100]', '[50, 100]', '[50, 100]', '[50, 100]', '[50, 100]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/31,"

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.
    >>> is_prime(6)
    False
    >>> is_prime(101)
    True
    >>> is_prime(11)
    True
    >>> is_prime(13441)
    True
    >>> is_prime(61)
    True
    >>> is_prime(4)
    False
    >>> is_prime(1)
    False
    """"""
",is_prime(1),is_prime(2),is_prime(3),is_prime(10),is_prime(29),is_prime(49),is_prime(101),is_prime(99991),is_prime(0),is_prime(-17),"
from math import sqrt

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.""""""
    
    if n <= 1:
        return False
    
    if n <= 3:
        return True
    
    if n % 2 == 0 or n % 3 == 0:
        return False
    
    i = 5
    
    while i*i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    
    return True
","
import math

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.""""""
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
","
import math

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.""""""
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
","
def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.""""""
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True
","
import math

def is_prime(n):
    """"""Return true if a given number is prime, and false otherwise.""""""
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    max_divisor = math.isqrt(n) + 1
    for i in range(3, max_divisor, 2):
        if n % i == 0:
            return False
    return True
  ",100.0,"['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/32,"import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","find_zero([1, 2])","find_zero([-6, 11, -6, 1])","find_zero([1, -1, 1, -1]),  # f(x) = 1 - x + x^2 - x^3","find_zero([1, 0, 1]),  # f(x) = 1 + 0x + x^2","find_zero([0, 1, 0, 1]),  # f(x) = 0 + x + 0x^2 + x^3","find_zero([100, -200, 100]),  # f(x) = 100 - 200x + 100x^2","find_zero([3, -2, 0, 1]),  # f(x) = 3 - 2x + x^3","find_zero([10, 0, -10, 0, 1]),  # f(x) = 10 - 10x^2 + x^4","find_zero([-1, 1]),  # f(x) = -1 + x","find_zero([-20, 5, -1, 1])  # f(x) = -20 + 5x - x^2 + x^3","
import math

def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    return next(round(x, 6) for x in xs if poly(x) == 0)
","
import math

def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    if len(xs) % 2 != 0:
        raise ValueError(""Expected even number of coefficients in the polynomial."")
    
    max_non_zero = max([abs(coeff) for coeff in xs if coeff != 0])
    
    if max_non_zero == 0:
        raise ValueError(""No non-zero coefficient found in the polynomial."")
    
    roots = []
    for i in range(len(xs)-1):
        if xs[i] == 0:
            continue
        x = -xs[i] / xs[i+1]
        if poly(xs, x) == 0:
            roots.append(x)
    
    if not roots:
        raise ValueError(""No zero found based on the criteria."")
    
    return roots[0]
  ","
import math

def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    return -1 * (xs[1] / xs[0])  if len(xs) == 2 else None if xs[0] == 0 else 1.0
","
import math


def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    return max([
        round(x, 7) for x in numpy.roots(xs)
        if isinstance(x, complex) == False and round(x.imag, 7) == 0
    ], default=None)
","
import math


def poly(xs: list, x: float):
    """"""
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """"""
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])


def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only one zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non-zero coefficient as it guarantees a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
","
import math

def poly(xs: list, x: float):
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    return next(x for x in range(-1000, 1000) if poly(xs, x) == 0)
",34.2,"['', '-0.5', '-2.0', '', 'None', '']","['', '', '1.0', '', 'None', '1']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']",0.4,0.4,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,88.00000000000001
HumanEval/33,"

def sort_third(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal
    to the values of the corresponding indicies of l, but sorted.
    >>> sort_third([1, 2, 3])
    [1, 2, 3]
    >>> sort_third([5, 6, 3, 4, 8, 9, 2])
    [2, 6, 3, 4, 8, 9, 5]
    """"""
","sort_third([4, 3, 2])","sort_third([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",sort_third([]),sort_third([7]),"sort_third([5, 6, 3, 4, 8, 9, 2])","sort_third([3, 2, 1, 6, 5, 4, 9, 8, 7])","sort_third([1, 1, 1, 1, 1, 1, 1, 1, 1, 1])","sort_third([-3, -6, -9, -1, -4, -7, -10, -2, -8, -1, -3])","sort_third([7, 5, 3, 1, 9, 6, 5, 4, 3, 2, 1, 1])","sort_third([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]
    sorted_values = [l[i] for i in sorted_indices]
    sorted_values.sort()
    
    sorted_list = l.copy()
    for i, v in zip(sorted_indices, sorted_values):
        sorted_list[i] = v
    
    return sorted_list
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    indices_divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]
    sorted_values = [l[idx] for idx in indices_divisible_by_three]
    sorted_values.sort()

    sorted_list = l.copy()
    for i, val in zip(indices_divisible_by_three, sorted_values):
        sorted_list[i] = val

    return sorted_list
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    return [sorted(l[i:i+3]) for i in range(0, len(l), 3)] + l[len(l) - len(l) % 3:]
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    sorted_indices = sorted(filter(lambda i: i % 3 == 0, range(len(l)), key=lambda i: l[i]))
    result = l.copy()
    for i in sorted_indices:
        result[i] = l[i]
    return result
","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    return [v if i % 3 != 0 else sorted(l[i::3])[j//3] for i, v in enumerate(l)]
  ","
from typing import List

def sort_third(l: List[int]) -> List[int]:
    return [v if i % 3 != 0 else sorted(l[i:i+3])[j] for i, v in enumerate(l) for j in range(3) if i % 3 == 0 or j != 0]
      ",31.428571428571423,"['[4, 3, 2]', '[4, 3, 2]', '[[2, 3, 4]]', '', '', '[2, 3, 4, 3, 3, 2, 2]']","['[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]', '[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]', '[[0, 1, 2], [3, 4, 5], [6, 7, 8], [9], 9]', '', '', '']","['[]', '[]', '[]', '', '[]', '[]']","['[7]', '[7]', '[[7], 7]', '', '', '']","['[2, 6, 3, 4, 8, 9, 5]', '[2, 6, 3, 4, 8, 9, 5]', '[[3, 5, 6], [4, 8, 9], [2], 2]', '', '', '']","['[3, 2, 1, 6, 5, 4, 9, 8, 7]', '[3, 2, 1, 6, 5, 4, 9, 8, 7]', '[[1, 2, 3], [4, 5, 6], [7, 8, 9]]', '', '', '[1, 2, 3, 2, 2, 1, 1, 4, 5, 6, 5, 5, 4, 4, 7, 8, 9, 8, 8, 7, 7]']","['[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]', '[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]', '[[1, 1, 1], [1, 1, 1], [1, 1, 1], [1], 1]', '', '', '']","['[-10, -6, -9, -3, -4, -7, -1, -2, -8, -1, -3]', '[-10, -6, -9, -3, -4, -7, -1, -2, -8, -1, -3]', '[[-9, -6, -3], [-7, -4, -1], [-10, -8, -2], [-3, -1], -1, -3]', '', '', '']","['[1, 5, 3, 2, 9, 6, 5, 4, 3, 7, 1, 1]', '[1, 5, 3, 2, 9, 6, 5, 4, 3, 7, 1, 1]', '[[3, 5, 7], [1, 6, 9], [3, 4, 5], [1, 1, 2]]', '', '', '[3, 5, 7, 5, 5, 3, 3, 1, 6, 9, 9, 9, 6, 6, 3, 4, 5, 4, 4, 3, 3, 1, 1, 2, 1, 1, 1, 1]']","['[1, 9, 8, 4, 6, 5, 7, 3, 2, 10]', '[1, 9, 8, 4, 6, 5, 7, 3, 2, 10]', '[[8, 9, 10], [5, 6, 7], [2, 3, 4], [1], 1]', '', '', '']",0.2,0.2,0.8,0.2,0.2,0.2,0.2,0.2,0.2,0.2,26.000000000000007
HumanEval/34,"

def unique(l: list):
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
","unique([1, 2, 3, 4, 5])","unique([10, 10, 10, 10, 10])",unique([]),"unique([5, 5, 5, 5, 2, 2, 2, 2])",unique([0]),"unique([-1, -1, -2, -2, -3, -3])","unique([0, -1, 1, -1, 0, 1])","unique([9, 9, 0, -9, 1, 9, -9])","unique([100, -200, 300, -400, 500])","unique([2.5, 3.5, 2.5, 7.0, 3.5, 7.0])","
from typing import List

def unique(l: List[int]) -> List[int]:
    """"""Return sorted unique elements in a list""""""
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List[int]) -> List[int]:
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    return sorted(set(l))
","
from typing import List

def unique(l: List[int]) -> List[int]:
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List[int]):
    return sorted(list(set(l)))
","
from typing import List

def unique(l: List[int]) -> List[int]:
    """"""Return sorted unique elements in a list
    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    return sorted(list(set(l)))
  ","
from typing import List

def unique(l: List[int]) -> List[int]:
    """"""
    Return sorted unique elements in a list

    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [0, 2, 3, 5, 9, 123]
    """"""
    return sorted(list(set(l)))
",100.0,"['[1, 2, 3, 4, 5]', '[1, 2, 3, 4, 5]', '[1, 2, 3, 4, 5]', '[1, 2, 3, 4, 5]', '[1, 2, 3, 4, 5]', '[1, 2, 3, 4, 5]']","['[10]', '[10]', '[10]', '[10]', '[10]', '[10]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[2, 5]', '[2, 5]', '[2, 5]', '[2, 5]', '[2, 5]', '[2, 5]']","['[0]', '[0]', '[0]', '[0]', '[0]', '[0]']","['[-3, -2, -1]', '[-3, -2, -1]', '[-3, -2, -1]', '[-3, -2, -1]', '[-3, -2, -1]', '[-3, -2, -1]']","['[-1, 0, 1]', '[-1, 0, 1]', '[-1, 0, 1]', '[-1, 0, 1]', '[-1, 0, 1]', '[-1, 0, 1]']","['[-9, 0, 1, 9]', '[-9, 0, 1, 9]', '[-9, 0, 1, 9]', '[-9, 0, 1, 9]', '[-9, 0, 1, 9]', '[-9, 0, 1, 9]']","['[-400, -200, 100, 300, 500]', '[-400, -200, 100, 300, 500]', '[-400, -200, 100, 300, 500]', '[-400, -200, 100, 300, 500]', '[-400, -200, 100, 300, 500]', '[-400, -200, 100, 300, 500]']","['[2.5, 3.5, 7.0]', '[2.5, 3.5, 7.0]', '[2.5, 3.5, 7.0]', '[2.5, 3.5, 7.0]', '[2.5, 3.5, 7.0]', '[2.5, 3.5, 7.0]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/35,"

def max_element(l: list):
    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
","max_element([1, 2, 3])","max_element([-10, -20, -30, -40])","max_element([101, 203, 1, 50, 999])",max_element([0]),"max_element([-1, -1, -1, -1])",max_element([57]),"max_element([0, 0, 0, 0, 0, 1])","max_element([100, 200, 300, 400, 500])","max_element([1.5, 2.5, 3.5, -2.5])","max_element([-1, 0, 1, 2, 100, -200, 300, 0])","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    """"""Return maximum element in the list.
    >>> max_element([1, 2, 3])
    3
    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])
    123
    """"""
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
","
from typing import List

def max_element(l: List[int]) -> int:
    return max(l)
",100.0,"['3', '3', '3', '3', '3', '3']","['-10', '-10', '-10', '-10', '-10', '-10']","['999', '999', '999', '999', '999', '999']","['0', '0', '0', '0', '0', '0']","['-1', '-1', '-1', '-1', '-1', '-1']","['57', '57', '57', '57', '57', '57']","['1', '1', '1', '1', '1', '1']","['500', '500', '500', '500', '500', '500']","['3.5', '3.5', '3.5', '3.5', '3.5', '3.5']","['300', '300', '300', '300', '300', '300']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/36,"

def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
",fizz_buzz(1),fizz_buzz(11),fizz_buzz(13),"fizz_buzz(77)  # 1x 7 in 77, which is divisible by both 11 and 13",fizz_buzz(100),"fizz_buzz(143)  # 143 == 11 * 13, contains no 7s but is divisible by both","fizz_buzz(0)    # Edge case, no numbers less than zero",fizz_buzz(786)  # Has several multiples with 7s in the hundreds and tens place,fizz_buzz(21)   # Neither divisible by 11 nor 13 within range,fizz_buzz(777)  # Multiple 77s and 7s across numerous qualifying multiples,"
def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    return sum(str(num).count('7') for num in range(n) if (num % 11 == 0 or num % 13 == 0)
","
from typing import List

def fizz_buzz(n: int) -> int:
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.""""""
    
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            if '7' in str(i):
                count += 1
    return count
","
def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    count = 0
    for i in range(n):
        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):
            count += 1
    return count
","
from itertools import count

def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    count_7 = 0
    for i in count(1):
        if i >= n:
            break
        if i % 11 == 0 or i % 13 == 0:
            if '7' in str(i):
                count_7 += str(i).count('7')
    return count_7
","
from itertools import count

def fizz_buzz(n: int):
    """"""
    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    count_7 = 0
    for num in count(start=0, step=1):
        if num >= n:
            break
        if num % 11 == 0 or num % 13 == 0:
            if '7' in str(num):
                count_7 += 1
    return count_7
","
def fizz_buzz(n: int):
    """"""Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.
    >>> fizz_buzz(50)
    0
    >>> fizz_buzz(78)
    2
    >>> fizz_buzz(79)
    3
    """"""
    
    count = 0
    for i in range(1, n):
        if '7' in str(i) and (i % 11 == 0 or i % 13 == 0):
            count += 1
    return count
",30.0,"['', '0', '0', '0', '0', '0']","['', '0', '0', '0', '0', '0']","['', '0', '0', '0', '0', '0']","['', '', '', '', '', '']","['', '2', '2', '3', '2', '2']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']",0.0,0.0,0.0,1.0,0.0,1.0,1.0,1.0,1.0,1.0,60.0
HumanEval/37,"

def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
","sort_even([1, 2, 3])","sort_even([5, 6, 3, 4])",sort_even([]),sort_even([3]),"sort_even([1, 3, 2, 4, 5])","sort_even([10, 20, 30, 40, 50, 60])","sort_even([7, 6, 5, 4, 3, 2, 1])","sort_even([1, 1, 1, 1, 1, 1])","sort_even([-1, -2, -3, -4])","sort_even([100, 98, 101, 97, 102, 96])","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    even_indices_values = sorted([val for idx, val in enumerate(l) if idx % 2 == 0])
    sorted_list = [val if idx % 2 != 0 else even_indices_values.pop(0) for idx, val in enumerate(l)]
    return sorted_list
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    even_indices = [i for i in range(len(l)) if i % 2 == 0]
    sorted_even_values = [val for idx, val in enumerate(l) if idx in even_indices]
    sorted_even_values.sort()
    
    result = [l[i] if i % 2 != 0 else sorted_even_values.pop(0) for i in range(len(l))]
    
    return result
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])
    result = [even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]
    return result
","
from bisect import insort

def sort_even(l: list):
    """"""This function takes a list l and returns a list l' such that
    l' is identical to l in the odd indicies, while its values at the even indicies are equal
    to the values of the even indicies of l, but sorted.
    >>> sort_even([1, 2, 3])
    [1, 2, 3]
    >>> sort_even([5, 6, 3, 4])
    [3, 6, 5, 4]
    """"""
    
    sorted_even_indices = sorted([val for idx, val in enumerate(l) if idx % 2 == 0])
    result = l[:]
    
    for idx, val in enumerate(l):
        if idx % 2 == 0:
            result[idx] = sorted_even_indices.pop(0)
    
    return result
  ","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    return [sorted(l[::2])[i//2] if i % 2 == 0 else l[i] for i in range(len(l))]
","
from typing import List

def sort_even(l: List[int]) -> List[int]:
    sorted_even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])
    sorted_list = [sorted_even_indices.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]
    return sorted_list
",100.0,"['[1, 2, 3]', '[1, 2, 3]', '[1, 2, 3]', '[1, 2, 3]', '[1, 2, 3]', '[1, 2, 3]']","['[3, 6, 5, 4]', '[3, 6, 5, 4]', '[3, 6, 5, 4]', '[3, 6, 5, 4]', '[3, 6, 5, 4]', '[3, 6, 5, 4]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[3]', '[3]', '[3]', '[3]', '[3]', '[3]']","['[1, 3, 2, 4, 5]', '[1, 3, 2, 4, 5]', '[1, 3, 2, 4, 5]', '[1, 3, 2, 4, 5]', '[1, 3, 2, 4, 5]', '[1, 3, 2, 4, 5]']","['[10, 20, 30, 40, 50, 60]', '[10, 20, 30, 40, 50, 60]', '[10, 20, 30, 40, 50, 60]', '[10, 20, 30, 40, 50, 60]', '[10, 20, 30, 40, 50, 60]', '[10, 20, 30, 40, 50, 60]']","['[1, 6, 3, 4, 5, 2, 7]', '[1, 6, 3, 4, 5, 2, 7]', '[1, 6, 3, 4, 5, 2, 7]', '[1, 6, 3, 4, 5, 2, 7]', '[1, 6, 3, 4, 5, 2, 7]', '[1, 6, 3, 4, 5, 2, 7]']","['[1, 1, 1, 1, 1, 1]', '[1, 1, 1, 1, 1, 1]', '[1, 1, 1, 1, 1, 1]', '[1, 1, 1, 1, 1, 1]', '[1, 1, 1, 1, 1, 1]', '[1, 1, 1, 1, 1, 1]']","['[-3, -2, -1, -4]', '[-3, -2, -1, -4]', '[-3, -2, -1, -4]', '[-3, -2, -1, -4]', '[-3, -2, -1, -4]', '[-3, -2, -1, -4]']","['[100, 98, 101, 97, 102, 96]', '[100, 98, 101, 97, 102, 96]', '[100, 98, 101, 97, 102, 96]', '[100, 98, 101, 97, 102, 96]', '[100, 98, 101, 97, 102, 96]', '[100, 98, 101, 97, 102, 96]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/38,"

def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","decode_cyclic(encode_cyclic(""abc""))","decode_cyclic(encode_cyclic(""abcdef""))","decode_cyclic(encode_cyclic(""hello world!""))","decode_cyclic(encode_cyclic(""abcde""))","decode_cyclic(encode_cyclic(""123456789""))","decode_cyclic(encode_cyclic(""""))","decode_cyclic(encode_cyclic(""xy""))","decode_cyclic(encode_cyclic(""123""))","decode_cyclic(encode_cyclic(""abcdefghijklmnopqrstuvwxyz""))","decode_cyclic(encode_cyclic(""The quick brown fox jumps over the lazy dog""))","
def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
  ","
def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","
from typing import List

def encode_cyclic(s: str) -> str:
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)

def decode_cyclic(s: str) -> str:
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
  ","
from itertools import cycle

def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)

def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)
  ","
def encode_cyclic(s: str):
    """"""
    returns encoded string by cycling groups of three characters.
    """"""
    # split string to groups. Each of length 3.
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    # cycle elements in each group. Unless group has fewer elements than 3.
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)


def decode_cyclic(s: str):
    """"""
    takes as input string encoded with encode_cyclic function. Returns decoded string.
    """"""
","
def encode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]
    return """".join(groups)

def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)
",40.0,"['None', 'None', 'None', 'abc', 'None', 'abc']","['None', 'None', 'None', 'abcdef', 'None', 'abcdef']","['None', 'None', 'None', 'hello world!', 'None', 'hello world!']","['None', 'None', 'None', 'abcde', 'None', 'abcde']","['None', 'None', 'None', '123456789', 'None', '123456789']","['None', 'None', 'None', '', 'None', '']","['None', 'None', 'None', 'xy', 'None', 'xy']","['None', 'None', 'None', '123', 'None', '123']","['None', 'None', 'None', 'abcdefghijklmnopqrstuvwxyz', 'None', 'abcdefghijklmnopqrstuvwxyz']","['None', 'None', 'None', 'The quick brown fox jumps over the lazy dog', 'None', 'The quick brown fox jumps over the lazy dog']",0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,59.999999999999986
HumanEval/39,"

def prime_fib(n: int):
    """"""
    prime_fib returns n-th number that is a Fibonacci number and it's also prime.
    >>> prime_fib(1)
    2
    >>> prime_fib(2)
    3
    >>> prime_fib(3)
    5
    >>> prime_fib(4)
    13
    >>> prime_fib(5)
    89
    """"""
",prime_fib(1),prime_fib(2),prime_fib(3),prime_fib(4),prime_fib(5),prime_fib(6),prime_fib(7),prime_fib(8),prime_fib(9),prime_fib(10),"
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    fib = [0, 1]
    while len(fib) <= n:
        fib.append(fib[-1] + fib[-2])
    prime_fib_numbers = [num for num in fib if is_prime(num)]
    return prime_fib_numbers[n-1]
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def fibonacci(num):
        if num <= 1:
            return num
        a, b = 0, 1
        for _ in range(2, num + 1):
            a, b = b, a + b
        return b
    
    count = 0
    i = 0
    while count < n:
        if is_prime(fibonacci(i)):
            count += 1
        i += 1
    return fibonacci(i-1)
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def fib(n):
        if n <= 0:
            return 0
        elif n == 1:
            return 1
        else:
            return fib(n - 1) + fib(n - 2)

    count = 0
    i = 0
    while True:
        if is_prime(fib(i)):
            count += 1
            if count == n:
                return fib(i)
        i += 1
  ","
import math

def is_prime(num):
    if num <= 1:
        return False
    if num == 2:
        return True
    if num % 2 == 0:
        return False
    max_divisor = math.isqrt(num)
    for i in range(3, max_divisor + 1, 2):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def is_fibonacci(num):
        return math.isqrt(5 * num**2 + 4) ** 2 == 5 * num**2 + 4 or math.isqrt(5 * num**2 - 4) ** 2 == 5 * num**2 - 4
    
    if n <= 0:
        return ""Invalid input""
    
    count = 0
    num = 1
    while count < n:
        num += 1
        if is_fibonacci(num) and is_prime(num):
            count += 1
            
    return num
  ","
from math import isqrt

def is_prime(num):
    if num <= 1:
        return False
    if num == 2 or num == 3:
        return True
    if num % 2 == 0:
        return False
    for i in range(3, isqrt(num) + 1, 2):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def is_fib(num):
        a, b = 1, 1
        while b < num:
            a, b = b, a + b
        return b == num

    count = 0
    num = 2
    while count < n:
        if is_fib(num) and is_prime(num):
            count += 1
        num += 1
    return num - 1
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    fib = [0, 1]
    i = 2
    while len(fib) <= n:
        fib.append(fib[i-1] + fib[i-2])
        i += 1
    idx = 0
    while True:
        if is_prime(fib[idx]):
            n -= 1
            if n == 0:
                return fib[idx]
        idx += 1
  ",20.0,"['', '2', '2', '2', '2', '']","['', '3', '3', '3', '3', '']","['', '5', '5', '5', '5', '']","['', '13', '13', '13', '13', '']","['', '89', '89', '89', '89', '']","['', '233', '233', '233', '233', '']","['', '1597', '1597', '1597', '1597', '']","['', '28657', '28657', '28657', '28657', '']","['', '514229', '514229', '514229', '514229', '']","['', '433494437', 'Error', 'Error', 'Error', '']",0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,20.0
HumanEval/40,"

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
","triples_sum_to_zero([1, 2, -3])","triples_sum_to_zero([10, -20, 10, 10])","triples_sum_to_zero([-1, -1, 2])","triples_sum_to_zero([5, 0, 0, 0])","triples_sum_to_zero([-5, 2, 3, 10])","triples_sum_to_zero([1, 1, 1, 1])","triples_sum_to_zero([0, 0, 0, 0])","triples_sum_to_zero([7, -2, -4, 1, 5])","triples_sum_to_zero([-3, -2, -1, 1, 4, 5])","triples_sum_to_zero([100, 200, 300, -600])","
from itertools import combinations

def triples_sum_to_zero(l: list):
    for triple in combinations(l, 3):
        if sum(triple) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    
    for comb in combinations(l, 3):
        if sum(comb) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    for combo in combinations(l, 3):
        if sum(combo) == 0:
            return True
    return False
  ","
from itertools import combinations

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    for subset in combinations(l, 3):
        if sum(subset) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero, and False otherwise.
    
    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""
    
    for triplet in combinations(l, 3):
        if sum(triplet) == 0:
            return True
    return False
","
from itertools import combinations

def triples_sum_to_zero(l: list):
    """"""
    triples_sum_to_zero takes a list of integers as an input.
    it returns True if there are three distinct elements in the list that
    sum to zero and False otherwise.

    >>> triples_sum_to_zero([1, 3, 5, 0])
    False
    >>> triples_sum_to_zero([1, 3, -2, 1])
    True
    >>> triples_sum_to_zero([1, 2, 3, 7])
    False
    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])
    True
    >>> triples_sum_to_zero([1])
    False
    """"""

    for triple in combinations(l, 3):
        if sum(triple) == 0:
            return True
    return False
",100.0,"['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/41,"

def car_race_collision(n: int):
    """"""
    Imagine a road that's a perfectly straight infinitely long line.
    n cars are driving left to right;  simultaneously, a different set of n cars
    are driving right to left.   The two sets of cars start out being very far from
    each other.  All cars move in the same speed.  Two cars are said to collide
    when a car that's moving left to right hits a car that's moving right to left.
    However, the cars are infinitely sturdy and strong; as a result, they continue moving
    in their trajectory as if they did not collide.

    This function outputs the number of such collisions.
    """"""
",car_race_collision(0),car_race_collision(1),car_race_collision(2),car_race_collision(3),car_race_collision(10),car_race_collision(100),car_race_collision(1000),car_race_collision(10000),car_race_collision(100000),car_race_collision(1000000),"
from math import comb

def car_race_collision(n: int):
    return comb(2*n, 2)
","
from itertools import combinations

def car_race_collision(n: int):
    return n * (n - 1) // 2
","
from math import comb

def car_race_collision(n: int):
    return comb(n, 2)
","
def car_race_collision(n: int):
    collisions = n * (n - 1) // 2
    return collisions
","
from collections import Counter

def car_race_collision(n: int) -> int:
    left_cars = ['L'] * n
    right_cars = ['R'] * n
    collisions = 0
    
    for _ in range(n):
        left_cars.append('L')
        right_cars.insert(0, 'R')
        
        combined = [left + right for left, right in zip(left_cars, right_cars)]
        collisions += Counter(combined)['LR']
    
    return collisions
","
from math import comb

def car_race_collision(n: int):
    return comb(n, 2)
",0.0,"['0', '0', '0', '0', '0', '0']","['1', '0', '0', '0', '2', '0']","['6', '1', '1', '1', '7', '1']","['15', '3', '3', '3', '15', '3']","['190', '45', '45', '45', '155', '45']","['19900', '4950', '4950', '4950', '15050', '4950']","['1999000', '499500', '499500', '499500', '1500500', '499500']","['199990000', '49995000', '49995000', '49995000', '150005000', '49995000']","['19999900000', '4999950000', '4999950000', '4999950000', 'Error', '4999950000']","['1999999000000', '499999500000', '499999500000', '499999500000', 'Error', '499999500000']",1.0,0.0,0.0,0.2,0.0,0.0,0.0,0.0,0.0,0.0,12.0
HumanEval/42,"

def incr_list(l: list):
    """"""Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
",incr_list([0]),"incr_list([1, 2, 3, 4, 5])","incr_list([-1, -2, -3])","incr_list([100, 200, 300])",incr_list([]),"incr_list([0, 0, 0])",incr_list([999]),"incr_list([-100, 0, 100, 200])","incr_list([int(1e9), int(1e9-1)])","incr_list([123456789, 987654321])","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [num + 1 for num in l]
","
def incr_list(l: list):
    return [x + 1 for x in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [x + 1 for x in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    """"""
    Return list with elements incremented by 1.
    >>> incr_list([1, 2, 3])
    [2, 3, 4]
    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])
    [6, 4, 6, 3, 4, 4, 10, 1, 124]
    """"""
    return [num + 1 for num in l]
","
from typing import List

def incr_list(l: List[int]) -> List[int]:
    return [num + 1 for num in l]
","
from typing import List

def incr_list(lst: List[int]) -> List[int]:
    return [x + 1 for x in lst]
",100.0,"['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']","['[2, 3, 4, 5, 6]', '[2, 3, 4, 5, 6]', '[2, 3, 4, 5, 6]', '[2, 3, 4, 5, 6]', '[2, 3, 4, 5, 6]', '[2, 3, 4, 5, 6]']","['[0, -1, -2]', '[0, -1, -2]', '[0, -1, -2]', '[0, -1, -2]', '[0, -1, -2]', '[0, -1, -2]']","['[101, 201, 301]', '[101, 201, 301]', '[101, 201, 301]', '[101, 201, 301]', '[101, 201, 301]', '[101, 201, 301]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[1, 1, 1]', '[1, 1, 1]', '[1, 1, 1]', '[1, 1, 1]', '[1, 1, 1]', '[1, 1, 1]']","['[1000]', '[1000]', '[1000]', '[1000]', '[1000]', '[1000]']","['[-99, 1, 101, 201]', '[-99, 1, 101, 201]', '[-99, 1, 101, 201]', '[-99, 1, 101, 201]', '[-99, 1, 101, 201]', '[-99, 1, 101, 201]']","['[1000000001, 1000000000]', '[1000000001, 1000000000]', '[1000000001, 1000000000]', '[1000000001, 1000000000]', '[1000000001, 1000000000]', '[1000000001, 1000000000]']","['[123456790, 987654322]', '[123456790, 987654322]', '[123456790, 987654322]', '[123456790, 987654322]', '[123456790, 987654322]', '[123456790, 987654322]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/43,"

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
","pairs_sum_to_zero([1, 3, 5, 0])","pairs_sum_to_zero([1, 3, -2, 1])","pairs_sum_to_zero([1, 2, 3, 7])","pairs_sum_to_zero([2, 4, -5, 3, 5, 7])",pairs_sum_to_zero([1]),"pairs_sum_to_zero([2, -2])","pairs_sum_to_zero([-3, 1, 2, 3, 6])","pairs_sum_to_zero([0, 0])","pairs_sum_to_zero([-1, 1, 2, -2])","pairs_sum_to_zero([100, -100, 50, -50, 30])","
from itertools import combinations

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    for pair in combinations(set(l), 2):
        if sum(pair) == 0:
            return True
    return False
  ","
from collections import Counter

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    count = Counter(l)
    for num in l:
        if count[-num] if num < 0 else count[num]:
            return True
    return False
","
from itertools import combinations

def pairs_sum_to_zero(l):
    return any(sum(pair) == 0 for pair in combinations(l, 2))
","
from itertools import combinations

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    for a, b in combinations(l, 2):
        if a + b == 0:
            return True
    return False
","
from itertools import combinations

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    for pair in combinations(l, 2):
        if sum(pair) == 0:
            return True
    return False
","
from itertools import combinations

def pairs_sum_to_zero(l):
    """"""
    pairs_sum_to_zero takes a list of integers as an input.
    it returns True if there are two distinct elements in the list that
    sum to zero, and False otherwise.
    >>> pairs_sum_to_zero([1, 3, 5, 0])
    False
    >>> pairs_sum_to_zero([1, 3, -2, 1])
    False
    >>> pairs_sum_to_zero([1, 2, 3, 7])
    False
    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])
    True
    >>> pairs_sum_to_zero([1])
    False
    """"""
    for pair in combinations(l, 2):
        if sum(pair) == 0:
            return True
    return False
",86.66666666666666,"['False', 'True', 'False', 'False', 'False', 'False']","['False', 'True', 'False', 'False', 'False', 'False']","['False', 'True', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'True', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']",0.8,0.8,0.8,1.0,0.8,1.0,1.0,0.0,1.0,1.0,82.0
HumanEval/44,"

def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
","change_base(15, 2)","change_base(30, 8)","change_base(511, 4)","change_base(100, 9)","change_base(1, 2)","change_base(127, 3)","change_base(0, 2)","change_base(256, 7)","change_base(2021, 5)","change_base(81, 3)","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    
    if x < 0 or base < 2 or base > 9:
        raise ValueError(""Input number must be non-negative and base must be between 2 and 9"")
    
    result = """"
    while x > 0:
        result = str(x % base) + result
        x //= base
        
    return result
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    
    if base < 2 or base > 9:
        raise ValueError(""Base number must be between 2 and 9"")

    if x < 0:
        sign = ""-""
        x = -x
    else:
        sign = """"

    result = """"
    while x > 0:
        remainder = x % base
        result = str(remainder) + result
        x = x // base
    
    if result == """":
        result = ""0""
    
    return sign + result
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if x == 0:
        return '0'
    res = ''
    while x:
        res = str(x % base) + res
        x //= base
    return res
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    if x < 0 or base < 2 or base > 9:
        return ""Input number or base is invalid.""
    
    result = """"
    while x > 0:
        remainder = x % base
        result = str(remainder) + result
        x = x // base
    
    return result
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    
    if x < 0 or base < 2 or base > 9:
        return None

    result = """"
    while x > 0:
        remainder = x % base
        result = str(remainder) + result
        x = x // base

    return result
","
def change_base(x: int, base: int):
    """"""Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """"""
    
    if not isinstance(x, int) or not isinstance(base, int) or base < 2 or base > 9:
        raise ValueError(""Inputs must be integers and base must be between 2 and 9."")

    if x < base:
        return str(x)
    else:
        return change_base(x // base, base) + str(x % base)
",100.0,"['1111', '1111', '1111', '1111', '1111', '1111']","['36', '36', '36', '36', '36', '36']","['13333', '13333', '13333', '13333', '13333', '13333']","['121', '121', '121', '121', '121', '121']","['1', '1', '1', '1', '1', '1']","['11201', '11201', '11201', '11201', '11201', '11201']","['', '0', '0', '', '', '0']","['514', '514', '514', '514', '514', '514']","['31041', '31041', '31041', '31041', '31041', '31041']","['10000', '10000', '10000', '10000', '10000', '10000']",1.0,1.0,1.0,1.0,1.0,1.0,0.4,1.0,1.0,1.0,94.0
HumanEval/45,"

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
","triangle_area(5, 3)","triangle_area(10, 10)","triangle_area(1, 1)","triangle_area(0, 5)","triangle_area(5, 0)","triangle_area(-3, 7)","triangle_area(8, -4)","triangle_area(-6, -5)","triangle_area(0.5, 0.7)","triangle_area(1000, 500)","
from typing import Union

def triangle_area(a: Union[int, float], h: Union[int, float]) -> Union[int, float]:
    return 0.5 * a * h
","
from typing import Union

def triangle_area(a: Union[int, float], h: Union[int, float]) -> float:
    """"""Given length of a side and height, return the area of a triangle.""""""
    return 0.5 * a * h
","
import math

def triangle_area(a, h):
    """"""Given length of a side and high return area for a triangle.
    >>> triangle_area(5, 3)
    7.5
    """"""
    return 0.5 * a * h
","
import math

def triangle_area(a, h):
    return 0.5 * a * h
","
from typing import Union

def triangle_area(a: Union[float, int], h: Union[float, int]) -> float:
    """"""
    Given length of a side and height, return area for a triangle.
    
    >>> triangle_area(5, 3)
    7.5
    """"""
    
    return 0.5 * a * h
","
def triangle_area(a, h):
    return 0.5 * a * h
",100.0,"['7.5', '7.5', '7.5', '7.5', '7.5', '7.5']","['50.0', '50.0', '50.0', '50.0', '50.0', '50.0']","['0.5', '0.5', '0.5', '0.5', '0.5', '0.5']","['0.0', '0.0', '0.0', '0.0', '0.0', '0.0']","['0.0', '0.0', '0.0', '0.0', '0.0', '0.0']","['-10.5', '-10.5', '-10.5', '-10.5', '-10.5', '-10.5']","['-16.0', '-16.0', '-16.0', '-16.0', '-16.0', '-16.0']","['15.0', '15.0', '15.0', '15.0', '15.0', '15.0']","['0.175', '0.175', '0.175', '0.175', '0.175', '0.175']","['250000.0', '250000.0', '250000.0', '250000.0', '250000.0', '250000.0']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/46,"

def fib4(n: int):
    """"""The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fib4(0) -> 0
    fib4(1) -> 0
    fib4(2) -> 2
    fib4(3) -> 0
    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).
    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.
    >>> fib4(5)
    4
    >>> fib4(6)
    8
    >>> fib4(7)
    14
    """"""
",fib4(0),fib4(1),fib4(2),fib4(3),fib4(4),fib4(5),fib4(10),fib4(20),fib4(50),fib4(100),"
from typing import List

def fib4(n: int) -> int:
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 2
    if n == 3:
        return 0
    
    fib_sequence = [0, 0, 2, 0]
    
    for i in range(4, n + 1):
        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2] + fib_sequence[i-3] + fib_sequence[i-4])
    
    return fib_sequence[-1]
","
def fib4(n: int):
    fib = [0, 0, 2, 0]
    for i in range(4, n+1):
        fib[i % 4] = fib[(i-1) % 4] + fib[(i-2) % 4] + fib[(i-3) % 4] + fib[(i-4) % 4]
    return fib[n % 4]
","
def fib4(n: int):
    fibs = [0, 0, 2, 0]
    if n < 4:
        return fibs[n]
    for i in range(4, n+1):
        fibs[i % 4] = sum(fibs)
    return fibs[n % 4]
","
from collections import deque

def fib4(n: int) -> int:
    fib4_sequence = deque([0, 0, 2, 0], maxlen=4)
    for _ in range(4, n+1):
        next_element = sum(fib4_sequence)
        fib4_sequence.append(next_element)
    return fib4_sequence[-1]
","
from typing import List

def fib4(n: int) -> int:
    if n == 0 or n == 1:
        return 0
    
    fib_values: List[int] = [0, 0, 2, 0]
    
    for i in range(4, n + 1):
        fib_values[i % 4] = fib_values[0] + fib_values[1] + fib_values[2] + fib_values[3]
    
    return fib_values[n % 4]
  ","
def fib4(n: int):
    a, b, c, d = 0, 0, 2, 0
    for i in range(4, n + 1):
        a, b, c, d = b, c, d, a + b + c + d
    
    return a if n == 0 else b if n == 1 else c if n == 2 else d

import doctest
doctest.testmod()
",100.0,"['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['2', '2', '2', '0', '2', '2']","['0', '0', '0', '0', '0', '0']","['2', '2', '2', '2', '2', '2']","['4', '4', '4', '4', '4', '4']","['104', '104', '104', '104', '104', '104']","['73552', '73552', '73552', '73552', '73552', '73552']","['26112283777288', '26112283777288', '26112283777288', '26112283777288', '26112283777288', '26112283777288']","['4647959998589498844128566416', '4647959998589498844128566416', '4647959998589498844128566416', '4647959998589498844128566416', '4647959998589498844128566416', '4647959998589498844128566416']",1.0,1.0,0.8,1.0,1.0,1.0,1.0,1.0,1.0,1.0,98.00000000000001
HumanEval/47,"

def median(l: list):
    """"""Return median of elements in the list l.
    >>> median([3, 1, 2, 4, 5])
    3
    >>> median([-10, 4, 6, 1000, 10, 20])
    15.0
    """"""
","median([3, 1, 2, 4, 5])","median([-10, 4, 6, 1000, 10, 20])",median([5]),"median([2, 3])","median([6, 8, 7, 5, 2, 3, 4])","median([0, 0, 0, 0])","median([1, -1, 5, -5, 10, -10])",median([100]),"median([2.5, 3.5, 1.5, 4.5, 2.5])","median([-3, -7, -1, -8, -5])","
from statistics import median

def median(l: list):
    return median(l)
","
from statistics import median

def median(l: list):
    return median(l)
","
from statistics import median

def median(l: list):
    return median(l)
","
from statistics import median

def median(l: list):
    return median(l)
","
from statistics import median

def median(l: list):
    return median(l)
","
from statistics import median

def median(l: list):
    return median(l)
",0.0,"['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/48,"

def is_palindrome(text: str):
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
",is_palindrome(''),is_palindrome('level'),is_palindrome('radar'),is_palindrome('racecar'),"is_palindrome(""Madam"")","is_palindrome(""A man a plan a canal Panama"")","is_palindrome(""No 'x' in Nixon"")",is_palindrome('12321'),is_palindrome('123456'),is_palindrome('wasitacaroracatisaw'),"
from collections import deque

def is_palindrome(text: str):
    return deque(text) == deque(reversed(text))
","
from typing import List

def is_palindrome(text: str) -> bool:
    return text == text[::-1]
","
from typing import List

def is_palindrome(text: str) -> bool:
    return text == text[::-1]
","
from typing import List

def is_palindrome(text: str) -> bool:
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
    return text == text[::-1]
","
def is_palindrome(text: str):
    """"""
    Checks if given string is a palindrome
    >>> is_palindrome('')
    True
    >>> is_palindrome('aba')
    True
    >>> is_palindrome('aaaaa')
    True
    >>> is_palindrome('zbcd')
    False
    """"""
    return text == text[::-1]
","
from typing import List

def is_palindrome(text: str) -> bool:
    return text == text[::-1]
",100.0,"['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/49,"

def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
","modp(3, 5)","modp(1101, 101)","modp(0, 101)","modp(3, 11)","modp(100, 101)","modp(10, 2)","modp(5, 3)","modp(20, 17)","modp(123456, 789)","modp(0, 1)","
from typing import Tuple

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    result = 1
    base = 2 % p
    while n > 0:
        if n % 2 == 1:
            result = (result * base) % p
        base = (base * base) % p
        n //= 2
    return result
","
from typing import List

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).""""""
    return 2**n % p
","
def modp(n: int, p: int):
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    return pow(2, n, p)
","
from typing import List

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    
    def power_of_two_mod(n: int, p: int) -> int:
        if n == 0:
            return 1
        if n == 1:
            return 2 % p
        
        power = power_of_two_mod(n // 2, p)
        if n % 2 == 0:
            return (power * power) % p
        else:
            return (2 * power * power) % p

    return power_of_two_mod(n, p)
","
from typing import Tuple

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    res = 1
    base = 2 % p
    exp = n

    while exp > 0:
        if exp % 2 == 1:
            res = (res * base) % p
        base = (base * base) % p
        exp //= 2

    return res
","
from typing import int

def modp(n: int, p: int) -> int:
    """"""Return 2^n modulo p (be aware of numerics).
    >>> modp(3, 5)
    3
    >>> modp(1101, 101)
    2
    >>> modp(0, 101)
    1
    >>> modp(3, 11)
    8
    >>> modp(100, 101)
    1
    """"""
    return pow(2, n, p)
",80.0,"['3', '3', '3', '3', '3', '']","['2', '2', '2', '2', '2', '']","['1', '1', '1', '1', '1', '']","['8', '8', '8', '8', '8', '']","['1', '1', '1', '1', '1', '']","['0', '0', '0', '0', '0', '']","['2', '2', '2', '2', '2', '']","['16', '16', '16', '16', '16', '']","['109', '109', '109', '109', '109', '']","['1', '0', '0', '1', '1', '']",0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.4,76.0
HumanEval/50,"

def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
","decode_shift(encode_shift(""hello""))","decode_shift(encode_shift(""world""))","decode_shift(encode_shift(""abcde""))","decode_shift(encode_shift(""uvwxyz""))","decode_shift(encode_shift(""zzzzz""))","decode_shift(encode_shift(""aaaaa""))","decode_shift(encode_shift(""""))","decode_shift(encode_shift(""shiftcipher""))","decode_shift(encode_shift(""test input 123""))","decode_shift(encode_shift(""Handling UPPER and lower""))","
def encode_shift(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","
def encode_shift(s: str):
    """"""
    returns encoded string by shifting every character by 5 in the alphabet.
    """"""
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])


def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","
def encode_shift(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"") if ch.islower() else chr(((ord(ch) + 5 - ord(""A"")) % 26) + ord(""A"")) if ch.isupper() else ch for ch in s])


def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"") if ch.islower() else chr(((ord(ch) - 5 - ord(""A"")) % 26) + ord(""A"")) if ch.isupper() else ch for ch in s])
","
def encode_shift(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])

def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","
def encode_shift(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"") if ch.islower() else chr(((ord(ch) + 5 - ord(""A"")) % 26) + ord(""A"")) if ch.isupper() else ch for ch in s])


def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"") if ch.islower() else chr(((ord(ch) - 5 - ord(""A"")) % 26) + ord(""A"")) if ch.isupper() else ch for ch in s])
","
def encode_shift(s: str):
    return """".join([chr(((ord(ch) + 5 - ord(""a"")) % 26) + ord(""a"") if ch.isalpha() else ch for ch in s])


def decode_shift(s: str):
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"") if ch.isalpha() else ch for ch in s])
",40.0,"['hello', 'hello', '', 'hello', '', '']","['world', 'world', '', 'world', '', '']","['abcde', 'abcde', '', 'abcde', '', '']","['uvwxyz', 'uvwxyz', '', 'uvwxyz', '', '']","['zzzzz', 'zzzzz', '', 'zzzzz', '', '']","['aaaaa', 'aaaaa', '', 'aaaaa', '', '']","['', '', '', '', '', '']","['shiftcipher', 'shiftcipher', '', 'shiftcipher', '', '']","['testninputnefg', 'testninputnefg', '', 'testninputnefg', '', '']","['bandlingnojjylnandnlower', 'bandlingnojjylnandnlower', '', 'bandlingnojjylnandnlower', '', '']",0.4,0.4,0.4,0.4,0.4,0.4,1.0,0.4,0.4,0.4,46.00000000000001
HumanEval/51,"

def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
",remove_vowels(''),remove_vowels('abcdef'),remove_vowels('bcdefg'),remove_vowels('aaaAAA'),"remove_vowels('Hello, World!')",remove_vowels('AEIOUaeiou'),remove_vowels('12345'),remove_vowels(!@#$%^&*()'),remove_vowels('Spaces here and there'),remove_vowels('MixedCASEwithSpaces'),"
import re

def remove_vowels(text):
    return re.sub(r'[aeiouAEIOU]', '', text)
","
def remove_vowels(text):
    vowels = 'aeiouAEIOU'
    return ''.join(char for char in text if char not in vowels)
","
def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
    vowels = 'aeiouAEIOU'
    return ''.join([char for char in text if char not in vowels])
","
import re

def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
    return re.sub(r'[aeiouAEIOU]', '', text)
","
def remove_vowels(text):
    return ''.join(char for char in text if char.lower() not in 'aeiou')

import doctest
doctest.testmod()
","
def remove_vowels(text):
    """"""
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels(""abcdef\nghijklm"")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """"""
    return ''.join([char for char in text if char.lower() not in 'aeiou'])

import doctest
doctest.testmod()
",80.0,"['', '', '', '', '', '']","['bcdf', 'bcdf', 'bcdf', 'bcdf', 'bcdf', '']","['bcdfg', 'bcdfg', 'bcdfg', 'bcdfg', 'bcdfg', '']","['', '', '', '', '', '']","['Hll, Wrld!', 'Hll, Wrld!', 'Hll, Wrld!', 'Hll, Wrld!', 'Hll, Wrld!', '']","['', '', '', '', '', '']","['12345', '12345', '12345', '12345', '12345', '']","['', '', '', '', '', '']","['Spcs hr nd thr', 'Spcs hr nd thr', 'Spcs hr nd thr', 'Spcs hr nd thr', 'Spcs hr nd thr', '']","['MxdCSwthSpcs', 'MxdCSwthSpcs', 'MxdCSwthSpcs', 'MxdCSwthSpcs', 'MxdCSwthSpcs', '']",1.0,0.8,0.8,1.0,0.8,1.0,0.8,1.0,0.8,0.8,88.00000000000001
HumanEval/52,"

def below_threshold(l: list, t: int):
    """"""Return True if all numbers in the list l are below threshold t.
    >>> below_threshold([1, 2, 4, 10], 100)
    True
    >>> below_threshold([1, 20, 4, 10], 5)
    False
    """"""
","below_threshold([1, 2, 3, 4, 5], 10)","below_threshold([10, 20, 30], 5)","below_threshold([], 1)","below_threshold([5, 5, 5, 5], 6)","below_threshold([0, -1, -2, -3], 0)","below_threshold([100, 200, 300], 1000)","below_threshold([7, 8, 9], 8)","below_threshold([-10, -20, -30], -5)","below_threshold([1, 2, 100], 100)","below_threshold([1], 2)","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.""""""
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    """"""Return True if all numbers in the list l are below threshold t.""""""
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    return all(num < t for num in l)
","
from typing import List

def below_threshold(l: List[int], t: int) -> bool:
    return all(num < t for num in l)
",100.0,"['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/53,"

def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
","add(2, 3)","add(5, 7)","add(100, 200)","add(0, 0)","add(-1, -1)","add(-10, 10)","add(0, 10)","add(1234, 5678)","add(-999, 1000)","add(2147483647, -2147483648)","
from typing import List

def add(x: int, y: int) -> int:
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
from typing import Optional

def add(x: int, y: int) -> int:
    """"""
    Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
from typing import List

def add(x: int, y: int) -> int:
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
from typing import Union

def add(x: int, y: int) -> int:
    """"""
    Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
  ","
def add(x: int, y: int):
    """"""Add two numbers x and y
    >>> add(2, 3)
    5
    >>> add(5, 7)
    12
    """"""
    return x + y
","
from typing import Any

def add(x: int, y: int) -> Any:
    return x + y
",100.0,"['5', '5', '5', '5', '5', '5']","['12', '12', '12', '12', '12', '12']","['300', '300', '300', '300', '300', '300']","['0', '0', '0', '0', '0', '0']","['-2', '-2', '-2', '-2', '-2', '-2']","['0', '0', '0', '0', '0', '0']","['10', '10', '10', '10', '10', '10']","['6912', '6912', '6912', '6912', '6912', '6912']","['1', '1', '1', '1', '1', '1']","['-1', '-1', '-1', '-1', '-1', '-1']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/54,"

def same_chars(s0: str, s1: str):
    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
","same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')","same_chars('abcd', 'dddddddabc')","same_chars('dddddddabc', 'abcd')","same_chars('eabcd', 'dddddddabc')","same_chars('abcd', 'dddddddabce')","same_chars('abcd', 'abcd')","same_chars('xyz', 'yzx')","same_chars('same', 'emas')","same_chars('OneWord', 'oneWord')","same_chars('', '')","
from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)
","
def same_chars(s0: str, s1: str):
    from collections import Counter
    return Counter(s0) == Counter(s1)
","
def same_chars(s0: str, s1: str):
    """"""
    Check if two words have the same characters.
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')
    True
    >>> same_chars('abcd', 'dddddddabc')
    True
    >>> same_chars('dddddddabc', 'abcd')
    True
    >>> same_chars('eabcd', 'dddddddabc')
    False
    >>> same_chars('abcd', 'dddddddabce')
    False
    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')
    False
    """"""
    from collections import Counter
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str):
    return Counter(s0) == Counter(s1)
","
from collections import Counter

def same_chars(s0: str, s1: str) -> bool:
    return Counter(s0) == Counter(s1)
",57.14285714285713,"['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/55,"

def fib(n: int):
    """"""Return n-th Fibonacci number.
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
",fib(1),fib(2),fib(3),fib(5),fib(8),fib(10),fib(15),fib(20),fib(0),fib(30),"
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache
def fib(n: int) -> int:
    return n if n <= 1 else fib(n-1) + fib(n-2)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fib(n: int) -> int:
    """"""
    Return n-th Fibonacci number.
    
    >>> fib(10)
    55
    >>> fib(1)
    1
    >>> fib(8)
    21
    """"""
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fib(n-1) + fib(n-2)
",100.0,"['1', '1', '1', '1', '1', '1']","['1', '1', '1', '1', '1', '1']","['2', '2', '2', '2', '2', '2']","['5', '5', '5', '5', '5', '5']","['21', '21', '21', '21', '21', '21']","['55', '55', '55', '55', '55', '55']","['610', '610', '610', '610', '610', '610']","['6765', '6765', '6765', '6765', '6765', '6765']","['0', '0', '0', '0', '0', '0']","['832040', '832040', '832040', '832040', '832040', '832040']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/56,"

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""<"" and "">"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""<"")
    False
    >>> correct_bracketing(""<>"")
    True
    >>> correct_bracketing(""<<><>>"")
    True
    >>> correct_bracketing(""><<>"")
    False
    """"""
","correct_bracketing(""<"")","correct_bracketing(""<>"")","correct_bracketing(""<<><>>"")","correct_bracketing(""><<>"")","correct_bracketing(""<<<<"")","correct_bracketing("">>>>"")","correct_bracketing(""<><><><>"")","correct_bracketing(""<><><>><"")","correct_bracketing("">><<"")","correct_bracketing("""")","
def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    
    return len(stack) == 0
","
from collections import deque

def correct_bracketing(brackets: str):
    stack = deque()
    
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    
    return not stack
","
def correct_bracketing(brackets: str):
    open_brackets = 0
    for bracket in brackets:
        if bracket == ""<"":
            open_brackets += 1
        elif bracket == "">"" and open_brackets > 0:
            open_brackets -= 1
        else:
            return False
    return open_brackets == 0
","
def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    from collections import deque
    stack = deque()
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    from collections import deque
    
    stack = deque()
    
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(""<"")
        elif bracket == "">"":
            if not stack:
                return False
            stack.pop()
    
    return not stack
",100.0,"['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/57,"

def monotonic(l: list):
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
","monotonic([1, 2, 3, 4, 5])","monotonic([5, 4, 3, 2, 1])","monotonic([1, 1, 2, 2, 3, 3])","monotonic([3, 3, 2, 1, 1])","monotonic([1, 2, 2, 3, 1])",monotonic([0]),"monotonic([-1, -2, -3, -4])","monotonic([-4, -3, -2, -1])","monotonic([1000, 100, 10, 1])","monotonic([1, 10, 100, 1000])","
from typing import List

def monotonic(l: List[int]) -> bool:
    return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1] for i in range(len(l)-1))
","
from typing import List

def monotonic(l: List):
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
","
from typing import List

def monotonic(l: List[int]) -> bool:
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))
    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))
    return increasing or decreasing

","
from typing import List

def monotonic(l: List[int]):
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
","
from typing import List

def monotonic(l: List[int]) -> bool:
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
","
from typing import List

def monotonic(l: List[int]) -> bool:
    """"""Return True is list elements are monotonically increasing or decreasing.
    >>> monotonic([1, 2, 4, 20])
    True
    >>> monotonic([1, 20, 4, 10])
    False
    >>> monotonic([4, 1, 0, -10])
    True
    """"""
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))
",100.0,"['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/58,"

def common(l1: list, l2: list):
    """"""Return sorted unique common elements for two lists.
    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])
    [1, 5, 653]
    >>> common([5, 3, 2, 8], [3, 2])
    [2, 3]

    """"""
","common([1, 1, 1], [1, 1, 1])","common([3, 4, 7, 8], [5, 6, 9])","common([33, 17, 19, 13], [17, 13])","common([], [])","common([123], [123])","common([1, 2, 3], [4, 5, 6, 1])","common([-5, -3, -1, 0], [0, 1, -1])","common([""a"", ""b"", ""c""], [""a"", ""d""])","common([""apple"", ""orange""], [""banana"", ""orange""])","common([True, False], [False, True, False])","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    """"""Return sorted unique common elements for two lists.""""""
    return sorted(list(set(l1) & set(l2)))
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    return sorted(list(set(l1).intersection(l2)))
  ","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    return sorted(set(l1).intersection(l2))
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    return sorted(list(set(l1) & set(l2)))
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    return sorted(set(l1) & set(l2))
","
from typing import List

def common(l1: List[int], l2: List[int]) -> List[int]:
    return sorted(set(l1).intersection(set(l2)))
",100.0,"['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[13, 17]', '[13, 17]', '[13, 17]', '[13, 17]', '[13, 17]', '[13, 17]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[123]', '[123]', '[123]', '[123]', '[123]', '[123]']","['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']","['[-1, 0]', '[-1, 0]', '[-1, 0]', '[-1, 0]', '[-1, 0]', '[-1, 0]']","[""['a']"", ""['a']"", ""['a']"", ""['a']"", ""['a']"", ""['a']""]","[""['orange']"", ""['orange']"", ""['orange']"", ""['orange']"", ""['orange']"", ""['orange']""]","['[False, True]', '[False, True]', '[False, True]', '[False, True]', '[False, True]', '[False, True]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/59,"

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
",largest_prime_factor(10),largest_prime_factor(18),largest_prime_factor(56),largest_prime_factor(100),largest_prime_factor(220),largest_prime_factor(500),largest_prime_factor(1024),largest_prime_factor(2048),largest_prime_factor(9999),largest_prime_factor(123456),"
import math

def is_prime(num):
    if num < 2:
        return False
    if num == 2:
        return True
    if num % 2 == 0:
        return False
    for i in range(3, int(math.sqrt(num)) + 1, 2):
        if num % i == 0:
            return False
    return True

def largest_prime_factor(n: int):
    for i in range(int(math.sqrt(n)), 1, -1):
        if n % i == 0 and is_prime(i):
            return i
","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    factor = 2
    while n > 1:
        if n % factor == 0 and is_prime(n // factor):
            return n // factor
        factor += 1
","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True
    
    factors = []
    
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0 and is_prime(i):
            factors.append(i)
    
    return max(factors)

","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""

    def is_prime(num):
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    prime_factors = [factor for factor in range(2, int(math.sqrt(n)) + 1) if n % factor == 0 and is_prime(factor)]
    return max(prime_factors)
  ","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    for i in range(int(math.sqrt(n)), 1, -1):
        if n % i == 0 and is_prime(i):
            return i
","
import math

def largest_prime_factor(n: int):
    """"""Return the largest prime factor of n. Assume n > 1 and is not a prime.
    >>> largest_prime_factor(13195)
    29
    >>> largest_prime_factor(2048)
    2
    """"""
    def is_prime(num):
        if num == 2:
            return True
        if num < 2 or num % 2 == 0:
            return False
        for i in range(3, int(math.sqrt(num)) + 1, 2):
            if num % i == 0:
                return False
        return True

    max_prime = 2
    if n % 2 == 0:
        while n % 2 == 0:
            n /= 2
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0 and is_prime(i):
            max_prime = max(max_prime, i)
            while n % i == 0:
                n /= i
    if n > 2 and is_prime(n):
        max_prime = max(max_prime, n)
    return int(max_prime)
",88.0,"['2', '5', '2', '2', '2', '5']","['3', '3', '3', '3', '3', '3']","['7', '7', '7', '7', '7', '7']","['5', '5', '5', '5', '5', '5']","['11', '11', '11', '11', '11', '11']","['5', '5', '5', '5', '5', '5']","['2', '2', '2', '2', '2', '2']","['2', '2', '2', '2', '2', '2']","['11', '101', '11', '11', '11', '101']","['3', '643', '3', '3', '3', '643']",0.6,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.6,0.6,87.99999999999999
HumanEval/60,"

def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.
    >>> sum_to_n(30)
    465
    >>> sum_to_n(100)
    5050
    >>> sum_to_n(5)
    15
    >>> sum_to_n(10)
    55
    >>> sum_to_n(1)
    1
    """"""
",sum_to_n(30),sum_to_n(100),sum_to_n(5),sum_to_n(10),sum_to_n(1),sum_to_n(0),sum_to_n(-10),sum_to_n(500),sum_to_n(2),sum_to_n(50),"
def sum_to_n(n: int):
    return n * (n + 1) // 2
  ","
def sum_to_n(n: int):
    return n*(n+1)//2
","
def sum_to_n(n: int):
    return n * (n + 1) // 2
","
def sum_to_n(n: int):
    return n*(n+1)//2
","
def sum_to_n(n: int):
    return n * (n + 1) // 2
","
def sum_to_n(n: int):
    """"""sum_to_n is a function that sums numbers from 1 to n.""""""
    return n * (n + 1) // 2
",100.0,"['465', '465', '465', '465', '465', '465']","['5050', '5050', '5050', '5050', '5050', '5050']","['15', '15', '15', '15', '15', '15']","['55', '55', '55', '55', '55', '55']","['1', '1', '1', '1', '1', '1']","['0', '0', '0', '0', '0', '0']","['45', '45', '45', '45', '45', '45']","['125250', '125250', '125250', '125250', '125250', '125250']","['3', '3', '3', '3', '3', '3']","['1275', '1275', '1275', '1275', '1275', '1275']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/61,"

def correct_bracketing(brackets: str):
    """""" brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
","correct_bracketing(("")","correct_bracketing(()"")","correct_bracketing((()())"")","correct_bracketing("")(()"")","correct_bracketing(((((((((((()))))))))))"")","correct_bracketing(()()()()()"")","correct_bracketing((((((((()"")","correct_bracketing("")))"")","correct_bracketing("")("")","correct_bracketing((()(())()(()))"")","
def correct_bracketing(brackets: str):
    """"""
    brackets is a string of ""("" and "")"".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing(""("")
    False
    >>> correct_bracketing(""()"")
    True
    >>> correct_bracketing(""(()())"")
    True
    >>> correct_bracketing("")(()"")
    False
    """"""
    stack = []
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')' and stack:
            stack.pop()
        else:
            return False
    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    from collections import deque
    stack = deque()
    for bracket in brackets:
        if bracket == '(':
            stack.append('(')
        elif bracket == ')':
            if len(stack) == 0:
                return False
            stack.pop()
    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    from collections import deque
    stack = deque()
    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if not stack:
                return False
            stack.pop()
    return not stack
","
def correct_bracketing(brackets: str):
    stack = []
    opening_bracket = ""(""
    closing_bracket = "")""
    
    for bracket in brackets:
        if bracket == opening_bracket:
            stack.append(bracket)
        elif bracket == closing_bracket:
            if not stack:
                return False
            stack.pop()
    
    return len(stack) == 0

import doctest
doctest.testmod()
","
def correct_bracketing(brackets: str):
    stack = []
    closing_bracket = {')': '('}

    for bracket in brackets:
        if bracket == '(':
            stack.append(bracket)
        elif bracket == ')':
            if not stack or stack[-1] != closing_bracket[bracket]:
                return False
            stack.pop()

    return len(stack) == 0
","
def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""("":
            stack.append(bracket)
        elif bracket == "")"":
            if not stack:
                return False
            stack.pop()
    return not stack
",100.0,"['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['False', 'False', 'False', 'False', 'False', 'False']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['', '', '', '', '', '']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/62,"

def derivative(xs: list):
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
","derivative([3, 1, 2, 4, 5])","derivative([1, 2, 3])",derivative([]),derivative([5]),"derivative([0, 10])","derivative([10, -7, 3])","derivative([1, 0, 0, 5])","derivative([-1, 4, -3, 2])","derivative([0, 0, 0, 0])","derivative([100, 200, 300, 400, 500])","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
    Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    return [i * coef for i, coef in enumerate(xs) if i != 0]
  ","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
    Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    return [i * xs[i] for i in range(1, len(xs))]
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    
    return [i * xs[i] for i in range(1, len(xs))]
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """"""
    xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
    Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    return [i * xs[i] for i in range(1, len(xs))]
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
     Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    return [i * coeff for i, coeff in enumerate(xs)][1:]
","
from typing import List

def derivative(xs: List[int]) -> List[int]:
    """""" xs represent coefficients of a polynomial.
    xs[0] + xs[1] * x + xs[2] * x^2 + ....
    Return derivative of this polynomial in the same form.
    >>> derivative([3, 1, 2, 4, 5])
    [1, 4, 12, 20]
    >>> derivative([1, 2, 3])
    [2, 6]
    """"""
    return [i * xs[i] for i in range(1, len(xs))]
  ",100.0,"['[1, 4, 12, 20]', '[1, 4, 12, 20]', '[1, 4, 12, 20]', '[1, 4, 12, 20]', '[1, 4, 12, 20]', '[1, 4, 12, 20]']","['[2, 6]', '[2, 6]', '[2, 6]', '[2, 6]', '[2, 6]', '[2, 6]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[10]', '[10]', '[10]', '[10]', '[10]', '[10]']","['[-7, 6]', '[-7, 6]', '[-7, 6]', '[-7, 6]', '[-7, 6]', '[-7, 6]']","['[0, 0, 15]', '[0, 0, 15]', '[0, 0, 15]', '[0, 0, 15]', '[0, 0, 15]', '[0, 0, 15]']","['[4, -6, 6]', '[4, -6, 6]', '[4, -6, 6]', '[4, -6, 6]', '[4, -6, 6]', '[4, -6, 6]']","['[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]']","['[200, 600, 1200, 2000]', '[200, 600, 1200, 2000]', '[200, 600, 1200, 2000]', '[200, 600, 1200, 2000]', '[200, 600, 1200, 2000]', '[200, 600, 1200, 2000]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/63,"

def fibfib(n: int):
    """"""The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
",fibfib(0),fibfib(1),fibfib(2),fibfib(3),fibfib(4),fibfib(5),fibfib(6),fibfib(10),fibfib(15),fibfib(20),"
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1 or n == 2:
        return n - 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)

","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int) -> int:
    if n == 0:
        return 0
    if n == 1 or n == 2:
        return 1
    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int) -> int:
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int):
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int) -> int:
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
","
from functools import lru_cache

@lru_cache(maxsize=None)
def fibfib(n: int) -> int:
    """"""The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:
    fibfib(0) == 0
    fibfib(1) == 0
    fibfib(2) == 1
    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).
    Please write a function to efficiently compute the n-th element of the fibfib number sequence.
    >>> fibfib(1)
    0
    >>> fibfib(5)
    4
    >>> fibfib(8)
    24
    """"""
    if n == 0 or n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)
",82.85714285714286,"['0', '0', '0', '0', '0', '0']","['0', '1', '0', '0', '0', '0']","['1', '1', '1', '1', '1', '1']","['1', '2', '1', '1', '1', '1']","['2', '4', '2', '2', '2', '2']","['4', '7', '4', '4', '4', '4']","['7', '13', '7', '7', '7', '7']","['81', '149', '81', '81', '81', '81']","['1705', '3136', '1705', '1705', '1705', '1705']","['35890', '66012', '35890', '35890', '35890', '35890']",1.0,0.8,1.0,0.8,0.8,0.8,0.8,0.8,0.8,0.8,83.99999999999999
HumanEval/64,"
FIX = """"""
Add more test cases.
""""""

def vowels_count(s):
    """"""Write a function vowels_count which takes a string representing
    a word as input and returns the number of vowels in the string.
    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a
    vowel, but only when it is at the end of the given word.

    Example:
    >>> vowels_count(""abcde"")
    2
    >>> vowels_count(""ACEDY"")
    3
    """"""
","vowels_count(""hello"")","vowels_count(""random"")","vowels_count(""sky"")","vowels_count(""Agrimony"")","vowels_count(""rhythm"")","vowels_count(""TRILOGY"")","vowels_count(""pythony"")","vowels_count("""")","vowels_count(""AEIOU"")","vowels_count(""y"")","
def vowels_count(s):
    vowels = set('aeiou')
    y_ends = 'yY'
    count = sum(1 for char1, char2 in zip(s, s[1:] + ' ') 
                if char1.lower() in vowels or (char1 in y_ends and char2 == ' '))
    return count
","
def vowels_count(s):
    vowels = ['a', 'e', 'i', 'o', 'u']
    count = 0
    
    s = s.lower()
    
    for i, char in enumerate(s):
        if char in vowels:
            if i == len(s) - 1 and char != 'y':
                break
            count += 1
    
    return count
","
def vowels_count(s):
    VOWELS = {'a', 'e', 'i', 'o', 'u'}
    final_vowel = 'y'
    
    count = 0
    s = s.lower()

    for i, char in enumerate(s):
        if char in VOWELS or (char == final_vowel and i == len(s) - 1):
            count += 1

    return count
","
def vowels_count(s):
    vowels = {'a', 'e', 'i', 'o', 'u'}
    if s[-1].lower() == 'y':
        vowels.add('y')
    return sum(1 for char in s.lower() if char in vowels)
","
def vowels_count(s: str) -> int:
    vowels = 'aeiou'
    s_lower = s.lower()
    
    count = 0
    for i, char in enumerate(s_lower):
        if char in vowels:
            if i == len(s_lower) - 1 and char == 'y':
                count += 1
            elif char != 'y':
                count += 1
    
    return count
","
def vowels_count(s):
    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}  
    count = 0
    if s[-1].lower() == 'y':
        for char in s[:-1]:
            if char.lower() in vowels:
                count += 1
    else:
        for char in s:
            if char.lower() in vowels:
                count += 1
    return count
",57.14285714285713,"['2', '1', '2', '2', '2', '2']","['2', '2', '2', '2', '2', '2']","['1', '0', '1', '1', '0', '0']","['4', '3', '4', '4', '3', '3']","['0', '0', '0', '0', '0', '1']","['3', '2', '3', '3', '2', '2']","['2', '1', '2', '3', '1', '2']","['0', '0', '0', '', '0', '']","['5', '4', '5', '5', '5', '5']","['1', '0', '1', '1', '0', '0']",0.8,1.0,0.4,0.4,0.8,0.4,0.4,0.6,0.8,0.4,60.0
HumanEval/65,"
def circular_shift(x, shift):
    """"""Circular shift the digits of the integer x, shift the digits right by shift
    and return the result as a string.
    If shift > number of digits, return digits reversed.
    >>> circular_shift(12, 1)
    ""21""
    >>> circular_shift(12, 2)
    ""12""
    """"""
","circular_shift(12345, 1)","circular_shift(12345, 5)","circular_shift(12345, 6)","circular_shift(1, 1)","circular_shift(0, 2)","circular_shift(98765, 3)","circular_shift(654321, 8)","circular_shift(999999, 9)","circular_shift(-123456, 2)","circular_shift(1234, 0)","
from collections import deque

def circular_shift(x, shift):
    x_str = str(x)
    if shift >= len(x_str):
        return x_str[::-1]
    else:
        dq = deque(x_str)
        dq.rotate(shift)
        return ''.join(dq)
","
from collections import deque

def circular_shift(x, shift):
    x_str = str(x)
    num_digits = len(x_str)
    
    if shift > num_digits:
        return x_str[::-1]
    
    shift %= num_digits
    digits = deque(x_str)
    digits.rotate(shift)
    
    return ''.join(digits)
","
from collections import deque

def circular_shift(x, shift):
    x_str = str(x)
    if shift >= len(x_str):
        return x_str[::-1]
    
    digits = deque(x_str)
    digits.rotate(shift)
    return ''.join(digits)
 ","
from collections import deque

def circular_shift(x, shift):
    x_str = str(x)
    num_digits = len(x_str)
    shift %= num_digits
    if shift == 0:
        return x_str
    elif shift == num_digits:
        return x_str[::-1]
    else:
        q = deque(x_str)
        q.rotate(shift)
        return """".join(q)
","
from collections import deque

def circular_shift(x, shift):
    x_str = str(x)
    x_len = len(x_str)
    
    shift = shift % x_len
    if shift == 0:
        return x_str
    
    if shift > x_len:
        return x_str[::-1]
    
    digits = deque(x_str)
    digits.rotate(shift)
    
    return """".join(digits)
","
from math import log10

def circular_shift(x, shift):
    num_digits = int(log10(x)) + 1
    if shift > num_digits:
        return str(x)[::-1]
    shift %= num_digits
    x_str = str(x)
    return x_str[-shift:] + x_str[:-shift]
",88.0,"['51234', '51234', '51234', '51234', '51234', '51234']","['54321', '12345', '54321', '12345', '12345', '12345']","['54321', '54321', '54321', '51234', '51234', '54321']","['1', '1', '1', '1', '1', '1']","['0', '0', '0', '0', '0', '']","['76598', '76598', '76598', '76598', '76598', '76598']","['123456', '123456', '123456', '216543', '216543', '123456']","['999999', '999999', '999999', '999999', '999999', '999999']","['56-1234', '56-1234', '56-1234', '56-1234', '56-1234', '']","['1234', '1234', '1234', '1234', '1234', '1234']",1.0,0.2,0.6,1.0,0.8,1.0,0.6,1.0,0.8,1.0,80.0
HumanEval/66,"
def digitSum(s):
    """"""Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("""") => 0
        digitSum(""abAB"") => 131
        digitSum(""abcCd"") => 67
        digitSum(""helloE"") => 69
        digitSum(""woArBld"") => 131
        digitSum(""aAaaaXa"") => 153
    """"""
","digitSum("""")","digitSum(""A"")","digitSum(""a"")","digitSum(""123"")","digitSum(""WXYZ"")","digitSum(""abcEfGhI"")","digitSum(!@#$%^&*()"")","digitSum(""HelloWorld"")","digitSum(""MIXeDCase123"")","digitSum(""abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"")","
def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())
","
def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())
","
def digitSum(s):
    return sum(ord(char) for char in s if char.isupper())
","
def digitSum(s):
    return sum(ord(ch) for ch in s if ch.isupper())
","
import string

def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())
","
import string

def digitSum(s):
    return sum(ord(c) for c in s if c.isupper())
",100.0,"['0', '0', '0', '0', '0', '0']","['65', '65', '65', '65', '65', '65']","['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['354', '354', '354', '354', '354', '354']","['213', '213', '213', '213', '213', '213']","['', '', '', '', '', '']","['159', '159', '159', '159', '159', '159']","['373', '373', '373', '373', '373', '373']","['2015', '2015', '2015', '2015', '2015', '2015']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/67,"
def fruit_distribution(s,n):
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit this basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket return the number of the mango fruits in the basket.
    for examble:
    fruit_distribution(""5 apples and 6 oranges"", 19) ->19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"",3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"",120) -> 120 - 100 - 1 = 19
    """"""
","fruit_distribution(""5 apples and 6 oranges"", 19)","fruit_distribution(""0 apples and 1 oranges"", 3)","fruit_distribution(""2 apples and 3 oranges"", 100)","fruit_distribution(""100 apples and 1 oranges"", 120)","fruit_distribution(""0 apples and 0 oranges"", 12)","fruit_distribution(""10 apples and 20 oranges"", 30)","fruit_distribution(""1 apples and 99 oranges"", 100)","fruit_distribution(""3 apples and 97 oranges"", 100)","fruit_distribution(""50 apples and 25 oranges"", 100)","fruit_distribution(""33 apples and 0 oranges"", 40)","
def fruit_distribution(s, n):
    """"""
    In this task, you will be given a string that represents a number of apples and oranges 
    that are distributed in a basket of fruit. This basket contains 
    apples, oranges, and mango fruits. Given the string that represents the total number of 
    the oranges and apples and an integer that represent the total number of the fruits 
    in the basket, return the number of mango fruits in the basket.
    For example:
    fruit_distribution(""5 apples and 6 oranges"", 19) -> 19 - 5 - 6 = 8
    fruit_distribution(""0 apples and 1 oranges"", 3) -> 3 - 0 - 1 = 2
    fruit_distribution(""2 apples and 3 oranges"", 100) -> 100 - 2 - 3 = 95
    fruit_distribution(""100 apples and 1 oranges"", 120) -> 120 - 100 - 1 = 19
    """"""
    apples = int(s.split()[0]) if 'apples' in s else 0
    oranges = int(s.split()[-2]) if 'oranges' in s else 0
    return n - apples - oranges
","
def fruit_distribution(s, n):
    apples, oranges = map(int, [x.split()[0] for x in s.split(""and"")])
    return n - apples - oranges
","
def fruit_distribution(s, n):
    apples = int(s.split()[0])
    oranges = int(s.split()[-2])
    return n - apples - oranges
","
def fruit_distribution(s, n):
    apples = int(s.split("" "")[0])
    oranges = int(s.split("" "")[-2])
    return n - apples - oranges
","
def fruit_distribution(s, n):
    total_fruits = n
    nums = [int(num) for num in s.split() if num.isdigit()]
    apples = nums[0] if ""apple"" in s else 0
    oranges = nums[-1] if ""orange"" in s else 0
    mangoes = total_fruits - apples - oranges
    return mangoes
","
def fruit_distribution(s, n):
    apples = int(s.split(' ')[0]) if 'apples' in s else 0
    oranges = int(s.split(' ')[-2]) if 'oranges' in s else 0
    mango = n - apples - oranges
    return mango
",100.0,"['8', '8', '8', '8', '8', '8']","['2', '2', '2', '2', '2', '2']","['95', '95', '95', '95', '95', '95']","['19', '19', '19', '19', '19', '19']","['12', '12', '12', '12', '12', '12']","['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['25', '25', '25', '25', '25', '25']","['7', '7', '7', '7', '7', '7']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/68,"
def pluck(arr):
    """"""
    ""Given an array representing a branch of a tree that has non-negative integer nodes
    your task is to pluck one of the nodes and return it.
    The plucked node should be the node with the smallest even value.
    If multiple nodes with the same smallest even value are found return the node that has smallest index.

    The plucked node should be returned in a list, [ smalest_value, its index ],
    If there are no even values or the given array is empty, return [].

    Example 1:
        Input: [4,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index.

    Example 2:
        Input: [1,2,3]
        Output: [2, 1]
        Explanation: 2 has the smallest even value, and 2 has the smallest index. 

    Example 3:
        Input: []
        Output: []
    
    Example 4:
        Input: [5, 0, 3, 0, 4, 2]
        Output: [0, 1]
        Explanation: 0 is the smallest value, but  there are two zeros,
                     so we will choose the first zero, which has the smallest index.

    Constraints:
        * 1 <= nodes.length <= 10000
        * 0 <= node.value
    """"""
","pluck([4, 2, 3])","pluck([1, 2, 3])",pluck([]),"pluck([5, 0, 3, 0, 4, 2])","pluck([3, 17, 5, 23, 55, 47])","pluck([357, 222, 164, 418, 420])","pluck([2, 2, 2, 2, 2, 2])",pluck([0]),"pluck([100, 566, 80, 4, 102, 4])","pluck([1, 5, 3, 11, 25])","
def pluck(arr):
    evens = [(index, val) for index, val in enumerate(arr) if val % 2 == 0]
    if not evens:
        return []
    smallest_even = min(evens, key=lambda x: (x[1], x[0]))
    return [smallest_even[1], smallest_even[0]]
","
from typing import List

def pluck(arr: List[int]) -> List[int]:
    evens = [num for num in arr if num % 2 == 0]
    
    if not evens:
        return []
    
    min_even = min(evens)
    min_even_index = arr.index(min_even)
    
    return [min_even, min_even_index]
","
def pluck(arr):
    evens = [num for num in arr if num % 2 == 0]
    if not evens:
        return []
    smallest_even = min(evens)
    index_smallest_even = arr.index(smallest_even)
    return [smallest_even, index_smallest_even]
","
from typing import List, Union

def pluck(arr: List[int]) -> List[Union[int, int]]:
    even_values = [num for num in arr if num % 2 == 0]
    
    if not even_values:
        return []
    
    min_even = min(even_values)
    min_even_index = arr.index(min_even)
    
    return [min_even, min_even_index]
","
def pluck(arr):
    even_values = [num for num in arr if num % 2 == 0]
    if not even_values:
        return []
    
    min_even_value = min(even_values)
    index = arr.index(min_even_value)
    
    return [min_even_value, index]
","
def pluck(arr):
    evens = [(num, idx) for idx, num in enumerate(arr) if num % 2 == 0]
    if not evens:
        return []
    smallest_value, smallest_idx = min(evens, key=lambda x: (x[0], x[1]))
    return [smallest_value, smallest_idx]
",100.0,"['[2, 1]', '[2, 1]', '[2, 1]', '[2, 1]', '[2, 1]', '[2, 1]']","['[2, 1]', '[2, 1]', '[2, 1]', '[2, 1]', '[2, 1]', '[2, 1]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[0, 1]', '[0, 1]', '[0, 1]', '[0, 1]', '[0, 1]', '[0, 1]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[164, 2]', '[164, 2]', '[164, 2]', '[164, 2]', '[164, 2]', '[164, 2]']","['[2, 0]', '[2, 0]', '[2, 0]', '[2, 0]', '[2, 0]', '[2, 0]']","['[0, 0]', '[0, 0]', '[0, 0]', '[0, 0]', '[0, 0]', '[0, 0]']","['[4, 3]', '[4, 3]', '[4, 3]', '[4, 3]', '[4, 3]', '[4, 3]']","['[]', '[]', '[]', '[]', '[]', '[]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/69,"
def search(lst):
    '''
    You are given a non-empty list of positive integers. Return the greatest integer that is greater than 
    zero, and has a frequency greater than or equal to the value of the integer itself. 
    The frequency of an integer is the number of times it appears in the list.
    If no such a value exist, return -1.
    Examples:
        search([4, 1, 2, 2, 3, 1]) == 2
        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3
        search([5, 5, 4, 4, 4]) == -1
    '''
","search([1, 2, 2, 3, 3, 3, 4, 4, 4])","search([4, 1, 2, 2, 3, 1])","search([5, 5, 4, 4, 4])","search([1, 1, 1, 1, 1])","search([5, 5, 5, 5, 5])","search([3, 3, 3, 1, 2])","search([7, 7, 7, 7, 7, 7, 7])","search([10, 10, 10, 9, 9, 8])","search([8, 9, 10])","search([6, 6, 6, 6, 2, 2, 2, 2, 2])","
from collections import Counter

def search(lst):
    counts = Counter(lst)
    max_val = -1
    for num, freq in counts.items():
        if num > 0 and freq >= num:
            max_val = max(max_val, num)
    return max_val
","
from collections import Counter

def search(lst):
    counts = Counter(lst)
    for num, freq in counts.items():
        if num > 0 and freq >= num:
            return num
    return -1
","
from collections import Counter

def search(lst):
    counts = Counter(lst)
    result = -1
    for num, count in counts.items():
        if num > 0 and count >= num:
            result = max(result, num)
    return result
","
from collections import Counter

def search(lst):
    counter = Counter(lst)
    res = -1
    for num, freq in counter.items():
        if num > 0 and freq >= num:
            res = max(res, num)
    return res
","
from collections import Counter

def search(lst):
    cnt = Counter(lst)
    max_val = -1
    for key, value in cnt.items():
        if key > 0 and value >= key:
            max_val = max(max_val, key)
    return max_val
","
from collections import Counter

def search(lst):
    count_dict = Counter(lst)
    for num, count in count_dict.items():
        if num > 0 and num <= count:
            return max((n for n in lst if n == num), default=-1)
    return -1
",96.8,"['3', '1', '3', '3', '3', '1']","['2', '1', '2', '2', '2', '1']","['-1', '-1', '-1', '-1', '-1', '-1']","['1', '1', '1', '1', '1', '1']","['5', '5', '5', '5', '5', '5']","['3', '3', '3', '3', '3', '3']","['7', '7', '7', '7', '7', '7']","['-1', '-1', '-1', '-1', '-1', '-1']","['-1', '-1', '-1', '-1', '-1', '-1']","['2', '2', '2', '2', '2', '2']",0.6,0.6,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,92.0
HumanEval/70,"
def strange_sort_list(lst):
    '''
    Given list of integers, return list in strange order.
    Strange sorting, is when you start with the minimum value,
    then maximum of the remaining integers, then minimum and so on.

    Examples:
    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]
    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]
    strange_sort_list([]) == []
    '''
","strange_sort_list([1, 2, 3, 4])","strange_sort_list([5, 5, 5, 5])",strange_sort_list([]),"strange_sort_list([10, 1, 9, 2, 8, 3, 7, 4, 6, 5])",strange_sort_list([1]),"strange_sort_list([1, 1, 1, 2])","strange_sort_list([-3, -1, -2, 0, 2])",strange_sort_list([7]),"strange_sort_list([9, 7, 5, 3, 2, 8, 6, 4, 10])","strange_sort_list([100, 50, 150, 75, 25, 125, 175])","
from typing import List

def strange_sort_list(lst: List[int]) -> List[int]:
    lst.sort()
    sorted_lst = []
    while lst:
        sorted_lst.append(lst.pop(0))
        if lst:
            sorted_lst.append(lst.pop())
    return sorted_lst
","
from typing import List

def strange_sort_list(lst: List[int]) -> List[int]:
    lst.sort()
    result = []
    while lst:
        result.append(lst.pop(0))
        if lst:
            result.append(lst.pop())
    return result
","
from typing import List

def strange_sort_list(lst: List[int]) -> List[int]:
    sorted_lst = []
    lst.sort()
    while lst:
        sorted_lst.append(lst.pop(0))
        if lst:
            sorted_lst.append(lst.pop())
    return sorted_lst
","
def strange_sort_list(lst):
    from collections import deque
    resulting_list = []
    lst.sort()
    lst = deque(lst)
    while lst:
        resulting_list.append(lst.popleft())
        if lst:
            resulting_list.append(lst.pop())
    return resulting_list
","
from typing import List

def strange_sort_list(lst: List[int]) -> List[int]:
    sorted_lst = []
    lst.sort()
    
    while lst:
        sorted_lst.append(lst.pop(0))
        if lst:
            sorted_lst.append(lst.pop())

    return sorted_lst
","
from typing import List

def strange_sort_list(lst: List[int]) -> List[int]:
    lst.sort()
    result = []
    while lst:
        result.append(lst.pop(0))
        if lst:
            result.append(lst.pop())
    return result
",100.0,"['[1, 4, 2, 3]', '[1, 4, 2, 3]', '[1, 4, 2, 3]', '[1, 4, 2, 3]', '[1, 4, 2, 3]', '[1, 4, 2, 3]']","['[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[1, 10, 2, 9, 3, 8, 4, 7, 5, 6]', '[1, 10, 2, 9, 3, 8, 4, 7, 5, 6]', '[1, 10, 2, 9, 3, 8, 4, 7, 5, 6]', '[1, 10, 2, 9, 3, 8, 4, 7, 5, 6]', '[1, 10, 2, 9, 3, 8, 4, 7, 5, 6]', '[1, 10, 2, 9, 3, 8, 4, 7, 5, 6]']","['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']","['[1, 2, 1, 1]', '[1, 2, 1, 1]', '[1, 2, 1, 1]', '[1, 2, 1, 1]', '[1, 2, 1, 1]', '[1, 2, 1, 1]']","['[-3, 2, -2, 0, -1]', '[-3, 2, -2, 0, -1]', '[-3, 2, -2, 0, -1]', '[-3, 2, -2, 0, -1]', '[-3, 2, -2, 0, -1]', '[-3, 2, -2, 0, -1]']","['[7]', '[7]', '[7]', '[7]', '[7]', '[7]']","['[2, 10, 3, 9, 4, 8, 5, 7, 6]', '[2, 10, 3, 9, 4, 8, 5, 7, 6]', '[2, 10, 3, 9, 4, 8, 5, 7, 6]', '[2, 10, 3, 9, 4, 8, 5, 7, 6]', '[2, 10, 3, 9, 4, 8, 5, 7, 6]', '[2, 10, 3, 9, 4, 8, 5, 7, 6]']","['[25, 175, 50, 150, 75, 125, 100]', '[25, 175, 50, 150, 75, 125, 100]', '[25, 175, 50, 150, 75, 125, 100]', '[25, 175, 50, 150, 75, 125, 100]', '[25, 175, 50, 150, 75, 125, 100]', '[25, 175, 50, 150, 75, 125, 100]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/71,"
def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
","triangle_area(3, 4, 5)","triangle_area(1, 2, 10)","triangle_area(6, 8, 10)","triangle_area(5, 5, 5)","triangle_area(2, 2, 4)","triangle_area(7.5, 7.5, 7.5)","triangle_area(9, 12, 15)","triangle_area(0.5, 0.5, 0.5)","triangle_area(100, 100, 100)","triangle_area(10, 6, 3)","
import math

def triangle_area(a, b, c):
    if a + b > c and b + c > a and a + c > b:
        s = (a + b + c) / 2
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
import math

def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''

    def calc_area(a, b, c):
        s = (a + b + c) / 2
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2) if area > 0 else -1

    return calc_area(a, b, c) if a + b > c and a + c > b and b + c > a else -1
  ","
import math

def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
from math import sqrt

def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
","
import math

def triangle_area(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return the area of
    the triangle rounded to 2 decimal points if the three sides form a valid triangle. 
    Otherwise return -1
    Three sides make a valid triangle when the sum of any two sides is greater 
    than the third side.
    Example:
    triangle_area(3, 4, 5) == 6.00
    triangle_area(1, 2, 10) == -1
    '''
    
    if a + b > c and b + c > a and a + c > b:
        s = (a + b + c) / 2
        area = math.sqrt(s * (s - a) * (s - b) * (s - c))
        return round(area, 2)
    else:
        return -1
  ","
import math

def triangle_area(a, b, c):
    s = (a + b + c) / 2
    area = math.sqrt(s * (s - a) * (s - b) * (s - c))
    return round(area, 2) if a + b > c and a + c > b and b + c > a else -1
",93.33333333333333,"['6.0', '6.0', '6.0', '6.0', '6.0', '6.0']","['-1', '-1', '-1', '-1', '-1', '']","['24.0', '24.0', '24.0', '24.0', '24.0', '24.0']","['10.83', '10.83', '10.83', '10.83', '10.83', '10.83']","['-1', '-1', '-1', '-1', '-1', '-1']","['24.36', '24.36', '24.36', '24.36', '24.36', '24.36']","['54.0', '54.0', '54.0', '54.0', '54.0', '54.0']","['0.11', '0.11', '0.11', '0.11', '0.11', '0.11']","['4330.13', '4330.13', '4330.13', '4330.13', '4330.13', '4330.13']","['-1', '-1', '-1', '-1', '-1', '']",1.0,0.8,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.8,96.00000000000001
HumanEval/72,"
def will_it_fly(q,w):
    '''
    Write a function that returns True if the object q will fly, and False otherwise.
    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.

    Example:
    will_it_fly([1, 2], 5) ➞ False 
    # 1+2 is less than the maximum possible weight, but it's unbalanced.

    will_it_fly([3, 2, 3], 1) ➞ False
    # it's balanced, but 3+2+3 is more than the maximum possible weight.

    will_it_fly([3, 2, 3], 9) ➞ True
    # 3+2+3 is less than the maximum possible weight, and it's balanced.

    will_it_fly([3], 5) ➞ True
    # 3 is less than the maximum possible weight, and it's balanced.
    '''
","will_it_fly([1, 2], 5)","will_it_fly([3, 2, 3], 1)","will_it_fly([3, 2, 3], 9)","will_it_fly([3], 5)","will_it_fly([], 0)","will_it_fly([1, 2, 2, 1], 10)","will_it_fly([1, 2, 2, 1], 5)","will_it_fly([9], 8)","will_it_fly([10, 20, 10], 40)","will_it_fly([10, 20, 30, 20, 10], 200)","
def will_it_fly(q, w):
    if sum(q) <= w and q == q[::-1]:
        return True
    else:
        return False
","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    return sum(q) <= w and q == q[::-1]
  ","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    if q == q[::-1] and sum(q) <= w:
        return True
    else:
        return False
","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    return q == q[::-1] and sum(q) <= w
","
from typing import List

def will_it_fly(q: List[int], w: int) -> bool:
    return q == q[::-1] and sum(q) <= w
","
from collections import deque

def will_it_fly(q, w):
    def is_palindrome(lst):
        return lst == lst[::-1]
    
    if is_palindrome(q) and sum(q) <= w:
        return True
    else:
        return False
",100.0,"['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/73,"
def smallest_change(arr):
    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """"""
","smallest_change([1, 2, 3, 4, 5])","smallest_change([1, 1, 1, 1, 1])","smallest_change([1, 2, 1])","smallest_change([1, 2, 2, 1])","smallest_change([5, 4, 3, 4, 5])","smallest_change([1, 0, 0, 1])","smallest_change([9, 8, 7, 6, 7, 8, 9])",smallest_change([5]),"smallest_change([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])","smallest_change([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])","
from typing import List

def smallest_change(arr: List[int]) -> int:
    """"""
    Given an array arr of integers, find the minimum number of elements that
    need to be changed to make the array palindromic. A palindromic array is an array that
    is read the same backwards and forwards. In one change, you can change one element to any other element.

    For example:
    smallest_change([1,2,3,5,4,7,9,6]) == 4
    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1
    smallest_change([1, 2, 3, 2, 1]) == 0
    """"""
    def is_palindromic(lst: List[int]) -> bool:
        return lst == lst[::-1]

    changes = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - 1 - i]:
            changes += 1

    return changes
","
from collections import Counter

def smallest_change(arr):
    def min_changes_to_palindrome(arr):
        n = len(arr)
        if n < 2:
            return 0
        
        half_len = n // 2
        count = Counter(arr[:half_len])
        changes_needed = half_len - max(dict(count).values())
        return changes_needed
    
    return min_changes_to_palindrome(arr)
","
from typing import List, Dict

def smallest_change(arr: List[int]) -> int:
    counter: Dict[int, int] = {}
    
    for num in arr:
        if num in counter:
            counter[num] += 1
        else:
            counter[num] = 1

    odd_count = 0
    for val in counter.values():
        if val % 2 != 0:
            odd_count += 1

    return max(0, odd_count - 1)
","
from collections import Counter

def smallest_change(arr):
    counter = Counter(arr)
    changes_needed = 0
    for key, value in counter.items():
        if value % 2 != 0:
            changes_needed += 1
    return max(changes_needed - 1, 0)
","
from collections import Counter

def smallest_change(arr):
    counter = Counter(arr)
    odd_count = 0
    for element_count in counter.values():
        if element_count % 2 != 0:
            odd_count += 1
    return max(odd_count - 1, 0)
","
from typing import List

def smallest_change(arr: List[int]) -> int:
    n = len(arr)
    changes = 0
    
    for i in range(n // 2):
        if arr[i] != arr[n - i - 1]:
            changes += 1
    
    return changes
",62.5,"['2', '1', '4', '4', '4', '2']","['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['0', '1', '0', '0', '0', '0']","['0', '1', '0', '0', '0', '0']","['0', '1', '0', '0', '0', '0']","['0', '2', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['5', '4', '9', '9', '9', '5']","['5', '4', '9', '9', '9', '5']",0.2,1.0,1.0,0.8,0.8,0.8,0.8,1.0,0.2,0.2,68.0
HumanEval/74,"
def total_match(lst1, lst2):
    '''
    Write a function that accepts two lists of strings and returns the list that has 
    total number of chars in the all strings of the list less than the other list.

    if the two lists have the same number of chars, return the first list.

    Examples
    total_match([], []) ➞ []
    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']
    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']
    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']
    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']
    '''
","total_match([], [])","total_match(['hi', 'admin'], ['hI', 'Hi'])","total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])","total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])","total_match(['4'], ['1', '2', '3', '4', '5'])","total_match(['short', 'longstring'], ['aaa', 'bbb', 'ccc'])","total_match(['apple', 'banana'], ['apple', 'banana'])","total_match(['12345', '67890', '123456'], ['abcdef', 'ghijklmno', 'pqrst'])","total_match(['', '', ''], ['a', 'b'])","total_match(['single'], [''])","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    return lst1 if sum(len(word) for word in lst1) >= sum(len(word) for word in lst2) else lst2
","
def total_match(lst1, lst2):
    total_chars_lst1 = sum(len(word) for word in lst1)
    total_chars_lst2 = sum(len(word) for word in lst2)
    
    if total_chars_lst1 < total_chars_lst2:
        return lst1
    else:
        return lst2
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    def total_chars(list: List[str]) -> int:
        return sum(len(string) for string in list)

    if total_chars(lst1) < total_chars(lst2):
        return lst1
    return lst2
","
from typing import List

def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
    def total_chars(lst: List[str]) -> int:
        return sum(len(word) for word in lst)

    if total_chars(lst1) > total_chars(lst2):
        return lst2
    return lst1
","
def total_match(lst1, lst2):
    total_chars_lst1 = sum(len(s) for s in lst1)
    total_chars_lst2 = sum(len(s) for s in lst2)

    if total_chars_lst1 < total_chars_lst2:
        return lst2
    else:
        return lst1
","
def total_match(lst1, lst2):
    from functools import reduce
    
    count_chars = lambda lst: reduce(lambda x, y: x + len(y), lst, 0)
    
    if count_chars(lst1) < count_chars(lst2):
        return lst1
    else:
        return lst2
",77.77777777777779,"['[]', '[]', '[]', '[]', '[]', '[]']","[""['hi', 'admin']"", ""['hI', 'Hi']"", ""['hI', 'Hi']"", ""['hI', 'Hi']"", ""['hi', 'admin']"", ""['hI', 'Hi']""]","[""['hi', 'hi', 'admin', 'project']"", ""['hi', 'admin']"", ""['hi', 'admin']"", ""['hi', 'admin']"", ""['hi', 'hi', 'admin', 'project']"", ""['hi', 'admin']""]","[""['hi', 'admin']"", ""['hI', 'hi', 'hi']"", ""['hI', 'hi', 'hi']"", ""['hI', 'hi', 'hi']"", ""['hi', 'admin']"", ""['hI', 'hi', 'hi']""]","[""['1', '2', '3', '4', '5']"", ""['4']"", ""['4']"", ""['4']"", ""['1', '2', '3', '4', '5']"", ""['4']""]","[""['short', 'longstring']"", ""['aaa', 'bbb', 'ccc']"", ""['aaa', 'bbb', 'ccc']"", ""['aaa', 'bbb', 'ccc']"", ""['short', 'longstring']"", ""['aaa', 'bbb', 'ccc']""]","[""['apple', 'banana']"", ""['apple', 'banana']"", ""['apple', 'banana']"", ""['apple', 'banana']"", ""['apple', 'banana']"", ""['apple', 'banana']""]","[""['abcdef', 'ghijklmno', 'pqrst']"", ""['12345', '67890', '123456']"", ""['12345', '67890', '123456']"", ""['12345', '67890', '123456']"", ""['abcdef', 'ghijklmno', 'pqrst']"", ""['12345', '67890', '123456']""]","[""['a', 'b']"", ""['', '', '']"", ""['', '', '']"", ""['', '', '']"", ""['a', 'b']"", ""['', '', '']""]","[""['single']"", ""['']"", ""['']"", ""['']"", ""['single']"", ""['']""]",1.0,0.2,0.2,0.2,0.2,0.2,1.0,0.2,0.2,0.2,36.00000000000001
HumanEval/75,"
def is_multiply_prime(a):
    """"""Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """"""
",is_multiply_prime(30),is_multiply_prime(15),is_multiply_prime(2),is_multiply_prime(105),is_multiply_prime(5),is_multiply_prime(1),is_multiply_prime(60),is_multiply_prime(97),is_multiply_prime(42),is_multiply_prime(99),"
import sympy

def is_multiply_prime(a):
    primes = list(sympy.primerange(2, 100))
    for i in primes:
        for j in primes:
            for k in primes:
                if i * j * k == a:
                    return True
    return False
","
import sympy

def is_multiply_prime(a):
    primes = list(sympy.primerange(1, 100))
    for i in primes:
        for j in primes:
            for k in primes:
                if i*j*k == a:
                    return True
    return False
","

import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, math.isqrt(num) + 1):
        if num % i == 0:
            return False
    return True

def is_multiply_prime(a):
    if a > 1:
        prime_count = 0
        for i in range(2, a):
            if is_prime(i) and a % i == 0:
                prime_count += 1
        if prime_count == 3:
            return True
    return False

","
import sympy

def is_multiply_prime(a):
    primes = list(sympy.primerange(2, 100))
    count = 0
    for p in primes:
        if a % p == 0:
            count += 1
    return count == 3
","
import sympy

def is_multiply_prime(a):
    primes = list(sympy.primerange(2, 100))
    for i in primes:
        for j in primes:
            for k in primes:
                if i*j*k == a:
                    return True
    return False
","
import itertools

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_multiply_prime(a):
    primes = [i for i in range(2, 100) if is_prime(i)]
    for combo in itertools.combinations(primes, 3):
        if a == combo[0] * combo[1] * combo[2]:
            return True
    return False
",84.0,"['', '', 'True', '', '', 'True']","['', '', 'False', '', '', 'False']","['', '', 'False', '', '', 'False']","['', '', 'True', '', '', 'True']","['', '', 'False', '', '', 'False']","['', '', 'False', '', '', 'False']","['', '', 'True', '', '', 'False']","['', '', 'False', '', '', 'False']","['', '', 'True', '', '', 'True']","['', '', 'False', '', '', 'False']",0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,59.999999999999986
HumanEval/76,"
def is_simple_power(x, n):
    """"""Your task is to write a function that returns true if a number x is a simple
    power of n and false in other cases.
    x is a simple power of n if n**int=x
    For example:
    is_simple_power(1, 4) => true
    is_simple_power(2, 2) => true
    is_simple_power(8, 2) => true
    is_simple_power(3, 2) => false
    is_simple_power(3, 1) => false
    is_simple_power(5, 3) => false
    """"""
","is_simple_power(1, 1)","is_simple_power(4, 2)","is_simple_power(27, 3)","is_simple_power(16, 4)","is_simple_power(256, 2)","is_simple_power(3, 3)","is_simple_power(64, 8)","is_simple_power(10, 2)","is_simple_power(0, 5)","is_simple_power(-8, -2)","
import math

def is_simple_power(x, n):
    return x > 0 and n > 0 and math.log(x, n).is_integer()
","
import math

def is_simple_power(x, n):
    return math.log(x, n).is_integer() if x > 0 else False
","
import math

def is_simple_power(x, n):
    return n**int(math.log(x, n)) == x
","
from math import log

def is_simple_power(x, n):
    return x > 0 and log(x, n).is_integer()
","
import math

def is_simple_power(x, n):
    return x > 0 and math.log(x, n).is_integer()
","
import math

def is_simple_power(x, n):
    return x > 0 and n > 0 and math.log(x, n).is_integer()
",90.0,"['', '', '', '', '', '']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', '', 'False', 'False', 'False']","['False', 'False', '', 'False', 'False', 'False']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.8,0.8,96.00000000000001
HumanEval/77,"
def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this ingeger is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''
",iscube(1),iscube(27),iscube(-8),iscube(64),iscube(0),iscube(343),iscube(-27),iscube(125),iscube(730),iscube(-125),"
from math import pow, isqrt

def iscube(a):
    return pow(isqrt(abs(a)), 3) == abs(a)
","
import math

def iscube(a):
    return math.isqrt(abs(a))**3 == abs(a)
","
import math

def iscube(a):
    return math.isqrt(abs(a)) ** 3 == abs(a)
  ","
from math import isqrt

def iscube(a):
    return a == isqrt(abs(a))**3 if a != 0 else True
","
from math import isqrt

def iscube(a):
    '''
    Write a function that takes an integer a and returns True 
    if this integer is a cube of some integer number.
    Note: you may assume the input is always valid.
    Examples:
    iscube(1) ==> True
    iscube(2) ==> False
    iscube(-1) ==> True
    iscube(64) ==> True
    iscube(0) ==> True
    iscube(180) ==> False
    '''

    if a < 0:
        a = -a
    
    return isqrt(a) ** 3 == a
","
import math

def iscube(a):
    return math.isqrt(abs(a)) ** 3 == a
",70.0,"['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'False', 'True', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']",1.0,1.0,0.6,1.0,1.0,1.0,1.0,1.0,1.0,1.0,96.0
HumanEval/78,"
def hex_key(num):
    """"""You have been tasked to write a function that receives 
    a hexadecimal number as a string and counts the number of hexadecimal 
    digits that are primes (prime number, or a prime, is a natural number 
    greater than 1 that is not a product of two smaller natural numbers).
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.
    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...
    So you have to determine a number of the following digits: 2, 3, 5, 7, 
    B (=decimal 11), D (=decimal 13).
    Note: you may assume the input is always correct or empty string, 
    and symbols A,B,C,D,E,F are always uppercase.
    Examples:
    For num = ""AB"" the output should be 1.
    For num = ""1077E"" the output should be 2.
    For num = ""ABED1A33"" the output should be 4.
    For num = ""123456789ABCDEF0"" the output should be 6.
    For num = ""2020"" the output should be 2.
    """"""
","hex_key(""AB"")","hex_key(""1077E"")","hex_key(""ABED1A33"")","hex_key(""123456789ABCDEF0"")","hex_key(""2020"")","hex_key("""")","hex_key(""FFFF"")","hex_key(""234567BBD"")","hex_key(""000000000000"")","hex_key(""222333444555666777888999AAABBBCCCDDDEEEFFF"")","
def hex_key(num):
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    count = 0
    primes = set([2, 3, 5, 7, 11, 13, 17])
    hex_digits = ""0123456789ABCDEF""
    
    for char in num:
        if char in hex_digits:
            decimal_value = int(char, 16)
            if decimal_value in primes:
                count += 1
    
    return count
","
import sympy

def hex_key(num):
    primes = [2, 3, 5, 7, 11, 13]
    hex_digits = ""0123456789ABCDEF""
    
    count = 0
    for digit in num:
        if digit in hex_digits:
            decimal_val = int(digit, 16)
            if decimal_val in primes or sympy.isprime(decimal_val):
                count += 1

    return count
","
from sympy import isprime

def hex_key(num):
    primes_hex = set('2357BD')  # Prime hexadecimal digits
    count = sum(1 for char in num if char.upper() in primes_hex and isprime(int(char, 16)))
    return count
","
from sympy import isprime

def hex_key(num):
    primes = ['2', '3', '5', '7', 'B', 'D']
    count = 0
    for digit in num:
        if digit in primes:
            count += 1
    return count
","
import math

def hex_key(num):
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    primes = set([2, 3, 5, 7, 11, 13]) # primes up to 13 for hexadecimal digits

    count = 0
    for digit in num:
        if digit.isdigit():
            decimal_digit = int(digit)
            if decimal_digit in primes:
                count += 1
        else:
            hex_values = {'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15}
            decimal_digit = hex_values[digit]
            if is_prime(decimal_digit):
                count += 1
    return count
","
import re
from sympy import isprime

def hex_key(num):
    prime_digits = [""2"", ""3"", ""5"", ""7"", ""B"", ""D""]
    count = 0
    for digit in num:
        if digit.upper() in prime_digits:
            count += 1
    return count
",100.0,"['1', '', '', '', '1', '']","['2', '', '', '', '2', '']","['4', '', '', '', '4', '']","['6', '', '', '', '6', '']","['2', '', '', '', '2', '']","['0', '', '', '', '0', '']","['0', '', '', '', '0', '']","['7', '', '', '', '7', '']","['0', '', '', '', '0', '']","['18', '', '', '', '18', '']",0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,20.0
HumanEval/79,"
def decimal_to_binary(decimal):
    """"""You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns ""db1111db""
    decimal_to_binary(32)   # returns ""db100000db""
    """"""
",decimal_to_binary(0),decimal_to_binary(1),decimal_to_binary(2),decimal_to_binary(8),decimal_to_binary(255),decimal_to_binary(1023),decimal_to_binary(2048),decimal_to_binary(-1),decimal_to_binary(-256),decimal_to_binary(9999),"
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return f""db{binary}db""
","
def decimal_to_binary(decimal):
    binary_num = bin(decimal)[2:]
    binary_str = 'db' + binary_num + 'db'
    return binary_str
","
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return f""db{binary}db""
","
def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return f""db{binary}db""
","
def decimal_to_binary(decimal):
    binary_num = bin(decimal)[2:]
    return 'db' + binary_num + 'db'
","
def decimal_to_binary(decimal):
    binary_number = bin(decimal)[2:]
    return f'db{binary_number}db'
",100.0,"['db0db', 'db0db', 'db0db', 'db0db', 'db0db', 'db0db']","['db1db', 'db1db', 'db1db', 'db1db', 'db1db', 'db1db']","['db10db', 'db10db', 'db10db', 'db10db', 'db10db', 'db10db']","['db1000db', 'db1000db', 'db1000db', 'db1000db', 'db1000db', 'db1000db']","['db11111111db', 'db11111111db', 'db11111111db', 'db11111111db', 'db11111111db', 'db11111111db']","['db1111111111db', 'db1111111111db', 'db1111111111db', 'db1111111111db', 'db1111111111db', 'db1111111111db']","['db100000000000db', 'db100000000000db', 'db100000000000db', 'db100000000000db', 'db100000000000db', 'db100000000000db']","['dbb1db', 'dbb1db', 'dbb1db', 'dbb1db', 'dbb1db', 'dbb1db']","['dbb100000000db', 'dbb100000000db', 'dbb100000000db', 'dbb100000000db', 'dbb100000000db', 'dbb100000000db']","['db10011100001111db', 'db10011100001111db', 'db10011100001111db', 'db10011100001111db', 'db10011100001111db', 'db10011100001111db']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/80,"
def is_happy(s):
    """"""You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """"""
","is_happy(""a"")","is_happy(""aa"")","is_happy(""abc"")","is_happy(""abca"")","is_happy(""xy"")","is_happy(""xyy"")","is_happy(""xyz"")","is_happy(""xyzzz"")","is_happy("""")","is_happy(""abcdefg"")","
from itertools import islice

def is_happy(s):
    return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] for i in range(len(s) - 2))
  ","
from typing import List

def is_happy(s: str) -> bool:
    return len(s) >= 3 and all(s[i] != s[i + 1] and s[i] != s[i + 2] and s[i + 1] != s[i + 2] for i in range(len(s) - 2))
","
from itertools import islice

def is_happy(s):
    return len(s) >= 3 and all(len(set(window)) == 3 for window in zip(s, islice(s, 1, None), islice(s, 2, None)))
","
def is_happy(s):
    from itertools import islice
    
    if len(s) < 3:
        return False
    
    for i in range(len(s)-2):
        if len(set(islice(s, i, i+3))) < 3:
            return False
    
    return True
","
def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:
            return False
    return True
","
from typing import List

def is_happy(s: str) -> bool:
    """"""You are given a string s.
    Your task is to check if the string is happy or not.
    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct
    For example:
    is_happy(a) => False
    is_happy(aa) => False
    is_happy(abcd) => True
    is_happy(aabb) => False
    is_happy(adb) => True
    is_happy(xyy) => False
    """"""
    if len(s) < 3:
        return False

    for i in range(len(s) - 2):
        if len(set(s[i:i+3])) != 3:
            return False

    return True
",100.0,"['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/81,"
def numerical_letter_grade(grades):
    """"""It is the last week of the semester and the teacher has to give the grades
    to students. The teacher has been making her own algorithm for grading.
    The only problem is, she has lost the code she used for grading.
    She has given you a list of GPAs for some students and you have to write 
    a function that can output a list of letter grades using the following table:
             GPA       |    Letter grade
              4.0                A+
            > 3.7                A 
            > 3.3                A- 
            > 3.0                B+
            > 2.7                B 
            > 2.3                B-
            > 2.0                C+
            > 1.7                C
            > 1.3                C-
            > 1.0                D+ 
            > 0.7                D 
            > 0.0                D-
              0.0                E
    

    Example:
    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']
    """"""
","numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])","numerical_letter_grade([4.0, 4.0, 4.0, 4.0])","numerical_letter_grade([3.71, 3.75, 3.8, 3.9])","numerical_letter_grade([3.31, 3.33, 3.34, 3.35])","numerical_letter_grade([2.0, 1.0, 0.0, 0.5, 2.7])","numerical_letter_grade([0.8, 1.0, 1.4, 1.7, 0.7])","numerical_letter_grade([0.0, 0.1, 0.5])",numerical_letter_grade([4.0]),"numerical_letter_grade([2.31, 2.70, 3.01])","numerical_letter_grade([1.71, 1.72, 1.73, 1.74])","
def numerical_letter_grade(grades):
    letter_grades = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grades.append('A+')
        elif gpa > 3.7:
            letter_grades.append('A')
        elif gpa > 3.3:
            letter_grades.append('A-')
        elif gpa > 3.0:
            letter_grades.append('B+')
        elif gpa > 2.7:
            letter_grades.append('B')
        elif gpa > 2.3:
            letter_grades.append('B-')
        elif gpa > 2.0:
            letter_grades.append('C+')
        elif gpa > 1.7:
            letter_grades.append('C')
        elif gpa > 1.3:
            letter_grades.append('C-')
        elif gpa > 1.0:
            letter_grades.append('D+')
        elif gpa > 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('E')
    return letter_grades
","
from typing import List

def numerical_letter_grade(grades: List[float]) -> List[str]:
    grade_mapping = {
        4.0: 'A+',
        3.7: 'A',
        3.3: 'A-',
        3.0: 'B+',
        2.7: 'B',
        2.3: 'B-',
        2.0: 'C+',
        1.7: 'C',
        1.3: 'C-',
        1.0: 'D+',
        0.7: 'D',
        0.0: 'D-',
        -1: 'E'  # Default value if GPA doesn't match any range
    }
    
    letter_grades = []
    for gpa in grades:
        letter_grade = grade_mapping[max(key for key in grade_mapping if key <= gpa)]
        letter_grades.append(letter_grade)
    
    return letter_grades
","
def numerical_letter_grade(grades):
    letter_grades = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grades.append('A+')
        elif gpa > 3.7:
            letter_grades.append('A')
        elif gpa > 3.3:
            letter_grades.append('A-')
        elif gpa > 3.0:
            letter_grades.append('B+')
        elif gpa > 2.7:
            letter_grades.append('B')
        elif gpa > 2.3:
            letter_grades.append('B-')
        elif gpa > 2.0:
            letter_grades.append('C+')
        elif gpa > 1.7:
            letter_grades.append('C')
        elif gpa > 1.3:
            letter_grades.append('C-')
        elif gpa > 1.0:
            letter_grades.append('D+')
        elif gpa > 0.7:
            letter_grades.append('D')
        else:
            letter_grades.append('E')
    return letter_grades
","
from typing import List

def numerical_letter_grade(grades: List[float]) -> List[str]:
    letter_grades = []
    for grade in grades:
        if grade == 4.0:
            letter_grades.append('A+')
        elif grade > 3.7:
            letter_grades.append('A')
        elif grade > 3.3:
            letter_grades.append('A-')
        elif grade > 3.0:
            letter_grades.append('B+')
        elif grade > 2.7:
            letter_grades.append('B')
        elif grade > 2.3:
            letter_grades.append('B-')
        elif grade > 2.0:
            letter_grades.append('C+')
        elif grade > 1.7:
            letter_grades.append('C')
        elif grade > 1.3:
            letter_grades.append('C-')
        elif grade > 1.0:
            letter_grades.append('D+')
        elif grade > 0.7:
            letter_grades.append('D')
        elif grade >= 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades
","
def numerical_letter_grade(grades):
    letter_grades = []
    for grade in grades:
        if grade == 4.0:
            letter_grades.append('A+')
        elif grade > 3.7:
            letter_grades.append('A')
        elif grade > 3.3:
            letter_grades.append('A-')
        elif grade > 3.0:
            letter_grades.append('B+')
        elif grade > 2.7:
            letter_grades.append('B')
        elif grade > 2.3:
            letter_grades.append('B-')
        elif grade > 2.0:
            letter_grades.append('C+')
        elif grade > 1.7:
            letter_grades.append('C')
        elif grade > 1.3:
            letter_grades.append('C-')
        elif grade > 1.0:
            letter_grades.append('D+')
        elif grade > 0.7:
            letter_grades.append('D')
        elif grade >= 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades
  ","
def numerical_letter_grade(grades):
    letter_grades = []
    for grade in grades:
        if grade == 4.0:
            letter_grades.append('A+')
        elif grade > 3.7:
            letter_grades.append('A')
        elif grade > 3.3:
            letter_grades.append('A-')
        elif grade > 3.0:
            letter_grades.append('B+')
        elif grade > 2.7:
            letter_grades.append('B')
        elif grade > 2.3:
            letter_grades.append('B-')
        elif grade > 2.0:
            letter_grades.append('C+')
        elif grade > 1.7:
            letter_grades.append('C')
        elif grade > 1.3:
            letter_grades.append('C-')
        elif grade > 1.0:
            letter_grades.append('D+')
        elif grade > 0.7:
            letter_grades.append('D')
        elif grade > 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades
  ",63.33333333333333,"[""['A+', 'B', 'C-', 'C', 'A-']"", ""['A+', 'B+', 'C', 'C+', 'A-']"", ""['A+', 'B', 'C-', 'C', 'A-']"", ""['A+', 'B', 'C-', 'C', 'A-']"", ""['A+', 'B', 'C-', 'C', 'A-']"", ""['A+', 'B', 'C-', 'C', 'A-']""]","[""['A+', 'A+', 'A+', 'A+']"", ""['A+', 'A+', 'A+', 'A+']"", ""['A+', 'A+', 'A+', 'A+']"", ""['A+', 'A+', 'A+', 'A+']"", ""['A+', 'A+', 'A+', 'A+']"", ""['A+', 'A+', 'A+', 'A+']""]","[""['A', 'A', 'A', 'A']"", ""['A', 'A', 'A', 'A']"", ""['A', 'A', 'A', 'A']"", ""['A', 'A', 'A', 'A']"", ""['A', 'A', 'A', 'A']"", ""['A', 'A', 'A', 'A']""]","[""['A-', 'A-', 'A-', 'A-']"", ""['A-', 'A-', 'A-', 'A-']"", ""['A-', 'A-', 'A-', 'A-']"", ""['A-', 'A-', 'A-', 'A-']"", ""['A-', 'A-', 'A-', 'A-']"", ""['A-', 'A-', 'A-', 'A-']""]","[""['C', 'D', 'E', 'E', 'B-']"", ""['C+', 'D+', 'D-', 'D-', 'B']"", ""['C', 'D', 'E', 'E', 'B-']"", ""['C', 'D', 'D-', 'D-', 'B-']"", ""['C', 'D', 'D-', 'D-', 'B-']"", ""['C', 'D', 'E', 'D-', 'B-']""]","[""['D', 'D', 'C-', 'C-', 'E']"", ""['D', 'D+', 'C-', 'C', 'D']"", ""['D', 'D', 'C-', 'C-', 'E']"", ""['D', 'D', 'C-', 'C-', 'D-']"", ""['D', 'D', 'C-', 'C-', 'D-']"", ""['D', 'D', 'C-', 'C-', 'D-']""]","[""['E', 'E', 'E']"", ""['D-', 'D-', 'D-']"", ""['E', 'E', 'E']"", ""['D-', 'D-', 'D-']"", ""['D-', 'D-', 'D-']"", ""['E', 'D-', 'D-']""]","[""['A+']"", ""['A+']"", ""['A+']"", ""['A+']"", ""['A+']"", ""['A+']""]","[""['B-', 'B-', 'B+']"", ""['B-', 'B', 'B+']"", ""['B-', 'B-', 'B+']"", ""['B-', 'B-', 'B+']"", ""['B-', 'B-', 'B+']"", ""['B-', 'B-', 'B+']""]","[""['C', 'C', 'C', 'C']"", ""['C', 'C', 'C', 'C']"", ""['C', 'C', 'C', 'C']"", ""['C', 'C', 'C', 'C']"", ""['C', 'C', 'C', 'C']"", ""['C', 'C', 'C', 'C']""]",0.8,1.0,1.0,1.0,0.2,0.2,0.2,1.0,0.8,1.0,72.0
HumanEval/82,"
def prime_length(string):
    """"""Write a function that takes a string and returns True if the string
    length is a prime number or False otherwise
    Examples
    prime_length('Hello') == True
    prime_length('abcdcba') == True
    prime_length('kittens') == True
    prime_length('orange') == False
    """"""
","prime_length(""a"")","prime_length("""")","prime_length(""toy"")","prime_length(""onomatopoeia"")","prime_length(""abcdefghijklmnopqrst"")","prime_length(""xy"")","prime_length(""football"")","prime_length(""1234567890"")","prime_length(""ab"")","prime_length(""404"")","
import math

def prime_length(string):
    def is_prime(n):
        if n <= 1:
            return False
        if n <= 3:
            return True
        if n % 2 == 0 or n % 3 == 0:
            return False
        i = 5
        while i * i <= n:
            if n % i == 0 or n % (i + 2) == 0:
                return False
            i += 6
        return True

    length = len(string)
    return is_prime(length)
","
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, math.isqrt(n) + 1):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    
    return True

def prime_length(string):
    return is_prime(len(string))
","
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))

",100.0,"['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/83,"
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
",starts_one_ends(1),starts_one_ends(2),starts_one_ends(5),starts_one_ends(10),starts_one_ends(13),starts_one_ends(20),starts_one_ends(3),starts_one_ends(7),starts_one_ends(15),starts_one_ends(25),"
def starts_one_ends(n):
    """"""
    Given a positive integer n, return the count of the numbers of n-digit
    positive integers that start or end with 1.
    """"""
    
    if n == 1:
        return 2
    else:
        start_one_count = 9 * (10 ** (n - 1))
        end_one_count = 10 ** (n - 1)
        return start_one_count + end_one_count - starts_one_ends(n-1)
","
def starts_one_ends(n):
    count = 0
    for i in range(10**(n-1), 10**n):
        if str(i)[0] == '1' or str(i)[-1] == '1':
            count += 1
    return count
","
def starts_one_ends(n):
    if n == 1:
        return 1
    else:
        count = 2 * 9 * 10**(n-2)
        return count
","
def starts_one_ends(n):
    count_start_one = 9 * (10 ** (n - 1))
    count_end_one = 10 ** (n - 1)
    count_both = 10 ** (n - 2)
    
    result = count_start_one + count_end_one - count_both
    
    return result

","
def starts_one_ends(n):
    return 2 * (9 * 10**(n-2))
","
def starts_one_ends(n):
    from math import pow
    count = pow(9, n-1) * 2
    return int(count)
",60.0,"['2', '1', '1', '9.9', '1.8', '2']","['98', '18', '18', '99', '18', '18']","['90902', '18000', '18000', '99000', '18000', '13122']","['9090909098', 'Error', '1800000000', '9900000000', '1800000000', '774840978']","['9090909090902', 'Error', '1800000000000', '9900000000000', '1800000000000', '564859072962']","['90909090909090909098', 'Error', '18000000000000000000', '99000000000000000000', '18000000000000000000', '2701703435345984000']","['902', '180', '180', '990', '180', '162']","['9090902', '1800000', '1800000', '9900000', '1800000', '1062882']","['909090909090902', 'Error', '180000000000000', '990000000000000', '180000000000000', '45753584909922']","['9090909090909090909090902', 'Error', '1800000000000000000000000', '9900000000000000000000000', '1800000000000000000000000', '159532886153745028612096']",0.2,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,2.0
HumanEval/84,"
def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""
",solve(0),solve(1),solve(15),solve(256),solve(999),solve(1000),solve(1001),solve(4328),solve(9999),solve(10000),"
def solve(N):
    """"""Given a positive integer N, return the total sum of its digits in binary.
    
    Example
        For N = 1000, the sum of digits will be 1 the output should be ""1"".
        For N = 150, the sum of digits will be 6 the output should be ""110"".
        For N = 147, the sum of digits will be 12 the output should be ""1100"".
    
    Variables:
        @N integer
             Constraints: 0 ≤ N ≤ 10000.
    Output:
         a string of binary number
    """"""
    return bin(sum(int(digit) for digit in str(N)))[2:]
","
def solve(N):
    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]
","
def solve(N):
    return bin(sum(map(int, bin(N)[2:])))[2:]
","
def solve(N):
    return bin(sum(map(int, bin(N)[2:])))[2:]
","
def solve(N):
    return bin(sum(int(digit) for digit in bin(N)[2:]))[2:]
","
def solve(N):
    return bin(sum(int(d) for d in str(N)))[2:]
",20.0,"['0', '0', '0', '0', '0', '0']","['1', '1', '1', '1', '1', '1']","['110', '100', '100', '100', '100', '110']","['1101', '1', '1', '1', '1', '1101']","['11011', '1000', '1000', '1000', '1000', '11011']","['1', '110', '110', '110', '110', '1']","['10', '111', '111', '111', '111', '10']","['10001', '101', '101', '101', '101', '10001']","['100100', '1000', '1000', '1000', '1000', '100100']","['1', '101', '101', '101', '101', '1']",1.0,1.0,0.2,0.2,0.2,0.2,0.2,0.2,0.2,0.2,36.000000000000014
HumanEval/85,"
def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices..


    Examples:
        add([4, 2, 6, 7]) ==> 2 
    """"""
","add([4, 2, 6, 7])","add([0, 10, 20, 30, 40, 50])","add([1, 2, 3, 4, 5, 6, 7, 8])",add([]),add([2]),"add([2, 4])","add([100, 1001, 200, 3002, 400, 5005])","add([-2, -4, -6, -8])","add([-1, 2, -3, 4, -5, 6, -7, 8])","add([2, -4, 6, -8, 10, -12, 14, -16])","
from typing import List

def add(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
  ","
def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices.""""""
    
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
def add(lst):
    """"""Given a non-empty list of integers lst. add the even elements that are at odd indices.""""""
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
","
def add(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)
",100.0,"['2', '2', '2', '2', '2', '2']","['90', '90', '90', '90', '90', '90']","['20', '20', '20', '20', '20', '20']","['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['4', '4', '4', '4', '4', '4']","['3002', '3002', '3002', '3002', '3002', '3002']","['-12', '-12', '-12', '-12', '-12', '-12']","['20', '20', '20', '20', '20', '20']","['-40', '-40', '-40', '-40', '-40', '-40']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/86,"
def anti_shuffle(s):
    """"""
    Write a function that takes a string and returns an ordered version of it.
    Ordered version of string, is a string where all words (separated by space)
    are replaced by a new word where all the characters arranged in
    ascending order based on ascii value.
    Note: You should keep the order of words and blank spaces in the sentence.

    For example:
    anti_shuffle('Hi') returns 'Hi'
    anti_shuffle('hello') returns 'ehllo'
    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'
    """"""
",anti_shuffle('Hi'),anti_shuffle('hello'),anti_shuffle('Hello World!!!'),anti_shuffle('Python rocks 123!'),anti_shuffle('Testing   multiple   spaces'),anti_shuffle('UPPER lower 12345'),anti_shuffle('123456789'),anti_shuffle('Special@@@!!!&&&'),anti_shuffle('A quick brown fox.'),anti_shuffle('AnTiShuffle! with sort'),"
from itertools import chain

def anti_shuffle(s):
    return ' '.join(''.join(sorted(word, key=lambda c: ord(c))) for word in s.split())

","
from collections import OrderedDict

def anti_shuffle(s):
    words = s.split()
    ordered_words = []
    
    for word in words:
        ordered_word = ''.join(OrderedDict.fromkeys(word).keys())
        ordered_words.append(''.join(sorted(ordered_word)))
    
    return ' '.join(ordered_words)
","
from itertools import groupby

def anti_shuffle(s):
    def ordered_word(word):
        return ''.join(sorted(word))
    
    def extract_words(s):
        words = [''.join(g) for k, g in groupby(s, key=str.isalpha)]
        return [word if not word.isalpha() else ordered_word(word) for word in words]
    
    return ''.join(extract_words(s))
","
import re

def anti_shuffle(s):
    def ordered_word(word):
        return ''.join(sorted(word, key=lambda x: ord(x)))

    return ' '.join(ordered_word(word) if not all(char.isspace() for char in word) else word for word in re.split(r'(\s+)', s))
","
import re

def anti_shuffle(s):
    def ordered_word(word):
        return ''.join(sorted(word, key=lambda x: ord(x)))

    words = re.findall(r'\w+|\s', s)
    return ''.join([ordered_word(word) if word.isalpha() else word for word in words])
","
from collections import OrderedDict

def anti_shuffle(s):
    words = s.split()
    ordered_words = [''.join(sorted(word)) for word in words]
    ordered_sentence = ' '.join(ordered_words)
    
    return ordered_sentence
",74.28571428571429,"['Hi', 'Hi', 'Hi', 'Hi', 'Hi', 'Hi']","['ehllo', 'ehlo', 'ehllo', 'ehllo', 'ehllo', 'ehllo']","['Hello !!!Wdlor', 'Helo !Wdlor', 'Hello Wdlor!!!', 'Hello   !!!Wdlor', 'Hello Wdlor', 'Hello !!!Wdlor']","['Phnoty ckors !123', 'Phnoty ckors !123', 'Phnoty ckors 123!', 'Phnoty   ckors   !123', 'Phnoty ckors 123', 'Phnoty ckors !123']","['Teginst eillmptu acepss', 'Teginst eilmptu aceps', 'Teginst   eillmptu   acepss', 'Teginst     eillmptu     acepss', 'Teginst   eillmptu   acepss', 'Teginst eillmptu acepss']","['EPPRU elorw 12345', 'EPRU elorw 12345', 'EPPRU elorw 12345', 'EPPRU   elorw   12345', 'EPPRU elorw 12345', 'EPPRU elorw 12345']","['123456789', '123456789', '123456789', '123456789', '123456789', '123456789']","['!!!&&&@@@Saceilp', '!&@Saceilp', 'Saceilp@@@!!!&&&', '!!!&&&@@@Saceilp', 'Saceilp', '!!!&&&@@@Saceilp']","['A cikqu bnorw .fox', 'A cikqu bnorw .fox', 'A cikqu bnorw fox.', 'A   cikqu   bnorw   .fox', 'A cikqu bnorw fox', 'A cikqu bnorw .fox']","['!ASTeffhilnu hitw orst', '!ASTefhilnu hitw orst', 'ASTeffhilnu! hitw orst', '!ASTeffhilnu   hitw   orst', 'ASTeffhilnu hitw orst', '!ASTeffhilnu hitw orst']",1.0,0.8,0.2,0.4,0.2,0.6,1.0,0.4,0.4,0.2,52.000000000000014
HumanEval/87,"
def get_row(lst, x):
    """"""
    You are given a 2 dimensional data, as a nested lists,
    which is similar to matrix, however, unlike matrices,
    each row may contain a different number of columns.
    Given lst, and integer x, find integers x in the list,
    and return list of tuples, [(x1, y1), (x2, y2) ...] such that
    each tuple is a coordinate - (row, columns), starting with 0.
    Sort coordinates initially by rows in ascending order.
    Also, sort coordinates of the row by columns in descending order.
    
    Examples:
    get_row([
      [1,2,3,4,5,6],
      [1,2,3,4,1,6],
      [1,2,3,4,5,1]
    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]
    get_row([], 1) == []
    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]
    """"""
","get_row([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1)","get_row([], 1)","get_row([[], [1], [1, 2, 3]], 3)","get_row([[5, 5, 5, 5], [6, 6, 6], [5, 8]], 5)","get_row([[1, 2, 3], [2, 2, 2], [], [3]], 2)","get_row([[10, 20, 30], [40, 50, 60], [70, 20, 90]], 20)","get_row([[1]], 1)","get_row([[1,1,1,1,1,1,1,1,1,1]], 1)","get_row([[0,0,0], [0,0], [0], [], [0]], 0)","get_row([[3,4,5], [5,3,4], [4,3,5]], 3)","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    res = []
    for i, row in enumerate(lst):
        for j, val in enumerate(row):
            if val == x:
                res.append((i, j))
    
    res.sort(key=lambda coord: (coord[0], -coord[1]))
    return res
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    result = []
    for i, row in enumerate(lst):
        for j, val in enumerate(row):
            if val == x:
                result.append((i, j))
    
    result.sort(key=lambda coord: (coord[0], -coord[1]))
    return result
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    res = []
    for i, row in enumerate(lst):
        for j, val in enumerate(row):
            if val == x:
                res.append((i, j))
    res.sort(key=lambda x: (x[0], -x[1]))
    return res
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    coords = []
    for i, row in enumerate(lst):
        for j, val in enumerate(row):
            if val == x:
                coords.append((i, j))
    
    coords.sort(key=lambda coord: (coord[0], -coord[1]))
    
    return coords
","
from typing import List, Tuple

def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
    result = []
    for i, row in enumerate(lst):
        if x in row:
            for j, col in enumerate(row):
                if col == x:
                    result.append((i, j))
    
    result.sort(key=lambda tup: (tup[0], -tup[1]))
    return result
","
from typing import List

def get_row(lst: List[List[int]], x: int) -> List[tuple]:
    result = []
    for i, row in enumerate(lst):
        if x in row:
            for j, val in sorted(enumerate(row), key=lambda v: v[1], reverse=True):
                if val == x:
                    result.append((i, j))
    return sorted(result)
  ",93.33333333333333,"['[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]', '[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]', '[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]', '[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]', '[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]', '[(0, 0), (1, 0), (1, 4), (2, 0), (2, 5)]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[(2, 2)]', '[(2, 2)]', '[(2, 2)]', '[(2, 2)]', '[(2, 2)]', '[(2, 2)]']","['[(0, 3), (0, 2), (0, 1), (0, 0), (2, 0)]', '[(0, 3), (0, 2), (0, 1), (0, 0), (2, 0)]', '[(0, 3), (0, 2), (0, 1), (0, 0), (2, 0)]', '[(0, 3), (0, 2), (0, 1), (0, 0), (2, 0)]', '[(0, 3), (0, 2), (0, 1), (0, 0), (2, 0)]', '[(0, 0), (0, 1), (0, 2), (0, 3), (2, 0)]']","['[(0, 1), (1, 2), (1, 1), (1, 0)]', '[(0, 1), (1, 2), (1, 1), (1, 0)]', '[(0, 1), (1, 2), (1, 1), (1, 0)]', '[(0, 1), (1, 2), (1, 1), (1, 0)]', '[(0, 1), (1, 2), (1, 1), (1, 0)]', '[(0, 1), (1, 0), (1, 1), (1, 2)]']","['[(0, 1), (2, 1)]', '[(0, 1), (2, 1)]', '[(0, 1), (2, 1)]', '[(0, 1), (2, 1)]', '[(0, 1), (2, 1)]', '[(0, 1), (2, 1)]']","['[(0, 0)]', '[(0, 0)]', '[(0, 0)]', '[(0, 0)]', '[(0, 0)]', '[(0, 0)]']","['[(0, 9), (0, 8), (0, 7), (0, 6), (0, 5), (0, 4), (0, 3), (0, 2), (0, 1), (0, 0)]', '[(0, 9), (0, 8), (0, 7), (0, 6), (0, 5), (0, 4), (0, 3), (0, 2), (0, 1), (0, 0)]', '[(0, 9), (0, 8), (0, 7), (0, 6), (0, 5), (0, 4), (0, 3), (0, 2), (0, 1), (0, 0)]', '[(0, 9), (0, 8), (0, 7), (0, 6), (0, 5), (0, 4), (0, 3), (0, 2), (0, 1), (0, 0)]', '[(0, 9), (0, 8), (0, 7), (0, 6), (0, 5), (0, 4), (0, 3), (0, 2), (0, 1), (0, 0)]', '[(0, 0), (0, 1), (0, 2), (0, 3), (0, 4), (0, 5), (0, 6), (0, 7), (0, 8), (0, 9)]']","['[(0, 2), (0, 1), (0, 0), (1, 1), (1, 0), (2, 0), (4, 0)]', '[(0, 2), (0, 1), (0, 0), (1, 1), (1, 0), (2, 0), (4, 0)]', '[(0, 2), (0, 1), (0, 0), (1, 1), (1, 0), (2, 0), (4, 0)]', '[(0, 2), (0, 1), (0, 0), (1, 1), (1, 0), (2, 0), (4, 0)]', '[(0, 2), (0, 1), (0, 0), (1, 1), (1, 0), (2, 0), (4, 0)]', '[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (2, 0), (4, 0)]']","['[(0, 0), (1, 1), (2, 1)]', '[(0, 0), (1, 1), (2, 1)]', '[(0, 0), (1, 1), (2, 1)]', '[(0, 0), (1, 1), (2, 1)]', '[(0, 0), (1, 1), (2, 1)]', '[(0, 0), (1, 1), (2, 1)]']",0.8,1.0,1.0,0.8,0.8,1.0,1.0,0.8,0.8,1.0,90.0
HumanEval/88,"
def sort_array(array):
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
",sort_array([]),sort_array([5]),sort_array([8]),"sort_array([2, 4, 3, 0, 1, 5])","sort_array([2, 4, 3, 0, 1, 5, 6])","sort_array([1,2])","sort_array([3,2,1])","sort_array([3, 5, 8, 1, 9])","sort_array([100, 55, 22, 81, 68])","sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""
    ascending_order = (array[0] + array[-1]) % 2 == 1
    return sorted(array) if ascending_order else sorted(array, reverse=True)
  ","
def sort_array(array):
    def is_odd(num):
        return num % 2 != 0

    arr_copy = array.copy()
    if is_odd(arr_copy[0] + arr_copy[-1]):
        return sorted(arr_copy)
    else:
        return sorted(arr_copy, reverse=True)
","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    sorted_array = array.copy()

    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:
        return sorted(sorted_array, reverse=True)
    else:
        return sorted(sorted_array)
","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    sorted_array = sorted(array)
    return sorted_array if (sorted_array[0] + sorted_array[-1]) % 2 != 0 else sorted_array[::-1]
","
from typing import List

def sort_array(array: List[int]) -> List[int]:
    sorted_array = array.copy()
    first_value = sorted_array[0]
    last_value = sorted_array[-1]
    
    if (first_value + last_value) % 2 == 0:
        return sorted(sorted_array, reverse=True)
    else:
        return sorted(sorted_array)
  ","
def sort_array(array):
    """"""
    Given an array of non-negative integers, return a copy of the given array after sorting,
    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,
    or sort it in descending order if the sum( first index value, last index value) is even.

    Note:
    * don't change the given array.

    Examples:
    * sort_array([]) => []
    * sort_array([5]) => [5]
    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]
    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]
    """"""

    copied_array = array.copy()
    if (copied_array[0] + copied_array[-1]) % 2 == 0:
        return sorted(copied_array, reverse=True)
    else:
        return sorted(copied_array)
",85.71428571428571,"['', '', '', '', '', '']","['[5]', '[5]', '[5]', '[5]', '[5]', '[5]']","['[8]', '[8]', '[8]', '[8]', '[8]', '[8]']","['[0, 1, 2, 3, 4, 5]', '[0, 1, 2, 3, 4, 5]', '[0, 1, 2, 3, 4, 5]', '[0, 1, 2, 3, 4, 5]', '[0, 1, 2, 3, 4, 5]', '[0, 1, 2, 3, 4, 5]']","['[6, 5, 4, 3, 2, 1, 0]', '[6, 5, 4, 3, 2, 1, 0]', '[6, 5, 4, 3, 2, 1, 0]', '[6, 5, 4, 3, 2, 1, 0]', '[6, 5, 4, 3, 2, 1, 0]', '[6, 5, 4, 3, 2, 1, 0]']","['[1, 2]', '[1, 2]', '[1, 2]', '[1, 2]', '[1, 2]', '[1, 2]']","['[3, 2, 1]', '[3, 2, 1]', '[3, 2, 1]', '[3, 2, 1]', '[3, 2, 1]', '[3, 2, 1]']","['[9, 8, 5, 3, 1]', '[9, 8, 5, 3, 1]', '[9, 8, 5, 3, 1]', '[9, 8, 5, 3, 1]', '[9, 8, 5, 3, 1]', '[9, 8, 5, 3, 1]']","['[100, 81, 68, 55, 22]', '[100, 81, 68, 55, 22]', '[100, 81, 68, 55, 22]', '[100, 81, 68, 55, 22]', '[100, 81, 68, 55, 22]', '[100, 81, 68, 55, 22]']","['[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]', '[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/89,"
def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
",encrypt('hi'),encrypt('asdfghjkl'),encrypt('gf'),encrypt('et'),encrypt('z'),encrypt('abc'),encrypt('xyz'),encrypt('AabcdZ'),encrypt('01234'),"encrypt('Hello, World!')","
import string

def encrypt(s):
    rotated_alphabets = string.ascii_lowercase[2:] + string.ascii_lowercase[:2]
    table = str.maketrans(string.ascii_lowercase, rotated_alphabets)
    return s.translate(table)
","
import string

def encrypt(s):
    """"""Create a function encrypt that takes a string as an argument and
    returns a string encrypted with the alphabet being rotated. 
    The alphabet should be rotated in a manner such that the letters 
    shift down by two multiplied to two places.
    For example:
    encrypt('hi') returns 'lm'
    encrypt('asdfghjkl') returns 'ewhjklnop'
    encrypt('gf') returns 'kj'
    encrypt('et') returns 'ix'
    """"""
    def rotate_letter(char, n):
        if char.isalpha():
            shift = 2 * n
            if char.islower():
                base = ord('a')
            else:
                base = ord('A')
            return chr(base + (ord(char) - base + shift) % 26)
        else:
            return char

    return ''.join(rotate_letter(c, 2) for c in s)
","
def encrypt(s):
    import string
    rotated_alphabet = string.ascii_lowercase[2:] + string.ascii_lowercase[:2]
    mapping = str.maketrans(string.ascii_lowercase, rotated_alphabet)
    return s.translate(mapping)
","
def encrypt(s):
    import string
    shift = 2  # Define shift value
    encrypted = ''
    for char in s:
        if char.isalpha():
            upper_case = char.isupper()
            char = char.lower()
            if char.isalpha():
                encrypted += chr(((ord(char) - ord('a') + shift * 2) % 26) + ord('a'))
                if upper_case:
                    encrypted = encrypted[:-1] + encrypted[-1].upper()  # Preserve uppercase
            else:
                encrypted += char
        else:
            encrypted += char
    return encrypted
","
import string

def encrypt(s):
    shifted_alphabet = string.ascii_lowercase[2:] + string.ascii_lowercase[:2]
    mapping = str.maketrans(string.ascii_lowercase, shifted_alphabet)
    return s.translate(mapping)
","
from string import ascii_lowercase

def encrypt(s):
    shift = 2
    rotated_alphabet = ascii_lowercase[shift:] + ascii_lowercase[:shift]
    table = str.maketrans(ascii_lowercase, rotated_alphabet)
    return s.translate(table)
",40.0,"['jk', 'lm', 'jk', 'lm', 'jk', 'jk']","['cufhijlmn', 'ewhjklnop', 'cufhijlmn', 'ewhjklnop', 'cufhijlmn', 'cufhijlmn']","['ih', 'kj', 'ih', 'kj', 'ih', 'ih']","['gv', 'ix', 'gv', 'ix', 'gv', 'gv']","['b', 'd', 'b', 'd', 'b', 'b']","['cde', 'efg', 'cde', 'efg', 'cde', 'cde']","['zab', 'bcd', 'zab', 'bcd', 'zab', 'zab']","['AcdefZ', 'EefghD', 'AcdefZ', 'EefghD', 'AcdefZ', 'AcdefZ']","['01234', '01234', '01234', '01234', '01234', '01234']","['Hgnnq, Wqtnf!', 'Lipps, Asvph!', 'Hgnnq, Wqtnf!', 'Lipps, Asvph!', 'Hgnnq, Wqtnf!', 'Hgnnq, Wqtnf!']",0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,1.0,0.6,63.99999999999999
HumanEval/90,"
def next_smallest(lst):
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
","next_smallest([1, 2, 3, 4, 5])","next_smallest([5, 1, 4, 3, 2])",next_smallest([]),"next_smallest([1, 1])",next_smallest([10]),"next_smallest([2, 2, 2, 2])","next_smallest([-1, -2, -3, 0])","next_smallest([1, 1, 2])","next_smallest([5, 1])","next_smallest([100, 300, 200, 400, 500])","
from typing import List

def next_smallest(lst: List[int]) -> int:
    if len(lst) < 2:
        return None
    sorted_lst = sorted(set(lst))
    return sorted_lst[1] if len(sorted_lst) > 1 else None
","
from typing import List

def next_smallest(lst: List[int]) -> int:
    unique_sorted = sorted(set(lst))
    if len(unique_sorted) > 1:
        return unique_sorted[1]
    else:
        return None
","
from typing import List

def next_smallest(lst: List[int]) -> int:
    smallest = float('inf')
    second_smallest = float('inf')
    
    for num in lst:
        if num < smallest:
            second_smallest = smallest
            smallest = num
        elif smallest < num < second_smallest:
            second_smallest = num
    
    return second_smallest if second_smallest != float('inf') else None
  ","
import heapq

def next_smallest(lst):
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
    if len(lst) < 2:
        return None
    heap = list(set(lst))
    heapq.heapify(heap)
    heapq.heappop(heap)
    second_smallest = heapq.heappop(heap) if heap else None
    return second_smallest
","
from typing import List

def next_smallest(lst: List[int]) -> int:
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
    unique_sorted = sorted(set(lst))
    if len(unique_sorted) < 2:
        return None
    else:
        return unique_sorted[1]
","
from typing import List, Optional

def next_smallest(lst: List[int]) -> Optional[int]:
    """"""
    You are given a list of integers.
    Write a function next_smallest() that returns the 2nd smallest element of the list.
    Return None if there is no such element.
    
    next_smallest([1, 2, 3, 4, 5]) == 2
    next_smallest([5, 1, 4, 3, 2]) == 2
    next_smallest([]) == None
    next_smallest([1, 1]) == None
    """"""
    unique_nums = sorted(set(lst))
    return unique_nums[1] if len(unique_nums) > 1 else None
",100.0,"['2', '2', '2', '2', '2', '2']","['2', '2', '2', '2', '2', '2']","['None', 'None', 'None', 'None', 'None', 'None']","['None', 'None', 'None', 'None', 'None', 'None']","['None', 'None', 'None', 'None', 'None', 'None']","['None', 'None', 'None', 'None', 'None', 'None']","['-2', '-2', '-2', '-2', '-2', '-2']","['2', '2', '2', '2', '2', '2']","['5', '5', '5', '5', '5', '5']","['200', '200', '200', '200', '200', '200']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/91,"
def is_bored(S):
    """"""
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word ""I"".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored(""Hello world"")
    0
    >>> is_bored(""The sky is blue. The sun is shining. I love this weather"")
    1
    """"""
","is_bored(""I am bored today."")","is_bored(""The weather is nice. I think I will go outside."")","is_bored("""")","is_bored(""Today is a good day! I feel great!"")","is_bored(""I want to play. I need a break. Do I start now or later?"")","is_bored(""Why is the sky blue?"")","is_bored(""Yesterday was amazing! Today is boring. BUT I will not let it get to me!"")","is_bored(""i am not starting the sentence right. However, I am still bored."")","is_bored(""I am; another incorrect delimiter?"")","is_bored(""No sentence starts with the magic word. Why would I be bored?"")","
import re

def is_bored(S):
    return len(re.findall(r'\bI\b[^.!?]*[.!?]', S))
","
import re

def is_bored(S):
    boring_sentences = re.findall(r'\bI\b[^.!?]*[.!?]', S)
    return len(boring_sentences)
","
import re

def is_bored(S):
    boredoms = re.findall(r'\bI\b', S)
    return len(boredoms)
","
import re

def is_bored(S):
    return len(re.findall(r'\bI\b', re.sub(r'[.!?]', ' ', S))
","
import re

def is_bored(S):
    return len(re.findall(r'\bi[\s\S]*?[\.!?]', S, flags=re.IGNORECASE))
","
import re

def is_bored(S):
    return len(re.findall(r'\bI\b', re.sub(r'[.?!]', '.', S))
",53.333333333333336,"['1', '1', '1', '', '1', '']","['1', '1', '2', '', '2', '']","['0', '0', '0', '', '0', '']","['1', '1', '1', '', '2', '']","['3', '3', '3', '', '3', '']","['0', '0', '0', '', '1', '']","['1', '1', '1', '', '2', '']","['1', '1', '1', '', '2', '']","['1', '1', '1', '', '1', '']","['1', '1', '1', '', '1', '']",0.6,0.2,0.6,0.4,0.6,0.4,0.4,0.4,0.6,0.6,47.999999999999986
HumanEval/92,"
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
  

    
    '''
","any_int(5, 2, 7)","any_int(3, 2, 2)","any_int(3, -2, 1)","any_int(3.6, -2.2, 2)","any_int(0, 0, 0)","any_int(-1, 1, 0)","any_int(1000, 500, 500)","any_int(2**31 - 1, 2**31 - 2, 1)","any_int(-5, -3, -8)","any_int(10, 5, 7)","
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
    '''
    
    if all(isinstance(num, int) for num in (x, y, z)):
        return x == y + z or y == x + z or z == x + y
    return False
","
def any_int(x, y, z):
    '''
    Create a function that takes 3 numbers.
    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.
    Returns false in any other cases.
    
    Examples
    any_int(5, 2, 7) ➞ True
    
    any_int(3, 2, 2) ➞ False

    any_int(3, -2, 1) ➞ True
    
    any_int(3.6, -2.2, 2) ➞ False
    '''
    if all(isinstance(num, int) for num in (x, y, z)):
        return x == y + z or y == x + z or z == x + y
    else:
        return False
","
def any_int(x, y, z):
    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):
        if x == y + z or y == x + z or z == x + y:
            return True
    return False
","
from typing import Union

def any_int(x: Union[int, float], y: Union[int, float], z: Union[int, float]) -> bool:
    return any([
        isinstance(x, int) and isinstance(y, int) and isinstance(z, int),
        x == y + z or y == x + z or z == x + y
    ])
","
def any_int(x, y, z):
    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):
        if x == y + z or y == x + z or z == x + y:
            return True
    return False
","
from typing import Union

def any_int(x: Union[int, float], y: Union[int, float], z: Union[int, float]) -> bool:
    if all(isinstance(num, int) for num in [x, y, z]):
        if x == y + z or y == x + z or z == x + y:
            return True
    return False
",94.0,"['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'True', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'True', 'False', 'False']",1.0,0.8,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.8,96.00000000000001
HumanEval/93,"
def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
",encode('test'),encode('This is a message'),encode('hello'),encode('HELLO'),encode('AbCdE'),encode('a'),encode('Z'),encode('StringHandling123'),encode('vowels'),encode('MIXEDcaseInput'),"
def encode(message):
    import string
    
    vowels = ""AEIOUaeiou""
    alphabet = string.ascii_uppercase + string.ascii_lowercase
    encoded_message = """"
    
    for char in message:
        if char.isalpha():
            if char.upper() in vowels:
                encoded_message += alphabet[(alphabet.index(char) + 2) % len(alphabet)]
            else:
                encoded_message += char.swapcase()
        else:
            encoded_message += char
    
    return encoded_message
","
from string import ascii_uppercase, ascii_lowercase

def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
    vowels = 'AEIOUaeiou'
    vowel_mapping = {v: chr((ascii_uppercase.index(v.upper()) + 2) % 26)
                     for v in vowels}
    
    encoded = ''
    for char in message:
        if char.isalpha():
            if char.upper() in vowels:
                encoded += vowel_mapping[char]
            else:
                encoded += char.swapcase()
        else:
            encoded += char
    return encoded
","
import string

def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
    encoding = str.maketrans({v: v.upper() if v.islower() else v.lower() for v in string.ascii_lowercase})
    vowels = 'AEIOUaeiou'
    vowel_mapping = {v: chr((ord(v) - ord('a') + 2) % 26 + ord('a')) for v in vowels}
    
    encoded_message = ''
    for char in message:
        if char.isalpha():
            if char in vowels:
                encoded_message += vowel_mapping[char]
            else:
                encoded_message += char.translate(encoding)
        else:
            encoded_message += char
    
    return encoded_message
","
from string import ascii_lowercase

def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
    
    vowels = 'aeiouAEIOU'
    encoded_message = ''
    
    for char in message:
        if char.isalpha():
            if char in vowels:
                index = (ascii_lowercase.index(char.lower()) + 2) % 26
                encoded_char = ascii_lowercase[index]
            else:
                encoded_char = char.swapcase()
            encoded_message += encoded_char
        else:
            encoded_message += char
    
    return encoded_message
","
import string

def encode(message):
    """"""
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """"""
    vowels = 'AEIOUaeiou'
    encoded_message = []
    
    for char in message:
        if char.isalpha():
            if char.upper() in vowels:
                new_char = chr((ord(char) + 2 - ord('A')) % 26 + ord('A'))
            else:
                new_char = char.swapcase()
            encoded_message.append(new_char)
        else:
            encoded_message.append(char)
    
    return ''.join(encoded_message)
","
from string import ascii_lowercase

def encode(message):
    return ''.join([chr(ord(char) + 2) if char.lower() in 'aeiou' else char.swapcase() for char in message])

",8.0,"['TgST', 'T\x06ST', 'TgST', 'TgST', 'TMST', 'TgST']","['tHkS kS c MgSScGg', 'tH\r\nS \r\nS \x02 M\x06SS\x02G\x06', 'THkS kS c MgSScGg', 'tHkS kS c MgSScGg', 'tHQS QS I MMSSIGM', 'tHkS kS c MgSScGg']","['HgLLq', 'H\x06LL\x10', 'HgLLq', 'HgLLq', 'HMLLW', 'HgLLq']","['hGllQ', 'h\x06ll\x10', 'HaLLk', 'hgllq', 'hGllQ', 'hGllQ']","['CBcDG', '\x02BcD\x06', 'wBCDa', 'cBcDg', 'CBcDG', 'CBcDG']","['c', '\x02', 'c', 'c', 'I', 'c']","['z', 'z', 'Z', 'z', 'z', 'z']","['sTRkNGhcNDLkNG123', 'sTR\r\nNGh\x02NDL\r\nNG123', 'STRkNGHcNDLkNG123', 'sTRkNGhcNDLkNG123', 'sTRQNGhINDLQNG123', 'sTRkNGhcNDLkNG123']","['VqWgLS', 'V\x10W\x06LS', 'VqWgLS', 'VqWgLS', 'VWWMLS', 'VqWgLS']","['mKxGdCcSgKNPwT', 'm\r\nx\x06dC\x02S\x06\r\nNP\x16T', 'MeXaDCcSgeNPwT', 'mkxgdCcSgkNPwT', 'mKxGdCISMKNPCT', 'mKxGdCcSgKNPwT']",0.6,0.4,0.6,0.4,0.4,0.6,0.8,0.4,0.6,0.2,50.0
HumanEval/94,"

def skjkasdkd(lst):
    """"""You are given a list of integers.
    You need to find the largest prime value and return the sum of its digits.

    Examples:
    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10
    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25
    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13
    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11
    For lst = [0,81,12,3,1,21] the output should be 3
    For lst = [0,8,1,2,1,7] the output should be 7
    """"""
","skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])","skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])","skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])","skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])","skjkasdkd([0,81,12,3,1,21])","skjkasdkd([0,8,1,2,1,7])","skjkasdkd([17, 19, 2, 23, 11, 13]),  # Numbers are only prime numbers","skjkasdkd([]),  # Empty list","skjkasdkd([1, 1, 1, 1, 1, 1, 1]),  # All non-prime and same numbers","skjkasdkd([97])  # A single, large prime number","
import math

def skjkasdkd(lst):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    def sum_digits(num):
        return sum(int(d) for d in str(num))

    largest_prime = 0
    for num in lst:
        if is_prime(num) and num > largest_prime:
            largest_prime = num

    return sum_digits(largest_prime)
","
import math

def skjkasdkd(lst):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    def sum_digits(num):
        return sum(int(digit) for digit in str(num))

    max_prime = max(filter(is_prime, lst))
    return sum_digits(max_prime)
","
import sympy

def skjkasdkd(lst):
    primes = [x for x in lst if sympy.isprime(x)]
    max_prime = max(primes)
    return sum(int(digit) for digit in str(max_prime))
","
import math

def skjkasdkd(lst):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    def sum_digits(n):
        return sum(int(i) for i in str(n))

    prime_lst = [num for num in lst if is_prime(num)]
    if not prime_lst:
        return 0
    
    largest_prime = max(prime_lst)
    return sum_digits(largest_prime)
","
import math

def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True

    def sum_of_digits(num):
        return sum(int(digit) for digit in str(num))

    prime_nums = [num for num in lst if is_prime(num)]
    largest_prime = max(prime_nums)
    return sum_of_digits(largest_prime)
","
import sympy

def skjkasdkd(lst):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    def sum_digits(num):
        total = 0
        while num:
            total += num % 10
            num //= 10
        return total

    prime_values = [x for x in lst if is_prime(x)]
    if not prime_values:
        return 0
    largest_prime = max(prime_values)
    return sum_digits(largest_prime)
",100.0,"['10', '10', '', '10', '10', '']","['25', '25', '', '25', '25', '']","['13', '13', '', '13', '13', '']","['11', '11', '', '11', '11', '']","['3', '3', '', '3', '3', '']","['7', '7', '', '7', '7', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']",0.6,0.6,0.6,0.6,0.6,0.6,1.0,1.0,1.0,1.0,76.0
HumanEval/95,"
def check_dict_case(dict):
    """"""
    Given a dictionary, return True if all keys are strings in lower 
    case or all keys are strings in upper case, else return False.
    The function should return False is the given dictionary is empty.
    Examples:
    check_dict_case({""a"":""apple"", ""b"":""banana""}) should return True.
    check_dict_case({""a"":""apple"", ""A"":""banana"", ""B"":""banana""}) should return False.
    check_dict_case({""a"":""apple"", 8:""banana"", ""a"":""apple""}) should return False.
    check_dict_case({""Name"":""John"", ""Age"":""36"", ""City"":""Houston""}) should return False.
    check_dict_case({""STATE"":""NC"", ""ZIP"":""12345"" }) should return True.
    """"""
","check_dict_case({""a"": ""apple"", ""b"": ""banana""})","check_dict_case({""A"": ""apple"", ""B"": ""banana""})",check_dict_case({}),"check_dict_case({""a"": ""apple"", ""A"": ""banana"", ""C"": ""carrot""})","check_dict_case({""name"": ""rose"", ""color"": ""red""})","check_dict_case({""NAME"": ""ROSE"", ""COLOR"": ""RED""})","check_dict_case({""alpHA"": ""one"", ""betA"": ""two""})","check_dict_case({""one"": 1, ""two"": 2, ""Three"": 3})","check_dict_case({""NUMBER"": ""123"", ""CODE"": ""456""})","check_dict_case({123: ""numeric"", ""abc"": ""string""})","
def check_dict_case(dict):
    if not dict:
        return False
    keys = list(dict.keys())
    return all(k.islower() for k in keys) or all(k.isupper() for k in keys)
","
def check_dict_case(dict):
    if not dict:
        return False
    keys = list(dict.keys())
    return all(key.islower() for key in keys) or all(key.isupper() for key in keys)
","
from typing import Dict

def check_dict_case(dict: Dict[str, str]) -> bool:
    if not dict:
        return False
    
    keys = dict.keys()
    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):
        return True
    else:
        return False
","
def check_dict_case(dict):
    if len(dict) == 0:
        return False
    keys = dict.keys()
    all_upper = all(key.isupper() for key in keys if isinstance(key, str))
    all_lower = all(key.islower() for key in keys if isinstance(key, str))
    return all_upper or all_lower
","
def check_dict_case(dict):
    if not dict:
        return False
    keys = list(dict.keys())
    return all(isinstance(key, str) and key.islower() for key in keys) or all(isinstance(key, str) and key.isupper() for key in keys)
","
def check_dict_case(dict):
    if not dict:
        return False
    keys = list(dict.keys())
    first_key_case = keys[0].islower()
    all_lower = all(key.islower() for key in keys) if first_key_case else False
    all_upper = all(key.isupper() for key in keys) if not first_key_case else False
    return all_lower or all_upper
",88.57142857142857,"['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['', '', '', 'True', 'False', '']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.6,96.0
HumanEval/96,"
def count_up_to(n):
    """"""Implement a function that takes an non-negative integer and returns an array of the first n
    integers that are prime numbers and less than n.
    for example:
    count_up_to(5) => [2,3]
    count_up_to(11) => [2,3,5,7]
    count_up_to(0) => []
    count_up_to(20) => [2,3,5,7,11,13,17,19]
    count_up_to(1) => []
    count_up_to(18) => [2,3,5,7,11,13,17]
    """"""
",count_up_to(5),count_up_to(11),count_up_to(0),count_up_to(20),count_up_to(1),count_up_to(18),count_up_to(2),count_up_to(30),count_up_to(50),count_up_to(100),"
def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = [i for i in range(2, n) if is_prime(i)]
    return primes
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes
","
import math

def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def count_up_to(n):
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes
","
import math

def is_prime(number):
    if number < 2:
        return False
    for i in range(2, int(math.sqrt(number)) + 1):
        if number % i == 0:
            return False
    return True

def count_up_to(n):
    primes = []
    for i in range(2, n):
        if is_prime(i):
            primes.append(i)
    return primes
","
import math

def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(math.sqrt(num)) + 1):
            if num % i == 0:
                return False
        return True

    primes = [x for x in range(2, n) if is_prime(x)]
    return primes
",100.0,"['[2, 3]', '[2, 3]', '[2, 3]', '[2, 3]', '[2, 3]', '[2, 3]']","['[2, 3, 5, 7]', '[2, 3, 5, 7]', '[2, 3, 5, 7]', '[2, 3, 5, 7]', '[2, 3, 5, 7]', '[2, 3, 5, 7]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[2, 3, 5, 7, 11, 13, 17, 19]', '[2, 3, 5, 7, 11, 13, 17, 19]', '[2, 3, 5, 7, 11, 13, 17, 19]', '[2, 3, 5, 7, 11, 13, 17, 19]', '[2, 3, 5, 7, 11, 13, 17, 19]', '[2, 3, 5, 7, 11, 13, 17, 19]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[2, 3, 5, 7, 11, 13, 17]', '[2, 3, 5, 7, 11, 13, 17]', '[2, 3, 5, 7, 11, 13, 17]', '[2, 3, 5, 7, 11, 13, 17]', '[2, 3, 5, 7, 11, 13, 17]', '[2, 3, 5, 7, 11, 13, 17]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]']","['[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]']","['[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]', '[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/97,"
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
","multiply(148, 412)","multiply(19, 28)","multiply(2020, 1851)","multiply(14, -15)","multiply(123, 456)","multiply(-200, -300)","multiply(5, -27)","multiply(0, 152)","multiply(198, 111)","multiply(10, -10)","
def multiply(a, b):
    """"""
    Complete the function that takes two integers and returns 
    the product of their unit digits.
    
    Assume the input is always valid.

    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
    
    return abs(a) % 10 * abs(b) % 10
","
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
    
    return abs(a % 10 * b % 10)
","
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
    
    return abs((a % 10) * (b % 10))
","
def multiply(a, b):
    return (abs(a) % 10) * (abs(b) % 10)
","
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
    return abs(a % 10 * b % 10)
","
def multiply(a, b):
    """"""Complete the function that takes two integers and returns 
    the product of their unit digits.
    Assume the input is always valid.
    Examples:
    multiply(148, 412) should return 16.
    multiply(19, 28) should return 72.
    multiply(2020, 1851) should return 0.
    multiply(14,-15) should return 20.
    """"""
    return abs(a % 10 * b % 10)
",62.5,"['6', '6', '16', '16', '6', '6']","['2', '2', '72', '72', '2', '2']","['0', '0', '0', '0', '0', '0']","['0', '0', '20', '20', '0', '0']","['8', '8', '18', '18', '8', '8']","['0', '0', '0', '0', '0', '0']","['5', '5', '15', '35', '5', '5']","['0', '0', '0', '0', '0', '0']","['8', '8', '8', '8', '8', '8']","['0', '0', '0', '0', '0', '0']",0.6,0.6,1.0,0.6,0.6,1.0,0.6,1.0,1.0,1.0,80.0
HumanEval/98,"
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
",count_upper('aBCdEf'),count_upper('abcdefg'),count_upper('dBBE'),count_upper(''),count_upper('AEIOU'),count_upper('HELLOworld'),count_upper('123A456B789C'),count_upper('raceCAR'),count_upper('AbcDefGhIj'),count_upper('mNoPqRsTuVwXyZ'),"
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    vowels = 'AEIOU'
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count
","
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    vowels = 'AEIOU'
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in vowels and s[i].isupper():
            count += 1
    return count
","
import re

def count_upper(s):
    return sum(1 for i, c in enumerate(s) if i % 2 == 0 and c.upper() in 'AEIOU')
","
def count_upper(s):
    vowels = ['A', 'E', 'I', 'O', 'U']
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count
","
def count_upper(s):
    """"""
    Given a string s, count the number of uppercase vowels in even indices.
    
    For example:
    count_upper('aBCdEf') returns 1
    count_upper('abcdefg') returns 0
    count_upper('dBBE') returns 0
    """"""
    import string
    vowels = ""AEIOU""
    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels and s[i].isupper())
","
def count_upper(s):
    vowels = set(['A', 'E', 'I', 'O', 'U'])
    count = 0
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count
",94.28571428571429,"['1', '1', '2', '1', '1', '1']","['0', '0', '2', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['3', '3', '3', '3', '3', '3']","['1', '1', '2', '1', '1', '1']","['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['2', '2', '3', '2', '2', '2']","['0', '0', '2', '0', '0', '0']",0.8,0.8,1.0,1.0,1.0,0.8,1.0,1.0,0.8,0.8,90.0
HumanEval/99,"
def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer(""10"")
    10
    >>> closest_integer(""15.3"")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer(""14.5"") should
    return 15 and closest_integer(""-14.5"") should return -15.
    '''
","closest_integer(""10"")","closest_integer(""-10"")","closest_integer(""0"")","closest_integer(""14.5"")","closest_integer(""-14.5"")","closest_integer(""1.1"")","closest_integer(""-1.1"")","closest_integer(""99.99"")","closest_integer(""-99.99"")","closest_integer(""5.5"")","
import math

def closest_integer(value):
    number = float(value)
    nearest_integer = int(number + 0.5) if number > 0 else int(number - 0.5)
    return nearest_integer

","
import math

def closest_integer(value):
    value = float(value)
    lower_int = math.floor(value)
    upper_int = math.ceil(value)
    
    if abs(value - lower_int) <= abs(value - upper_int):
        return int(upper_int)
    else:
        return int(lower_int)
","
import math

def closest_integer(value):
    value = float(value)
    if value % 1 == 0:
        return int(value)
    else:
        if value > 0:
            return math.floor(value + 0.5)
        else:
            return math.ceil(value - 0.5)
","
import math

def closest_integer(value):
    value = float(value)
    lower_int = math.floor(value)
    upper_int = math.ceil(value)
    
    if abs(value - lower_int) <= abs(value - upper_int):
        return upper_int
    else:
        return lower_int
","
import math

def closest_integer(value):
    closest_int = round(float(value))
    if math.floor(float(value)) != math.ceil(float(value)):
        if abs(float(value) - math.floor(float(value))) == abs(float(value) - math.ceil(float(value)):
            closest_int = math.ceil(float(value)) if float(value) > 0 else math.floor(float(value))
    return closest_int
","
import math

def closest_integer(value):
    rounded_value = round(float(value))
    if abs(rounded_value - float(value)) == 0.5:
        return rounded_value + int(math.copysign(1, float(value)))
    return rounded_value
",60.0,"['10', '10', '10', '10', '', '10']","['-10', '-10', '-10', '-10', '', '-10']","['0', '0', '0', '0', '', '0']","['15', '15', '15', '15', '', '15']","['-15', '-14', '-15', '-14', '', '-15']","['1', '2', '1', '2', '', '1']","['-1', '-2', '-1', '-2', '', '-1']","['100', '99', '100', '99', '', '100']","['-100', '-99', '-100', '-99', '', '-100']","['6', '6', '6', '6', '', '7']",0.8,0.8,0.8,0.8,0.4,0.4,0.4,0.4,0.4,0.6,58.00000000000001
HumanEval/100,"
def make_a_pile(n):
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
",make_a_pile(1),make_a_pile(2),make_a_pile(5),make_a_pile(10),make_a_pile(15),make_a_pile(20),make_a_pile(25),make_a_pile(50),make_a_pile(100),make_a_pile(200),"
from typing import List

def make_a_pile(n: int) -> List[int]:
    pile = []
    for i in range(n):
        pile.append(n + 2*i)
    return pile
  ","
from typing import List

def make_a_pile(n: int) -> List[int]:
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""

    stones = [n]
    for i in range(n-1):
        if n % 2 == 0:
            n += 2
        else:
            n += 1
        stones.append(n)
    return stones
","
def make_a_pile(n):
    """"""
    Given a positive integer n, you have to make a pile of n levels of stones.
    The first level has n stones.
    The number of stones in the next level is:
        - the next odd number if n is odd.
        - the next even number if n is even.
    Return the number of stones in each level in a list, where element at index
    i represents the number of stones in the level (i+1).

    Examples:
    >>> make_a_pile(3)
    [3, 5, 7]
    """"""
    stones = [n]
    for i in range(1, n):
        if n % 2 == 0:
            stones.append(n + 2*i)
        else:
            stones.append(n + 2*i + 1)
    return stones
","
def make_a_pile(n):
    stones = []
    for i in range(n):
        stones.append(n + 2*i)
    return stones
","
def make_a_pile(n):
    stones = [n]
    for i in range(1, n):
        if n % 2 == 0:
            stones.append(stones[-1] + 2)
        else:
            stones.append(stones[-1] + 1)
    return stones
","
def make_a_pile(n: int) -> List[int]:
    pile = []
    for i in range(n):
        if n % 2 == 0:
            pile.append(n + i*2)
        else:
            pile.append(n + i*2 + 1)
    return pile
",56.0,"['[1]', '[1]', '[1]', '[1]', '[1]', '']","['[2, 4]', '[2, 4]', '[2, 4]', '[2, 4]', '[2, 4]', '']","['[5, 7, 9, 11, 13]', '[5, 6, 8, 10, 12]', '[5, 8, 10, 12, 14]', '[5, 7, 9, 11, 13]', '[5, 6, 7, 8, 9]', '']","['[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]', '[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]', '[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]', '[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]', '[10, 12, 14, 16, 18, 20, 22, 24, 26, 28]', '']","['[15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]', '[15, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42]', '[15, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44]', '[15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]', '[15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]', '']","['[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]', '[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]', '[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]', '[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]', '[20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58]', '']","['[25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73]', '[25, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72]', '[25, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74]', '[25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73]', '[25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]', '']","['[50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148]', '[50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148]', '[50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148]', '[50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148]', '[50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148]', '']","['[100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298]', '[100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298]', '[100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298]', '[100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298]', '[100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298]', '']","['[200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598]', '[200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598]', '[200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598]', '[200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598]', '[200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598]', '']",0.8,0.8,0.2,0.8,0.2,0.8,0.2,0.8,0.8,0.8,62.0
HumanEval/101,"
def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
","words_string(""Hi, my name is John"")","words_string(""One, two, three, four, five, six"")","words_string(""Hello world"")","words_string(""first,second,third"")","words_string("""")","words_string(""Apple"")","words_string(""There,are,no,spaces"")","words_string(""Comma,separated,without,spaces"")","words_string(""Spaces are here but no commas"")","words_string(""Mixing, commas and spaces, together"")","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    """"""
    You will be given a string of words separated by commas or spaces. Your task is
    to split the string into words and return an array of the words.
    
    For example:
    words_string(""Hi, my name is John"") == [""Hi"", ""my"", ""name"", ""is"", ""John""]
    words_string(""One, two, three, four, five, six"") == [""One"", ""two"", ""three"", ""four"", ""five"", ""six""]
    """"""
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
","
def words_string(s):
    import re
    return re.findall(r'\w+', s)
",100.0,"[""['Hi', 'my', 'name', 'is', 'John']"", ""['Hi', 'my', 'name', 'is', 'John']"", ""['Hi', 'my', 'name', 'is', 'John']"", ""['Hi', 'my', 'name', 'is', 'John']"", ""['Hi', 'my', 'name', 'is', 'John']"", ""['Hi', 'my', 'name', 'is', 'John']""]","[""['One', 'two', 'three', 'four', 'five', 'six']"", ""['One', 'two', 'three', 'four', 'five', 'six']"", ""['One', 'two', 'three', 'four', 'five', 'six']"", ""['One', 'two', 'three', 'four', 'five', 'six']"", ""['One', 'two', 'three', 'four', 'five', 'six']"", ""['One', 'two', 'three', 'four', 'five', 'six']""]","[""['Hello', 'world']"", ""['Hello', 'world']"", ""['Hello', 'world']"", ""['Hello', 'world']"", ""['Hello', 'world']"", ""['Hello', 'world']""]","[""['first', 'second', 'third']"", ""['first', 'second', 'third']"", ""['first', 'second', 'third']"", ""['first', 'second', 'third']"", ""['first', 'second', 'third']"", ""['first', 'second', 'third']""]","['[]', '[]', '[]', '[]', '[]', '[]']","[""['Apple']"", ""['Apple']"", ""['Apple']"", ""['Apple']"", ""['Apple']"", ""['Apple']""]","[""['There', 'are', 'no', 'spaces']"", ""['There', 'are', 'no', 'spaces']"", ""['There', 'are', 'no', 'spaces']"", ""['There', 'are', 'no', 'spaces']"", ""['There', 'are', 'no', 'spaces']"", ""['There', 'are', 'no', 'spaces']""]","[""['Comma', 'separated', 'without', 'spaces']"", ""['Comma', 'separated', 'without', 'spaces']"", ""['Comma', 'separated', 'without', 'spaces']"", ""['Comma', 'separated', 'without', 'spaces']"", ""['Comma', 'separated', 'without', 'spaces']"", ""['Comma', 'separated', 'without', 'spaces']""]","[""['Spaces', 'are', 'here', 'but', 'no', 'commas']"", ""['Spaces', 'are', 'here', 'but', 'no', 'commas']"", ""['Spaces', 'are', 'here', 'but', 'no', 'commas']"", ""['Spaces', 'are', 'here', 'but', 'no', 'commas']"", ""['Spaces', 'are', 'here', 'but', 'no', 'commas']"", ""['Spaces', 'are', 'here', 'but', 'no', 'commas']""]","[""['Mixing', 'commas', 'and', 'spaces', 'together']"", ""['Mixing', 'commas', 'and', 'spaces', 'together']"", ""['Mixing', 'commas', 'and', 'spaces', 'together']"", ""['Mixing', 'commas', 'and', 'spaces', 'together']"", ""['Mixing', 'commas', 'and', 'spaces', 'together']"", ""['Mixing', 'commas', 'and', 'spaces', 'together']""]",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/102,"
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
","choose_num(12, 15)","choose_num(8, 10)","choose_num(5, 5)","choose_num(5, 6)","choose_num(13, 12)","choose_num(10, 10)","choose_num(25, 30)","choose_num(11, 11)","choose_num(2, 7)","choose_num(100, 104)","
import numpy as np

def choose_num(x, y):
    return max([i for i in range(x, y + 1) if i % 2 == 0] or [-1])
","
import math

def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
    for i in range(y, x-1, -1):
        if i % 2 == 0:
            return i
    return -1
","
import math

def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""
    largest_even = -1
    for num in range(x, y + 1):
        if num % 2 == 0 and num > largest_even:
            largest_even = num
    return largest_even
","
def choose_num(x, y):
    nums_range = [num for num in range(x, y + 1) if num % 2 == 0]
    return max(nums_range) if nums_range else -1
","
import math

def choose_num(x, y):
    return max([i for i in range(x, y+1) if i % 2 == 0] or [-1])
","
def choose_num(x, y):
    """"""This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """"""

    biggest_even = -1
    for num in range(x, y + 1):
        if num % 2 == 0 and num > biggest_even:
            biggest_even = num

    return biggest_even
",100.0,"['14', '14', '14', '14', '14', '14']","['10', '10', '10', '10', '10', '10']","['-1', '-1', '-1', '-1', '-1', '-1']","['6', '6', '6', '6', '6', '6']","['-1', '-1', '-1', '-1', '-1', '-1']","['10', '10', '10', '10', '10', '10']","['30', '30', '30', '30', '30', '30']","['-1', '-1', '-1', '-1', '-1', '-1']","['6', '6', '6', '6', '6', '6']","['104', '104', '104', '104', '104', '104']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/103,"
def rounded_avg(n, m):
    """"""You are given two positive integers n and m, and your task is to compute the
    average of the integers from n through m (including n and m). 
    Round the answer to the nearest integer and convert that to binary.
    If n is greater than m, return -1.
    Example:
    rounded_avg(1, 5) => ""0b11""
    rounded_avg(7, 5) => -1
    rounded_avg(10, 20) => ""0b1111""
    rounded_avg(20, 33) => ""0b11010""
    """"""
","rounded_avg(1, 5)","rounded_avg(7, 5)","rounded_avg(10, 20)","rounded_avg(3, 3)","rounded_avg(20, 33)","rounded_avg(99, 100)","rounded_avg(200, 205)","rounded_avg(30, 30)","rounded_avg(50, 55)","rounded_avg(1, 1)","
import math

def rounded_avg(n, m):
    if n > m:
        return -1
    
    avg = round(sum(range(n, m+1)) / (m - n + 1))
    return bin(avg)
","
import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = sum(range(n, m+1)) / (m - n + 1)
    rounded_avg = round(avg)
    return bin(rounded_avg)
","
from typing import Union

def rounded_avg(n: int, m: int) -> Union[str, int]:
    return bin(round(sum(range(n, m+1)) / (m - n + 1)))[2:] if n <= m else -1
","
import math

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = round((n + m) / 2)
    binary_avg = bin(avg)
    return binary_avg
","
from statistics import mean

def rounded_avg(n, m):
    if n > m:
        return -1
    avg = mean(range(n, m+1))
    return format(round(avg), 'b')
","
def rounded_avg(n, m):
    if n > m:
        return -1
    total = sum(range(n, m+1))
    avg = total / (m - n + 1)
    rounded_avg = round(avg)
    return bin(rounded_avg)
",66.66666666666666,"['0b11', '0b11', '11', '0b11', '11', '0b11']","['-1', '-1', '-1', '-1', '-1', '-1']","['0b1111', '0b1111', '1111', '0b1111', '1111', '0b1111']","['0b11', '0b11', '11', '0b11', '11', '0b11']","['0b11010', '0b11010', '11010', '0b11010', '11010', '0b11010']","['0b1100100', '0b1100100', '1100100', '0b1100100', '1100100', '0b1100100']","['0b11001010', '0b11001010', '11001010', '0b11001010', '11001010', '0b11001010']","['0b11110', '0b11110', '11110', '0b11110', '11110', '0b11110']","['0b110100', '0b110100', '110100', '0b110100', '110100', '0b110100']","['0b1', '0b1', '1', '0b1', '1', '0b1']",0.6,1.0,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,63.99999999999999
HumanEval/104,"
def unique_digits(x):
    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
","unique_digits([15, 33, 1422, 1])","unique_digits([152, 323, 1422, 10])","unique_digits([3579, 123, 47, 581])","unique_digits([11, 22, 33, 121, 303])",unique_digits([7]),"unique_digits([200, 800, 4000])",unique_digits([]),"unique_digits([999, 1001, 3535, 5467, 9123])","unique_digits([9, 777, 54321, 45632])","unique_digits([11, 13, 17, 19, 21, 23, 1, 35])","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    
    For example:
    >>> unique_digits([15, 33, 1422, 1])
    [1, 15, 33]
    >>> unique_digits([152, 323, 1422, 10])
    []
    """"""
    def has_even_digit(num: int) -> bool:
        return any(int(digit) % 2 == 0 for digit in str(num))

    return sorted([num for num in x if not has_even_digit(num)])
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    """"""Given a list of positive integers x. return a sorted list of all 
    elements that hasn't any even digit.

    Note: Returned list should be sorted in increasing order.
    """"""
    def has_even_digit(num: int) -> bool:
        return any(int(digit) % 2 == 0 for digit in str(num))

    return sorted([num for num in x if not has_even_digit(num)])
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    return sorted([num for num in x if all(int(d) % 2 != 0 for d in str(num))])
","
from typing import List

def unique_digits(x: List[int]) -> List[int]:
    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])
",100.0,"['[1, 15, 33]', '[1, 15, 33]', '[1, 15, 33]', '[1, 15, 33]', '[1, 15, 33]', '[1, 15, 33]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[3579]', '[3579]', '[3579]', '[3579]', '[3579]', '[3579]']","['[11, 33]', '[11, 33]', '[11, 33]', '[11, 33]', '[11, 33]', '[11, 33]']","['[7]', '[7]', '[7]', '[7]', '[7]', '[7]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[999, 3535]', '[999, 3535]', '[999, 3535]', '[999, 3535]', '[999, 3535]', '[999, 3535]']","['[9, 777]', '[9, 777]', '[9, 777]', '[9, 777]', '[9, 777]', '[9, 777]']","['[1, 11, 13, 17, 19, 35]', '[1, 11, 13, 17, 19, 35]', '[1, 11, 13, 17, 19, 35]', '[1, 11, 13, 17, 19, 35]', '[1, 11, 13, 17, 19, 35]', '[1, 11, 13, 17, 19, 35]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/105,"
def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""
","by_length([2, 1, 1, 4, 5, 8, 2, 3])",by_length([]),"by_length([1, -1, 55])","by_length([9, 8, 7, 6, 5, 4, 3, 2, 1])","by_length([10, 12, 0, -2, 1, 9])","by_length([11, 13, 9, 2, -3, 25])",by_length([4]),"by_length([20, -2, 7, 45, 2])","by_length([1, 1, 1, 1, 1, 1])","by_length([3, -1, 2, 9, 0, 3, -4, 10])","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    nums = [""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine""]
    
    sorted_arr = sorted([x for x in arr if 1 <= x <= 9])
    reversed_arr = sorted_arr[::-1]
    
    result = [nums[num - 1] for num in reversed_arr]
    
    return result
","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""
    result = [num2words[num] for num in sorted(arr) if 1 <= num <= 9]
    return list(reversed(result))

num2words = {
    1: 'One',
    2: 'Two',
    3: 'Three',
    4: 'Four',
    5: 'Five',
    6: 'Six',
    7: 'Seven',
    8: 'Eight',
    9: 'Nine',
}
","
from collections import OrderedDict

def by_length(arr):
    """"""
    Given an array of integers, sort the integers that are between 1 and 9 inclusive,
    reverse the resulting array, and then replace each digit by its corresponding name from
    ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine"".

    For example:
      arr = [2, 1, 1, 4, 5, 8, 2, 3]   
            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] 
            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]
      return [""Eight"", ""Five"", ""Four"", ""Three"", ""Two"", ""Two"", ""One"", ""One""]
    
      If the array is empty, return an empty array:
      arr = []
      return []
    
      If the array has any strange number ignore it:
      arr = [1, -1 , 55] 
            -> sort arr -> [-1, 1, 55]
            -> reverse arr -> [55, 1, -1]
      return = ['One']
    """"""
    names = [""Zero"", ""One"", ""Two"", ""Three"", ""Four"", ""Five"", ""Six"", ""Seven"", ""Eight"", ""Nine""]
    arr = sorted([x for x in arr if 1 <= x <= 9], reverse=True)
    return [names[x] for x in arr]

","
from typing import List

def by_length(arr: List[int]) -> List[str]:
    valid_digits = [str(i) for i in range(1, 10)]
    filtered_arr = [str(num) for num in arr if str(num) in valid_digits]
    if not filtered_arr:
        return []
    sorted_arr = sorted(filtered_arr)
    reversed_arr = sorted_arr[::-1]
    digit_to_name = {""1"": ""One"", ""2"": ""Two"", ""3"": ""Three"", ""4"": ""Four"", ""5"": ""Five"", ""6"": ""Six"", ""7"": ""Seven"", ""8"": ""Eight"", ""9"": ""Nine""}

    return [digit_to_name[digit] for digit in reversed_arr]

","
def by_length(arr):
    import numpy as np
    
    if not arr:
        return []
    
    valid_nums = sorted([num for num in arr if 1 <= num <= 9])
    converted_nums = np.flip(valid_nums).tolist()
    
    num_to_word = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine""
    }
    
    return [num_to_word[num] for num in converted_nums]
  ","
from collections import defaultdict

def by_length(arr):
    names = {1: ""One"", 2: ""Two"", 3: ""Three"", 4: ""Four"", 5: ""Five"", 6: ""Six"", 7: ""Seven"", 8: ""Eight"", 9: ""Nine""}
    filtered_arr = [x for x in arr if 1 <= x <= 9]
    filtered_arr.sort()
    filtered_arr.reverse()
    result = [names[x] for x in filtered_arr]
    return result
",100.0,"[""['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']"", ""['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']"", ""['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']"", ""['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']"", ""['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']"", ""['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']""]","['[]', '[]', '[]', '[]', '[]', '[]']","[""['One']"", ""['One']"", ""['One']"", ""['One']"", ""['One']"", ""['One']""]","[""['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']"", ""['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']"", ""['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']"", ""['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']"", ""['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']"", ""['Nine', 'Eight', 'Seven', 'Six', 'Five', 'Four', 'Three', 'Two', 'One']""]","[""['Nine', 'One']"", ""['Nine', 'One']"", ""['Nine', 'One']"", ""['Nine', 'One']"", ""['Nine', 'One']"", ""['Nine', 'One']""]","[""['Nine', 'Two']"", ""['Nine', 'Two']"", ""['Nine', 'Two']"", ""['Nine', 'Two']"", ""['Nine', 'Two']"", ""['Nine', 'Two']""]","[""['Four']"", ""['Four']"", ""['Four']"", ""['Four']"", ""['Four']"", ""['Four']""]","[""['Seven', 'Two']"", ""['Seven', 'Two']"", ""['Seven', 'Two']"", ""['Seven', 'Two']"", ""['Seven', 'Two']"", ""['Seven', 'Two']""]","[""['One', 'One', 'One', 'One', 'One', 'One']"", ""['One', 'One', 'One', 'One', 'One', 'One']"", ""['One', 'One', 'One', 'One', 'One', 'One']"", ""['One', 'One', 'One', 'One', 'One', 'One']"", ""['One', 'One', 'One', 'One', 'One', 'One']"", ""['One', 'One', 'One', 'One', 'One', 'One']""]","[""['Nine', 'Three', 'Three', 'Two']"", ""['Nine', 'Three', 'Three', 'Two']"", ""['Nine', 'Three', 'Three', 'Two']"", ""['Nine', 'Three', 'Three', 'Two']"", ""['Nine', 'Three', 'Three', 'Two']"", ""['Nine', 'Three', 'Three', 'Two']""]",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/106,"
def f(n):
    """""" Implement the function f that takes n as a parameter,
    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even
    or the sum of numbers from 1 to i otherwise.
    i starts from 1.
    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).
    Example:
    f(5) == [1, 2, 6, 24, 15]
    """"""
",f(1),f(2),f(3),f(4),f(5),f(6),f(10),f(15),f(0),f(20),"
import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i + 1)) for i in range(1, n + 1)]
  ","
import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","
import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","
import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","
from math import factorial

def f(n):
    return [factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
","
import math

def f(n):
    return [math.factorial(i) if i % 2 == 0 else sum(range(1, i+1)) for i in range(1, n+1)]
",100.0,"['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']","['[1, 2]', '[1, 2]', '[1, 2]', '[1, 2]', '[1, 2]', '[1, 2]']","['[1, 2, 6]', '[1, 2, 6]', '[1, 2, 6]', '[1, 2, 6]', '[1, 2, 6]', '[1, 2, 6]']","['[1, 2, 6, 24]', '[1, 2, 6, 24]', '[1, 2, 6, 24]', '[1, 2, 6, 24]', '[1, 2, 6, 24]', '[1, 2, 6, 24]']","['[1, 2, 6, 24, 15]', '[1, 2, 6, 24, 15]', '[1, 2, 6, 24, 15]', '[1, 2, 6, 24, 15]', '[1, 2, 6, 24, 15]', '[1, 2, 6, 24, 15]']","['[1, 2, 6, 24, 15, 720]', '[1, 2, 6, 24, 15, 720]', '[1, 2, 6, 24, 15, 720]', '[1, 2, 6, 24, 15, 720]', '[1, 2, 6, 24, 15, 720]', '[1, 2, 6, 24, 15, 720]']","['[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800]']","['[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000]', '[1, 2, 6, 24, 15, 720, 28, 40320, 45, 3628800, 66, 479001600, 91, 87178291200, 120, 20922789888000, 153, 6402373705728000, 190, 2432902008176640000]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/107,"
def even_odd_palindrome(n):
    """"""
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """"""
",even_odd_palindrome(1),even_odd_palindrome(2),even_odd_palindrome(10),even_odd_palindrome(99),even_odd_palindrome(150),even_odd_palindrome(300),even_odd_palindrome(501),even_odd_palindrome(800),even_odd_palindrome(999),even_odd_palindrome(1000),"
from typing import Tuple

def even_odd_palindrome(n: int) -> Tuple[int, int]:
    even_count = 0
    odd_count = 0
    for i in range(1, n+1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return even_count, odd_count
","
def even_odd_palindrome(n):
    count_even = 0
    count_odd = 0
    for i in range(1, n+1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
    return (count_even, count_odd)
","
from math import ceil

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    
    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    
    return (even_count, odd_count)
","
from math import isqrt

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def even_odd_palindrome(n):
    count_even = 0
    count_odd = 0
    for num in range(1, n + 1):
        if is_palindrome(num):
            if num % 2 == 0:
                count_even += 1
            else:
                count_odd += 1
    return (count_even, count_odd)
","
def even_odd_palindrome(n):
    def is_palindrome(num):
        return str(num) == str(num)[::-1]

    all_palindromes = [i for i in range(1, n+1) if is_palindrome(i)]
    even_palindromes = [i for i in all_palindromes if i % 2 == 0]
    odd_palindromes = [i for i in all_palindromes if i % 2 != 0]

    return (len(even_palindromes), len(odd_palindromes))
","
from math import ceil

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)
",100.0,"['(0, 1)', '(0, 1)', '(0, 1)', '(0, 1)', '(0, 1)', '(0, 1)']","['(1, 1)', '(1, 1)', '(1, 1)', '(1, 1)', '(1, 1)', '(1, 1)']","['(4, 5)', '(4, 5)', '(4, 5)', '(4, 5)', '(4, 5)', '(4, 5)']","['(8, 10)', '(8, 10)', '(8, 10)', '(8, 10)', '(8, 10)', '(8, 10)']","['(8, 15)', '(8, 15)', '(8, 15)', '(8, 15)', '(8, 15)', '(8, 15)']","['(18, 20)', '(18, 20)', '(18, 20)', '(18, 20)', '(18, 20)', '(18, 20)']","['(28, 30)', '(28, 30)', '(28, 30)', '(28, 30)', '(28, 30)', '(28, 30)']","['(38, 50)', '(38, 50)', '(38, 50)', '(38, 50)', '(38, 50)', '(38, 50)']","['(48, 60)', '(48, 60)', '(48, 60)', '(48, 60)', '(48, 60)', '(48, 60)']","['(48, 60)', '(48, 60)', '(48, 60)', '(48, 60)', '(48, 60)', '(48, 60)']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/108,"
def count_nums(arr):
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
",count_nums([]),"count_nums([-1, 11, -11])","count_nums([1, 1, 2])","count_nums([-5, 0, 15])","count_nums([123, -456, 789])","count_nums([999, -888, 777, -666])","count_nums([333, -222, 111, 0])","count_nums([77777, -55555, 44444])","count_nums([100000, -100000])","count_nums([-99999, 0, 99999])","
from typing import List

def count_nums(arr: List[int]) -> int:
    total_count = 0
    for num in arr:
        num_str = str(abs(num))
        signed_digits = []
        if num < 0:
            signed_digits.append('-' + num_str[0])        
        signed_digits += num_str[1:]
        digit_sum = sum(int(digit) for digit in signed_digits)
        if digit_sum > 0:
            total_count += 1
    return total_count
","
from typing import List

def count_nums(arr: List[int]) -> int:
    return sum(sum(int(digit) for digit in str(num).lstrip('-')) > 0 for num in arr)
","
from typing import List

def count_nums(arr: List[int]) -> int:
    count = 0
    for num in arr:
        if sum(int(digit) for digit in str(abs(num))) > 0:
            count += 1
    return count
","
from typing import List

def count_nums(arr: List[int]) -> int:
    return sum(1 for num in arr if sum(int(d) for d in str(abs(num))) > 0)
","
from typing import List

def count_nums(arr: List[int]) -> int:
    return sum(sum(int(digit) for digit in str(abs(num))) > 0 for num in arr)
","
from typing import List

def count_nums(arr: List[int]) -> int:
    """"""
    Write a function count_nums which takes an array of integers and returns
    the number of elements which has a sum of digits > 0.
    If a number is negative, then its first signed digit will be negative:
    e.g. -123 has signed digits -1, 2, and 3.
    >>> count_nums([]) == 0
    >>> count_nums([-1, 11, -11]) == 1
    >>> count_nums([1, 1, 2]) == 3
    """"""
    def sum_of_digits(num):
        if num == 0:
            return 0
        if num > 0:
            return sum(int(digit) for digit in str(num))
        else:
            return -sum(int(digit) for digit in str(num)[1:])

    return sum(1 for num in arr if sum_of_digits(num) > 0)
  ",57.5,"['0', '0', '0', '0', '0', '0']","['1', '3', '3', '3', '3', '1']","['0', '3', '3', '3', '3', '3']","['1', '2', '2', '2', '2', '1']","['3', '3', '3', '3', '3', '2']","['4', '4', '4', '4', '4', '2']","['3', '3', '3', '3', '3', '2']","['3', '3', '3', '3', '3', '2']","['0', '2', '2', '2', '2', '1']","['2', '2', '2', '2', '2', '1']",1.0,0.2,0.0,0.2,0.8,0.8,0.8,0.8,0.0,0.8,53.99999999999999
HumanEval/109,"
def move_one_ball(arr):
    """"""We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The
    numbers in the array will be randomly ordered. Your task is to determine if
    it is possible to get an array sorted in non-decreasing order by performing 
    the following operation on the given array:
        You are allowed to perform right shift operation any number of times.
    
    One right shift operation means shifting all elements of the array by one
    position in the right direction. The last element of the array will be moved to
    the starting position in the array i.e. 0th index. 

    If it is possible to obtain the sorted array by performing the above operation
    then return True else return False.
    If the given array is empty then return True.

    Note: The given list is guaranteed to have unique elements.

    For Example:
    
    move_one_ball([3, 4, 5, 1, 2])==>True
    Explanation: By performin 2 right shift operations, non-decreasing order can
                 be achieved for the given array.
    move_one_ball([3, 5, 4, 1, 2])==>False
    Explanation:It is not possible to get non-decreasing order for the given
                array by performing any number of right shift operations.
                
    """"""
","move_one_ball([3, 4, 5, 1, 2])","move_one_ball([3, 5, 4, 1, 2])","move_one_ball([1, 2, 3, 4, 5])","move_one_ball([5, 1, 2, 3, 4])",move_one_ball([]),"move_one_ball([10, 20, 30, 40])","move_one_ball([2, 3, 4, 5, 1])",move_one_ball([10]),"move_one_ball([5, 1, 2, 3, 4])","move_one_ball([50, 4, 20, 10, 40])","
def move_one_ball(arr):
    if not arr:
        return True
    
    n = len(arr)
    sorted_arr = sorted(arr)
    for i in range(n):
        if arr == sorted_arr:
            return True
        arr.insert(0, arr.pop())
    
    return False
","
from typing import List

def move_one_ball(arr: List[int]) -> bool:
    if not arr:
        return True
    
    n = len(arr)
    min_idx = arr.index(min(arr))
    for i in range(n):
        if arr[(min_idx + i) % n] != i + min(arr):
            return False
    
    return True
","
from typing import List

def move_one_ball(arr: List[int]) -> bool:
    if not arr:
        return True
    
    sorted_arr = sorted(arr)
    for i in range(len(arr)):
        if arr == sorted_arr:
            return True
        arr = [arr[-1]] + arr[:-1]

    return False
","
from typing import List

def move_one_ball(arr: List[int]) -> bool:
    if not arr:
        return True
    
    sorted_arr = sorted(arr)
    
    for _ in range(len(arr)):
        if arr == sorted_arr:
            return True
        arr.insert(0, arr.pop())
    
    return False
","
from typing import List

def move_one_ball(arr: List[int]) -> bool:
    if not arr:
        return True

    for _ in range(len(arr)):
        if arr == sorted(arr):
            return True
        arr = [arr[-1]] + arr[:-1]

    return False
","
def move_one_ball(arr):
    if not arr:
        return True
    sorted_arr = sorted(arr)
    shifts = 0
    while shifts < len(arr):
        if arr == sorted_arr:
            return True
        arr.insert(0, arr.pop())
        shifts += 1
    return False
",96.0,"['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'False', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']",1.0,1.0,1.0,1.0,1.0,0.8,1.0,1.0,1.0,1.0,98.00000000000001
HumanEval/110,"
def exchange(lst1, lst2):
    """"""In this problem, you will implement a function that takes two lists of numbers,
    and determines whether it is possible to perform an exchange of elements
    between them to make lst1 a list of only even numbers.
    There is no limit on the number of exchanged elements between lst1 and lst2.
    If it is possible to exchange elements between the lst1 and lst2 to make
    all the elements of lst1 to be even, return ""YES"".
    Otherwise, return ""NO"".
    For example:
    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => ""YES""
    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => ""NO""
    It is assumed that the input lists will be non-empty.
    """"""
","exchange([1, 2, 3, 4], [6, 8, 10, 12])","exchange([1, 3, 5, 7], [2, 4, 6, 8])","exchange([2, 4, 6, 8], [1, 3, 5, 7])","exchange([1, 5, 5, 3], [2, 2, 2, 2])","exchange([1, 1, 1, 1], [2, 2, 2, 2])","exchange([2, 4, 6, 8], [10, 12, 14, 16])","exchange([1, 3, 5], [2, 4, 6, 8, 10])","exchange([0, 0, 0, 1], [2, 4, 6, 8])","exchange([1, 2, 3, 4, 5], [6, 8, 10, 12, 14, 16])","exchange([1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2, 2])","
from typing import List

def exchange(lst1: List[int], lst2: List[int]) -> str:
    even_count = sum(1 for num in lst1 if num % 2 == 0)
    return ""YES"" if even_count == len(lst1) else ""NO""
","
def exchange(lst1, lst2):
    return ""YES"" if sum(x % 2 for x in lst1) <= len(lst2) else ""NO""
","
from typing import List

def exchange(lst1: List[int], lst2: List[int]) -> str:
    if sum(x % 2 != 0 for x in lst1) <= sum(x % 2 != 0 for x in lst2):
        return ""YES""
    return ""NO""
","
from collections import Counter

def exchange(lst1, lst2):
    if sum(1 for num in lst1 if num % 2 != 0) <= sum(1 for num in lst2 if num % 2 != 0):
        return ""YES""
    return ""NO""
","
from typing import List

def exchange(lst1: List[int], lst2: List[int]) -> str:
    if sum(x % 2 for x in lst1) == 0:
        return ""YES""
    return ""NO""
","
def exchange(lst1, lst2):
    return ""YES"" if sum(x % 2 == 0 for x in lst1) == len(lst1) else ""NO""
",57.14285714285713,"['NO', 'YES', 'NO', 'NO', 'NO', 'NO']","['NO', 'YES', 'NO', 'NO', 'NO', 'NO']","['YES', 'YES', 'YES', 'YES', 'YES', 'YES']","['NO', 'YES', 'NO', 'NO', 'NO', 'NO']","['NO', 'YES', 'NO', 'NO', 'NO', 'NO']","['YES', 'YES', 'YES', 'YES', 'YES', 'YES']","['NO', 'YES', 'NO', 'NO', 'NO', 'NO']","['NO', 'YES', 'NO', 'NO', 'NO', 'NO']","['NO', 'YES', 'NO', 'NO', 'NO', 'NO']","['NO', 'YES', 'NO', 'NO', 'NO', 'NO']",0.8,0.8,1.0,0.8,0.8,1.0,0.8,0.8,0.8,0.8,84.00000000000001
HumanEval/111,"
def histogram(test):
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}

    """"""
",histogram('a b c'),histogram('a b b a'),histogram('a b c a b'),histogram('b b b b a'),histogram(''),histogram('z z z z z'),histogram('x y z x y z x'),histogram('p p p q q r s t u'),histogram('m n n n o o o p p p'),histogram('i j i j k l m n o p q r s t u v w x y z i j k'),"
from collections import Counter

def histogram(test):
    return {key: value for key, value in Counter(test.split()).items() if value == max(Counter(test.split()).values())}
","
from collections import Counter

def histogram(test):
    return {k:v for k,v in Counter(test.split()).items() if v == max(Counter(test.split()).values())}
","
from collections import Counter

def histogram(test):
    return {letter: count for letter, count in Counter(test.split()).items()}
","
from collections import Counter

def histogram(test):
    return dict(Counter(test.split()))
","
from collections import defaultdict

def histogram(test):
    """"""
    Given a string representing space separated lowercase letters, 
    return a dictionary of the letter with the most repetition 
    and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    """"""
    counts = defaultdict(int)
    
    for letter in test.split():
        counts[letter] += 1
    
    max_count = max(counts.values(), default=0)
    result = {letter: count for letter, count in counts.items() if count == max_count}
    
    return result
","
from collections import Counter

def histogram(test: str) -> dict:
    """"""Given a string representing a space separated lowercase letters, return a dictionary
    of the letter with the most repetition and containing the corresponding count.
    If several letters have the same occurrence, return all of them.
    
    Example:
    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}
    histogram('a b b a') == {'a': 2, 'b': 2}
    histogram('a b c a b') == {'a': 2, 'b': 2}
    histogram('b b b b a') == {'b': 4}
    histogram('') == {}
    """"""

    counts = Counter(test.split())
    max_count = max(counts.values(), default=0)
    return {k: v for k, v in counts.items() if v == max_count}
",90.0,"[""{'a': 1, 'b': 1, 'c': 1}"", ""{'a': 1, 'b': 1, 'c': 1}"", ""{'a': 1, 'b': 1, 'c': 1}"", ""{'a': 1, 'b': 1, 'c': 1}"", ""{'a': 1, 'b': 1, 'c': 1}"", ""{'a': 1, 'b': 1, 'c': 1}""]","[""{'a': 2, 'b': 2}"", ""{'a': 2, 'b': 2}"", ""{'a': 2, 'b': 2}"", ""{'a': 2, 'b': 2}"", ""{'a': 2, 'b': 2}"", ""{'a': 2, 'b': 2}""]","[""{'a': 2, 'b': 2}"", ""{'a': 2, 'b': 2}"", ""{'a': 2, 'b': 2, 'c': 1}"", ""{'a': 2, 'b': 2, 'c': 1}"", ""{'a': 2, 'b': 2}"", ""{'a': 2, 'b': 2}""]","[""{'b': 4}"", ""{'b': 4}"", ""{'b': 4, 'a': 1}"", ""{'b': 4, 'a': 1}"", ""{'b': 4}"", ""{'b': 4}""]","['{}', '{}', '{}', '{}', '{}', '{}']","[""{'z': 5}"", ""{'z': 5}"", ""{'z': 5}"", ""{'z': 5}"", ""{'z': 5}"", ""{'z': 5}""]","[""{'x': 3}"", ""{'x': 3}"", ""{'x': 3, 'y': 2, 'z': 2}"", ""{'x': 3, 'y': 2, 'z': 2}"", ""{'x': 3}"", ""{'x': 3}""]","[""{'p': 3}"", ""{'p': 3}"", ""{'p': 3, 'q': 2, 'r': 1, 's': 1, 't': 1, 'u': 1}"", ""{'p': 3, 'q': 2, 'r': 1, 's': 1, 't': 1, 'u': 1}"", ""{'p': 3}"", ""{'p': 3}""]","[""{'n': 3, 'o': 3, 'p': 3}"", ""{'n': 3, 'o': 3, 'p': 3}"", ""{'m': 1, 'n': 3, 'o': 3, 'p': 3}"", ""{'m': 1, 'n': 3, 'o': 3, 'p': 3}"", ""{'n': 3, 'o': 3, 'p': 3}"", ""{'n': 3, 'o': 3, 'p': 3}""]","[""{'i': 3, 'j': 3}"", ""{'i': 3, 'j': 3}"", ""{'i': 3, 'j': 3, 'k': 2, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}"", ""{'i': 3, 'j': 3, 'k': 2, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1}"", ""{'i': 3, 'j': 3}"", ""{'i': 3, 'j': 3}""]",1.0,1.0,0.6,0.6,1.0,1.0,0.6,0.6,0.6,0.6,75.99999999999999
HumanEval/112,"
def reverse_delete(s,c):
    """"""Task
    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c
    then check if the result string is palindrome.
    A string is called palindrome if it reads the same backward as forward.
    You should return a tuple containing the result string and True/False for the check.
    Example
    For s = ""abcde"", c = ""ae"", the result should be ('bcd',False)
    For s = ""abcdef"", c = ""b""  the result should be ('acdef',False)
    For s = ""abcdedcba"", c = ""ab"", the result should be ('cdedc',True)
    """"""
","reverse_delete(""abcde"", ""ae"")","reverse_delete(""abcdef"", ""b"")","reverse_delete(""abcdedcba"", ""ab"")","reverse_delete(""racecar"", ""c"")","reverse_delete(""madam"", """")","reverse_delete("""", ""abc"")","reverse_delete(""abbabba"", ""b"")","reverse_delete(""abcddcba"", ""ac"")","reverse_delete(""abcba"", ""e"")","reverse_delete(""zxyxzyabcabc"", ""abc"")","
def reverse_delete(s,c):
    import re
    
    def is_palindrome(s):
        return s == s[::-1]
    
    new_s = re.sub(f""[{c}]"", """", s)
    
    return new_s, is_palindrome(new_s)
","
from typing import Tuple

def reverse_delete(s: str, c: str) -> Tuple[str, bool]:
    s = ''.join(char for char in s if char not in c)
    return s, s == s[::-1]
","
def reverse_delete(s, c):
    import re
    filtered_s = re.sub(""["" + c + ""]"", """", s)
    is_palindrome = filtered_s == filtered_s[::-1]
    return (filtered_s, is_palindrome)
","
def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return s, s == s[::-1]
","
def reverse_delete(s, c):
    result = ''.join([char for char in s if char not in c])
    return result, result == result[::-1]
","
from typing import Tuple

def reverse_delete(s: str, c: str) -> Tuple[str, bool]:
    result_str = ''.join([char for char in s if char not in c])
    return result_str, result_str == result_str[::-1]
",97.77777777777779,"[""('bcd', False)"", ""('bcd', False)"", ""('bcd', False)"", ""('bcd', False)"", ""('bcd', False)"", ""('bcd', False)""]","[""('acdef', False)"", ""('acdef', False)"", ""('acdef', False)"", ""('acdef', False)"", ""('acdef', False)"", ""('acdef', False)""]","[""('cdedc', True)"", ""('cdedc', True)"", ""('cdedc', True)"", ""('cdedc', True)"", ""('cdedc', True)"", ""('cdedc', True)""]","[""('raear', True)"", ""('raear', True)"", ""('raear', True)"", ""('raear', True)"", ""('raear', True)"", ""('raear', True)""]","['', ""('madam', True)"", '', ""('madam', True)"", ""('madam', True)"", ""('madam', True)""]","[""('', True)"", ""('', True)"", ""('', True)"", ""('', True)"", ""('', True)"", ""('', True)""]","[""('aaa', True)"", ""('aaa', True)"", ""('aaa', True)"", ""('aaa', True)"", ""('aaa', True)"", ""('aaa', True)""]","[""('bddb', True)"", ""('bddb', True)"", ""('bddb', True)"", ""('bddb', True)"", ""('bddb', True)"", ""('bddb', True)""]","[""('abcba', True)"", ""('abcba', True)"", ""('abcba', True)"", ""('abcba', True)"", ""('abcba', True)"", ""('abcba', True)""]","[""('zxyxzy', False)"", ""('zxyxzy', False)"", ""('zxyxzy', False)"", ""('zxyxzy', False)"", ""('zxyxzy', False)"", ""('zxyxzy', False)""]",1.0,1.0,1.0,1.0,0.2,1.0,1.0,1.0,1.0,1.0,92.0
HumanEval/113,"
def odd_count(lst):
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    [""the number of odd elements 4n the str4ng 4 of the 4nput.""]
    >>> odd_count(['3',""11111111""])
    [""the number of odd elements 1n the str1ng 1 of the 1nput."",
     ""the number of odd elements 8n the str8ng 8 of the 8nput.""]
    """"""
",odd_count(['1234567890']),"odd_count(['123456','7890'])",odd_count(['555']),odd_count([]),"odd_count(['0000','12','9456'])",odd_count(['1']),"odd_count(['1010101', '2323232', '34563456', '78907890', '1234567890'])","odd_count(['111', '222', '333', '444', '555', '666', '777', '888', '999'])","odd_count(['0','1','2','3','4','5','6','7','8','9'])","odd_count(['20202020','13579'])","
def odd_count(lst):
    return [f""the number of odd elements {sum(int(d) % 2 != 0 for d in s)}n the str{s}ng {i} of the {i}nput."" for i, s in enumerate(lst)]

import re
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    """"""Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be ""the number of odd elements in the
    string i of the input."" where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.
    """"""
    return [""the number of odd elements {}n the str{}ng {} of the {}nput."".format(sum(int(digit) % 2 != 0 for digit in s), sum(int(digit) % 2 != 0 for digit in s), s, s) for s in lst]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [""the number of odd elements {}n the str{}ng {} of the {}nput."".format(len([d for d in s if int(d) % 2 != 0]), i, i, i) for i, s in enumerate(lst, start=1)]
  ","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [""the number of odd elements {}n the str{}ng {} of the {}nput."".format(
        sum(1 for digit in string if int(digit) % 2 != 0), 
        sum(1 for digit in str(i) if int(digit) % 2 != 0), 
        i, 
        i) for i, string in enumerate(lst, 1)]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [f""the number of odd elements {sum(1 for digit in s if int(digit) % 2 != 0)}n the str{s.index(s) + 1}ng {s.index(s) + 1} of the {s.index(s) + 1}nput."" for s in lst]
","
from typing import List

def odd_count(lst: List[str]) -> List[str]:
    return [f""the number of odd elements {len([digit for digit in s if int(digit) % 2 != 0])}n the str{s.index(s)}ng {s.index(s)+1} of the {s.index(s)+1}nput."" for s in lst]
",0.0,"[""['the number of odd elements 5n the str1234567890ng 0 of the 0nput.']"", ""['the number of odd elements 5n the str5ng 1234567890 of the 1234567890nput.']"", ""['the number of odd elements 5n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 5n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 5n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 5n the str0ng 1 of the 1nput.']""]","[""['the number of odd elements 3n the str123456ng 0 of the 0nput.', 'the number of odd elements 2n the str7890ng 1 of the 1nput.']"", ""['the number of odd elements 3n the str3ng 123456 of the 123456nput.', 'the number of odd elements 2n the str2ng 7890 of the 7890nput.']"", ""['the number of odd elements 3n the str1ng 1 of the 1nput.', 'the number of odd elements 2n the str2ng 2 of the 2nput.']"", ""['the number of odd elements 3n the str1ng 1 of the 1nput.', 'the number of odd elements 2n the str0ng 2 of the 2nput.']"", ""['the number of odd elements 3n the str1ng 1 of the 1nput.', 'the number of odd elements 2n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 3n the str0ng 1 of the 1nput.', 'the number of odd elements 2n the str0ng 1 of the 1nput.']""]","[""['the number of odd elements 3n the str555ng 0 of the 0nput.']"", ""['the number of odd elements 3n the str3ng 555 of the 555nput.']"", ""['the number of odd elements 3n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 3n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 3n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 3n the str0ng 1 of the 1nput.']""]","['[]', '[]', '[]', '[]', '[]', '[]']","[""['the number of odd elements 0n the str0000ng 0 of the 0nput.', 'the number of odd elements 1n the str12ng 1 of the 1nput.', 'the number of odd elements 2n the str9456ng 2 of the 2nput.']"", ""['the number of odd elements 0n the str0ng 0000 of the 0000nput.', 'the number of odd elements 1n the str1ng 12 of the 12nput.', 'the number of odd elements 2n the str2ng 9456 of the 9456nput.']"", ""['the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str2ng 2 of the 2nput.', 'the number of odd elements 2n the str3ng 3 of the 3nput.']"", ""['the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str0ng 2 of the 2nput.', 'the number of odd elements 2n the str1ng 3 of the 3nput.']"", ""['the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 2n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 0n the str0ng 1 of the 1nput.', 'the number of odd elements 1n the str0ng 1 of the 1nput.', 'the number of odd elements 2n the str0ng 1 of the 1nput.']""]","[""['the number of odd elements 1n the str1ng 0 of the 0nput.']"", ""['the number of odd elements 1n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 1n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 1n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 1n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 1n the str0ng 1 of the 1nput.']""]","[""['the number of odd elements 4n the str1010101ng 0 of the 0nput.', 'the number of odd elements 3n the str2323232ng 1 of the 1nput.', 'the number of odd elements 4n the str34563456ng 2 of the 2nput.', 'the number of odd elements 4n the str78907890ng 3 of the 3nput.', 'the number of odd elements 5n the str1234567890ng 4 of the 4nput.']"", ""['the number of odd elements 4n the str4ng 1010101 of the 1010101nput.', 'the number of odd elements 3n the str3ng 2323232 of the 2323232nput.', 'the number of odd elements 4n the str4ng 34563456 of the 34563456nput.', 'the number of odd elements 4n the str4ng 78907890 of the 78907890nput.', 'the number of odd elements 5n the str5ng 1234567890 of the 1234567890nput.']"", ""['the number of odd elements 4n the str1ng 1 of the 1nput.', 'the number of odd elements 3n the str2ng 2 of the 2nput.', 'the number of odd elements 4n the str3ng 3 of the 3nput.', 'the number of odd elements 4n the str4ng 4 of the 4nput.', 'the number of odd elements 5n the str5ng 5 of the 5nput.']"", ""['the number of odd elements 4n the str1ng 1 of the 1nput.', 'the number of odd elements 3n the str0ng 2 of the 2nput.', 'the number of odd elements 4n the str1ng 3 of the 3nput.', 'the number of odd elements 4n the str0ng 4 of the 4nput.', 'the number of odd elements 5n the str1ng 5 of the 5nput.']"", ""['the number of odd elements 4n the str1ng 1 of the 1nput.', 'the number of odd elements 3n the str1ng 1 of the 1nput.', 'the number of odd elements 4n the str1ng 1 of the 1nput.', 'the number of odd elements 4n the str1ng 1 of the 1nput.', 'the number of odd elements 5n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 4n the str0ng 1 of the 1nput.', 'the number of odd elements 3n the str0ng 1 of the 1nput.', 'the number of odd elements 4n the str0ng 1 of the 1nput.', 'the number of odd elements 4n the str0ng 1 of the 1nput.', 'the number of odd elements 5n the str0ng 1 of the 1nput.']""]","[""['the number of odd elements 3n the str111ng 0 of the 0nput.', 'the number of odd elements 0n the str222ng 1 of the 1nput.', 'the number of odd elements 3n the str333ng 2 of the 2nput.', 'the number of odd elements 0n the str444ng 3 of the 3nput.', 'the number of odd elements 3n the str555ng 4 of the 4nput.', 'the number of odd elements 0n the str666ng 5 of the 5nput.', 'the number of odd elements 3n the str777ng 6 of the 6nput.', 'the number of odd elements 0n the str888ng 7 of the 7nput.', 'the number of odd elements 3n the str999ng 8 of the 8nput.']"", ""['the number of odd elements 3n the str3ng 111 of the 111nput.', 'the number of odd elements 0n the str0ng 222 of the 222nput.', 'the number of odd elements 3n the str3ng 333 of the 333nput.', 'the number of odd elements 0n the str0ng 444 of the 444nput.', 'the number of odd elements 3n the str3ng 555 of the 555nput.', 'the number of odd elements 0n the str0ng 666 of the 666nput.', 'the number of odd elements 3n the str3ng 777 of the 777nput.', 'the number of odd elements 0n the str0ng 888 of the 888nput.', 'the number of odd elements 3n the str3ng 999 of the 999nput.']"", ""['the number of odd elements 3n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str2ng 2 of the 2nput.', 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd elements 0n the str4ng 4 of the 4nput.', 'the number of odd elements 3n the str5ng 5 of the 5nput.', 'the number of odd elements 0n the str6ng 6 of the 6nput.', 'the number of odd elements 3n the str7ng 7 of the 7nput.', 'the number of odd elements 0n the str8ng 8 of the 8nput.', 'the number of odd elements 3n the str9ng 9 of the 9nput.']"", ""['the number of odd elements 3n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 2 of the 2nput.', 'the number of odd elements 3n the str1ng 3 of the 3nput.', 'the number of odd elements 0n the str0ng 4 of the 4nput.', 'the number of odd elements 3n the str1ng 5 of the 5nput.', 'the number of odd elements 0n the str0ng 6 of the 6nput.', 'the number of odd elements 3n the str1ng 7 of the 7nput.', 'the number of odd elements 0n the str0ng 8 of the 8nput.', 'the number of odd elements 3n the str1ng 9 of the 9nput.']"", ""['the number of odd elements 3n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 3n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 3n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 3n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 3n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 3n the str0ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 1 of the 1nput.', 'the number of odd elements 3n the str0ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 1 of the 1nput.', 'the number of odd elements 3n the str0ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 1 of the 1nput.', 'the number of odd elements 3n the str0ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 1 of the 1nput.', 'the number of odd elements 3n the str0ng 1 of the 1nput.']""]","[""['the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str2ng 2 of the 2nput.', 'the number of odd elements 1n the str3ng 3 of the 3nput.', 'the number of odd elements 0n the str4ng 4 of the 4nput.', 'the number of odd elements 1n the str5ng 5 of the 5nput.', 'the number of odd elements 0n the str6ng 6 of the 6nput.', 'the number of odd elements 1n the str7ng 7 of the 7nput.', 'the number of odd elements 0n the str8ng 8 of the 8nput.', 'the number of odd elements 1n the str9ng 9 of the 9nput.']"", ""['the number of odd elements 0n the str0ng 0 of the 0nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 2 of the 2nput.', 'the number of odd elements 1n the str1ng 3 of the 3nput.', 'the number of odd elements 0n the str0ng 4 of the 4nput.', 'the number of odd elements 1n the str1ng 5 of the 5nput.', 'the number of odd elements 0n the str0ng 6 of the 6nput.', 'the number of odd elements 1n the str1ng 7 of the 7nput.', 'the number of odd elements 0n the str0ng 8 of the 8nput.', 'the number of odd elements 1n the str1ng 9 of the 9nput.']"", ""['the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str2ng 2 of the 2nput.', 'the number of odd elements 0n the str3ng 3 of the 3nput.', 'the number of odd elements 1n the str4ng 4 of the 4nput.', 'the number of odd elements 0n the str5ng 5 of the 5nput.', 'the number of odd elements 1n the str6ng 6 of the 6nput.', 'the number of odd elements 0n the str7ng 7 of the 7nput.', 'the number of odd elements 1n the str8ng 8 of the 8nput.', 'the number of odd elements 0n the str9ng 9 of the 9nput.', 'the number of odd elements 1n the str10ng 10 of the 10nput.']"", ""['the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str0ng 2 of the 2nput.', 'the number of odd elements 0n the str1ng 3 of the 3nput.', 'the number of odd elements 1n the str0ng 4 of the 4nput.', 'the number of odd elements 0n the str1ng 5 of the 5nput.', 'the number of odd elements 1n the str0ng 6 of the 6nput.', 'the number of odd elements 0n the str1ng 7 of the 7nput.', 'the number of odd elements 1n the str0ng 8 of the 8nput.', 'the number of odd elements 0n the str1ng 9 of the 9nput.', 'the number of odd elements 1n the str1ng 10 of the 10nput.']"", ""['the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 1n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 0n the str0ng 1 of the 1nput.', 'the number of odd elements 1n the str0ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 1 of the 1nput.', 'the number of odd elements 1n the str0ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 1 of the 1nput.', 'the number of odd elements 1n the str0ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 1 of the 1nput.', 'the number of odd elements 1n the str0ng 1 of the 1nput.', 'the number of odd elements 0n the str0ng 1 of the 1nput.', 'the number of odd elements 1n the str0ng 1 of the 1nput.']""]","[""['the number of odd elements 0n the str20202020ng 0 of the 0nput.', 'the number of odd elements 5n the str13579ng 1 of the 1nput.']"", ""['the number of odd elements 0n the str0ng 20202020 of the 20202020nput.', 'the number of odd elements 5n the str5ng 13579 of the 13579nput.']"", ""['the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 5n the str2ng 2 of the 2nput.']"", ""['the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 5n the str0ng 2 of the 2nput.']"", ""['the number of odd elements 0n the str1ng 1 of the 1nput.', 'the number of odd elements 5n the str1ng 1 of the 1nput.']"", ""['the number of odd elements 0n the str0ng 1 of the 1nput.', 'the number of odd elements 5n the str0ng 1 of the 1nput.']""]",0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,10.0
HumanEval/114,"
def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
","minSubArraySum([1, 2, 3, 4, 5])","minSubArraySum([-1, -2, -3, -4])","minSubArraySum([0, 0, 0, 1])","minSubArraySum([-10, 20, -30, 40])",minSubArraySum([10]),"minSubArraySum([-1, 1, -1, 0])","minSubArraySum([500, -1000, 400, -300, 200])","minSubArraySum([-2, -1, -3, -4])",minSubArraySum([]),"minSubArraySum([2, -4, 3, 1, -1, 2])","
from sys import maxsize

def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
    if not nums:
        return 0
    
    current_sum = 0
    min_sum = maxsize
    
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    
    return min_sum
","
from typing import List

def minSubArraySum(nums: List[int]) -> int:
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
    if not nums:
        return 0

    min_sum = float('inf')
    curr_sum = 0

    for num in nums:
        curr_sum = min(curr_sum + num, num)
        min_sum = min(min_sum, curr_sum)

    return min_sum
  ","
from typing import List

def minSubArraySum(nums: List[int]) -> int:
    if not nums:
        return 0
    
    n = len(nums)
    min_sum = total_sum = nums[0]
    
    for i in range(1, n):
        total_sum = min(nums[i], total_sum + nums[i])
        min_sum = min(min_sum, total_sum)
    
    return min_sum
","
import sys

def minSubArraySum(nums):
    """"""
    Given an array of integers nums, find the minimum sum of any non-empty sub-array
    of nums.
    Example
    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1
    minSubArraySum([-1, -2, -3]) == -6
    """"""
    if not nums:
        return 0
    
    min_sum = sys.maxsize
    current_sum = 0
    
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    
    return min_sum
  ","
from sys import maxsize

def minSubArraySum(nums):
    min_sum = maxsize
    current_sum = 0
    
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
        
    return min_sum
","
import sys

def minSubArraySum(nums):
    min_sum = sys.maxsize
    curr_sum = 0
    
    for num in nums:
        curr_sum = min(num, curr_sum + num)
        min_sum = min(min_sum, curr_sum)
    
    return min_sum
  ",100.0,"['1', '1', '1', '1', '1', '1']","['-10', '-10', '-10', '-10', '-10', '-10']","['0', '0', '0', '0', '0', '0']","['-30', '-30', '-30', '-30', '-30', '-30']","['10', '10', '10', '10', '10', '10']","['-1', '-1', '-1', '-1', '-1', '-1']","['-1000', '-1000', '-1000', '-1000', '-1000', '-1000']","['-10', '-10', '-10', '-10', '-10', '-10']","['0', '0', '0', '0', '9223372036854775807', '9223372036854775807']","['-4', '-4', '-4', '-4', '-4', '-4']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.6,1.0,96.0
HumanEval/115,"
def max_fill(grid, capacity):
    import math
    """"""
    You are given a rectangular grid of wells. Each row represents a single well,
    and each 1 in a row represents a single unit of water.
    Each well has a corresponding bucket that can be used to extract water from it, 
    and all buckets have the same capacity.
    Your task is to use the buckets to empty the wells.
    Output the number of times you need to lower the buckets.

    Example 1:
        Input: 
            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]
            bucket_capacity : 1
        Output: 6

    Example 2:
        Input: 
            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]
            bucket_capacity : 2
        Output: 5
    
    Example 3:
        Input: 
            grid : [[0,0,0], [0,0,0]]
            bucket_capacity : 5
        Output: 0

    Constraints:
        * all wells have the same length
        * 1 <= grid.length <= 10^2
        * 1 <= grid[:,1].length <= 10^2
        * grid[i][j] -> 0 | 1
        * 1 <= capacity <= 10
    """"""
","max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)","max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)","max_fill([[0, 0, 0], [0, 0, 0]], 5)","max_fill([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 10)","max_fill([[1, 0, 1, 0, 1, 0, 1, 0, 1, 0]], 2)","max_fill([[1, 0], [1, 0], [1, 0], [1, 0], [1, 0]], 3)","max_fill([[1, 0, 1], [0, 1, 0], [1, 0, 1], [0, 1, 0]], 1)","max_fill([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]], 2)","max_fill([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], 5)","max_fill([[1]], 1)","
import math

def max_fill(grid, capacity):
    total_water = 0
    for row in grid:
        for well in row:
            total_water += well
    
    return math.ceil(total_water / capacity)
","
import math

def max_fill(grid, capacity):
    total_water = 0
    for row in grid:
        for well in row:
            if well > 0:
                total_water += well
    
    return math.ceil(total_water / capacity)
","
import math

def max_fill(grid, capacity):
    total = 0
    for row in grid:
        for well in row:
            if well > capacity:
                total += math.ceil(well / capacity)
    return total
","
import math

def max_fill(grid, capacity):
    total_moves = 0
    for row in grid:
        current_water = 0
        for well in row:
            if well > current_water:
                moves_needed = math.ceil((well - current_water) / capacity)
                total_moves += moves_needed
                current_water += moves_needed * capacity
            current_water += well
    return total_moves
","
import math

def max_fill(grid, capacity):
    # Implementation of max_fill function goes here
    pass
","
import math

def max_fill(grid, capacity):
    total_water = sum(map(sum, grid))
    buckets_needed = math.ceil(total_water / capacity)
    return buckets_needed
",44.0,"['6', '6', '0', '3', 'None', '6']","['5', '5', '0', '3', 'None', '5']","['0', '0', '0', '0', 'None', '0']","['1', '1', '0', '1', 'None', '1']","['3', '3', '0', '1', 'None', '3']","['2', '2', '0', '5', 'None', '2']","['6', '6', '0', '4', 'None', '6']","['0', '0', '0', '0', 'None', '0']","['6', '6', '0', '3', 'None', '6']","['1', '1', '0', '1', 'None', '1']",0.4,0.4,0.8,0.6,0.4,0.4,0.4,0.8,0.4,0.6,52.0
HumanEval/116,"
def sort_array(arr):
    """"""
    In this Kata, you have to sort an array of non-negative integers according to
    number of ones in their binary representation in ascending order.
    For similar number of ones, sort based on decimal value.

    It must be implemented like this:
    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]
    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]
    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]
    """"""
","sort_array([1, 5, 2, 3, 4])","sort_array([-2, -3, -4, -5, -6])","sort_array([1, 0, 2, 3, 4])","sort_array([31, 15, 7, 3, 1])","sort_array([0, 0, 0, 0, 0])","sort_array([1023, 511, 255, 127, 63])","sort_array([8, 16, 32, 64, 128])","sort_array([9, 17, 33, 65, 129])","sort_array([123, 456, 789, 1011, 1213])","sort_array([100, 1000, 10000, 100000, 1000000])","
from functools import cmp_to_key

def sort_array(arr):
    def count_ones(num):
        return bin(num).count('1')

    def custom_sort(a, b):
        ones_a = count_ones(a)
        ones_b = count_ones(b)

        if ones_a != ones_b:
            return ones_a - ones_b
        else:
            return a - b

    return sorted(arr, key=cmp_to_key(custom_sort))
","
from functools import cmp_to_key

def sort_array(arr):
    def count_ones(n):
        return bin(n).count('1')
    
    def custom_sort(a, b):
        if count_ones(a) != count_ones(b):
            return count_ones(a) - count_ones(b)
        else:
            return a - b
    
    return sorted(arr, key=cmp_to_key(custom_sort))
","
from functools import cmp_to_key

def sort_array(arr):
    def compare(x, y):
        x_ones = bin(x).count('1')
        y_ones = bin(y).count('1')

        if x_ones == y_ones:
            return x - y
        return x_ones - y_ones

    return sorted(arr, key=cmp_to_key(compare))
","
from itertools import accumulate
from operator import itemgetter

def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))
","
from functools import cmp_to_key

def sort_array(arr):
    def compare_bits_count(a, b):
        count_a, count_b = bin(a).count('1'), bin(b).count('1')
        if count_a == count_b:
            return a - b
        return count_a - count_b
    
    return sorted(arr, key=cmp_to_key(compare_bits_count))
","
from typing import List

def sort_array(arr: List[int]) -> List[int]:
    return sorted(arr, key=lambda x: (bin(x).count('1'), x))
",100.0,"['[1, 2, 4, 3, 5]', '[1, 2, 4, 3, 5]', '[1, 2, 4, 3, 5]', '[1, 2, 4, 3, 5]', '[1, 2, 4, 3, 5]', '[1, 2, 4, 3, 5]']","['[-4, -2, -6, -5, -3]', '[-4, -2, -6, -5, -3]', '[-4, -2, -6, -5, -3]', '[-4, -2, -6, -5, -3]', '[-4, -2, -6, -5, -3]', '[-4, -2, -6, -5, -3]']","['[0, 1, 2, 4, 3]', '[0, 1, 2, 4, 3]', '[0, 1, 2, 4, 3]', '[0, 1, 2, 4, 3]', '[0, 1, 2, 4, 3]', '[0, 1, 2, 4, 3]']","['[1, 3, 7, 15, 31]', '[1, 3, 7, 15, 31]', '[1, 3, 7, 15, 31]', '[1, 3, 7, 15, 31]', '[1, 3, 7, 15, 31]', '[1, 3, 7, 15, 31]']","['[0, 0, 0, 0, 0]', '[0, 0, 0, 0, 0]', '[0, 0, 0, 0, 0]', '[0, 0, 0, 0, 0]', '[0, 0, 0, 0, 0]', '[0, 0, 0, 0, 0]']","['[63, 127, 255, 511, 1023]', '[63, 127, 255, 511, 1023]', '[63, 127, 255, 511, 1023]', '[63, 127, 255, 511, 1023]', '[63, 127, 255, 511, 1023]', '[63, 127, 255, 511, 1023]']","['[8, 16, 32, 64, 128]', '[8, 16, 32, 64, 128]', '[8, 16, 32, 64, 128]', '[8, 16, 32, 64, 128]', '[8, 16, 32, 64, 128]', '[8, 16, 32, 64, 128]']","['[9, 17, 33, 65, 129]', '[9, 17, 33, 65, 129]', '[9, 17, 33, 65, 129]', '[9, 17, 33, 65, 129]', '[9, 17, 33, 65, 129]', '[9, 17, 33, 65, 129]']","['[456, 789, 123, 1213, 1011]', '[456, 789, 123, 1213, 1011]', '[456, 789, 123, 1213, 1011]', '[456, 789, 123, 1213, 1011]', '[456, 789, 123, 1213, 1011]', '[456, 789, 123, 1213, 1011]']","['[100, 10000, 1000, 100000, 1000000]', '[100, 10000, 1000, 100000, 1000000]', '[100, 10000, 1000, 100000, 1000000]', '[100, 10000, 1000, 100000, 1000000]', '[100, 10000, 1000, 100000, 1000000]', '[100, 10000, 1000, 100000, 1000000]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/117,"
def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""
","select_words(""Mary had a little lamb"", 4)","select_words(""Mary had a little lamb"", 3)","select_words(""simple white space"", 2)","select_words(""Hello world"", 4)","select_words(""Uncle sam"", 3)","select_words("""", 5)","select_words(""Brisk lovely brisket "", 10)","select_words(""fall leaves after dark"", 3)","select_words(""Case of routine spaces"", 1)","select_words(""CiviC center and more"", 2)","
import re

def select_words(s, n):
    """"""Given a string s and a natural number n, you have been tasked to implement 
    a function that returns a list of all words from string s that contain exactly 
    n consonants, in order these words appear in the string s.
    If the string s is empty then the function should return an empty list.
    Note: you may assume the input string contains only letters and spaces.
    Examples:
    select_words(""Mary had a little lamb"", 4) ==> [""little""]
    select_words(""Mary had a little lamb"", 3) ==> [""Mary"", ""lamb""]
    select_words(""simple white space"", 2) ==> []
    select_words(""Hello world"", 4) ==> [""world""]
    select_words(""Uncle sam"", 3) ==> [""Uncle""]
    """"""
    
    def count_consonants(word):
        return len(re.findall(""[bcdfghjklmnpqrstvwxyz]"", word, flags=re.IGNORECASE))
    
    words = s.split()
    return [word for word in words if count_consonants(word) == n]
","
import re

def select_words(s, n):
    def count_consonants(word):
        return sum(1 for c in word if c.isalpha() and c.lower() not in 'aeiou')

    words = re.findall(r'\b\w+\b', s)
    return [word for word in words if count_consonants(word) == n]
","
import string

def select_words(s, n):
    def count_consonants(word):
        return sum(1 for c in word if c.lower() in string.ascii_lowercase and c.lower() not in 'aeiou')

    words = s.split()
    return [word for word in words if count_consonants(word) == n]
","
import re

def count_consonants(word):
    return sum(1 for letter in word if letter.isalpha() and letter.lower() not in 'aeiou')

def select_words(s, n):
    if not s:
        return []
    
    words = s.split()
    valid_words = [word for word in words if count_consonants(word) == n]
    
    return valid_words
","
import re

def select_words(s, n):
    def count_consonants(word):
        return sum(1 for letter in word if letter.lower() not in 'aeiou')
    
    words = s.split()
    result = [word for word in words if count_consonants(word) == n]
    
    return result
","
import re

def select_words(s, n):
    vowels = ""aeiouAEIOU""
    words = re.findall(r'\b[^\d\WaeiouAEIOU_]+\b', s)
    result = [word for word in words if sum(1 for char in word if char not in vowels) == n]
    return result
",88.57142857142857,"[""['little']"", ""['little']"", ""['little']"", ""['little']"", ""['little']"", '[]']","[""['Mary', 'lamb']"", ""['Mary', 'lamb']"", ""['Mary', 'lamb']"", ""['Mary', 'lamb']"", ""['Mary', 'lamb']"", '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","[""['world']"", ""['world']"", ""['world']"", ""['world']"", ""['world']"", '[]']","[""['Uncle']"", ""['Uncle']"", ""['Uncle']"", ""['Uncle']"", ""['Uncle']"", '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","[""['fall', 'leaves', 'after', 'dark']"", ""['fall', 'leaves', 'after', 'dark']"", ""['fall', 'leaves', 'after', 'dark']"", ""['fall', 'leaves', 'after', 'dark']"", ""['fall', 'leaves', 'after', 'dark']"", '[]']","[""['of']"", ""['of']"", ""['of']"", ""['of']"", ""['of']"", '[]']","[""['and', 'more']"", ""['and', 'more']"", ""['and', 'more']"", ""['and', 'more']"", ""['and', 'more']"", '[]']",0.8,0.8,1.0,0.8,0.8,1.0,1.0,0.8,0.8,0.8,86.0
HumanEval/118,"
def get_closest_vowel(word):
    """"""You are given a word. Your task is to find the closest vowel that stands between 
    two consonants from the right side of the word (case sensitive).
    
    Vowels in the beginning and ending doesn't count. Return empty string if you didn't
    find any vowel met the above condition. 

    You may assume that the given string contains English letter only.

    Example:
    get_closest_vowel(""yogurt"") ==> ""u""
    get_closest_vowel(""FULL"") ==> ""U""
    get_closest_vowel(""quick"") ==> """"
    get_closest_vowel(""ab"") ==> """"
    """"""
","get_closest_vowel(""yogurt"")","get_closest_vowel(""FULL"")","get_closest_vowel(""quick"")","get_closest_vowel(""ab"")","get_closest_vowel(""definite"")","get_closest_vowel(""ALGORITHM"")","get_closest_vowel(""RHYTHM"")","get_closest_vowel(""a"")","get_closest_vowel(""loneliness"")","get_closest_vowel(""sequential"")","
def get_closest_vowel(word):
    vowels = set('aeiouAEIOU')
    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'
    
    for i in range(len(word) - 3, 0, -1):
        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:
            return word[i]
    
    return """"

","
def get_closest_vowel(word):
    vowels = set(""aeiouAEIOU"")
    consonants = set(""bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"")
    
    closest_vowel = ''
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:
            closest_vowel = word[i]
            break
            
    return closest_vowel
","
def get_closest_vowel(word):
    vowels = set('AEIOUaeiou')
    consonants = set('BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz')

    for i in range(len(word)-3, 0, -1):
        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:
            return word[i]
    
    return ''
","
def get_closest_vowel(word):
    vowels = 'AEIOUaeiou'
    consonants = 'BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'
    
    indices = [index for index, char in enumerate(word[1:-1]) if char in consonants and word[index] in vowels and word[index+2] in vowels]
    
    if indices:
        closest_vowel_index = indices[-1] + 1
        return word[closest_vowel_index]
    else:
        return """"
","
import re

def get_closest_vowel(word):
    vowels = set(""aeiouAEIOU"")
    consonants = set(""bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"")
    
    start = False
    for char in reversed(word[1:-1]):
        if char in vowels:
            start = True
        elif char in consonants and start:
            return char
            
    return """"
","
from string import ascii_lowercase

def get_closest_vowel(word):
    vowels = set('aeiouAEIOU')
    
    consonants = set(ascii_lowercase) - vowels
    consonant_indices = [i for i, char in enumerate(word) if char in consonants]
    
    for idx in reversed(consonant_indices[1:-1]):
        if word[idx] in vowels:
            return word[idx]
    
    return """"
",66.15384615384616,"['u', 'u', 'u', 'g', 'g', '']","['U', 'U', 'U', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['i', 'i', 'i', 't', 'n', '']","['I', 'I', 'I', 'R', 'R', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['e', 'e', 'e', 'n', 'n', '']","['e', 'e', 'e', 'q', 't', '']",0.4,0.4,1.0,1.0,0.4,0.4,1.0,1.0,0.4,0.4,64.0
HumanEval/119,"
def match_parens(lst):
    '''
    You are given a list of two strings, both strings consist of open
    parentheses '(' or close parentheses ')' only.
    Your job is to check if it is possible to concatenate the two strings in
    some order, that the resulting string will be good.
    A string S is considered to be good if and only if all parentheses in S
    are balanced. For example: the string '(())()' is good, while the string
    '())' is not.
    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.

    Examples:
    match_parens(['()(', ')']) == 'Yes'
    match_parens([')', ')']) == 'No'
    '''
","match_parens([()(', ')'])","match_parens([')', ')'])","match_parens([(, ('])","match_parens([()(), ()'])","match_parens([(', ')'])","match_parens(['))), ((('])","match_parens([())(, (()'])","match_parens(['', ''])","match_parens(['))(, (()'])","match_parens([')(', ')('])","
from collections import deque

def match_parens(lst):
    opening_parens = 0
    closing_parens = 0
    
    for s in lst:
        for char in s:
            if char == '(':
                opening_parens += 1
            else:
                if opening_parens > 0:
                    opening_parens -= 1
                else:
                    closing_parens += 1
    
    if opening_parens == 0 and closing_parens <= 1:
        return 'Yes'
    else:
        return 'No'
","
from collections import defaultdict

def match_parens(lst):
    def check_parens(s):
        stack = []
        for c in s:
            if c == '(':
                stack.append(c)
            elif c == ')':
                if stack and stack[-1] == '(':
                    stack.pop()
                else:
                    return False
        return len(stack) == 0

    open_count = defaultdict(int)
    close_count = defaultdict(int)
    
    for s in lst:
        for c in s:
            if c == '(':
                open_count[s] += 1
            elif c == ')':
                close_count[s] += 1
    
    if open_count['('] == close_count[')'] and open_count[')'] == close_count['(']:
        return 'Yes' if check_parens(lst[0] + lst[1]) or check_parens(lst[1] + lst[0]) else 'No'
    else:
        return 'No'
","
def match_parens(lst):
    open_count = 0
    for char in lst[0] + lst[1]:
        if char == '(':
            open_count += 1
        else:
            if open_count == 0:
                return 'No'
            open_count -= 1
    return 'Yes'
","
def match_parens(lst):
    from collections import deque
    stack = deque()
    
    for paren in lst[0] + lst[1]:
        if paren == '(':
            stack.append(paren)
        else:
            if len(stack) > 0 and stack[-1] == '(':
                stack.pop()
            else:
                return 'No'
    
    return 'Yes'
","
from collections import deque

def match_parens(lst):
    left_count = 0
    stack = deque()
    
    for s in lst:
        for c in s:
            if c == '(':
                stack.append(c)
            else:
                if not stack:
                    left_count += 1
                else:
                    stack.pop()
    
    if len(stack) + left_count % 2 == 0:
        return 'Yes'
    else:
        return 'No'
","
def match_parens(lst):
    from collections import Counter

    freq = Counter(''.join(lst))

    if freq['('] == freq[')']:
        return 'Yes'
    else:
        return 'No'
",76.66666666666666,"['', '', '', '', '', '']","['No', 'No', 'No', 'No', 'Yes', 'No']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['No', '', '', '', 'No', 'Yes']","['', '', '', '', '', '']","['Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes']","['No', '', '', '', 'No', 'Yes']","['No', 'No', 'No', 'No', 'No', 'Yes']",1.0,0.8,1.0,1.0,1.0,0.2,1.0,1.0,0.2,0.8,80.0
HumanEval/120,"
def maximum(arr, k):
    """"""
    Given an array arr of integers and a positive integer k, return a sorted list 
    of length k with the maximum k numbers in arr.

    Example 1:

        Input: arr = [-3, -4, 5], k = 3
        Output: [-4, -3, 5]

    Example 2:

        Input: arr = [4, -4, 4], k = 2
        Output: [4, 4]

    Example 3:

        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1
        Output: [2]

    Note:
        1. The length of the array will be in the range of [1, 1000].
        2. The elements in the array will be in the range of [-1000, 1000].
        3. 0 <= k <= len(arr)
    """"""
","maximum([1, 2, 3, 4], 2)","maximum([5, 3, 1, 8, 9], 5)","maximum([-1, -2, -3, 0], 3)","maximum([100, 200, 150], 1)","maximum([], 0)","maximum([-1000, 0, 1000], 2)","maximum([5, 5, 5, 5], 4)","maximum([10, 20, 30, 40, 50], 0)","maximum([-10, -20, -30, -40, -50], 3)","maximum([1], 1)","
from heapq import nlargest

def maximum(arr, k):
    return nlargest(k, arr)
","
from typing import List

def maximum(arr: List[int], k: int) -> List[int]:
    return sorted(arr)[-k:]
","
from heapq import nlargest

def maximum(arr, k):
    return sorted(nlargest(k, arr))
","
from typing import List

def maximum(arr: List[int], k: int) -> List[int]:
    return sorted(arr)[-k:]
","
from typing import List

def maximum(arr: List[int], k: int) -> List[int]:
    return sorted(arr)[-k:]
","
from heapq import nlargest

def maximum(arr, k):
    return sorted(nlargest(k, arr))
",94.54545454545455,"['[4, 3]', '[3, 4]', '[3, 4]', '[3, 4]', '[3, 4]', '[3, 4]']","['[9, 8, 5, 3, 1]', '[1, 3, 5, 8, 9]', '[1, 3, 5, 8, 9]', '[1, 3, 5, 8, 9]', '[1, 3, 5, 8, 9]', '[1, 3, 5, 8, 9]']","['[0, -1, -2]', '[-2, -1, 0]', '[-2, -1, 0]', '[-2, -1, 0]', '[-2, -1, 0]', '[-2, -1, 0]']","['[200]', '[200]', '[200]', '[200]', '[200]', '[200]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[1000, 0]', '[0, 1000]', '[0, 1000]', '[0, 1000]', '[0, 1000]', '[0, 1000]']","['[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]', '[5, 5, 5, 5]']","['[]', '[10, 20, 30, 40, 50]', '[]', '[10, 20, 30, 40, 50]', '[10, 20, 30, 40, 50]', '[]']","['[-10, -20, -30]', '[-30, -20, -10]', '[-30, -20, -10]', '[-30, -20, -10]', '[-30, -20, -10]', '[-30, -20, -10]']","['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']",0.0,0.0,0.0,1.0,1.0,0.0,1.0,0.4,0.0,1.0,44.00000000000001
HumanEval/121,"
def solution(lst):
    """"""Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    

    Examples
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==>0
    """"""
","solution([5, 8, 7, 1])","solution([3, 3, 3, 3, 3])","solution([30, 13, 24, 321])","solution([11, 20, 31, 40, 59])","solution([0, 1, 2, 3, 4, 5])","solution([0, 23, 22, 45, 78, 97])",solution([10]),"solution([-7, -8, -9, -1])",solution([]),"solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])","
def solution(lst):
    return sum(elem for idx, elem in enumerate(lst) if idx % 2 == 0 and elem % 2 != 0)
","
def solution(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
","
from typing import List

def solution(lst: List[int]) -> int:
    """"""
    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.
    
    Examples:
    solution([5, 8, 7, 1]) ==> 12
    solution([3, 3, 3, 3, 3]) ==> 9
    solution([30, 13, 24, 321]) ==> 0
    """"""
    
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
","
from typing import List


def solution(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
","
def solution(lst):
    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)
","
from typing import List

def solution(lst: List[int]) -> int:
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)
",31.428571428571427,"['12', '1', '1', '1', '12', '1']","['9', '6', '6', '6', '9', '6']","['0', '334', '334', '334', '0', '334']","['101', '0', '0', '0', '101', '0']","['0', '9', '9', '9', '0', '9']","['0', '165', '165', '165', '0', '165']","['0', '0', '0', '0', '0', '0']","['-16', '-1', '-1', '-1', '-16', '-1']","['0', '0', '0', '0', '0', '0']","['25', '0', '0', '0', '25', '0']",0.2,0.2,0.2,0.2,0.2,0.2,1.0,0.2,1.0,0.2,36.00000000000001
HumanEval/122,"
def add_elements(arr, k):
    """"""
    Given a non-empty array of integers arr and an integer k, return
    the sum of the elements with at most two digits from the first k elements of arr.

    Example:

        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4
        Output: 24 # sum of 21 + 3

    Constraints:
        1. 1 <= len(arr) <= 100
        2. 1 <= k <= len(arr)
    """"""
","add_elements([10, 20, 30, 40], 4)","add_elements([1, 2, 3, 99, 100, 101], 6)","add_elements([1111, 2222, 3333, 9, 8], 5)","add_elements([45, -45, 30, -55, 0], 3)","add_elements([-10, -20, -100, 10, 50], 4)","add_elements([50], 1)","add_elements([12, 53, 2, 17, 2, 5, 10, -8, -99, 0], 10)","add_elements([98, 97, 1500, -200, 348, -7, 85, -6], 8)","add_elements([23, 5, 18, -9, -3, 1, 3, 200, -200], 9)","add_elements([11, 22, 33, 44, 55, 66, 77, 88, 99, 100], 5)","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= num <= 99)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= num < 100)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= num < 100)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= num < 100)
  ","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= num <= 99)
","
from typing import List

def add_elements(arr: List[int], k: int) -> int:
    return sum(num for num in arr[:k] if 10 <= num < 100)
",20.0,"['100', '100', '100', '100', '100', '100']","['99', '99', '99', '99', '99', '99']","['0', '0', '0', '0', '0', '0']","['75', '75', '75', '75', '75', '75']","['10', '10', '10', '10', '10', '10']","['50', '50', '50', '50', '50', '50']","['92', '92', '92', '92', '92', '92']","['280', '280', '280', '280', '280', '280']","['41', '41', '41', '41', '41', '41']","['165', '165', '165', '165', '165', '165']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/123,"
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
",get_odd_collatz(1),get_odd_collatz(2),get_odd_collatz(3),get_odd_collatz(10),get_odd_collatz(20),get_odd_collatz(6),get_odd_collatz(7),get_odd_collatz(15),get_odd_collatz(27),get_odd_collatz(100),"
def get_odd_collatz(n):
    collatz_seq = [n]
    while n > 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        collatz_seq.append(n)
    
    return sorted([num for num in collatz_seq if num % 2 != 0])
","
def get_odd_collatz(n):
    def collatz_seq(num):
        seq = [num]
        while num != 1:
            num = num * 3 + 1 if num % 2 else num // 2
            seq.append(num)
        return seq

    return sorted([num for num in collatz_seq(n) if num % 2 == 1])

# Required imports
import sys
","
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""
    def collatz_seq(num):
        seq = [num]
        while num != 1:
            if num % 2 == 0:  # Even number
                num = num // 2
            else:
                num = 3 * num + 1
            seq.append(num)
        return seq

    return sorted(set(filter(lambda x: x % 2 != 0, collatz_seq(n))))
","
def get_odd_collatz(n):
    odd_nums = set()
    
    def collatz(num):
        if num in odd_nums:
            return
        odd_nums.add(num)
        if num == 1:
            return
        if num % 2 == 0:
            collatz(num // 2)
        else:
            collatz(3 * num + 1)
        
    collatz(n)
    return sorted(list(odd_nums))
","
def get_odd_collatz(n):
    """"""
    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.

    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined
    as follows: start with any positive integer n. Then each term is obtained from the 
    previous term as follows: if the previous term is even, the next term is one half of 
    the previous term. If the previous term is odd, the next term is 3 times the previous
    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.

    Note: 
        1. Collatz(1) is [1].
        2. returned list sorted in increasing order.

    For example:
    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.
    """"""

    result = [n]
    while n != 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        if n % 2 != 0:
            result.append(n)
    
    return sorted(result)
","
def get_odd_collatz(n):
    odd_numbers = []
    
    def collatz(num):
        sequence = [num]
        while num != 1:
            if num % 2 == 0:
                num = num // 2
            else:
                num = 3 * num + 1
            sequence.append(num)
        return sequence
    
    sequence = collatz(n)
    
    for num in sequence:
        if num % 2 != 0:
            odd_numbers.append(num)
    
    return sorted(odd_numbers)
",75.0,"['[1]', '[1]', '[1]', '[1]', '[1]', '[1]']","['[1]', '[1]', '[1]', '[1, 2]', '[1, 2]', '[1]']","['[1, 3, 5]', '[1, 3, 5]', '[1, 3, 5]', '[1, 2, 3, 4, 5, 8, 10, 16]', '[1, 3, 5]', '[1, 3, 5]']","['[1, 5]', '[1, 5]', '[1, 5]', '[1, 2, 4, 5, 8, 10, 16]', '[1, 5, 10]', '[1, 5]']","['[1, 5]', '[1, 5]', '[1, 5]', '[1, 2, 4, 5, 8, 10, 16, 20]', '[1, 5, 20]', '[1, 5]']","['[1, 3, 5]', '[1, 3, 5]', '[1, 3, 5]', '[1, 2, 3, 4, 5, 6, 8, 10, 16]', '[1, 3, 5, 6]', '[1, 3, 5]']","['[1, 5, 7, 11, 13, 17]', '[1, 5, 7, 11, 13, 17]', '[1, 5, 7, 11, 13, 17]', '[1, 2, 4, 5, 7, 8, 10, 11, 13, 16, 17, 20, 22, 26, 34, 40, 52]', '[1, 5, 7, 11, 13, 17]', '[1, 5, 7, 11, 13, 17]']","['[1, 5, 15, 23, 35, 53]', '[1, 5, 15, 23, 35, 53]', '[1, 5, 15, 23, 35, 53]', '[1, 2, 4, 5, 8, 10, 15, 16, 20, 23, 35, 40, 46, 53, 70, 80, 106, 160]', '[1, 5, 15, 23, 35, 53]', '[1, 5, 15, 23, 35, 53]']","['[1, 5, 23, 27, 31, 35, 41, 47, 53, 61, 71, 91, 103, 107, 121, 137, 155, 161, 167, 175, 233, 251, 263, 283, 319, 325, 377, 395, 425, 433, 445, 479, 577, 593, 719, 911, 1079, 1367, 1619, 2051, 2429, 3077]', '[1, 5, 23, 27, 31, 35, 41, 47, 53, 61, 71, 91, 103, 107, 121, 137, 155, 161, 167, 175, 233, 251, 263, 283, 319, 325, 377, 395, 425, 433, 445, 479, 577, 593, 719, 911, 1079, 1367, 1619, 2051, 2429, 3077]', '[1, 5, 23, 27, 31, 35, 41, 47, 53, 61, 71, 91, 103, 107, 121, 137, 155, 161, 167, 175, 233, 251, 263, 283, 319, 325, 377, 395, 425, 433, 445, 479, 577, 593, 719, 911, 1079, 1367, 1619, 2051, 2429, 3077]', '[1, 2, 4, 5, 8, 10, 16, 20, 23, 27, 31, 35, 40, 41, 46, 47, 53, 61, 62, 70, 71, 80, 82, 91, 92, 94, 103, 106, 107, 121, 122, 124, 137, 142, 155, 160, 161, 167, 175, 182, 184, 206, 214, 233, 242, 244, 251, 263, 274, 283, 310, 319, 322, 325, 334, 350, 364, 377, 395, 412, 425, 433, 445, 466, 479, 484, 488, 502, 526, 566, 577, 593, 638, 650, 668, 700, 719, 754, 790, 850, 866, 890, 911, 958, 976, 1079, 1132, 1154, 1186, 1276, 1300, 1336, 1367, 1438, 1619, 1732, 1780, 1822, 2051, 2158, 2308, 2429, 2734, 3077, 3238, 3644, 4102, 4616, 4858, 6154, 7288, 9232]', '[1, 5, 23, 27, 31, 35, 41, 47, 53, 61, 71, 91, 103, 107, 121, 137, 155, 161, 167, 175, 233, 251, 263, 283, 319, 325, 377, 395, 425, 433, 445, 479, 577, 593, 719, 911, 1079, 1367, 1619, 2051, 2429, 3077]', '[1, 5, 23, 27, 31, 35, 41, 47, 53, 61, 71, 91, 103, 107, 121, 137, 155, 161, 167, 175, 233, 251, 263, 283, 319, 325, 377, 395, 425, 433, 445, 479, 577, 593, 719, 911, 1079, 1367, 1619, 2051, 2429, 3077]']","['[1, 5, 11, 13, 17, 19, 25, 29]', '[1, 5, 11, 13, 17, 19, 25, 29]', '[1, 5, 11, 13, 17, 19, 25, 29]', '[1, 2, 4, 5, 8, 10, 11, 13, 16, 17, 19, 20, 22, 25, 26, 29, 34, 38, 40, 44, 50, 52, 58, 76, 88, 100]', '[1, 5, 11, 13, 17, 19, 25, 29, 100]', '[1, 5, 11, 13, 17, 19, 25, 29]']",1.0,0.6,0.8,0.6,0.6,0.6,0.8,0.8,0.8,0.6,72.0
HumanEval/124,"
def valid_date(date):
    """"""You have to write a function which validates a given date string and
    returns True if the date is valid otherwise False.
    The date is valid if all of the following rules are satisfied:
    1. The date string is not empty.
    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.
    3. The months should not be less than 1 or higher than 12.
    4. The date should be in the format: mm-dd-yyyy

    for example: 
    valid_date('03-11-2000') => True

    valid_date('15-01-2012') => False

    valid_date('04-0-2040') => False

    valid_date('06-04-2020') => True

    valid_date('06/04/2020') => False
    """"""
",valid_date('03-11-2000'),valid_date('15-01-2012'),valid_date('04-0-2040'),valid_date('06-04-2020'),valid_date('06/04/2020'),"valid_date('02-29-2020')  # Leap year, valid","valid_date('02-29-2021')  # Non-leap year, invalid",valid_date('13-20-2020')  # Invalid month,"valid_date('')            # Empty string, invalid","valid_date('11-31-2002')  # Valid edge (November has 30 days, 31 is invalid)","
import re

def valid_date(date):
    pattern = r""^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(\d{4})$""
    if not re.match(pattern, date):
        return False

    month, day, year = map(int, date.split('-'))
    
    if month == 2:
        if year % 4 == 0:
            return 1 <= day <= 29
        else:
            return 1 <= day <= 28
    elif month in [4, 6, 9, 11]:
        return 1 <= day <= 30
    else:
        return 1 <= day <= 31

    return True
","
from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        month, day, year = map(int, date.split('-'))
        if 1 <= month <= 12:
            if month in [1, 3, 5, 7, 8, 10, 12]:
                valid_day_range = 31
            elif month in [4, 6, 9, 11]:
                valid_day_range = 30
            else:
                if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):
                    valid_day_range = 29
                else:
                    valid_day_range = 28
            if 1 <= day <= valid_day_range:
                return True
    except ValueError:
        pass
    return False
","
from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, '%m-%d-%Y')
        month, day, year = map(int, date.split('-'))
        
        if month < 1 or month > 12:
            return False
        
        if month in [1, 3, 5, 7, 8, 10, 12]:
            if day < 1 or day > 31:
                return False
        elif month in [4, 6, 9, 11]:
            if day < 1 or day > 30:
                return False
        elif month == 2:
            if day < 1 or day > 29:
                return False

        return True

    except ValueError:
        return False
  ","
import re

def valid_date(date):
    pattern = re.compile(r'^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-\d{4}$')
    if not pattern.match(date):
        return False
    
    month, day, year = map(int, date.split('-'))
    
    if month in [4, 6, 9, 11] and day > 30:
        return False
    elif month == 2:
        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
            if day > 29:
                return False
        else:
            if day > 28:
                return False
    else:
        if day > 31:
            return False

    return True
  ","
import re

def valid_date(date):
    valid = False
    if re.match(r'^\d{2}-\d{2}-\d{4}$', date):
        month, day, year = map(int, date.split('-'))
        if 1 <= month <= 12:
            if month in [1, 3, 5, 7, 8, 10, 12] and 1 <= day <= 31:
                valid = True
            elif month in [4, 6, 9, 11] and 1 <= day <= 30:
                valid = True
            elif month == 2:
                if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
                    valid = 1 <= day <= 29
                else:
                    valid = 1 <= day <= 28
    return valid
","
from datetime import datetime

def valid_date(date):
    try:
        datetime.strptime(date, ""%m-%d-%Y"")
        return True
    except ValueError:
        return False
",100.0,"['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']","['', '', '', '', '', '']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/125,"
def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
","split_words(""Hello world!"")","split_words(""Hello,world!"")","split_words(""abcdef"")","split_words(""Hello world, this is Python!"")","split_words(""Hello,world,this,is,python!"")","split_words(""zyxwvu"")","split_words(""Hello world     this is a    test"")","split_words(""    "")","split_words(""HelloWorld,NoSpaces,OrWhitespaces"")","split_words(""thisstringhasnoSpacesOrCommas"")","
def split_words(txt):
    import string
    
    if any([c.isspace() for c in txt]):
        return txt.split()
    elif any([c == ',' for c in txt]):
        return txt.split(',')
    else:
        return len([c for c in txt if c.islower() and ord(c) % 2 == 1])

","
def split_words(txt):
    words = txt.split()
    if len(words) > 1:
        return words
    words = txt.split(',')
    if len(words) > 1:
        return words
    count = sum(1 for char in txt if 'a' <= char <= 'z' and ord(char) % 2 == 1)
    return count
","
from string import ascii_lowercase

def split_words(txt):
    words = txt.split()
    if len(words) > 1:
        return words
    words = txt.split(',')
    if len(words) > 1:
        return words
    count = sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)
    return count

","
from string import ascii_lowercase

def split_words(txt):
    '''
    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you
    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the
    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25
    Examples
    split_words(""Hello world!"") ➞ [""Hello"", ""world!""]
    split_words(""Hello,world!"") ➞ [""Hello"", ""world!""]
    split_words(""abcdef"") == 3 
    '''
    words = txt.split()
    if len(words) == 1:
        if ',' in txt:
            words = txt.split(',')
        else:
            odd_lowercase_count = sum(1 for char in txt if char.islower() and ord(char) % 2 == 1)
            return odd_lowercase_count
    return words
","
def split_words(txt):
    words = txt.split()
    if len(words) > 1:
        return words
    else:
        words_comma = txt.split(',')
        if len(words_comma) > 1:
            return words_comma
        else:
            odd_letters = [char for char in txt if char.islower() and ord(char) % 2 == 1]
            return len(odd_letters)

","
def split_words(txt):
    words = txt.split()
    if len(words) > 1:
        return words
    else:
        words = txt.split(',')
        if len(words) > 1:
            return words
        else:
            return len([c for c in txt if c.islower() and ord(c) % 2 != 0])

# Example usage
print(split_words(""Hello world!""))  # ➞ [""Hello"", ""world!""]
print(split_words(""Hello,world!""))  # ➞ [""Hello"", ""world!""]
print(split_words(""abcdef""))  # == 3
  ",72.5,"[""['Hello', 'world!']"", ""['Hello', 'world!']"", ""['Hello', 'world!']"", ""['Hello', 'world!']"", ""['Hello', 'world!']"", ""['Hello', 'world!']\r\n['Hello', 'world!']\r\n3\r\n['Hello', 'world!']""]","[""['Hello', 'world!']"", ""['Hello', 'world!']"", ""['Hello', 'world!']"", ""['Hello', 'world!']"", ""['Hello', 'world!']"", ""['Hello', 'world!']\r\n['Hello', 'world!']\r\n3\r\n['Hello', 'world!']""]","['3', '3', '3', '3', '3', ""['Hello', 'world!']\r\n['Hello', 'world!']\r\n3\r\n3""]","[""['Hello', 'world,', 'this', 'is', 'Python!']"", ""['Hello', 'world,', 'this', 'is', 'Python!']"", ""['Hello', 'world,', 'this', 'is', 'Python!']"", ""['Hello', 'world,', 'this', 'is', 'Python!']"", ""['Hello', 'world,', 'this', 'is', 'Python!']"", ""['Hello', 'world!']\r\n['Hello', 'world!']\r\n3\r\n['Hello', 'world,', 'this', 'is', 'Python!']""]","[""['Hello', 'world', 'this', 'is', 'python!']"", ""['Hello', 'world', 'this', 'is', 'python!']"", ""['Hello', 'world', 'this', 'is', 'python!']"", ""['Hello', 'world', 'this', 'is', 'python!']"", ""['Hello', 'world', 'this', 'is', 'python!']"", ""['Hello', 'world!']\r\n['Hello', 'world!']\r\n3\r\n['Hello', 'world', 'this', 'is', 'python!']""]","['3', '3', '3', '3', '3', ""['Hello', 'world!']\r\n['Hello', 'world!']\r\n3\r\n3""]","[""['Hello', 'world', 'this', 'is', 'a', 'test']"", ""['Hello', 'world', 'this', 'is', 'a', 'test']"", ""['Hello', 'world', 'this', 'is', 'a', 'test']"", ""['Hello', 'world', 'this', 'is', 'a', 'test']"", ""['Hello', 'world', 'this', 'is', 'a', 'test']"", ""['Hello', 'world!']\r\n['Hello', 'world!']\r\n3\r\n['Hello', 'world', 'this', 'is', 'a', 'test']""]","['[]', '0', '0', '[]', '0', ""['Hello', 'world!']\r\n['Hello', 'world!']\r\n3\r\n0""]","[""['HelloWorld', 'NoSpaces', 'OrWhitespaces']"", ""['HelloWorld', 'NoSpaces', 'OrWhitespaces']"", ""['HelloWorld', 'NoSpaces', 'OrWhitespaces']"", ""['HelloWorld', 'NoSpaces', 'OrWhitespaces']"", ""['HelloWorld', 'NoSpaces', 'OrWhitespaces']"", ""['Hello', 'world!']\r\n['Hello', 'world!']\r\n3\r\n['HelloWorld', 'NoSpaces', 'OrWhitespaces']""]","['17', '17', '17', '17', '17', ""['Hello', 'world!']\r\n['Hello', 'world!']\r\n3\r\n17""]",0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.2,0.8,0.8,74.0
HumanEval/126,"
def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
",is_sorted([5]),"is_sorted([1, 2, 3, 4, 5])","is_sorted([3, 2, 1])","is_sorted([1, 1, 1])","is_sorted([1, 2, 3, 3, 4, 4])","is_sorted([1, 2, 2, 2, 3, 4])","is_sorted([2, 5, 5, 9])",is_sorted([]),"is_sorted([1, 1, 2, 2, 3])","is_sorted([10, 20, 30, 40, 50])","
from collections import Counter

def is_sorted(lst):
    count_dict = Counter(lst)
    for num in lst:
        if count_dict[num] > 1:
            return False
    return lst == sorted(lst)
","
from collections import Counter

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.
    
    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    if any(val > 1 for val in Counter(lst).values()):
        return False
    return lst == sorted(set(lst))
  ","
from collections import Counter

def is_sorted(lst):
    counter = Counter(lst)
    if any(val > 1 for val in counter.values()):
        return False
    return all(lst[i] <= lst[i + 1] for i in range(len(lst) - 1)
","
from collections import Counter

def is_sorted(lst):
    counts = Counter(lst)
    if any(counts[num] > 1 for num in counts):
        return False
    return lst == sorted(lst)
","
from collections import Counter

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.
    '''
    if any(v > 1 for v in Counter(lst).values()):
        return False
    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)
","
from collections import Counter

def is_sorted(lst):
    count = Counter(lst)
    if any(val > 1 for val in count.values()):
        return False
    return lst == sorted(lst)
",55.38461538461538,"['True', 'True', '', 'True', '', 'True']","['True', 'True', '', 'True', '', 'True']","['False', 'False', '', 'False', '', 'False']","['False', 'False', '', 'False', '', 'False']","['False', 'False', '', 'False', '', 'False']","['False', 'False', '', 'False', '', 'False']","['False', 'False', '', 'False', '', 'False']","['True', 'True', '', 'True', '', 'True']","['False', 'False', '', 'False', '', 'False']","['True', 'True', '', 'True', '', 'True']",0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,59.999999999999986
HumanEval/127,"
def intersection(interval1, interval2):
    """"""You are given two intervals,
    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).
    The given intervals are closed which means that the interval (start, end)
    includes both start and end.
    For each given interval, it is assumed that its start is less or equal its end.
    Your task is to determine whether the length of intersection of these two 
    intervals is a prime number.
    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)
    which its length is 1, which not a prime number.
    If the length of the intersection is a prime number, return ""YES"",
    otherwise, return ""NO"".
    If the two intervals don't intersect, return ""NO"".


    [input/output] samples:
    intersection((1, 2), (2, 3)) ==> ""NO""
    intersection((-1, 1), (0, 4)) ==> ""NO""
    intersection((-3, -1), (-5, 5)) ==> ""YES""
    """"""
","intersection((1, 2), (2, 3))","intersection((-1, 1), (0, 4))","intersection((-3, -1), (-5, 5))","intersection((10, 20), (15, 25))","intersection((5, 10), (11, 15))","intersection((0, 10), (5, 5))","intersection((-5, 0), (-10, -1))","intersection((-1, 10), (-20, 0))","intersection((-10, 50), (0, 100))","intersection((1, 2), (3, 4))","
from math import sqrt

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start_1, end_1 = interval1
    start_2, end_2 = interval2
    
    start = max(start_1, start_2)
    end = min(end_1, end_2)
    
    if start > end:
        return ""NO""
    
    intersection_length = end - start + 1
    
    if is_prime(intersection_length):
        return ""YES""
    else:
        return ""NO""
  ","
from sympy import isprime

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    
    if end1 < start2 or end2 < start1:
        return ""NO""
    
    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)
    intersection_length = intersection_end - intersection_start
    
    if intersection_length <= 0:
        return ""NO""
    
    if isprime(intersection_length):
        return ""YES""
    else:
        return ""NO""
","
from math import sqrt

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    
    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)
    
    if intersection_start > intersection_end:
        return ""NO""
    
    intersection_length = intersection_end - intersection_start + 1
    if is_prime(intersection_length):
        return ""YES""
    return ""NO""
","
def intersection(interval1, interval2):
    def is_prime(n):
        if n <= 1:
            return False
        if n == 2:
            return True
        if n % 2 == 0:
            return False
        for i in range(3, int(n**0.5) + 1, 2):
            if n % i == 0:
                return False
        return True

    start1, end1 = interval1
    start2, end2 = interval2
    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)

    if intersection_start > intersection_end:
        return ""NO""

    length = intersection_end - intersection_start + 1

    if is_prime(length):
        return ""YES""
    else:
        return ""NO""
  ","
from math import sqrt

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2

    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)
    
    if intersection_start <= intersection_end:
        length = (intersection_end - intersection_start) + 1
        if is_prime(length):
            return ""YES""
        else:
            return ""NO""
    else:
        return ""NO""
","
import math

def intersection(interval1, interval2):
    def is_prime(n):
        if n < 2:
            return False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                return False
        return True
    
    start1, end1 = interval1
    start2, end2 = interval2
    
    if start1 > end2 or start2 > end1:
        return ""NO""
    
    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)
    
    intersection_length = intersection_end - intersection_start + 1
    
    if is_prime(intersection_length):
        return ""YES""
    else:
        return ""NO""
",80.0,"['NO', '', 'NO', 'NO', 'NO', 'NO']","['YES', '', 'YES', 'YES', 'YES', 'YES']","['YES', '', 'YES', 'YES', 'YES', 'YES']","['NO', '', 'NO', 'NO', 'NO', 'NO']","['NO', '', 'NO', 'NO', 'NO', 'NO']","['NO', '', 'NO', 'NO', 'NO', 'NO']","['YES', '', 'YES', 'YES', 'YES', 'YES']","['YES', '', 'YES', 'YES', 'YES', 'YES']","['NO', '', 'NO', 'NO', 'NO', 'NO']","['NO', '', 'NO', 'NO', 'NO', 'NO']",0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,80.0
HumanEval/128,"
def prod_signs(arr):
    """"""
    You are given an array arr of integers and you need to return
    sum of magnitudes of integers multiplied by product of all signs
    of each number in the array, represented by 1, -1 or 0.
    Note: return None for empty arr.

    Example:
    >>> prod_signs([1, 2, 2, -4]) == -9
    >>> prod_signs([0, 1]) == 0
    >>> prod_signs([]) == None
    """"""
","prod_signs([1, 2, 2, -4])","prod_signs([0, 1])",prod_signs([]),prod_signs([0]),"prod_signs([-1, -1, -1])","prod_signs([1, 0, -1])","prod_signs([100, -200, 300])","prod_signs([-1, -2, -3, -4])",prod_signs([1]),"prod_signs([0, 0, 0, 1, -1])","
import numpy as np

def prod_signs(arr):
    if not arr:
        return None
    
    product_signs = np.prod(np.sign(arr))
    sum_magnitudes = sum(abs(num) for num in arr)
    
    return product_signs * sum_magnitudes
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None

    product_sign = 1
    sum_magnitudes = 0

    for num in arr:
        if num < 0:
            product_sign *= -1
            sum_magnitudes -= num
        elif num > 0:
            sum_magnitudes += num
            
    return product_sign * sum_magnitudes
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None

    sign_product = 1
    magnitude_sum = sum(abs(num) for num in arr)

    for num in arr:
        if num > 0:
            sign_product *= 1
        elif num < 0:
            sign_product *= -1
        else:
            sign_product *= 0

    return sign_product * magnitude_sum
","
from functools import reduce

def prod_signs(arr):
    if not arr:
        return None
    
    product = reduce(lambda x, y: x * y, [num for num in arr if num != 0])
    total = sum(abs(num) for num in arr)
    
    return product * (1 if product >= 0 else -1) * total
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None
    
    sign_product = 1
    magnitude_sum = 0
    
    for num in arr:
        if num < 0:
            sign_product *= -1
        elif num == 0:
            return 0
        magnitude_sum += abs(num)
    
    return sign_product * magnitude_sum
","
from typing import List

def prod_signs(arr: List[int]) -> int:
    if not arr:
        return None
    sign_product = 1
    magnitude_sum = 0
    for num in arr:
        sign_product *= 1 if num >= 0 else -1
        magnitude_sum += abs(num)
    return sign_product * magnitude_sum
",75.0,"['-9', '-9', '-9', '144', '-9', '-9']","['0', '1', '0', '1', '0', '1']","['None', 'None', 'None', 'None', 'None', 'None']","['0', '0', '0', '', '0', '0']","['-3', '-3', '-3', '3', '-3', '-3']","['0', '-2', '0', '2', '0', '-2']","['-600', '-600', '-600', '3600000000', '-600', '-600']","['10', '10', '10', '240', '10', '10']","['1', '1', '1', '1', '1', '1']","['0', '-2', '0', '2', '0', '-2']",0.8,0.4,1.0,0.8,0.8,0.4,0.8,0.8,1.0,0.4,72.0
HumanEval/129,"
def minPath(grid, k):
    """"""
    Given a grid with N rows and N columns (N >= 2) and a positive integer k, 
    each cell of the grid contains a value. Every integer in the range [1, N * N]
    inclusive appears exactly once on the cells of the grid.

    You have to find the minimum path of length k in the grid. You can start
    from any cell, and in each step you can move to any of the neighbor cells,
    in other words, you can go to cells which share an edge with you current
    cell.
    Please note that a path of length k means visiting exactly k cells (not
    necessarily distinct).
    You CANNOT go off the grid.
    A path A (of length k) is considered less than a path B (of length k) if
    after making the ordered lists of the values on the cells that A and B go
    through (let's call them lst_A and lst_B), lst_A is lexicographically less
    than lst_B, in other words, there exist an integer index i (1 <= i <= k)
    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have
    lst_A[j] = lst_B[j].
    It is guaranteed that the answer is unique.
    Return an ordered list of the values on the cells that the minimum path go through.

    Examples:

        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
        Output: [1, 2, 1]

        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1
        Output: [1]
    """"""
","minPath([[1, 2], [3, 4]], 2)","minPath([[1, 2], [3, 4]], 3)","minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3)","minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4)","minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)","minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 5)","minPath([[14, 9, 16], [4, 5, 11], [7, 8, 6]], 7)","minPath([[4, 14], [15, 1]], 4)","minPath([[3, 20, 15], [19, 10, 23], [11, 2, 17]], 6)","minPath([[22, 1], [3, 17]], 5)","
from collections import deque

def minPath(grid, k):
    N = len(grid)
    
    def indexToCoord(index):
        return (index // N, index % N)
    
    def coordToIndex(coord):
        return coord[0] * N + coord[1]
    
    def valid(coord):
        r, c = coord
        return 0 <= r < N and 0 <= c < N
    
    def getNeighbors(coord):
        r, c = coord
        neighbors = [(r+1, c), (r-1, c), (r, c+1), (r, c-1)]
        return [(nr, nc) for nr, nc in neighbors if valid((nr, nc))]
    
    def bfs(start):
        start_index = coordToIndex(start)
        q = deque([(start_index, [start])])
        visited = set([start_index])
        
        while q:
            curr_index, path = q.popleft()
            if len(path) == k:
                return [grid[coord[0]][coord[1]] for coord in path]
            
            for neighbor in getNeighbors(indexToCoord(curr_index)):
                neighbor_index = coordToIndex(neighbor)
                if neighbor_index not in visited:
                    q.append((neighbor_index, path + [neighbor]))
                    visited.add(neighbor_index)
    
    for i in range(N * N):
        start_coord = indexToCoord(i)
        result = bfs(start_coord)
        if result:
            return result
","
from itertools import permutations

def minPath(grid, k):
    N = len(grid)
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    
    def is_valid(row, col):
        return 0 <= row < N and 0 <= col < N
    
    def neighbors(row, col):
        for dr, dc in directions:
            new_row, new_col = row + dr, col + dc
            if is_valid(new_row, new_col):
                yield new_row, new_col
                
    def dfs(row, col, visited, path):
        if len(path) == k:
            return path
            
        for new_row, new_col in neighbors(row, col):
            if (new_row, new_col) not in visited:
                new_path = dfs(new_row, new_col, visited | {(new_row, new_col)}, path + [grid[new_row][new_col]])
                if new_path:
                    return new_path
        return []
    
    minimum_path = []
    for i in range(N):
        for j in range(N):
            path = dfs(i, j, {(i, j)}, [grid[i][j]])
            if path:
                if not minimum_path or path < minimum_path:
                    minimum_path = path
                    
    return minimum_path
","
from collections import deque

def minPath(grid, k):
    n = len(grid)
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    
    def isValid(x, y):
        return 0 <= x < n and 0 <= y < n
    
    def getNeighbors(x, y):
        neighbors = []
        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if isValid(nx, ny):
                neighbors.append((nx, ny))
        return neighbors
    
    def constructPath(prev, row, col):
        path = [grid[row][col]]
        while prev[row][col] != (-1, -1):
            row, col = prev[row][col]
            path.append(grid[row][col])
        path.reverse()
        return path
    
    pq = []
    visited = set()
    start_row, start_col = divmod(min(range(n), key=lambda i: grid[i].index(1)), n)
    pq.append((grid[start_row][start_col], start_row, start_col, 1, {(start_row, start_col)}))
    visited.add((start_row, start_col))
    
    while pq:
        val, row, col, length, path_set = heapq.heappop(pq)
        if length == k:
            return constructPath(prev, row, col)
        
        for nx, ny in getNeighbors(row, col):
            if (nx, ny) not in path_set:
                new_set = path_set.copy()
                new_set.add((nx, ny))
                heapq.heappush(pq, (grid[nx][ny], nx, ny, length + 1, new_set))
    
    return []
","
from queue import PriorityQueue

def minPath(grid, k):
    class Path:
        def __init__(self, cost, path):
            self.cost = cost
            self.path = path

        def __lt__(self, other):
            return self.cost < other.cost

    n = len(grid)
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    pq = PriorityQueue()
    pq.put(Path(grid[0][0], [(0, 0)]))

    while k > 0:
        p = pq.get()
        x, y = p.path[-1]

        for dx, dy in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in p.path:
                new_cost = grid[nx][ny]
                pq.put(Path(p.cost + new_cost, p.path + [(nx, ny)]))

        k -= 1

    return [grid[x][y] for x, y in p.path]
  ","
from heapq import heappop, heappush

def minPath(grid, k):
    n = len(grid)
    d = [(1, 0), (-1, 0), (0, 1), (0, -1)]

    pq = [(grid[i][j], i, j, (grid[i][j],)) for i in range(n) for j in range(n)]
    heapq.heapify(pq)

    while pq:
        val, x, y, path = heapq.heappop(pq)

        if len(path) == k:
            return list(path)

        for dx, dy in d:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < n:
                new_path = path + (grid[nx][ny],)
                heapq.heappush(pq, (grid[nx][ny], nx, ny, new_path))
  ","
from heapq import heappop, heappush

def minPath(grid, k):
    def get_neighbors(i, j):
        neighbors = []
        for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            ni, nj = i + di, j + dj
            if 0 <= ni < n and 0 <= nj < n:
                yield (ni, nj)

    n = len(grid)
    pq = [(grid[i][j], i, j, k-1, [grid[i][j]]) for i in range(n) for j in range(n)]
    while pq:
        val, i, j, steps, path = heappop(pq)
        if steps == 0:
            return path
        for ni, nj in get_neighbors(i, j):
            heappush(pq, (grid[ni][nj], ni, nj, steps - 1, path + [grid[ni][nj]]))
",9.090909090909092,"['[1, 3]', '[1, 2]', '', '[1, 2]', '', '[1, 2]']","['[1, 3, 4]', '[1, 2, 4]', '', '[1, 3]', '', '[1, 2, 1]']","['[1, 4, 7]', '[1, 2, 3]', '', '[1, 4]', '', '[1, 2, 1]']","['[1, 4, 7, 8]', '[1, 2, 3, 6]', '', '[1, 2, 3]', '', '[1, 2, 1, 2]']","['[5]', '[1]', '', '[5]', '', '[5]']","['[5, 4, 7, 8, 2]', '[1, 6, 2, 8, 7]', '', '[5, 9, 1]', '', '[5, 4, 1, 4, 1]']","['None', '[4, 5, 8, 6, 11, 16, 9]', '', '[14, 4, 5, 8]', '', '[14, 4, 5, 4, 5, 4, 5]']","['None', '[1, 15, 4, 14]', '', '[4, 14, 1]', '', '[1, 14, 1, 14]']","['None', '[2, 17, 23, 10, 19, 11]', '', '[3, 20, 10]', '', '[11, 2, 11, 2, 10, 2]']","['None', '[]', '', '[22, 3, 17]', '', '[22, 1, 17, 1, 17]']",0.0,0.0,0.0,0.0,0.4,0.0,0.0,0.0,0.0,0.0,4.0
HumanEval/130,"
def tri(n):
    """"""Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in 
    the last couple centuries. However, what people don't know is Tribonacci sequence.
    Tribonacci sequence is defined by the recurrence:
    tri(1) = 3
    tri(n) = 1 + n / 2, if n is even.
    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.
    For example:
    tri(2) = 1 + (2 / 2) = 2
    tri(4) = 3
    tri(3) = tri(2) + tri(1) + tri(4)
           = 2 + 3 + 3 = 8 
    You are given a non-negative integer number n, you have to a return a list of the 
    first n + 1 numbers of the Tribonacci sequence.
    Examples:
    tri(3) = [1, 3, 2, 8]
    """"""
",tri(0),tri(1),tri(2),tri(3),tri(4),tri(5),tri(10),tri(15),tri(20),tri(30),"
def tri(n):
    if n == 0:
        return [0]
    if n == 1:
        return [1, 1]
    if n == 2:
        return [1, 1, 1]
    tribonacci = [0, 1, 1]
    for i in range(3, n + 1):
        tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])
    return tribonacci
","
def tri(n):
    tribonacci = [0, 1, 1]
    for i in range(3, n + 1):
        if i % 2 == 0:
            tribonacci.append(tribonacci[-1] + i // 2)
        else:
            tribonacci.append(tribonacci[-1] + tribonacci[-2] + tribonacci[-3])
    return tribonacci[:n + 1]
","
def tri(n):
    if n == 0:
        return [0]
    if n == 1:
        return [1]
    if n == 2:
        return [1, 1]
    
    tribonacci = [0, 1, 1]
    for i in range(3, n + 1):
        current_sum = tribonacci[-1] + tribonacci[-2] + tribonacci[-3]
        tribonacci.append(current_sum)
    
    return tribonacci
","
def tri(n):
    tribonacci = [0, 1, 1]
    for i in range(3, n + 1):
        if i % 2 == 0:
            tribonacci.append(1 + i // 2)
        else:
            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])
    return tribonacci[:n + 1]
","
def tri(n):
    if n == 0:
        return [0]
    elif n == 1:
        return [1]
    elif n == 2:
        return [1, 1]
    else:
        tribonacci = [0,1,1]
        for i in range(3, n + 1):
            tribonacci.append(tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3])
        return tribonacci
","
def tri(n):
    sequence = [0, 1, 1]
    if n == 0:
        return [0]
    elif n == 1:
        return [0, 1]
    elif n == 2:
        return [0, 1, 1]
    else:
        for i in range(3, n+1):
            if i % 2 == 0:
                sequence.append(1 + i // 2)
            else:
                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i-3])
        return sequence
",0.0,"['[0]', '[0]', '[0]', '[0]', '[0]', '[0]']","['[1, 1]', '[0, 1]', '[1]', '[0, 1]', '[1]', '[0, 1]']","['[1, 1, 1]', '[0, 1, 1]', '[1, 1]', '[0, 1, 1]', '[1, 1]', '[0, 1, 1]']","['[0, 1, 1, 2]', '[0, 1, 1, 2]', '[0, 1, 1, 2]', '[0, 1, 1, 2]', '[0, 1, 1, 2]', '[0, 1, 1, 2]']","['[0, 1, 1, 2, 4]', '[0, 1, 1, 2, 4]', '[0, 1, 1, 2, 4]', '[0, 1, 1, 2, 3]', '[0, 1, 1, 2, 4]', '[0, 1, 1, 2, 3]']","['[0, 1, 1, 2, 4, 7]', '[0, 1, 1, 2, 4, 7]', '[0, 1, 1, 2, 4, 7]', '[0, 1, 1, 2, 3, 6]', '[0, 1, 1, 2, 4, 7]', '[0, 1, 1, 2, 3, 6]']","['[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149]', '[0, 1, 1, 2, 4, 7, 10, 21, 25, 56, 61]', '[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149]', '[0, 1, 1, 2, 3, 6, 4, 13, 5, 22, 6]', '[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149]', '[0, 1, 1, 2, 3, 6, 4, 13, 5, 22, 6]']","['[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136]', '[0, 1, 1, 2, 4, 7, 10, 21, 25, 56, 61, 142, 148, 351, 358, 857]', '[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136]', '[0, 1, 1, 2, 3, 6, 4, 13, 5, 22, 6, 33, 7, 46, 8, 61]', '[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136]', '[0, 1, 1, 2, 3, 6, 4, 13, 5, 22, 6, 33, 7, 46, 8, 61]']","['[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136, 5768, 10609, 19513, 35890, 66012]', '[0, 1, 1, 2, 4, 7, 10, 21, 25, 56, 61, 142, 148, 351, 358, 857, 865, 2080, 2089, 5034, 5044]', '[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136, 5768, 10609, 19513, 35890, 66012]', '[0, 1, 1, 2, 3, 6, 4, 13, 5, 22, 6, 33, 7, 46, 8, 61, 9, 78, 10, 97, 11]', '[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136, 5768, 10609, 19513, 35890, 66012]', '[0, 1, 1, 2, 3, 6, 4, 13, 5, 22, 6, 33, 7, 46, 8, 61, 9, 78, 10, 97, 11]']","['[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136, 5768, 10609, 19513, 35890, 66012, 121415, 223317, 410744, 755476, 1389537, 2555757, 4700770, 8646064, 15902591, 29249425]', '[0, 1, 1, 2, 4, 7, 10, 21, 25, 56, 61, 142, 148, 351, 358, 857, 865, 2080, 2089, 5034, 5044, 12167, 12178, 29389, 29401, 70968, 70981, 171350, 171364, 413695, 413710]', '[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136, 5768, 10609, 19513, 35890, 66012, 121415, 223317, 410744, 755476, 1389537, 2555757, 4700770, 8646064, 15902591, 29249425]', '[0, 1, 1, 2, 3, 6, 4, 13, 5, 22, 6, 33, 7, 46, 8, 61, 9, 78, 10, 97, 11, 118, 12, 141, 13, 166, 14, 193, 15, 222, 16]', '[0, 1, 1, 2, 4, 7, 13, 24, 44, 81, 149, 274, 504, 927, 1705, 3136, 5768, 10609, 19513, 35890, 66012, 121415, 223317, 410744, 755476, 1389537, 2555757, 4700770, 8646064, 15902591, 29249425]', '[0, 1, 1, 2, 3, 6, 4, 13, 5, 22, 6, 33, 7, 46, 8, 61, 9, 78, 10, 97, 11, 118, 12, 141, 13, 166, 14, 193, 15, 222, 16]']",1.0,0.0,0.0,1.0,0.6,0.6,0.4,0.4,0.4,0.4,48.00000000000001
HumanEval/131,"
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
",digits(1),digits(4),digits(235),digits(22222),digits(11113),digits(88889),digits(24860),digits(13579),digits(25),digits(304050),"
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    import math
    odd_product = 1
    while n > 0:
        digit = n % 10
        if digit % 2 != 0:
            odd_product *= digit
        n = n // 10
    return odd_product
","
from functools import reduce

def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    return reduce(lambda x, y: x*y, [int(digit) for digit in str(n) if int(digit) % 2 != 0], 1) if any(int(digit) % 2 != 0 for digit in str(n)) else 0
  ","
from functools import reduce

def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    odd_digits_product = reduce(lambda x, y: x*y, [int(d) for d in str(n) if int(d) % 2 != 0], 1)
    return 0 if odd_digits_product == 1 else odd_digits_product
","
def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    odd_product = 1
    has_odd = False
    
    for digit in str(n):
        if int(digit) % 2 != 0:
            odd_product *= int(digit)
            has_odd = True
    
    if has_odd:
        return odd_product
    else:
        return 0
","
from math import prod

def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    return prod(int(d) for d in str(n) if int(d) % 2 != 0) or 0
","
from math import prod

def digits(n):
    """"""Given a positive integer n, return the product of the odd digits.
    Return 0 if all digits are even.
    For example:
    digits(1)  == 1
    digits(4)  == 0
    digits(235) == 15
    """"""
    odd_digits = [int(d) for d in str(n) if int(d) % 2 != 0]
    return prod(odd_digits) if odd_digits else 0
",94.28571428571429,"['1', '1', '0', '1', '1', '1']","['1', '0', '0', '0', '1', '0']","['15', '15', '15', '15', '15', '15']","['1', '0', '0', '0', '1', '0']","['3', '3', '3', '3', '3', '3']","['9', '9', '9', '9', '9', '9']","['1', '0', '0', '0', '1', '0']","['945', '945', '945', '945', '945', '945']","['5', '5', '5', '5', '5', '5']","['15', '15', '15', '15', '15', '15']",0.8,0.2,1.0,0.2,1.0,1.0,0.2,1.0,1.0,1.0,74.0
HumanEval/132,"
def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
",is_nested('[[]]'),is_nested('[]]]]]]][[[[[]'),is_nested('[][]'),is_nested('[]'),is_nested('[[][]]'),is_nested('[[]][['),is_nested(''),is_nested('[[[[[[]]]]]]'),is_nested('[[[]][[]][][]]'),is_nested('[[[[[]]]][]]'),"
import re

def is_nested(string):
    '''
    Create a function that takes a string as input which contains only square brackets.
    The function should return True if and only if there is a valid subsequence of brackets 
    where at least one bracket in the subsequence is nested.

    is_nested('[[]]') ➞ True
    is_nested('[]]]]]]][[[[[]') ➞ False
    is_nested('[][]') ➞ False
    is_nested('[]') ➞ False
    is_nested('[[][]]') ➞ True
    is_nested('[[]][[') ➞ True
    '''
    
    open_brackets = re.findall(r'\[', string)
    close_brackets = re.findall(r'\]', string)
    
    if not open_brackets or not close_brackets:
        return False
    
    if len(open_brackets) % 2 == 0 and len(close_brackets) % 2 == 0:
        if open_brackets[0] == '[' and close_brackets[-1] == ']':
            return True
    return False
","
def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if stack and stack[-1] == '[':
                stack.pop()
            else:
                stack.append(char)
    return '[' in stack

","
def is_nested(string):
    open_brackets = 0
    
    for char in string:
        if char == '[':
            open_brackets += 1
        elif char == ']' and open_brackets > 0:
            open_brackets -= 1
    
    return open_brackets < 0
","
def is_nested(string):
    stack = []
    for bracket in string:
        if bracket == '[':
            stack.append(bracket)
        elif bracket == ']' and stack and stack[-1] == '[':
            stack.pop()
    return len(stack) != 0

","
def is_nested(string):
    stack = []
    
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']':
            if not stack:
                return False
            stack.pop()
    
    return len(stack) < len(string)//2

","
def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack and stack[-1] == '[':
            stack.pop()
    return len(stack) != 0
",60.0,"['True', 'False', 'False', 'False', 'True', 'False']","['True', 'True', 'False', 'True', 'False', 'True']","['True', 'False', 'False', 'False', 'True', 'False']","['False', 'False', 'False', 'False', 'True', 'False']","['False', 'False', 'False', 'False', 'True', 'False']","['True', 'True', 'False', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'False', 'False', 'False', 'True', 'False']","['False', 'False', 'False', 'False', 'True', 'False']","['True', 'False', 'False', 'False', 'True', 'False']",0.2,0.6,0.2,0.8,0.8,0.8,1.0,0.2,0.8,0.2,56.00000000000001
HumanEval/133,"

def sum_squares(lst):
    """"""You are given a list of numbers.
    You need to return the sum of squared numbers in the given list,
    round each element in the list to the upper int(Ceiling) first.
    Examples:
    For lst = [1,2,3] the output should be 14
    For lst = [1,4,9] the output should be 98
    For lst = [1,3,5,7] the output should be 84
    For lst = [1.4,4.2,0] the output should be 29
    For lst = [-2.4,1,1] the output should be 6
    

    """"""
","sum_squares([1, 2, 3])","sum_squares([1, 4, 9])","sum_squares([1, 3, 5, 7])","sum_squares([1.4, 4.2, 0])","sum_squares([-2.4, 1, 1])","sum_squares([0, 0, 0])","sum_squares([-1, -2, -3])","sum_squares([2.5, 3.5, 4.1])",sum_squares([100]),sum_squares([]),"
import math

def sum_squares(lst):
    return sum(math.ceil(num)**2 for num in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(num)**2 for num in lst)
  ","
import math

def sum_squares(lst):
    return sum(math.ceil(num) ** 2 for num in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(num)**2 for num in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(num)**2 for num in lst)
","
import math

def sum_squares(lst):
    return sum(math.ceil(num)**2 for num in lst)
",100.0,"['14', '14', '14', '14', '14', '14']","['98', '98', '98', '98', '98', '98']","['84', '84', '84', '84', '84', '84']","['29', '29', '29', '29', '29', '29']","['6', '6', '6', '6', '6', '6']","['0', '0', '0', '0', '0', '0']","['14', '14', '14', '14', '14', '14']","['50', '50', '50', '50', '50', '50']","['10000', '10000', '10000', '10000', '10000', '10000']","['0', '0', '0', '0', '0', '0']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/134,"
def check_if_last_char_is_a_letter(txt):
    '''
    Create a function that returns True if the last character
    of a given string is an alphabetical character and is not
    a part of a word, and False otherwise.
    Note: ""word"" is a group of characters separated by space.

    Examples:
    check_if_last_char_is_a_letter(""apple pie"") ➞ False
    check_if_last_char_is_a_letter(""apple pi e"") ➞ True
    check_if_last_char_is_a_letter(""apple pi e "") ➞ False
    check_if_last_char_is_a_letter("""") ➞ False 
    '''
","check_if_last_char_is_a_letter(""Hello world"")","check_if_last_char_is_a_letter(""test123!"")","check_if_last_char_is_a_letter(""hello?"")","check_if_last_char_is_a_letter(""123 "")","check_if_last_char_is_a_letter(""okay."")","check_if_last_char_is_a_letter(""sure: "")","check_if_last_char_is_a_letter(""hello world "")","check_if_last_char_is_a_letter(""a "")","check_if_last_char_is_a_letter(""stop "")","check_if_last_char_is_a_letter(""go "")","
import re

def check_if_last_char_is_a_letter(txt):
    return bool(re.search(r""(?<!\w)\w$"", txt))
 ","
import re

def check_if_last_char_is_a_letter(txt):
    return bool(re.search(r""(?<!\w)\w$"", txt))
   ","
def check_if_last_char_is_a_letter(txt):
    import re
    if not txt.strip():
        return False
    last_char = txt[-1]
    if re.match(r'[a-zA-Z]', last_char) and not re.match(r'\b[^\W\d_]+$', txt):
        return True
    return False
","
import re

def check_if_last_char_is_a_letter(txt):
    return False if not txt or not re.match(r'^.*[^a-zA-Z]\s*$', txt) else True
","
import re

def check_if_last_char_is_a_letter(txt):
    return bool(re.search(r'(?<![a-zA-Z])\b[a-zA-Z]$', txt))
","
import string

def check_if_last_char_is_a_letter(txt):
    if txt and txt[-1].isalpha() and txt[-2] == ' ':
        return True
    return False
",80.0,"['False', 'False', 'True', 'False', 'False', 'False']","['False', 'False', 'False', 'True', 'False', 'False']","['False', 'False', 'False', 'True', 'False', 'False']","['False', 'False', 'False', 'True', 'False', 'False']","['False', 'False', 'False', 'True', 'False', 'False']","['False', 'False', 'False', 'True', 'False', 'False']","['False', 'False', 'False', 'True', 'False', 'False']","['False', 'False', 'False', 'True', 'False', 'False']","['False', 'False', 'False', 'True', 'False', 'False']","['False', 'False', 'False', 'True', 'False', 'False']",0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,80.0
HumanEval/135,"
def can_arrange(arr):
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""
","can_arrange([1, 2, 4, 3, 5])","can_arrange([1, 2, 3])","can_arrange([5, 4, 3, 2, 1])","can_arrange([10, 20])",can_arrange([99]),"can_arrange([7, 13, 18, 2])","can_arrange([45, 30, 60, 50, 90])","can_arrange([100, 200, 300, 400, 500])","can_arrange([1, 2, 3, 4, 5, 6, 4])","can_arrange([2, 3, 5, 7, 11, 13, 14, 10, 15, 17])","
from typing import List

def can_arrange(arr: List[int]) -> int:
    return next((i for i in range(len(arr)-1, 0, -1) if arr[i] < arr[i-1]), -1)
  ","
from typing import List

def can_arrange(arr: List[int]) -> int:
    return max(i for i in range(1, len(arr)) if arr[i] < arr[i-1], default=-1)
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    stack = []
    for i in range(len(arr)):
        while stack and arr[i] < arr[stack[-1]]:
            stack.pop()
        if stack:
            return stack[-1]
        stack.append(i)
    return -1
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    return next((i for i in range(1, len(arr)) if arr[i] < arr[i-1]), -1)
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    return max(i for i in range(1, len(arr)) if arr[i-1] > arr[i], default=-1)
","
from typing import List

def can_arrange(arr: List[int]) -> int:
    """"""Create a function which returns the largest index of an element which
    is not greater than or equal to the element immediately preceding it. If
    no such element exists then return -1. The given array will not contain
    duplicate values.

    Examples:
    can_arrange([1,2,4,3,5]) = 3
    can_arrange([1,2,3]) = -1
    """"""
    
    max_index = -1
    for i in range(1, len(arr)):
        if arr[i] < arr[i-1] and i > max_index:
            max_index = i
    
    return max_index
",40.0,"['3', '', '0', '3', '', '3']","['-1', '', '0', '-1', '', '-1']","['4', '', '-1', '1', '', '4']","['-1', '', '0', '-1', '', '-1']","['-1', '', '-1', '-1', '', '-1']","['3', '', '0', '3', '', '3']","['3', '', '1', '1', '', '3']","['-1', '', '0', '-1', '', '-1']","['6', '', '0', '6', '', '6']","['7', '', '0', '7', '', '7']",0.4,0.4,0.2,0.4,0.6,0.4,0.2,0.4,0.4,0.4,38.0
HumanEval/136,"
def largest_smallest_integers(lst):
    '''
    Create a function that returns a tuple (a, b), where 'a' is
    the largest of negative integers, and 'b' is the smallest
    of positive integers in a list.
    If there is no negative or positive integers, return them as None.

    Examples:
    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)
    largest_smallest_integers([]) == (None, None)
    largest_smallest_integers([0]) == (None, None)
    '''
","largest_smallest_integers([2, 4, 1, 3, 5, 7])",largest_smallest_integers([]),largest_smallest_integers([0]),"largest_smallest_integers([-1, -2, -3, 0, 2, 10])","largest_smallest_integers([-5, -7, -9])","largest_smallest_integers([1, 3, 5])","largest_smallest_integers([-10, -20, 30, 40, 50])","largest_smallest_integers([-1, -1, -1, 2, 2, 2])",largest_smallest_integers([10]),"largest_smallest_integers([-20, -1])","
from typing import List, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[int, int]:
    negatives = [num for num in lst if num < 0]
    positives = [num for num in lst if num > 0]

    max_negative = max(negatives) if negatives else None
    min_positive = min(positives) if positives else None

    return (max_negative, min_positive)
","
from typing import List, Optional, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:
    negatives = [num for num in lst if num < 0]
    positives = [num for num in lst if num > 0]

    if negatives:
        largest_negative = max(negatives)
    else:
        largest_negative = None

    if positives:
        smallest_positive = min(positives)
    else:
        smallest_positive = None

    return largest_negative, smallest_positive
","
from typing import List, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[int, int]:
    neg_ints = [num for num in lstif num < 0]
    pos_ints = [num for num in lst if num > 0]
    
    largest_neg = max(neg_ints) if neg_ints else None
    smallest_pos = min(pos_ints) if pos_ints else None
    
    return (largest_neg, smallest_pos)
  ","
from typing import List, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:
    neg_integers = [num for num in lst if num < 0]
    pos_integers = [num for num in lst if num > 0]
    
    largest_negative = max(neg_integers) if len(neg_integers) > 0 else None
    smallest_positive = min(pos_integers) if len(pos_integers) > 0 else None
        
    return largest_negative, smallest_positive
","
from typing import List, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[int, int]:
    negatives = [num for num in lst if num < 0]
    positives = [num for num in lst if num > 0]

    a = max(negatives) if negatives else None
    b = min(positives) if positives else None

    return (a, b)
","
from typing import List, Tuple

def largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:
    neg_ints = [num for num in lst if num < 0]
    pos_ints = [num for num in lst if num > 0]

    largest_neg = max(neg_ints) if neg_ints else None
    smallest_pos = min(pos_ints) if pos_ints else None

    return (largest_neg, smallest_pos)
",40.0,"['(None, 1)', '(None, 1)', '', '', '(None, 1)', '']","['(None, None)', '(None, None)', '', '', '(None, None)', '']","['(None, None)', '(None, None)', '', '', '(None, None)', '']","['(-1, 2)', '(-1, 2)', '', '', '(-1, 2)', '']","['(-5, None)', '(-5, None)', '', '', '(-5, None)', '']","['(None, 1)', '(None, 1)', '', '', '(None, 1)', '']","['(-10, 30)', '(-10, 30)', '', '', '(-10, 30)', '']","['(-1, 2)', '(-1, 2)', '', '', '(-1, 2)', '']","['(None, 10)', '(None, 10)', '', '', '(None, 10)', '']","['(-1, None)', '(-1, None)', '', '', '(-1, None)', '']",0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,0.4,40.0
HumanEval/137,"
def compare_one(a, b):
    """"""
    Create a function that takes integers, floats, or strings representing
    real numbers, and returns the larger variable in its given variable type.
    Return None if the values are equal.
    Note: If a real number is represented as a string, the floating point might be . or ,

    compare_one(1, 2.5) ➞ 2.5
    compare_one(1, ""2,3"") ➞ ""2,3""
    compare_one(""5,1"", ""6"") ➞ ""6""
    compare_one(""1"", 1) ➞ None
    """"""
","compare_one(1, 2.5)","compare_one(1, ""2,3"")","compare_one(""5,1"", ""6"")","compare_one(""1"", 1)","compare_one(-5, 3)","compare_one(""0.5"", 0.2)","compare_one(100, ""100"")","compare_one(""3,14159"", ""3.14159"")","compare_one(""123"", 123)","compare_one(0.0001, ""0,0001"")","
def compare_one(a, b):
    from decimal import Decimal
    
    if type(a) == type(b):
        if type(a) in [int, float]:
            return max(a, b) if a != b else None
        elif type(a) == str:
            a = a.replace(',', '.')
            b = b.replace(',', '.')
            if Decimal(a) > Decimal(b):
                return a
            elif Decimal(a) < Decimal(b):
                return b
            else:
                return None
    else:
        return None
","
from typing import Union

def compare_one(a: Union[int, float, str], b: Union[int, float, str]):
    def convert_to_float(value):
        if isinstance(value, str):
            value = value.replace(',', '.')
        return float(value)

    a = convert_to_float(a)
    b = convert_to_float(b)

    if a > b:
        return a
    elif b > a:
        return b
    else:
        return None
","
from typing import Union

def compare_one(a: Union[int, float, str], b: Union[int, float, str]):
    if isinstance(a, str) and isinstance(b, str):
        a = a.replace("","", ""."")
        b = b.replace("","", ""."")
    if a == b:
        return None
    return max(a, b)
","
def compare_one(a, b):
    from decimal import Decimal

    def convert_to_decimal(num):
        if isinstance(num, str):
            if ',' in num:
                num = num.replace(',', '.')
            return Decimal(num)
        return Decimal(num)

    a_decimal = convert_to_decimal(a)
    b_decimal = convert_to_decimal(b)

    if a_decimal > b_decimal:
        return a_decimal if isinstance(a, str) else a
    elif b_decimal > a_decimal:
        return b_decimal if isinstance(b, str) else b
    else:
        return None
","
def compare_one(a, b):
    import re

    def convert_to_float(val):
        if isinstance(val, str):
            val = val.replace(',', '.')
        return float(val)

    a = convert_to_float(a)
    b = convert_to_float(b)

    if type(a) == type(b):
        if a > b:
            return a
        elif b > a:
            return b
        else:
            return None
    else:
        return b if isinstance(b, (float, int)) else a
","
from typing import Union
from decimal import Decimal

def compare_one(a: Union[int, float, str], b: Union[int, float, str]):
    def parse_num(input_str: str) -> Union[int, float]:
        decimal_sep = '.' if '.' in input_str else ','
        input_str = input_str.replace(decimal_sep, '.')
        return int(input_str) if input_str.isdigit() else float(input_str)

    a = parse_num(a) if isinstance(a, str) else a
    b = parse_num(b) if isinstance(b, str) else b

    if isinstance(a, int) and isinstance(b, int):
        return None if a == b else max(a, b)
    else:
        return None if Decimal(str(a)) == Decimal(str(b)) else str(max(Decimal(str(a)), Decimal(str(b))))

",65.0,"['None', '2.5', '2.5', '2.5', '2.5', '2.5']","['None', '2.3', '', '2.3', '2.3', '2.3']","['6', '6.0', '6', '6', '6.0', '6']","['None', 'None', '', 'None', 'None', 'None']","['3', '3.0', '3', '3', '3.0', '3']","['None', '0.5', '', '0.5', '0.5', '0.5']","['None', 'None', '', 'None', 'None', 'None']","['None', 'None', 'None', 'None', 'None', 'None']","['None', 'None', '', 'None', 'None', 'None']","['None', 'None', '', '0.0001', 'None', 'None']",0.0,0.0,0.6,0.8,0.6,0.0,0.8,1.0,0.8,0.6,51.99999999999999
HumanEval/138,"
def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""
",is_equal_to_sum_even(4),is_equal_to_sum_even(6),is_equal_to_sum_even(8),is_equal_to_sum_even(10),is_equal_to_sum_even(12),is_equal_to_sum_even(20),is_equal_to_sum_even(100),is_equal_to_sum_even(1),is_equal_to_sum_even(1024),is_equal_to_sum_even(0),"
def is_equal_to_sum_even(n):
    evens = [2, 4, 6, 8] 
    for i in evens:
        for j in evens:
            for k in evens:
                for l in evens:
                    if i + j + k + l == n:
                        return True
    return False
","
from itertools import combinations_with_replacement

def is_equal_to_sum_even(n):
    evens = [num for num in range(2, n) if num % 2 == 0]
    for combo in combinations_with_replacement(evens, 4):
        if sum(combo) == n:
            return True
    return False
","
from itertools import combinations_with_replacement

def is_equal_to_sum_even(n):
    """"""Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers
    Example
    is_equal_to_sum_even(4) == False
    is_equal_to_sum_even(6) == False
    is_equal_to_sum_even(8) == True
    """"""
    even_numbers = [x for x in range(2, n, 2)]
    for combination in combinations_with_replacement(even_numbers, 4):
        if sum(combination) == n:
            return True
    return False
  ","
from itertools import combinations_with_replacement

def is_equal_to_sum_even(n):
    even_numbers = [num for num in range(1, n+1) if num % 2 == 0]
    for comb in combinations_with_replacement(even_numbers, 4):
        if sum(comb) == n:
            return True
    return False
","
def is_equal_to_sum_even(n):
    evens = [2, 4, 6, 8]
    for i in evens:
        for j in evens:
            for k in evens:
                for l in evens:
                    if i + j + k + l == n:
                        return True
    return False
","
def is_equal_to_sum_even(n):
    for i in range(1, n//2 + 1):
        if (n - i*2) % 2 == 0:
            return True
    return False
",95.0,"['False', 'False', 'False', 'False', 'False', 'True']","['False', 'False', 'False', 'False', 'False', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'True', 'True', 'True', 'False', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'True', 'True', 'True', 'False', 'True']","['False', 'False', 'False', 'False', 'False', 'False']",0.8,0.8,1.0,1.0,1.0,1.0,0.2,1.0,0.2,1.0,80.0
HumanEval/139,"
def special_factorial(n):
    """"""The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """"""
",special_factorial(1),special_factorial(2),special_factorial(3),special_factorial(4),special_factorial(5),special_factorial(6),special_factorial(10),special_factorial(12),special_factorial(15),special_factorial(20),"
from math import factorial

def special_factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= factorial(i)
    return result
","
import math

def special_factorial(n):
    if n == 1:
        return 1
    return math.factorial(n) * special_factorial(n-1)
","
from math import factorial

def special_factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= factorial(i)
    return result
","
from math import factorial

def special_factorial(n):
    total = 1
    for i in range(1, n+1):
        total *= factorial(i)
    return total
","
import math

def special_factorial(n):
    factorial_sum = 0
    for i in range(1, n+1):
        factorial_sum += math.factorial(i)
    return factorial_sum
","
from math import factorial

def special_factorial(n):
    result = 1
    for i in range(1, n+1):
        fact = factorial(i)
        result *= fact
    return result
",85.0,"['1', '1', '1', '1', '1', '1']","['2', '2', '2', '2', '3', '2']","['12', '12', '12', '12', '9', '12']","['288', '288', '288', '288', '33', '288']","['34560', '34560', '34560', '34560', '153', '34560']","['24883200', '24883200', '24883200', '24883200', '873', '24883200']","['6658606584104736522240000000', '6658606584104736522240000000', '6658606584104736522240000000', '6658606584104736522240000000', '4037913', '6658606584104736522240000000']","['127313963299399416749559771247411200000000000', '127313963299399416749559771247411200000000000', '127313963299399416749559771247411200000000000', '127313963299399416749559771247411200000000000', '522956313', '127313963299399416749559771247411200000000000']","['90378331112371142262979521568630736335023247731599748366336000000000000000000', '90378331112371142262979521568630736335023247731599748366336000000000000000000', '90378331112371142262979521568630736335023247731599748366336000000000000000000', '90378331112371142262979521568630736335023247731599748366336000000000000000000', '1401602636313', '90378331112371142262979521568630736335023247731599748366336000000000000000000']","['1274420312381610764187232669591245728094053576480399681464607478621086015845192873311847341571189522511934190056991170232320000000000000000000000000000000000', '1274420312381610764187232669591245728094053576480399681464607478621086015845192873311847341571189522511934190056991170232320000000000000000000000000000000000', '1274420312381610764187232669591245728094053576480399681464607478621086015845192873311847341571189522511934190056991170232320000000000000000000000000000000000', '1274420312381610764187232669591245728094053576480399681464607478621086015845192873311847341571189522511934190056991170232320000000000000000000000000000000000', '2561327494111820313', '1274420312381610764187232669591245728094053576480399681464607478621086015845192873311847341571189522511934190056991170232320000000000000000000000000000000000']",1.0,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,82.0
HumanEval/140,"
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
","fix_spaces(""Example"")","fix_spaces(""Example 1"")","fix_spaces("" Example 2"")","fix_spaces(""Example   3"")","fix_spaces(""No spaces"")","fix_spaces(""Two  spaces"")","fix_spaces(""       Lots of space at start"")","fix_spaces(""Ends with space "")","fix_spaces(""  Multiple   mixed    spaces  "")","fix_spaces("""")","
def fix_spaces(text):
    """"""
    Given a string text, replace all spaces in it with underscores, 
    and if a string has more than 2 consecutive spaces, 
    then replace all consecutive spaces with - 
    
    fix_spaces(""Example"") == ""Example""
    fix_spaces(""Example 1"") == ""Example_1""
    fix_spaces("" Example 2"") == ""_Example_2""
    fix_spaces("" Example   3"") == ""_Example-3""
    """"""
    import re
    text = re.sub(r'\s{2,}', '-', text)
    text = text.replace("" "", ""_"")
    return text
","
def fix_spaces(text):
    import re
    text = re.sub(r'\s+', '-', text) if re.search(r'\s{3,}', text) else text
    return text.replace(' ', '_')

","
def fix_spaces(text):
    import re
    processed_text = re.sub(r'\s{3,}', '-', text)
    processed_text = processed_text.replace(' ', '_')
    return processed_text
","
import re

def fix_spaces(text):
    return re.sub(r'\s{3,}', '-', re.sub(r'\s{2}', '_', text.replace(' ', '_')))
","
import re

def fix_spaces(text):
    return re.sub(r'\s{3,}', '-', re.sub(r'\s{2}', '_', text.replace(' ', '_')))
","
import re

def fix_spaces(text):
    return re.sub(r'\s{2,}', '-', re.sub(r'\s', '_', text))
",72.0,"['Example', 'Example', 'Example', 'Example', 'Example', 'Example']","['Example_1', 'Example_1', 'Example_1', 'Example_1', 'Example_1', 'Example_1']","['_Example_2', '_Example_2', '_Example_2', '_Example_2', '_Example_2', '_Example_2']","['Example-3', 'Example-3', 'Example-3', 'Example___3', 'Example___3', 'Example___3']","['No_spaces', 'No_spaces', 'No_spaces', 'No_spaces', 'No_spaces', 'No_spaces']","['Two-spaces', 'Two__spaces', 'Two__spaces', 'Two__spaces', 'Two__spaces', 'Two__spaces']","['-Lots_of_space_at_start', '-Lots-of-space-at-start', '-Lots_of_space_at_start', '_______Lots_of_space_at_start', '_______Lots_of_space_at_start', '_______Lots_of_space_at_start']","['Ends_with_space_', 'Ends_with_space_', 'Ends_with_space_', 'Ends_with_space_', 'Ends_with_space_', 'Ends_with_space_']","['-Multiple-mixed-spaces-', '-Multiple-mixed-spaces-', '__Multiple-mixed-spaces__', '__Multiple___mixed____spaces__', '__Multiple___mixed____spaces__', '__Multiple___mixed____spaces__']","['', '', '', '', '', '']",1.0,1.0,1.0,0.4,1.0,0.0,0.2,1.0,0.2,1.0,68.0
HumanEval/141,"
def file_name_check(file_name):
    """"""Create a function which takes a string representing a file's name, and returns
    'Yes' if the the file's name is valid, and returns 'No' otherwise.
    A file's name is considered to be valid if and only if all the following conditions 
    are met:
    - There should not be more than three digits ('0'-'9') in the file's name.
    - The file's name contains exactly one dot '.'
    - The substring before the dot should not be empty, and it starts with a letter from 
    the latin alphapet ('a'-'z' and 'A'-'Z').
    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']
    Examples:
    file_name_check(""example.txt"") # => 'Yes'
    file_name_check(""1example.dll"") # => 'No' (the name should start with a latin alphapet letter)
    """"""
","file_name_check(""example.txt"")","file_name_check(""anExample123.dll"")","file_name_check(""Test1.file"")","file_name_check(""hello1234.exe"")","file_name_check(""d1234.doc"")","file_name_check("".invisible.txt"")","file_name_check(""normal45.TXT"")","file_name_check(""99problems.txt"")","file_name_check(""Document7..dll"")","file_name_check(""codeFile123.exe"")","
import re

def file_name_check(file_name):
    if len(re.findall(r'\d', file_name)) > 3:
        return 'No'
    
    if file_name.count('.') != 1:
        return 'No'
    
    file_parts = file_name.split('.')
    if not file_parts[0] or not file_parts[0][0].isalpha():
        return 'No'
    
    valid_extensions = ['txt', 'exe', 'dll']
    if file_parts[1] not in valid_extensions:
        return 'No'
    
    return 'Yes'
  ","
import re

def file_name_check(file_name):
    if re.match(r'^[a-zA-Z][^0-9]*\.[txt|exe|dll]$', file_name) and file_name.count('.') == 1 and file_name.count('[0-9]') <= 3:
        return 'Yes'
    else:
        return 'No'
","
import re

def file_name_check(file_name):
    digit_count = len(re.findall(r'\d', file_name))
    if digit_count > 3:
        return 'No'
    
    parts = file_name.split('.')
    if len(parts) != 2:
        return 'No'
    
    if not parts[0].isalpha():
        return 'No'
    
    if parts[1] not in ['txt', 'exe', 'dll']:
        return 'No'
    
    return 'Yes'
","
import re

def file_name_check(file_name):
    pattern = r'^[a-zA-Z][^0-9]*\.(txt|exe|dll)$'
    if len(re.findall(r'\d', file_name)) > 3:
        return 'No'
    if re.match(pattern, file_name):
        return 'Yes'
    return 'No'
","
import re

def file_name_check(file_name):
    pattern = re.compile(r""^[a-zA-Z][^0-9]*\.(txt|exe|dll)$"")
    
    if len(re.findall(r""\d"", file_name)) > 3:
        return 'No'
    
    if pattern.match(file_name):
        return 'Yes'
    else:
        return 'No'
  ","
import re

def file_name_check(file_name):
    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,2}\.[txt|exe|dll]$'
    if re.match(pattern, file_name):
        return 'Yes'
    else:
        return 'No'
",77.6923076923077,"['Yes', 'No', 'Yes', 'Yes', 'Yes', 'No']","['Yes', 'No', 'No', 'No', 'No', 'No']","['No', 'No', 'No', 'No', 'No', 'No']","['No', 'No', 'No', 'No', 'No', 'No']","['No', 'No', 'No', 'No', 'No', 'No']","['No', 'No', 'No', 'No', 'No', 'No']","['No', 'No', 'No', 'No', 'No', 'No']","['No', 'No', 'No', 'No', 'No', 'No']","['No', 'No', 'No', 'No', 'No', 'No']","['Yes', 'No', 'No', 'No', 'No', 'No']",0.6,0.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,76.0
HumanEval/142,"


def sum_squares(lst):
    """"""""
    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a 
    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not 
    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. 
    
    Examples:
    For lst = [1,2,3] the output should be 6
    For lst = []  the output should be 0
    For lst = [-1,-5,2,-1,-5]  the output should be -126
    """"""
","sum_squares([1, 2, 3])",sum_squares([]),"sum_squares([-1, -5, 2, -1, -5])","sum_squares([2, 1, 3, 4, 5, 6, 7, 8, 9, 10])","sum_squares([0, 1, 0, 0, -1, -10])",sum_squares([4]),"sum_squares([1, 2, 3, 4, 5, 6, 7, 0, 9, -2, 11])","sum_squares([-1, -2, -3, -4, -5])","sum_squares([10, 5, 20, -5, 30, 0, 100, -100, 25, 50])","sum_squares([1, 2, 2, 2, 2, 2, 2, 2, 2, -3, 0])","
def sum_squares(lst):
    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)])

","
def sum_squares(lst):
    result = 0
    for idx, num in enumerate(lst):
        if idx % 3 == 0:
            result += num**2
        elif idx % 4 == 0:
            result += num**3
        else:
            result += num
    return result
","
from typing import List

def sum_squares(lst: List[int]) -> int:
    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 and i % 3 != 0 else x for i, x in enumerate(lst))
","
def sum_squares(lst):
    return sum([(x ** 2 if i % 3 == 0 else x ** 3 if i % 4 == 0 else x) for i, x in enumerate(lst)])

","
def sum_squares(lst):
    return sum((x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst)))
","
from typing import List

def sum_squares(lst: List[int]) -> int:
    return sum(val ** 2 if idx % 3 == 0 else val ** 3 if idx % 4 == 0 and idx % 3 != 0 else val for idx, val in enumerate(lst))
",100.0,"['6', '6', '6', '6', '6', '6']","['0', '0', '0', '0', '0', '0']","['-126', '-126', '-126', '-126', '-126', '-126']","['1041', '1041', '1041', '1041', '1041', '1041']","['-10', '-10', '-10', '-10', '-10', '-10']","['16', '16', '16', '16', '16', '16']","['946', '946', '946', '946', '946', '946']","['-113', '-113', '-113', '-113', '-113', '-113']","['55175', '55175', '55175', '55175', '55175', '55175']","['42', '42', '42', '42', '42', '42']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/143,"
def words_in_sentence(sentence):
    """"""
    You are given a string representing a sentence,
    the sentence contains some words separated by a space,
    and you have to return a string that contains the words from the original sentence,
    whose lengths are prime numbers,
    the order of the words in the new string should be the same as the original one.

    Example 1:
        Input: sentence = ""This is a test""
        Output: ""is""

    Example 2:
        Input: sentence = ""lets go for swimming""
        Output: ""go for""

    Constraints:
        * 1 <= len(sentence) <= 100
        * sentence contains only letters
    """"""
","words_in_sentence(""This is a test"")","words_in_sentence(""lets go for swimming"")","words_in_sentence(""a "")","words_in_sentence(""I love to write code every day"")","words_in_sentence(""wonderful message in a bottle"")","words_in_sentence(""quick brown fox"")","words_in_sentence(""at midnight the coding challenges become fun"")","words_in_sentence(""the time has come the walrus said"")","words_in_sentence(""single"")","words_in_sentence(""almost every number in this sentence is prime sized"")","
from sympy import isprime

def words_in_sentence(sentence):
    words = sentence.split()
    prime_words = [word for word in words if isprime(len(word))]
    return ' '.join(prime_words)
","
from sympy import isprime

def words_in_sentence(sentence):
    def is_prime_length(word):
        return isprime(len(word))
    
    words = sentence.split()
    prime_words = [word for word in words if is_prime_length(word)]
    return ' '.join(prime_words)
  ","
import sympy

def words_in_sentence(sentence):
    def is_prime(n):
        return sympy.isprime(n)
    
    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    
    return ' '.join(prime_words)
","
from sympy import isprime

def words_in_sentence(sentence):
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True

    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    return ' '.join(prime_words)
","
import sympy

def words_in_sentence(sentence):
    def is_prime(n):
        return sympy.isprime(n)

    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    
    return ' '.join(prime_words)
","
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def words_in_sentence(sentence):
    words = sentence.split()
    prime_words = [word for word in words if is_prime(len(word))]
    
    return ' '.join(prime_words)
",100.0,"['', '', '', '', '', 'is']","['', '', '', '', '', 'go for']","['', '', '', '', '', '']","['', '', '', '', '', 'to write every day']","['', '', '', '', '', 'message in']","['', '', '', '', '', 'quick brown fox']","['', '', '', '', '', 'at the fun']","['', '', '', '', '', 'the has the']","['', '', '', '', '', '']","['', '', '', '', '', 'every in is prime sized']",0.8,0.8,1.0,0.8,0.8,0.8,0.8,0.8,1.0,0.8,84.00000000000001
HumanEval/144,"
def simplify(x, n):
    """"""Your task is to implement a function that will simplify the expression
    x * n. The function returns True if x * n evaluates to a whole number and False
    otherwise. Both x and n, are string representation of a fraction, and have the following format,
    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.

    You can assume that x, and n are valid fractions, and do not have zero as denominator.

    simplify(""1/5"", ""5/1"") = True
    simplify(""1/6"", ""2/1"") = False
    simplify(""7/10"", ""10/2"") = False
    """"""
","simplify(""1/5"", ""5/1"")","simplify(""1/6"", ""2/1"")","simplify(""7/10"", ""10/2"")","simplify(""2/7"", ""7/2"")","simplify(""13/4"", ""8/13"")","simplify(""100/200"", ""2/1"")","simplify(""3/8"", ""8/3"")","simplify(""11/17"", ""34/11"")","simplify(""19/21"", ""42/19"")","simplify(""1/9"", ""9/1"")","
from fractions import Fraction

def simplify(x, n):
    x_val = Fraction(x)
    n_val = Fraction(n)
    product = x_val * n_val
    return product.denominator == 1
","
from fractions import Fraction

def simplify(x, n):
    x_val = Fraction(x)
    n_val = Fraction(n)
    result = x_val * n_val
    return result.denominator == 1
","
from fractions import Fraction

def simplify(x, n):
    x = Fraction(x)
    n = Fraction(n)
    result = x * n
    return result % 1 == 0
","
from fractions import Fraction

def simplify(x, n):
    x_val = Fraction(x)
    n_val = Fraction(n)
    result = x_val * n_val

    return result == int(result)
","
from fractions import Fraction

def simplify(x, n):
    return Fraction(x) * Fraction(n) == int(Fraction(x) * Fraction(n))
","
from fractions import Fraction

def simplify(x, n):
    x_val = Fraction(x)
    n_val = Fraction(n)
    
    result = x_val * n_val
    return result == int(result)
",100.0,"['True', 'True', 'True', 'True', 'True', 'True']","['False', 'False', 'False', 'False', 'False', 'False']","['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/145,"
def order_by_points(nums):
    """"""
    Write a function which sorts the given list of integers
    in ascending order according to the sum of their digits.
    Note: if there are several items with similar sum of their digits,
    order them based on their index in original list.

    For example:
    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]
    >>> order_by_points([]) == []
    """"""
","order_by_points([1, 11, -1, -11, -12])",order_by_points([]),"order_by_points([11, 22, 9, 233])","order_by_points([3, 30, 34, 5, 9])","order_by_points([10, 20, 30, -10, -20, -30])","order_by_points([-100, 100, 1000, -1000])","order_by_points([121, 131, 123, -111, -222, -333])","order_by_points([0, -0, 0])","order_by_points([555, 444, 333, 222, 111])","order_by_points([101, 102, 103, 104, 105, 106, 107, 108, 109, 110])","
from functools import cmp_to_key

def order_by_points(nums):
    def sum_digits(n):
        return sum(int(d) for d in str(abs(n)))
      
    def custom_sort(x, y):
        x_sum = sum_digits(x)
        y_sum = sum_digits(y)
        if x_sum != y_sum:
            return x_sum - y_sum
        else:
            return nums.index(x) - nums.index(y)

    return sorted(nums, key=cmp_to_key(custom_sort))
","
from collections import defaultdict

def order_by_points(nums):
    def sum_of_digits(num):
        return sum(int(digit) for digit in str(abs(num)))

    digit_sums = defaultdict(list)
    for index, num in enumerate(nums):
        digit_sums[sum_of_digits(num)].append((index, num))

    sorted_nums = []
    for key in sorted(digit_sums.keys()):
        sorted_nums.extend(sorted(vals, key=lambda x: x[0]))

    return [num for index, num in sorted_nums]
  ","
from collections import defaultdict

def order_by_points(nums):
    def digit_sum(num):
        return sum(int(digit) for digit in str(abs(num)))
    
    sorted_nums_dict = defaultdict(list)
    for index, num in enumerate(nums):
        sorted_nums_dict[digit_sum(num)].append((index, num))
    
    sorted_nums = []
    for key in sorted(sorted_nums_dict):
        for index, num in sorted(sorted_nums_dict[key], key=lambda x: x[0]):
            sorted_nums.append(num)
    
    return sorted_nums
","
from functools import cmp_to_key

def order_by_points(nums):
    def digit_sum(n):
        return sum(map(int, str(abs(n))))

    def compare(a, b):
        sum_a = digit_sum(a)
        sum_b = digit_sum(b)
        if sum_a == sum_b:
            return nums.index(a) - nums.index(b)
        return sum_a - sum_b

    return sorted(nums, key=cmp_to_key(compare))
  ","
from functools import cmp_to_key

def order_by_points(nums):
    def sum_of_digits(n):
        return sum(int(d) for d in str(abs(n)))

    def compare(x, y):
        sum_x, sum_y = sum_of_digits(x), sum_of_digits(y)
        if sum_x != sum_y:
            return sum_x - sum_y
        else:
            return nums.index(x) - nums.index(y)

    return sorted(nums, key=cmp_to_key(compare))
","
from typing import List

def order_by_points(nums: List[int]) -> List[int]:
    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))
",43.33333333333333,"['[1, -1, 11, -11, -12]', '', '[1, -1, 11, -11, -12]', '[1, -1, 11, -11, -12]', '[1, -1, 11, -11, -12]', '[1, -1, 11, -11, -12]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[11, 22, 233, 9]', '', '[11, 22, 233, 9]', '[11, 22, 233, 9]', '[11, 22, 233, 9]', '[11, 22, 233, 9]']","['[3, 30, 5, 34, 9]', '', '[3, 30, 5, 34, 9]', '[3, 30, 5, 34, 9]', '[3, 30, 5, 34, 9]', '[3, 30, 5, 34, 9]']","['[10, -10, 20, -20, 30, -30]', '', '[10, -10, 20, -20, 30, -30]', '[10, -10, 20, -20, 30, -30]', '[10, -10, 20, -20, 30, -30]', '[10, -10, 20, -20, 30, -30]']","['[-100, 100, 1000, -1000]', '', '[-100, 100, 1000, -1000]', '[-100, 100, 1000, -1000]', '[-100, 100, 1000, -1000]', '[-100, 100, 1000, -1000]']","['[-111, 121, 131, 123, -222, -333]', '', '[-111, 121, 131, 123, -222, -333]', '[-111, 121, 131, 123, -222, -333]', '[-111, 121, 131, 123, -222, -333]', '[-111, 121, 131, 123, -222, -333]']","['[0, 0, 0]', '', '[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]']","['[111, 222, 333, 444, 555]', '', '[111, 222, 333, 444, 555]', '[111, 222, 333, 444, 555]', '[111, 222, 333, 444, 555]', '[111, 222, 333, 444, 555]']","['[101, 110, 102, 103, 104, 105, 106, 107, 108, 109]', '', '[101, 110, 102, 103, 104, 105, 106, 107, 108, 109]', '[101, 110, 102, 103, 104, 105, 106, 107, 108, 109]', '[101, 110, 102, 103, 104, 105, 106, 107, 108, 109]', '[101, 110, 102, 103, 104, 105, 106, 107, 108, 109]']",0.8,1.0,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,82.0
HumanEval/146,"
def specialFilter(nums):
    """"""Write a function that takes an array of numbers as input and returns 
    the number of elements in the array that are greater than 10 and both 
    first and last digits of a number are odd (1, 3, 5, 7, 9).
    For example:
    specialFilter([15, -73, 14, -15]) => 1 
    specialFilter([33, -2, -3, 45, 21, 109]) => 2
    """"""
","specialFilter([15, -73, 14, -15])","specialFilter([33, -2, -3, 45, 21, 109])",specialFilter([]),"specialFilter([11, 13, 17, 19, 31, 35])","specialFilter([-11, 83, 25, 71, -97])","specialFilter([2, 4, 6, 8, 10])",specialFilter([13]),"specialFilter([22, 44, 66, 101])","specialFilter([111, 131, 151, 171])","specialFilter([9, 15, 21, 23, 27, 32, 10, 57, 98, 103])","
from typing import List

def specialFilter(nums: List[int]) -> int:
    def isOdd(num):
        return int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0

    filtered_nums = [num for num in nums if num > 10 and len(str(abs(num))) > 1 and isOdd(num)]

    return len(filtered_nums)
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    count = 0
    for num in nums:
        if num > 10 and str(num)[0] in '13579' and str(num)[-1] in '13579':
            count += 1
    return count
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    return sum(1 for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9'])
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    return sum(
        1 for num in nums
        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']
    )
","
def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:
            count += 1
    return count
","
from typing import List

def specialFilter(nums: List[int]) -> int:
    return len([num for num in nums if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']])
",100.0,"['1', '1', '1', '1', '1', '1']","['2', '2', '2', '2', '2', '2']","['0', '0', '0', '0', '0', '0']","['6', '6', '6', '6', '6', '6']","['1', '1', '1', '1', '1', '1']","['0', '0', '0', '0', '0', '0']","['1', '1', '1', '1', '1', '1']","['1', '1', '1', '1', '1', '1']","['4', '4', '4', '4', '4', '4']","['3', '3', '3', '3', '3', '3']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/147,"
def get_max_triples(n):
    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""
",get_max_triples(1),get_max_triples(2),get_max_triples(3),get_max_triples(4),get_max_triples(5),get_max_triples(6),get_max_triples(10),get_max_triples(15),get_max_triples(20),get_max_triples(30),"
from itertools import combinations

def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n+1)]
    count = 0
    for i, j, k in combinations(a, 3):
        if (i + j + k) % 3 == 0:
            count += 1
    return count
","
from itertools import combinations

def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i, j, k in combinations(a, 3):
        if (i + j + k) % 3 == 0:
            count += 1
    return count
","
from itertools import combinations

def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n + 1)]
    count = 0
    for i, j, k in combinations(a, 3):
        if (i + j + k) % 3 == 0:
            count += 1
    return count
","
from itertools import combinations

def get_max_triples(n):
    a = [i*i - i + 1 for i in range(1, n+1)]
    count = 0
    for combo in combinations(a, 3):
        if sum(combo) % 3 == 0:
            count += 1
    return count
","
from itertools import combinations

def get_max_triples(n):
    """"""
    You are given a positive integer n. You have to create an integer array a of length n.
        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.
        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, 
    and a[i] + a[j] + a[k] is a multiple of 3.

    Example :
        Input: n = 5
        Output: 1
        Explanation: 
        a = [1, 3, 7, 13, 21]
        The only valid triple is (1, 7, 13).
    """"""

    def is_multiple_of_3(triple):
        return sum(triple) % 3 == 0

    a = [i * i - i + 1 for i in range(1, n + 1)]
    triples = list(combinations(a, 3))
    count = sum(1 for triple in triples if is_multiple_of_3(triple))

    return count
","
from itertools import combinations

def get_max_triples(n):
    a = [i * i - i + 1 for i in range(1, n+1)]
    count = 0
    
    for i, j, k in combinations(range(n), 3):
        if (a[i] + a[j] + a[k]) % 3 == 0:
            count += 1
    
    return count
",100.0,"['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['1', '1', '1', '1', '1', '1']","['1', '1', '1', '1', '1', '1']","['4', '4', '4', '4', '4', '4']","['36', '36', '36', '36', '36', '36']","['130', '130', '130', '130', '130', '130']","['321', '321', '321', '321', '321', '321']","['1260', '1260', '1260', '1260', '1260', '1260']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/148,"
def bf(planet1, planet2):
    '''
    There are eight planets in our solar system: the closerst to the Sun 
    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, 
    Uranus, Neptune.
    Write a function that takes two planet names as strings planet1 and planet2. 
    The function should return a tuple containing all planets whose orbits are 
    located between the orbit of planet1 and the orbit of planet2, sorted by 
    the proximity to the sun. 
    The function should return an empty tuple if planet1 or planet2
    are not correct planet names. 
    Examples
    bf(""Jupiter"", ""Neptune"") ==> (""Saturn"", ""Uranus"")
    bf(""Earth"", ""Mercury"") ==> (""Venus"")
    bf(""Mercury"", ""Uranus"") ==> (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
    '''
","bf(""Mercury"", ""Neptune"")","bf(""Venus"", ""Mars"")","bf(""Jupiter"", ""Earth"")","bf(""Saturn"", ""Saturn"")","bf(""Uranus"", ""Mercury"")","bf(""Neptune"", ""Jupiter"")","bf(""Mars"", ""Venus"")","bf(""Earth"", ""Uranus"")","bf(""Pluto"", ""Mars"")","bf(""Mercury"", ""Pluto"")","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    planets.sort(key=lambda x: planets.index(x))
    if planet1 not in planets or planet2 not in planets:
        return ()
    start = planets.index(planet1)
    end = planets.index(planet2)

    if start < end:
        return tuple(planets[start+1:end])
    elif end < start:
        return tuple(planets[end+1:start])
    else:
        return ()

# Examples
print(bf(""Jupiter"", ""Neptune""))  # (""Saturn"", ""Uranus"")
print(bf(""Earth"", ""Mercury""))    # (""Venus"")
print(bf(""Mercury"", ""Uranus""))   # (""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"")
","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 in planets and planet2 in planets:
        start = planets.index(planet1)
        end = planets.index(planet2)
        if start < end:
            return tuple([planet for planet in planets[start+1:end]])
        else:
            return tuple([planet for planet in planets[end+1:start]][::-1])
    else:
        return ()
","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    planet_order = sorted([planet1, planet2])
    if planet_order[0] not in planets or planet_order[1] not in planets:
        return ()
    start_index = planets.index(planet_order[0]) + 1
    end_index = planets.index(planet_order[1])
    return tuple(sorted(planets[start_index:end_index]))

","
from typing import Tuple

def bf(planet1: str, planet2: str) -> Tuple[str]:
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    
    if planet1 not in planets or planet2 not in planets:
        return ()
    
    start_idx = planets.index(planet1)
    end_idx = planets.index(planet2)
    
    if start_idx > end_idx:
        start_idx, end_idx = end_idx, start_idx
    
    return tuple([planet for planet in planets[start_idx+1:end_idx]])

","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    
    if planet1 not in planets or planet2 not in planets:
        return ()
    
    start_idx = planets.index(planet1)
    end_idx = planets.index(planet2)
    
    if start_idx < end_idx:
        return tuple(sorted(planets[start_idx+1:end_idx], key=lambda x: planets.index(x)))
    else:
        return tuple(sorted(planets[end_idx+1:start_idx], key=lambda x: planets.index(x), reverse=True))
","
def bf(planet1, planet2):
    planets = [""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune""]
    if planet1 not in planets or planet2 not in planets:
        return ()
    start_index = planets.index(planet1)
    end_index = planets.index(planet2)
    if start_index > end_index:
        start_index, end_index = end_index, start_index
    return tuple([planet for planet in planets[start_index+1:end_index]])
",85.71428571428571,"['', ""('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')"", ""('Earth', 'Jupiter', 'Mars', 'Saturn', 'Uranus', 'Venus')"", ""('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')"", ""('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')"", ""('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus')""]","['', ""('Earth',)"", '()', ""('Earth',)"", ""('Earth',)"", ""('Earth',)""]","['', ""('Mars',)"", ""('Mars',)"", ""('Mars',)"", ""('Mars',)"", ""('Mars',)""]","['', '()', '()', '()', '()', '()']","['', ""('Saturn', 'Jupiter', 'Mars', 'Earth', 'Venus')"", ""('Earth', 'Jupiter', 'Mars', 'Saturn', 'Venus')"", ""('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')"", ""('Saturn', 'Jupiter', 'Mars', 'Earth', 'Venus')"", ""('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')""]","['', ""('Uranus', 'Saturn')"", ""('Saturn', 'Uranus')"", ""('Saturn', 'Uranus')"", ""('Uranus', 'Saturn')"", ""('Saturn', 'Uranus')""]","['', ""('Earth',)"", '()', ""('Earth',)"", ""('Earth',)"", ""('Earth',)""]","['', ""('Mars', 'Jupiter', 'Saturn')"", ""('Jupiter', 'Mars', 'Saturn')"", ""('Mars', 'Jupiter', 'Saturn')"", ""('Mars', 'Jupiter', 'Saturn')"", ""('Mars', 'Jupiter', 'Saturn')""]","['', '()', '()', '()', '()', '()']","['', '()', '()', '()', '()', '()']",0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
HumanEval/149,"
def sorted_list_sum(lst):
    """"""Write a function that accepts a list of strings as a parameter,
    deletes the strings that have odd lengths from it,
    and returns the resulted list with a sorted order,
    The list is always a list of strings and never an array of numbers,
    and it may contain duplicates.
    The order of the list should be ascending by length of each word, and you
    should return the list sorted by that rule.
    If two words have the same length, sort the list alphabetically.
    The function should return a list of strings in sorted order.
    You may assume that all words will have the same length.
    For example:
    assert list_sort([""aa"", ""a"", ""aaa""]) => [""aa""]
    assert list_sort([""ab"", ""a"", ""aaa"", ""cd""]) => [""ab"", ""cd""]
    """"""
","sorted_list_sum([""dog"", ""cat"", ""mouse""])","sorted_list_sum([""ab"", ""c"", ""def"", ""ghi""])","sorted_list_sum([""a"", ""bbb"", ""cc"", ""dddd""])","sorted_list_sum([""hello"", ""world"", ""python"", ""coding""])",sorted_list_sum([]),"sorted_list_sum([""aa"", ""bb"", ""cc"", ""dd"", ""ee""])","sorted_list_sum([""zz"", ""aa"", ""bb"", ""cc"", ""dd"", ""ee""])","sorted_list_sum([""sun"", ""moon"", ""star"", ""sky""])","sorted_list_sum([""one"", ""two"", ""three"", ""four"", ""five""])","sorted_list_sum([""kite"", ""ice"", ""ace"", ""mace""])","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0])
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0])
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0])
","
from typing import List

def sorted_list_sum(lst: List[str]) -> List[str]:
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))
",91.42857142857143,"['[]', '[]', '[]', '[]', '[]', '[]']","[""['ab']"", ""['ab']"", ""['ab']"", ""['ab']"", ""['ab']"", ""['ab']""]","[""['cc', 'dddd']"", ""['cc', 'dddd']"", ""['cc', 'dddd']"", ""['cc', 'dddd']"", ""['cc', 'dddd']"", ""['cc', 'dddd']""]","[""['coding', 'python']"", ""['coding', 'python']"", ""['coding', 'python']"", ""['coding', 'python']"", ""['coding', 'python']"", ""['coding', 'python']""]","['[]', '[]', '[]', '[]', '[]', '[]']","[""['aa', 'bb', 'cc', 'dd', 'ee']"", ""['aa', 'bb', 'cc', 'dd', 'ee']"", ""['aa', 'bb', 'cc', 'dd', 'ee']"", ""['aa', 'bb', 'cc', 'dd', 'ee']"", ""['aa', 'bb', 'cc', 'dd', 'ee']"", ""['aa', 'bb', 'cc', 'dd', 'ee']""]","[""['aa', 'bb', 'cc', 'dd', 'ee', 'zz']"", ""['aa', 'bb', 'cc', 'dd', 'ee', 'zz']"", ""['aa', 'bb', 'cc', 'dd', 'ee', 'zz']"", ""['aa', 'bb', 'cc', 'dd', 'ee', 'zz']"", ""['aa', 'bb', 'cc', 'dd', 'ee', 'zz']"", ""['aa', 'bb', 'cc', 'dd', 'ee', 'zz']""]","[""['moon', 'star']"", ""['moon', 'star']"", ""['moon', 'star']"", ""['moon', 'star']"", ""['moon', 'star']"", ""['moon', 'star']""]","[""['five', 'four']"", ""['five', 'four']"", ""['five', 'four']"", ""['five', 'four']"", ""['five', 'four']"", ""['five', 'four']""]","[""['kite', 'mace']"", ""['kite', 'mace']"", ""['kite', 'mace']"", ""['kite', 'mace']"", ""['kite', 'mace']"", ""['kite', 'mace']""]",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/150,"
def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.

    Examples:
    for x_or_y(7, 34, 12) == 34
    for x_or_y(15, 8, 5) == 5
    
    """"""
","x_or_y(2, 100, 200)","x_or_y(3, 55, 77)","x_or_y(4, 44, 88)","x_or_y(10, 1, 2)","x_or_y(11, 66, 99)","x_or_y(13, 20, 30)","x_or_y(16, 222, 333)","x_or_y(17, 500, 1000)","x_or_y(18, 2, 4)","x_or_y(19, 45, 67)","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    return x if is_prime(n) else y
","
import math

def x_or_y(n, x, y):
    """"""A simple program which should return the value of x if n is 
    a prime number and should return the value of y otherwise.""""""
    
    if n < 2:
        return y
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return y
    return x
","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    return x if is_prime(n) else y
","
import math

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    return x if is_prime(n) else y
","
import math

def is_prime(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def x_or_y(n, x, y):
    if is_prime(n):
        return x
    return y
  ","
import math

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(math.sqrt(num)) + 1):
        if num % i == 0:
            return False
    return True

def x_or_y(n, x, y):
    return x if is_prime(n) else y
",100.0,"['100', '100', '100', '100', '100', '100']","['55', '55', '55', '55', '55', '55']","['88', '88', '88', '88', '88', '88']","['2', '2', '2', '2', '2', '2']","['66', '66', '66', '66', '66', '66']","['20', '20', '20', '20', '20', '20']","['333', '333', '333', '333', '333', '333']","['500', '500', '500', '500', '500', '500']","['4', '4', '4', '4', '4', '4']","['45', '45', '45', '45', '45', '45']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/151,"
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
","double_the_difference([1, 2, 3])","double_the_difference([-3, -6, 7, 12])","double_the_difference([2, 4, 6, 8])",double_the_difference([-1]),double_the_difference([3]),double_the_difference([]),"double_the_difference([11, -11, 11, -11])",double_the_difference([0]),"double_the_difference([5.5, 4.5, 3.5, 2.5])","double_the_difference([-5, -4, -3, -2, -1])","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(x ** 2 for x in lst if x > 0 and x % 2 != 0)
","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return 2 * sum(num ** 2 for num in lst if num > 0 and num % 2 != 0)
","
def double_the_difference(lst):
    '''
    Given a list of numbers, return the sum of squares of the numbers
    in the list that are odd. Ignore numbers that are negative or not integers.
    
    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10
    double_the_difference([-1, -2, 0]) == 0
    double_the_difference([9, -2]) == 81
    double_the_difference([0]) == 0  
   
    If the input list is empty, return 0.
    '''
    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and type(x) is int)
","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(x ** 2 for x in lst if x % 2 != 0 and x >= 0)
","
def double_the_difference(lst):
    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0 and isinstance(x, int)) * 2
","
from typing import List

def double_the_difference(lst: List[int]) -> int:
    return sum(x**2 for x in lst if x % 2 != 0 and x >= 0)
",68.57142857142858,"['10', '20', '10', '10', '20', '10']","['49', '98', '49', '49', '98', '49']","['0', '0', '0', '0', '0', '0']","['0', '0', '0', '0', '0', '0']","['9', '18', '9', '9', '18', '9']","['0', '0', '0', '0', '0', '0']","['242', '484', '242', '242', '484', '242']","['0', '0', '0', '0', '0', '0']","['69.0', '138.0', '0', '69.0', '0', '69.0']","['0', '0', '0', '0', '0', '0']",0.6,0.6,1.0,1.0,0.6,1.0,0.6,1.0,0.4,1.0,78.0
HumanEval/152,"
def compare(game,guess):
    """"""I think we all remember that feeling when the result of some long-awaited
    event is finally known. The feelings and thoughts you have at that moment are
    definitely worth noting down and comparing.
    Your task is to determine if a person correctly guessed the results of a number of matches.
    You are given two arrays of scores and guesses of equal length, where each index shows a match. 
    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,
    the value is 0, and if not, the value is the absolute difference between the guess and the score.
    
    
    example:

    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]
    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]
    """"""
","compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])","compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])","compare([10, 20, 30], [10, 20, 30])","compare([10, 20, 30], [0, 0, 0])","compare([10, 20, 30], [30, 20, 10])","compare([], [])","compare([100], [90])","compare([1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 0])","compare([50, 60, 70], [50, 60, 70])","compare([7, 8, 9, 10], [3, 5, 9, 8])","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(guess[i] - game[i]) if guess[i] != game[i] else 0 for i in range(len(game))]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]
","
from typing import List

def compare(game: List[int], guess: List[int]) -> List[int]:
    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]
",100.0,"['[0, 0, 0, 0, 3, 3]', '[0, 0, 0, 0, 3, 3]', '[0, 0, 0, 0, 3, 3]', '[0, 0, 0, 0, 3, 3]', '[0, 0, 0, 0, 3, 3]', '[0, 0, 0, 0, 3, 3]']","['[4, 4, 1, 0, 0, 6]', '[4, 4, 1, 0, 0, 6]', '[4, 4, 1, 0, 0, 6]', '[4, 4, 1, 0, 0, 6]', '[4, 4, 1, 0, 0, 6]', '[4, 4, 1, 0, 0, 6]']","['[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]']","['[10, 20, 30]', '[10, 20, 30]', '[10, 20, 30]', '[10, 20, 30]', '[10, 20, 30]', '[10, 20, 30]']","['[20, 0, 20]', '[20, 0, 20]', '[20, 0, 20]', '[20, 0, 20]', '[20, 0, 20]', '[20, 0, 20]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[10]', '[10]', '[10]', '[10]', '[10]', '[10]']","['[0, 0, 0, 0, 0, 0, 0, 0, 1]', '[0, 0, 0, 0, 0, 0, 0, 0, 1]', '[0, 0, 0, 0, 0, 0, 0, 0, 1]', '[0, 0, 0, 0, 0, 0, 0, 0, 1]', '[0, 0, 0, 0, 0, 0, 0, 0, 1]', '[0, 0, 0, 0, 0, 0, 0, 0, 1]']","['[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]', '[0, 0, 0]']","['[4, 3, 0, 2]', '[4, 3, 0, 2]', '[4, 3, 0, 2]', '[4, 3, 0, 2]', '[4, 3, 0, 2]', '[4, 3, 0, 2]']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/153,"
def Strongest_Extension(class_name, extensions):
    """"""You will be given the name of a class (a string) and a list of extensions.
    The extensions are to be used to load additional classes to the class. The
    strength of the extension is as follows: Let CAP be the number of the uppercase
    letters in the extension's name, and let SM be the number of lowercase letters 
    in the extension's name, the strength is given by the fraction CAP - SM. 
    You should find the strongest extension and return a string in this 
    format: ClassName.StrongestExtensionName.
    If there are two or more extensions with the same strength, you should
    choose the one that comes first in the list.
    For example, if you are given ""Slices"" as the class and a list of the
    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should
    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension 
    (its strength is -1).
    Example:
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'
    """"""
","Strongest_Extension('Alpha', ['a', 'B', 'cC'])","Strongest_Extension('Beta', ['bridge', 'New', 'city'])","Strongest_Extension('Gamma', ['CAts', 'DOG', 'Mice', 'RABBITS'])","Strongest_Extension('Theta', ['a', 'b', 'c'])","Strongest_Extension('Lambda', ['AA', 'BB', 'CC', 'DD'])","Strongest_Extension('Xi', ['Extension', 'WithVeryLongNameWithoutAnyCapitals', 'SmallOne'])","Strongest_Extension('Omega', ['VeryLongNamesAreBad', 'SHORT', 'MediumName'])","Strongest_Extension('Kappa', [])","Strongest_Extension('Delta', ['ALLCAPS', 'someCAPS', 'nocaps'])","Strongest_Extension('Sigma', ['SHORT', 'small', 'MIXofBoth'])","
def Strongest_Extension(class_name, extensions):
    strength_values = {}
    for extension in extensions:
        CAP = sum(1 for c in extension if c.isupper())
        SM = sum(1 for c in extension if c.islower())
        strength_values[extension] = CAP - SM
    max_extension = max(strength_values.items(), key=lambda x: x[1])
    return f""{class_name}.{max_extension[0]}""
","
def Strongest_Extension(class_name, extensions):
    def calculate_strength(extension):
        CAP = sum(1 for char in extension if char.isupper())
        SM = sum(1 for char in extension if char.islower())
        return CAP - SM

    strongest_extension = max(extensions, key=calculate_strength)
    return f""{class_name}.{strongest_extension}""
","
def Strongest_Extension(class_name, extensions):
    def extension_strength(extension):
        CAP = sum(1 for c in extension if c.isupper())
        SM = sum(1 for c in extension if c.islower())
        return CAP - SM

    strongest_extension = max(extensions, key=extension_strength)
    return f""{class_name}.{strongest_extension}""
","
import re

def Strongest_Extension(class_name, extensions):
    def strength(extension):
        CAP = len(re.findall(r'[A-Z]', extension))
        SM = len(re.findall(r'[a-z]', extension))
        return CAP - SM

    strongest_extension = max(extensions, key=strength)
    return f""{class_name}.{strongest_extension}""
","
from typing import List

def Strongest_Extension(class_name: str, extensions: List[str]) -> str:
    def calculate_strength(extension: str) -> int:
        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())
    
    strongest_extension = max(extensions, key=calculate_strength)
    return f""{class_name}.{strongest_extension}""
","
def Strongest_Extension(class_name, extensions):
    def strength(ext):
        return ext.count('A') + ext.count('B') + ext.count('C') - ext.count('a') - ext.count('b') - ext.count('c')
    
    max_strength = float('-inf')
    strongest_ext = ''
    for ext in extensions:
        ext_strength = strength(ext)
        if ext_strength > max_strength:
            max_strength = ext_strength
            strongest_ext = ext
    
    return f""{class_name}.{strongest_ext}""
",91.11111111111111,"['Alpha.B', 'Alpha.B', 'Alpha.B', 'Alpha.B', 'Alpha.B', 'Alpha.B']","['Beta.New', 'Beta.New', 'Beta.New', 'Beta.New', 'Beta.New', 'Beta.New']","['Gamma.RABBITS', 'Gamma.RABBITS', 'Gamma.RABBITS', 'Gamma.RABBITS', 'Gamma.RABBITS', 'Gamma.RABBITS']","['Theta.a', 'Theta.a', 'Theta.a', 'Theta.a', 'Theta.a', 'Theta.a']","['Lambda.AA', 'Lambda.AA', 'Lambda.AA', 'Lambda.AA', 'Lambda.AA', 'Lambda.AA']","['Xi.SmallOne', 'Xi.SmallOne', 'Xi.SmallOne', 'Xi.SmallOne', 'Xi.SmallOne', 'Xi.Extension']","['Omega.SHORT', 'Omega.SHORT', 'Omega.SHORT', 'Omega.SHORT', 'Omega.SHORT', 'Omega.VeryLongNamesAreBad']","['', '', '', '', '', 'Kappa.']","['Delta.ALLCAPS', 'Delta.ALLCAPS', 'Delta.ALLCAPS', 'Delta.ALLCAPS', 'Delta.ALLCAPS', 'Delta.ALLCAPS']","['Sigma.SHORT', 'Sigma.SHORT', 'Sigma.SHORT', 'Sigma.SHORT', 'Sigma.SHORT', 'Sigma.MIXofBoth']",1.0,1.0,1.0,1.0,1.0,0.8,0.8,0.8,1.0,0.8,92.0
HumanEval/154,"
def cycpattern_check(a , b):
    """"""You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word
    cycpattern_check(""abcd"",""abd"") => False
    cycpattern_check(""hello"",""ell"") => True
    cycpattern_check(""whassup"",""psus"") => False
    cycpattern_check(""abab"",""baa"") => True
    cycpattern_check(""efef"",""eeff"") => False
    cycpattern_check(""himenss"",""simen"") => True

    """"""
","cycpattern_check(""abcd"",""abd"")","cycpattern_check(""hello"",""ell"")","cycpattern_check(""whassup"",""psus"")","cycpattern_check(""abab"",""baa"")","cycpattern_check(""efef"",""eeff"")","cycpattern_check(""himenss"",""simen"")","cycpattern_check(""rotation"",""tationro"")","cycpattern_check(""a"",""a"")","cycpattern_check("""","""")","cycpattern_check(""xyxyxyxy"",""xyy"")","
from itertools import permutations

def cycpattern_check(a, b):
    return any(b in a[i:] + a[:i] for i in range(len(a)))
","
from itertools import permutations

def cycpattern_check(a, b):
    for perm in permutations(b):
        if """".join(perm) in a:
            return True
    return False
","
import itertools

def cycpattern_check(a, b):
    for rotation in itertools.permutations(b):
        rotated_word = ''.join(rotation)
        if rotated_word in a:
            return True
    return False
","
import collections

def cycpattern_check(a, b):
    def is_rotation(s1, s2):
        return len(s1) == len(s2) and s1 in s2+s2

    if b in a:
        return True
    for i in range(len(b)):
        rotation = b[i:] + b[:i]
        if is_rotation(rotation, a):
            return True
    return False
","
from itertools import permutations

def cycpattern_check(a, b):
    return any(b in a[i:] + a[:i] for i in range(len(a)))

","
from itertools import permutations

def cycpattern_check(a, b):
    for perm in permutations(b):
        if ''.join(perm) in a:
            return True
    return False
",66.66666666666666,"['False', 'False', 'False', 'False', 'False', 'False']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'True', 'True', 'False', 'False', 'True']","['False', 'True', 'True', 'False', 'False', 'True']","['False', 'True', 'True', 'False', 'False', 'True']","['False', 'True', 'True', 'False', 'False', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['True', 'True', 'True', 'True', 'True', 'True']","['False', 'True', 'True', 'True', 'False', 'True']","['False', 'True', 'True', 'False', 'False', 'True']",1.0,1.0,0.4,0.4,0.4,0.4,1.0,1.0,0.2,0.4,62.0
HumanEval/155,"
def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""
",even_odd_count(0),even_odd_count(123456789),even_odd_count(-101010),even_odd_count(8642),even_odd_count(-999999),even_odd_count(111111),even_odd_count(13579),even_odd_count(24680),even_odd_count(120034050),even_odd_count(-456789),"
def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

    Example:
    even_odd_count(-12) ==> (1, 1)
    even_odd_count(123) ==> (1, 2)
    """"""
    num = abs(num)
    even_count = sum(1 for digit in str(num) if int(digit) % 2 == 0)
    odd_count = sum(1 for digit in str(num) if int(digit) % 2 != 0)
    return even_count, odd_count
","
def even_odd_count(num):
    num_str = str(abs(num))
    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)
    odd_count = len(num_str) - even_count
    return even_count, odd_count
","
def even_odd_count(num):
    evens = odds = 0
    num = abs(num)
    while num > 0:
        digit = num % 10
        if digit % 2 == 0:
            evens += 1
        else:
            odds += 1
        num //= 10
    return (evens, odds)
","
def even_odd_count(num):
    even_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 0])
    odd_count = len([int(digit) for digit in str(abs(num)) if int(digit) % 2 == 1])
    return (even_count, odd_count)
","
def even_odd_count(num):
    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)
    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)
    return (even_count, odd_count)
","
def even_odd_count(num):
    """"""Given an integer. return a tuple that has the number of even and odd digits respectively.

     Example:
        even_odd_count(-12) ==> (1, 1)
        even_odd_count(123) ==> (1, 2)
    """"""
    even_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 == 0)
    odd_count = sum(1 for digit in str(abs(num)) if int(digit) % 2 != 0)
    return even_count, odd_count
",97.5,"['(1, 0)', '(1, 0)', '(0, 0)', '(1, 0)', '(1, 0)', '(1, 0)']","['(4, 5)', '(4, 5)', '(4, 5)', '(4, 5)', '(4, 5)', '(4, 5)']","['(3, 3)', '(3, 3)', '(3, 3)', '(3, 3)', '(3, 3)', '(3, 3)']","['(4, 0)', '(4, 0)', '(4, 0)', '(4, 0)', '(4, 0)', '(4, 0)']","['(0, 6)', '(0, 6)', '(0, 6)', '(0, 6)', '(0, 6)', '(0, 6)']","['(0, 6)', '(0, 6)', '(0, 6)', '(0, 6)', '(0, 6)', '(0, 6)']","['(0, 5)', '(0, 5)', '(0, 5)', '(0, 5)', '(0, 5)', '(0, 5)']","['(5, 0)', '(5, 0)', '(5, 0)', '(5, 0)', '(5, 0)', '(5, 0)']","['(6, 3)', '(6, 3)', '(6, 3)', '(6, 3)', '(6, 3)', '(6, 3)']","['(3, 3)', '(3, 3)', '(3, 3)', '(3, 3)', '(3, 3)', '(3, 3)']",0.8,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,98.00000000000001
HumanEval/156,"
def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
",int_to_mini_roman(1),int_to_mini_roman(5),int_to_mini_roman(9),int_to_mini_roman(25),int_to_mini_roman(99),int_to_mini_roman(145),int_to_mini_roman(500),int_to_mini_roman(999),int_to_mini_roman(1000),int_to_mini_roman(476),"
def int_to_mini_roman(number):
    roman_numerals = {
        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',
        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',
        10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'
    }
    if not 1 <= number <= 1000:
        raise ValueError(""Input must be between 1 and 1000"")

    result = ''
    for value, numeral in roman_numerals.items():
        while number >= value:
            result += numeral
            number -= value

    return result.lower()
","
def int_to_mini_roman(number):
    mini_romans = {1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'}
    result = ''
    for value, mini_roman in sorted(mini_romans.items(), reverse=True):
        while number >= value:
            result += mini_roman
            number -= value
    return result
","
def int_to_mini_roman(number):
    roman_numerals = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',
        50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'
    }

    if not 1 <= number <= 1000:
        raise ValueError(""Input number out of range"")

    result = ''
    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):
        while number >= value:
            result += numeral
            number -= value

    return result.lower()
","
def int_to_mini_roman(number):
    roman_numerals = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',
        50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'
    }
    
    if not 1 <= number <= 1000:
        raise ValueError(""Number must be between 1 and 1000"")
    
    result = ''
    for value, numeral in sorted(roman_numerals.items(), reverse=True):
        while number >= value:
            result += numeral
            number -= value
    
    return result.lower()
","
def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
    MINI_ROMAN_TABLE = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',
        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',
        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',
        1000: 'm'
    }

    result = ''
    for value, numeral in sorted(MINI_ROMAN_TABLE.items(), key=lambda x: x[0], reverse=True):
        while number >= value:
            result += numeral
            number -= value

    return result.lower()
","
def int_to_mini_roman(number):
    """"""
    Given a positive integer, obtain its roman numeral equivalent as a string,
    and return it in lowercase.
    Restrictions: 1 <= num <= 1000

    Examples:
    >>> int_to_mini_roman(19) == 'xix'
    >>> int_to_mini_roman(152) == 'clii'
    >>> int_to_mini_roman(426) == 'cdxxvi'
    """"""
    roman_numerals = {
        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',
        50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'
    }
    result = ''
    for value, numeral in sorted(roman_numerals.items(), reverse=True):
        while number >= value:
            result += numeral
            number -= value
    return result.lower()
",100.0,"['i', 'i', 'i', 'i', 'i', 'i']","['v', 'v', 'v', 'v', 'v', 'v']","['ix', 'ix', 'ix', 'ix', 'ix', 'ix']","['xxv', 'xxv', 'xxv', 'xxv', 'xxv', 'xxv']","['xcix', 'xcix', 'xcix', 'xcix', 'xcix', 'xcix']","['cxlv', 'cxlv', 'cxlv', 'cxlv', 'cxlv', 'cxlv']","['d', 'd', 'd', 'd', 'd', 'd']","['cmxcix', 'cmxcix', 'cmxcix', 'cmxcix', 'cmxcix', 'cmxcix']","['m', 'm', 'm', 'm', 'm', 'm']","['cdlxxvi', 'cdlxxvi', 'cdlxxvi', 'cdlxxvi', 'cdlxxvi', 'cdlxxvi']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/157,"
def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
","right_angle_triangle(3, 4, 5)","right_angle_triangle(5, 12, 13)","right_angle_triangle(7, 24, 25)","right_angle_triangle(8, 15, 17)","right_angle_triangle(1, 2, 3)","right_angle_triangle(0, 0, 0)","right_angle_triangle(-3, 4, 5)","right_angle_triangle(6, 8, 10)","right_angle_triangle(2, 2, 2)","right_angle_triangle(1, 1, 1.41421356237)","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    if a > b and a > c:
        return math.isclose(math.sqrt(b**2 + c**2), a)
    elif b > a and b > c:
        return math.isclose(math.sqrt(a**2 + c**2), b)
    else:
        return math.isclose(math.sqrt(a**2 + b**2), c)
"," python
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    
    sides = sorted([a, b, c])
    if sides[0]**2 + sides[1]**2 == sides[2]**2:
        return True
    else:
        return False
  ","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    sides = [a, b, c]
    max_side = max(sides)
    sides.remove(max_side)

    return math.isclose(max_side**2, sides[0]**2 + sides[1]**2)
","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    sides = sorted([a, b, c])
    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2, abs_tol=1e-9)
  ","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is a right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    
    sides = [a, b, c]
    sides.sort()
    return math.isclose(math.sqrt(sides[0]**2 + sides[1]**2), sides[2])
","
import math

def right_angle_triangle(a, b, c):
    '''
    Given the lengths of the three sides of a triangle. Return True if the three
    sides form a right-angled triangle, False otherwise.
    A right-angled triangle is a triangle in which one angle is right angle or 
    90 degree.
    Example:
    right_angle_triangle(3, 4, 5) == True
    right_angle_triangle(1, 2, 3) == False
    '''
    sides = [a, b, c]
    sides.sort()
    return math.isclose(sides[0]**2 + sides[1]**2, sides[2]**2)
  ",80.0,"['True', '', 'True', 'True', 'True', 'True']","['True', '', 'True', 'True', 'True', 'True']","['True', '', 'True', 'True', 'True', 'True']","['True', '', 'True', 'True', 'True', 'True']","['False', '', 'False', 'False', 'False', 'False']","['True', '', 'True', 'True', 'True', 'True']","['True', '', 'True', 'True', 'True', 'True']","['True', '', 'True', 'True', 'True', 'True']","['False', '', 'False', 'False', 'False', 'False']","['True', '', 'True', 'True', 'True', 'True']",0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,80.0
HumanEval/158,"
def find_max(words):
    """"""Write a function that accepts a list of strings.
    The list contains different words. Return the word with maximum number
    of unique characters. If multiple strings have maximum number of unique
    characters, return the one which comes first in lexicographical order.

    find_max([""name"", ""of"", ""string""]) == ""string""
    find_max([""name"", ""enam"", ""game""]) == ""enam""
    find_max([""aaaaaaa"", ""bb"" ,""cc""]) == """"aaaaaaa""
    """"""
","find_max([""name"", ""of"", ""string""])","find_max([""name"", ""enam"", ""game""])","find_max([""aaaaaaa"", ""bb"", ""cc""])",find_max([]),"find_max([""flow"", ""floor"", ""flew"", ""flood""])","find_max([""123"", ""321"", ""213"", ""111""])","find_max([""giraffe"", ""banana"", ""apple"", ""longestword""])","find_max([""identical"", ""indentical"", ""ideal""])","find_max([""longest"", ""shortest"", ""mid""])","find_max([""abc"", ""def"", ""ghi"", ""jkl"", ""mno""])","
from collections import Counter

def find_max(words):
    def unique_chars(word):
        return len(set(word))
    
    max_word = """"
    max_unique_chars = 0
    
    for word in words:
        unique_count = unique_chars(word)
        if unique_count > max_unique_chars or (unique_count == max_unique_chars and word < max_word):
            max_word = word
            max_unique_chars = unique_count
    
    return max_word
","
from collections import Counter

def find_max(words):
    def unique_chars_count(word):
        return len(set(word))

    def key_func(word):
        return (-unique_chars_count(word), word)

    return max(words, key=key_func, default="""")
","
from collections import Counter

def find_max(words):
    def count_unique_chars(word):
        return len(set(word))

    def compare_words(word1, word2):
        if count_unique_chars(word1) != count_unique_chars (word2):
            return count_unique_chars(word1) - count_unique_chars(word2)
        else:
            return word1 < word2

    return max(words, key=lambda x: (-count_unique_chars(x), x))
","
from collections import Counter

def find_max(words):
    def count_unique_chars(word):
        return len(set(word))

    def get_max_word(words):
        max_count = -1
        max_word = """"
        for word in words:
            unique_chars = count_unique_chars(word)
            if unique_chars > max_count:
                max_count = unique_chars
                max_word = word
            elif unique_chars == max_count:
                max_word = min(word, max_word)
        return max_word

    return get_max_word(words)
","
from collections import Counter

def find_max(words):
    def unique_chars(word):
        return len(set(word))

    def lexicographical_max_word(words):
        max_word = max(words, key=lambda word: (unique_chars(word), word), default="""")
        return max_word

    return lexicographical_max_word(words)
","
from collections import Counter

def find_max(words):
    def count_unique_characters(word):
        return len(set(word))
    
    def max_unique_characters(words):
        max_word = """"
        max_count = 0
        for word in words:
            unique_count = count_unique_characters(word)
            if unique_count > max_count or (unique_count == max_count and word < max_word):
                max_word = word
                max_count = unique_count
        return max_word

    return max_unique_characters(words)
",58.0,"['string', 'of', 'of', 'string', 'string', 'string']","['enam', 'name', 'name', 'enam', 'name', 'enam']","['aaaaaaa', 'cc', 'cc', 'aaaaaaa', 'cc', 'aaaaaaa']","['', '', '', '', '', '']","['flew', 'flow', 'flow', 'flew', 'flow', 'flew']","['123', '111', '111', '123', '321', '123']","['longestword', 'banana', 'banana', 'longestword', 'longestword', 'longestword']","['identical', 'ideal', 'ideal', 'identical', 'indentical', 'identical']","['longest', 'mid', 'mid', 'longest', 'longest', 'longest']","['abc', 'mno', 'mno', 'abc', 'mno', 'abc']",0.6,0.4,0.4,1.0,0.4,0.4,0.6,0.4,0.6,0.4,52.0
HumanEval/159,"
def eat(number, need, remaining):
    """"""
    You're a hungry rabbit, and you already have eaten a certain number of carrots,
    but now you need to eat more carrots to complete the day's meals.
    you should return an array of [ total number of eaten carrots after your meals,
                                    the number of carrots left after your meals ]
    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.
    
    Example:
    * eat(5, 6, 10) -> [11, 4]
    * eat(4, 8, 9) -> [12, 1]
    * eat(1, 10, 10) -> [11, 0]
    * eat(2, 11, 5) -> [7, 0]
    
    Variables:
    @number : integer
        the number of carrots that you have eaten.
    @need : integer
        the number of carrots that you need to eat.
    @remaining : integer
        the number of remaining carrots thet exist in stock
    
    Constrain:
    * 0 <= number <= 1000
    * 0 <= need <= 1000
    * 0 <= remaining <= 1000

    Have fun :)
    """"""
","eat(0, 0, 0)","eat(5, 0, 20)","eat(0, 10, 5)","eat(1000, 1000, 1000)","eat(500, 300, 200)","eat(250, 750, 500)","eat(5, 500, 5)","eat(900, 80, 0)","eat(600, 700, 800)","eat(0, 0, 1000)","
from typing import List

def eat(number: int, need: int, remaining: int) -> List[int]:
    total_carrots = number + need
    if remaining >= need:
        return [total_carrots, remaining - need]
    else:
        return [total_carrots + remaining, 0]
 ","
def eat(number, need, remaining):
    total_eaten = number + need
    carrots_left = max(0, remaining - need)
    return [total_eaten, carrots_left]
","
def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    carrots_left = max(0, remaining - need)
    
    return [total_eaten, carrots_left]
","
def eat(number, need, remaining):
    total_eaten = number + need
    remaining = max(0, remaining - need)
    return [total_eaten, remaining]
","
def eat(number, need, remaining):
    total_eaten = number + min(need, remaining)
    remaining = max(0, remaining - need)
    return [total_eaten, remaining]
","
def eat(number, need, remaining):
    total_eaten = number + need
    remaining_carrots = max(0, remaining - need)
    return [total_eaten, remaining_carrots]
",80.0,"['[0, 0]', '[0, 0]', '[0, 0]', '[0, 0]', '[0, 0]', '[0, 0]']","['[5, 20]', '[5, 20]', '[5, 20]', '[5, 20]', '[5, 20]', '[5, 20]']","['[15, 0]', '[10, 0]', '[5, 0]', '[10, 0]', '[5, 0]', '[10, 0]']","['[2000, 0]', '[2000, 0]', '[2000, 0]', '[2000, 0]', '[2000, 0]', '[2000, 0]']","['[1000, 0]', '[800, 0]', '[700, 0]', '[800, 0]', '[700, 0]', '[800, 0]']","['[1500, 0]', '[1000, 0]', '[750, 0]', '[1000, 0]', '[750, 0]', '[1000, 0]']","['[510, 0]', '[505, 0]', '[10, 0]', '[505, 0]', '[10, 0]', '[505, 0]']","['[980, 0]', '[980, 0]', '[900, 0]', '[980, 0]', '[900, 0]', '[980, 0]']","['[1300, 100]', '[1300, 100]', '[1300, 100]', '[1300, 100]', '[1300, 100]', '[1300, 100]']","['[0, 1000]', '[0, 1000]', '[0, 1000]', '[0, 1000]', '[0, 1000]', '[0, 1000]']",1.0,1.0,0.0,1.0,0.0,0.0,0.0,0.6,1.0,1.0,55.99999999999999
HumanEval/160,"
def do_algebra(operator, operand):
    """"""
    Given two lists operator, and operand. The first list has basic algebra operations, and 
    the second list is a list of integers. Use the two given lists to build the algebric 
    expression and return the evaluation of this expression.

    The basic algebra operations:
    Addition ( + ) 
    Subtraction ( - ) 
    Multiplication ( * ) 
    Floor division ( // ) 
    Exponentiation ( ** ) 

    Example:
    operator['+', '*', '-']
    array = [2, 3, 4, 5]
    result = 2 + 3 * 4 - 5
    => result = 9

    Note:
        The length of operator list is equal to the length of operand list minus one.
        Operand is a list of of non-negative integers.
        Operator list has at least one operator, and operand list has at least two operands.

    """"""
","do_algebra(['+'], [2, 3])","do_algebra(['-', '+', '*'], [10, 5, 2, 3])","do_algebra(['*', '+', '//'], [1, 2, 3, 4])","do_algebra(['**', '-'], [2, 3, 4])","do_algebra(['+', '*', '-', '//', '**'], [2, 3, 5, 7, 8, 9])","do_algebra(['//', '*', '+'], [100, 10, 5, 7])","do_algebra(['-'], [10, 4])","do_algebra(['**', '//', '+', '*'], [3, 2, 4, 5, 6])","do_algebra(['*'], [7, 3])","do_algebra(['+', '-', '*', '**', '//'], [1, 4, 3, 2, 5, 6])","
from operator import add, sub, mul, floordiv, pow

def do_algebra(operators, operands):
    operations = {'+': add, '-': sub, '*': mul, '//': floordiv, '**': pow}
    
    result = operands[0]
    for i in range(len(operators)):
        result = operations[operators[i]](result, operands[i + 1])
    
    return result
","
from functools import reduce

def do_algebra(operators, operands):
    operations = {'+': lambda x, y: x + y,
                  '-': lambda x, y: x - y,
                  '*': lambda x, y: x * y,
                  '//': lambda x, y: x // y,
                  '**': lambda x, y: x ** y}
    
    result = operands[0]
    
    for i in range(len(operators)):
        result = operations[operators[i]](result, operands[i+1])
    
    return result
","
from operator import add, sub, mul, floordiv, pow

def do_algebra(operators, operands):
    operations = {
        '+': add,
        '-': sub,
        '*': mul,
        '//': floordiv,
        '**': pow
    }
    
    result = operands[0]
    for i in range(len(operators)):
        result = operations[operators[i]](result, operands[i + 1])
    
    return result
","
from functools import reduce

def do_algebra(operator, operand):
    return reduce(lambda x, y: eval(f""{x}{y[0]}{y[1]}""), zip(operator, operand), operand[0])
","
from operator import add, sub, mul, floordiv, pow

def do_algebra(operators, operands):
    operations = {
        '+': add,
        '-': sub,
        '*': mul,
        '//': floordiv,
        '**': pow
    }

    result = operands[0]
    for idx, op in enumerate(operators):
        result = operations[op](result, operands[idx+1])

    return result
","
from functools import reduce

def do_algebra(operator, operand):
    ops = {'+': lambda x, y: x + y,
           '-': lambda x, y: x - y,
           '*': lambda x, y: x * y,
           '//': lambda x, y: x // y,
           '**': lambda x, y: x ** y}
    
    expression = ''.join([str(o) + str(a) for o, a in zip(operator, operand)]) + str(operand[-1])
    result = reduce(lambda x, y: ops[expression[y]](x, operand[y+1]), range(len(operator)), operand[0])
    
    return result
",39.99999999999999,"['5', '5', '5', '4', '5', '5']","['21', '21', '21', '10', '21', '']","['1', '1', '1', '1', '1', '']","['4', '4', '4', '1', '4', '24']","['512', '512', '512', '1', '512', '']","['57', '57', '57', '15', '57', '']","['6', '6', '6', '0', '6', '6']","['42', '42', '42', '85', '42', '']","['21', '21', '21', '49', '21', '21']","['170', '170', '170', '-8', '170', '']",0.8,0.6,0.8,0.6,0.6,0.6,0.8,0.6,0.8,0.6,68.0
HumanEval/161,"
def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""
","solve(""1234"")","solve(""ab"")","solve(""#a@C"")","solve(""abcdEFGHIJ"")","solve("""")","solve(""1111"")","solve(""123abcDEF"")","solve(""@#$%^"")","solve(""argUING1234"")","solve(""spaces are cool"")","
def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""
    return ''.join([char.swapcase() if char.isalpha() else char for char in s]) if any(c.isalpha() for c in s) else s[::-1]
","
def solve(s):
    from string import ascii_lowercase, ascii_uppercase
    trans = str.maketrans(ascii_lowercase + ascii_uppercase, ascii_uppercase + ascii_lowercase)
    
    if all(c not in ascii_lowercase + ascii_uppercase for c in s):
        return s[::-1]
        
    return s.translate(trans)
","
def solve(s):
    """"""You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve(""1234"") = ""4321""
    solve(""ab"") = ""AB""
    solve(""#a@C"") = ""#A@c""
    """"""

    letters = [c.upper() if c.islower() else c.lower() for c in s]
    return ''.join(letters) if any(c.isalpha() for c in s) else s[::-1]
","
def solve(s):
    import string
    
    new_s = """"
    
    for char in s:
        if char.isalpha():
            if char.islower():
                new_s += char.upper()
            else:
                new_s += char.lower()
        else:
            new_s += char
    
    if not any(char.isalpha() for char in s):
        return s[::-1]
    
    return new_s
","
def solve(s):
    from string import ascii_letters
    
    result = ''
    for char in s:
        if char.isalpha():
            if char.islower():
                result += char.upper()
            else:
                result += char.lower()
        else:
            result += char
    
    if all(char not in ascii_letters for char in s):
        return s[::-1]
    
    return result
","
def solve(s):
    import string

    result = ''
    has_letter = False
    for char in s:
        if char.isalpha():
            has_letter = True
            if char.islower():
                result += char.upper()
            else:
                result += char.lower()
        else:
            result += char

    if not has_letter:
        return s[::-1]
    
    return result
",100.0,"['4321', '4321', '4321', '4321', '4321', '4321']","['AB', 'AB', 'AB', 'AB', 'AB', 'AB']","['#A@c', '#A@c', '#A@c', '#A@c', '#A@c', '#A@c']","['ABCDefghij', 'ABCDefghij', 'ABCDefghij', 'ABCDefghij', 'ABCDefghij', 'ABCDefghij']","['', '', '', '', '', '']","['1111', '1111', '1111', '1111', '1111', '1111']","['123ABCdef', '123ABCdef', '123ABCdef', '123ABCdef', '123ABCdef', '123ABCdef']","['^%$#@', '^%$#@', '^%$#@', '^%$#@', '^%$#@', '^%$#@']","['ARGuing1234', 'ARGuing1234', 'ARGuing1234', 'ARGuing1234', 'ARGuing1234', 'ARGuing1234']","['SPACES ARE COOL', 'SPACES ARE COOL', 'SPACES ARE COOL', 'SPACES ARE COOL', 'SPACES ARE COOL', 'SPACES ARE COOL']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/162,"
def string_to_md5(text):
    """"""
    Given a string 'text', return its md5 hash equivalent string.
    If 'text' is an empty string, return None.

    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'
    """"""
",string_to_md5('Hello world'),string_to_md5(''),string_to_md5('password123'),string_to_md5('123'),string_to_md5('string_to_md5'),string_to_md5('Example with spaces'),string_to_md5('special@#chars&*!$'),string_to_md5('<html><body>This is a test</body></html>'),string_to_md5('a'),string_to_md5('Non-English text like: текст'),"
import hashlib

def string_to_md5(text):
    if text == '':
        return None
    else:
        return hashlib.md5(text.encode()).hexdigest()
","
import hashlib

def string_to_md5(text):
    if not text:
        return None
    else:
        return hashlib.md5(text.encode()).hexdigest()
","
import hashlib

def string_to_md5(text):
    if text == '':
        return None
    else:
        return hashlib.md5(text.encode()).hexdigest()
","
import hashlib

def string_to_md5(text):
    if not text:
        return None
    else:
        return hashlib.md5(text.encode()).hexdigest()
","
import hashlib

def string_to_md5(text):
    if not text:
        return None

    md5_hash = hashlib.md5()
    md5_hash.update(text.encode('utf-8'))
    return md5_hash.hexdigest()
","
import hashlib

def string_to_md5(text):
    if text == '':
        return None
    else:
        return hashlib.md5(text.encode()).hexdigest()
 ",100.0,"['3e25960a79dbc69b674cd4ec67a72c62', '3e25960a79dbc69b674cd4ec67a72c62', '3e25960a79dbc69b674cd4ec67a72c62', '3e25960a79dbc69b674cd4ec67a72c62', '3e25960a79dbc69b674cd4ec67a72c62', '3e25960a79dbc69b674cd4ec67a72c62']","['None', 'None', 'None', 'None', 'None', 'None']","['482c811da5d5b4bc6d497ffa98491e38', '482c811da5d5b4bc6d497ffa98491e38', '482c811da5d5b4bc6d497ffa98491e38', '482c811da5d5b4bc6d497ffa98491e38', '482c811da5d5b4bc6d497ffa98491e38', '482c811da5d5b4bc6d497ffa98491e38']","['202cb962ac59075b964b07152d234b70', '202cb962ac59075b964b07152d234b70', '202cb962ac59075b964b07152d234b70', '202cb962ac59075b964b07152d234b70', '202cb962ac59075b964b07152d234b70', '202cb962ac59075b964b07152d234b70']","['4e958c9038d53f45dda05231458fbbe3', '4e958c9038d53f45dda05231458fbbe3', '4e958c9038d53f45dda05231458fbbe3', '4e958c9038d53f45dda05231458fbbe3', '4e958c9038d53f45dda05231458fbbe3', '4e958c9038d53f45dda05231458fbbe3']","['aa6dda8d4f8c2de5f9568cb277923141', 'aa6dda8d4f8c2de5f9568cb277923141', 'aa6dda8d4f8c2de5f9568cb277923141', 'aa6dda8d4f8c2de5f9568cb277923141', 'aa6dda8d4f8c2de5f9568cb277923141', 'aa6dda8d4f8c2de5f9568cb277923141']","['610d78626b60ed383ee355350197ab4d', '610d78626b60ed383ee355350197ab4d', '610d78626b60ed383ee355350197ab4d', '610d78626b60ed383ee355350197ab4d', '610d78626b60ed383ee355350197ab4d', '610d78626b60ed383ee355350197ab4d']","['6eeff5848f710700111b55633fc20c2a', '6eeff5848f710700111b55633fc20c2a', '6eeff5848f710700111b55633fc20c2a', '6eeff5848f710700111b55633fc20c2a', '6eeff5848f710700111b55633fc20c2a', '6eeff5848f710700111b55633fc20c2a']","['0cc175b9c0f1b6a831c399e269772661', '0cc175b9c0f1b6a831c399e269772661', '0cc175b9c0f1b6a831c399e269772661', '0cc175b9c0f1b6a831c399e269772661', '0cc175b9c0f1b6a831c399e269772661', '0cc175b9c0f1b6a831c399e269772661']","['5594c00a27f7a160d2669584e4d24867', '5594c00a27f7a160d2669584e4d24867', '5594c00a27f7a160d2669584e4d24867', '5594c00a27f7a160d2669584e4d24867', '5594c00a27f7a160d2669584e4d24867', '5594c00a27f7a160d2669584e4d24867']",1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,100.0
HumanEval/163,"
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
","generate_integers(2, 8)","generate_integers(8, 2)","generate_integers(10, 14)","generate_integers(1, 1)","generate_integers(1, 2)","generate_integers(134, 139)","generate_integers(49, 52)","generate_integers(100, 105)","generate_integers(995, 998)","generate_integers(0, 0)","
def generate_integers(a, b):
    even_digits = [int(d) for d in range(a, b+1) if int(d) % 2 == 0]
    return sorted(even_digits)

","
def generate_integers(a, b):
    return [i for i in range(a, b+1) if i % 2 == 0 and any(ch in '02468' for ch in str(i))]
","
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
    
    even_digits = [num for num in range(a, b + 1) if num % 2 == 0]
    return even_digits
","
def generate_integers(a, b):
    even_digits = [int(d) for d in ''.join(str(num) for num in range(a, b+1) if int(str(num)[-1]) % 2 == 0) if d != '0']
    return sorted(even_digits)
","
def generate_integers(a, b):
    return [i for i in range(a, b+1) if i % 2 == 0 and any(digit % 2 == 0 for digit in map(int, str(i)))]

","
def generate_integers(a, b):
    """"""
    Given two positive integers a and b, return the even digits between a
    and b, in ascending order.

    For example:
    generate_integers(2, 8) => [2, 4, 6, 8]
    generate_integers(8, 2) => [2, 4, 6, 8]
    generate_integers(10, 14) => []
    """"""
    return [i for i in range(a, b+1) if i % 2 == 0 and set(str(i)).issubset({'0', '2', '4', '6', '8'})]
",5.0,"['[2, 4, 6, 8]', '[2, 4, 6, 8]', '[2, 4, 6, 8]', '[2, 4, 6, 8]', '[2, 4, 6, 8]', '[2, 4, 6, 8]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[10, 12, 14]', '[10, 12, 14]', '[10, 12, 14]', '[1, 1, 1, 2, 4]', '[10, 12, 14]', '[]']","['[]', '[]', '[]', '[]', '[]', '[]']","['[2]', '[2]', '[2]', '[2]', '[2]', '[2]']","['[134, 136, 138]', '[134, 136, 138]', '[134, 136, 138]', '[1, 1, 1, 3, 3, 3, 4, 6, 8]', '[134, 136, 138]', '[]']","['[50, 52]', '[50, 52]', '[50, 52]', '[2, 5, 5]', '[50, 52]', '[]']","['[100, 102, 104]', '[100, 102, 104]', '[100, 102, 104]', '[1, 1, 1, 2, 4]', '[100, 102, 104]', '[]']","['[996, 998]', '[996, 998]', '[996, 998]', '[6, 8, 9, 9, 9, 9]', '[996, 998]', '[]']","['[0]', '[0]', '[0]', '[]', '[0]', '[0]']",1.0,1.0,0.6,1.0,1.0,0.6,0.6,0.6,0.6,0.8,77.99999999999999
